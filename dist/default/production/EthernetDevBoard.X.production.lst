

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 12 22:46:29 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   124                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   125                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   126  0000                     
   127                           ; Version 1.45
   128                           ; Generated 16/11/2017 GMT
   129                           ; 
   130                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   131                           ; All rights reserved.
   132                           ; 
   133                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   134                           ; 
   135                           ; Redistribution and use in source and binary forms, with or without modification, are
   136                           ; permitted provided that the following conditions are met:
   137                           ; 
   138                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   139                           ;        conditions and the following disclaimer.
   140                           ; 
   141                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   142                           ;        of conditions and the following disclaimer in the documentation and/or other
   143                           ;        materials provided with the distribution.
   144                           ; 
   145                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   146                           ;        software without specific prior written permission.
   147                           ; 
   148                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   149                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   150                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   151                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   152                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   153                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   154                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   155                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   156                           ; 
   157                           ; 
   158                           ; Code-generator required, PIC18F25K50 Definitions
   159                           ; 
   160                           ; SFR Addresses
   161  0000                     
   162                           	psect	idataCOMRAM
   163  004D0E                     __pidataCOMRAM:
   164                           	opt stack 0
   165                           
   166                           ;initializer for _randx
   167  004D0E  0001               	dw	1
   168  004D10  0000               	dw	0
   169                           
   170                           ;initializer for ethernetController_softReset@F5850
   171  004D12  12                 	db	18
   172  004D13  34                 	db	52
   173                           
   174                           	psect	idataBANK2
   175  004990                     __pidataBANK2:
   176                           	opt stack 0
   177                           
   178                           ;initializer for macToString@F5817
   179  004990  3F                 	db	63
   180  004991  3F                 	db	63
   181  004992  3A                 	db	58
   182  004993  3F                 	db	63
   183  004994  3F                 	db	63
   184  004995  3A                 	db	58
   185  004996  3F                 	db	63
   186  004997  3F                 	db	63
   187  004998  3A                 	db	58
   188  004999  3F                 	db	63
   189  00499A  3F                 	db	63
   190  00499B  3A                 	db	58
   191  00499C  3F                 	db	63
   192  00499D  3F                 	db	63
   193  00499E  3A                 	db	58
   194  00499F  3F                 	db	63
   195  0049A0  3F                 	db	63
   196  0049A1  00                 	db	0
   197                           
   198                           ;initializer for _sevenSegCharacters
   199  0049A2  3F                 	db	63
   200  0049A3  06                 	db	6
   201  0049A4  5B                 	db	91
   202  0049A5  4F                 	db	79
   203  0049A6  66                 	db	102
   204  0049A7  6D                 	db	109
   205  0049A8  7D                 	db	125
   206  0049A9  07                 	db	7
   207  0049AA  7F                 	db	127
   208  0049AB  6F                 	db	111
   209  0049AC  00                 	db	0
   210  0049AD  40                 	db	64
   211                           
   212                           ;initializer for ipAdressToString@address
   213  0049AE  3F                 	db	63
   214  0049AF  3F                 	db	63
   215  0049B0  3F                 	db	63
   216  0049B1  2E                 	db	46
   217  0049B2  3F                 	db	63
   218  0049B3  3F                 	db	63
   219  0049B4  3F                 	db	63
   220  0049B5  2E                 	db	46
   221  0049B6  3F                 	db	63
   222  0049B7  3F                 	db	63
   223  0049B8  3F                 	db	63
   224  0049B9  2E                 	db	46
   225  0049BA  3F                 	db	63
   226  0049BB  3F                 	db	63
   227  0049BC  3F                 	db	63
   228  0049BD  00                 	db	0
   229                           
   230                           	psect	mediumconst
   231  007C60                     __pmediumconst:
   232                           	opt stack 0
   233  007C60  00                 	db	0
   234  007C61                     ethernetController_getDeviceName@F5862:
   235                           	opt stack 0
   236  007C61  45                 	db	69
   237  007C62  4E                 	db	78
   238  007C63  43                 	db	67
   239  007C64  34                 	db	52
   240  007C65  32                 	db	50
   241  007C66  34                 	db	52
   242  007C67  4A                 	db	74
   243  007C68  36                 	db	54
   244  007C69  30                 	db	48
   245  007C6A  30                 	db	48
   246  007C6B  00                 	db	0
   247  007C6C                     __end_ofethernetController_getDeviceName@F5862:
   248                           	opt stack 0
   249  0000                     _ANSELC	set	3933
   250  0000                     _ANSELA	set	3931
   251  0000                     _ANSELB	set	3932
   252  0000                     _ANSELBbits	set	3932
   253  0000                     _CCPR1	set	4030
   254  0000                     _TXREG1	set	4013
   255  0000                     _SPBRG	set	4015
   256  0000                     _RCSTA1bits	set	4011
   257  0000                     _TXSTA1bits	set	4012
   258  0000                     _PORTA	set	3968
   259  0000                     _TRISA	set	3986
   260  0000                     _TRISC	set	3988
   261  0000                     _PORTC	set	3970
   262  0000                     _PIR1bits	set	3998
   263  0000                     _PORTB	set	3969
   264  0000                     _TRISB	set	3987
   265  0000                     _RCONbits	set	4048
   266  0000                     _PIE1bits	set	3997
   267  0000                     _CCP1CONbits	set	4029
   268  0000                     _T1CONbits	set	4045
   269  0000                     _T0CONbits	set	4053
   270  0000                     _INTCON3bits	set	4080
   271  0000                     _INTCONbits	set	4082
   272  0000                     _OSCCON2bits	set	4050
   273  0000                     _OSCCONbits	set	4051
   274  0000                     _SSP1BUF	set	4041
   275  0000                     _TRISBbits	set	3987
   276  0000                     _SSP1STATbits	set	4039
   277  0000                     _SSP1CON1bits	set	4038
   278  0000                     _PORTBbits	set	3969
   279  0000                     _TRMT	set	32097
   280  0000                     _RCIF	set	31989
   281  0000                     _RCIE	set	31981
   282  0000                     _RCIP	set	31997
   283  007C6C                     STR_50:
   284  007C6C  45                 	db	69	;'E'
   285  007C6D  74                 	db	116	;'t'
   286  007C6E  68                 	db	104	;'h'
   287  007C6F  65                 	db	101	;'e'
   288  007C70  72                 	db	114	;'r'
   289  007C71  6E                 	db	110	;'n'
   290  007C72  65                 	db	101	;'e'
   291  007C73  74                 	db	116	;'t'
   292  007C74  20                 	db	32
   293  007C75  63                 	db	99	;'c'
   294  007C76  6F                 	db	111	;'o'
   295  007C77  6E                 	db	110	;'n'
   296  007C78  74                 	db	116	;'t'
   297  007C79  72                 	db	114	;'r'
   298  007C7A  6F                 	db	111	;'o'
   299  007C7B  6C                 	db	108	;'l'
   300  007C7C  6C                 	db	108	;'l'
   301  007C7D  65                 	db	101	;'e'
   302  007C7E  72                 	db	114	;'r'
   303  007C7F  20                 	db	32
   304  007C80  68                 	db	104	;'h'
   305  007C81  61                 	db	97	;'a'
   306  007C82  73                 	db	115	;'s'
   307  007C83  20                 	db	32
   308  007C84  72                 	db	114	;'r'
   309  007C85  65                 	db	101	;'e'
   310  007C86  74                 	db	116	;'t'
   311  007C87  75                 	db	117	;'u'
   312  007C88  72                 	db	114	;'r'
   313  007C89  6E                 	db	110	;'n'
   314  007C8A  65                 	db	101	;'e'
   315  007C8B  64                 	db	100	;'d'
   316  007C8C  20                 	db	32
   317  007C8D  61                 	db	97	;'a'
   318  007C8E  6E                 	db	110	;'n'
   319  007C8F  20                 	db	32
   320  007C90  75                 	db	117	;'u'
   321  007C91  6E                 	db	110	;'n'
   322  007C92  6B                 	db	107	;'k'
   323  007C93  6E                 	db	110	;'n'
   324  007C94  6F                 	db	111	;'o'
   325  007C95  77                 	db	119	;'w'
   326  007C96  6E                 	db	110	;'n'
   327  007C97  20                 	db	32
   328  007C98  64                 	db	100	;'d'
   329  007C99  65                 	db	101	;'e'
   330  007C9A  76                 	db	118	;'v'
   331  007C9B  69                 	db	105	;'i'
   332  007C9C  63                 	db	99	;'c'
   333  007C9D  65                 	db	101	;'e'
   334  007C9E  20                 	db	32
   335  007C9F  49                 	db	73	;'I'
   336  007CA0  44                 	db	68	;'D'
   337  007CA1  2E                 	db	46
   338  007CA2  00                 	db	0
   339  007CA3                     STR_24:
   340  007CA3  2D                 	db	45
   341  007CA4  2D                 	db	45
   342  007CA5  2D                 	db	45
   343  007CA6  2D                 	db	45
   344  007CA7  2D                 	db	45
   345  007CA8  2D                 	db	45
   346  007CA9  2D                 	db	45
   347  007CAA  2D                 	db	45
   348  007CAB  2D                 	db	45
   349  007CAC  2D                 	db	45
   350  007CAD  2D                 	db	45
   351  007CAE  2D                 	db	45
   352  007CAF  2D                 	db	45
   353  007CB0  2D                 	db	45
   354  007CB1  2D                 	db	45
   355  007CB2  2D                 	db	45
   356  007CB3  2D                 	db	45
   357  007CB4  2D                 	db	45
   358  007CB5  2D                 	db	45
   359  007CB6  2D                 	db	45
   360  007CB7  2D                 	db	45
   361  007CB8  2D                 	db	45
   362  007CB9  2D                 	db	45
   363  007CBA  2D                 	db	45
   364  007CBB  2D                 	db	45
   365  007CBC  2D                 	db	45
   366  007CBD  2D                 	db	45
   367  007CBE  2D                 	db	45
   368  007CBF  2D                 	db	45
   369  007CC0  2D                 	db	45
   370  007CC1  2D                 	db	45
   371  007CC2  2D                 	db	45
   372  007CC3  2D                 	db	45
   373  007CC4  2D                 	db	45
   374  007CC5  2D                 	db	45
   375  007CC6  2D                 	db	45
   376  007CC7  2D                 	db	45
   377  007CC8  2D                 	db	45
   378  007CC9  2D                 	db	45
   379  007CCA  2D                 	db	45
   380  007CCB  2D                 	db	45
   381  007CCC  2D                 	db	45
   382  007CCD  2D                 	db	45
   383  007CCE  2D                 	db	45
   384  007CCF  2D                 	db	45
   385  007CD0  2D                 	db	45
   386  007CD1  2D                 	db	45
   387  007CD2  2D                 	db	45
   388  007CD3  0A                 	db	10
   389  007CD4  0D                 	db	13
   390  007CD5  00                 	db	0
   391  007CD6                     STR_25:
   392  007CD6  07                 	db	7
   393  007CD7  2A                 	db	42
   394  007CD8  2A                 	db	42
   395  007CD9  2A                 	db	42
   396  007CDA  20                 	db	32
   397  007CDB  43                 	db	67	;'C'
   398  007CDC  52                 	db	82	;'R'
   399  007CDD  49                 	db	73	;'I'
   400  007CDE  54                 	db	84	;'T'
   401  007CDF  49                 	db	73	;'I'
   402  007CE0  43                 	db	67	;'C'
   403  007CE1  41                 	db	65	;'A'
   404  007CE2  4C                 	db	76	;'L'
   405  007CE3  20                 	db	32
   406  007CE4  45                 	db	69	;'E'
   407  007CE5  52                 	db	82	;'R'
   408  007CE6  52                 	db	82	;'R'
   409  007CE7  4F                 	db	79	;'O'
   410  007CE8  52                 	db	82	;'R'
   411  007CE9  3A                 	db	58	;':'
   412  007CEA  20                 	db	32
   413  007CEB  57                 	db	87	;'W'
   414  007CEC  41                 	db	65	;'A'
   415  007CED  54                 	db	84	;'T'
   416  007CEE  43                 	db	67	;'C'
   417  007CEF  48                 	db	72	;'H'
   418  007CF0  44                 	db	68	;'D'
   419  007CF1  4F                 	db	79	;'O'
   420  007CF2  47                 	db	71	;'G'
   421  007CF3  20                 	db	32
   422  007CF4  43                 	db	67	;'C'
   423  007CF5  41                 	db	65	;'A'
   424  007CF6  55                 	db	85	;'U'
   425  007CF7  53                 	db	83	;'S'
   426  007CF8  45                 	db	69	;'E'
   427  007CF9  44                 	db	68	;'D'
   428  007CFA  20                 	db	32
   429  007CFB  52                 	db	82	;'R'
   430  007CFC  45                 	db	69	;'E'
   431  007CFD  53                 	db	83	;'S'
   432  007CFE  45                 	db	69	;'E'
   433  007CFF  54                 	db	84	;'T'
   434  007D00  20                 	db	32
   435  007D01  2A                 	db	42
   436  007D02  2A                 	db	42
   437  007D03  2A                 	db	42
   438  007D04  0A                 	db	10
   439  007D05  0D                 	db	13
   440  007D06  00                 	db	0
   441  007D07                     STR_62:
   442  007D07  5B                 	db	91	;'['
   443  007D08  49                 	db	73	;'I'
   444  007D09  6E                 	db	110	;'n'
   445  007D0A  76                 	db	118	;'v'
   446  007D0B  61                 	db	97	;'a'
   447  007D0C  6C                 	db	108	;'l'
   448  007D0D  69                 	db	105	;'i'
   449  007D0E  64                 	db	100	;'d'
   450  007D0F  20                 	db	32
   451  007D10  41                 	db	65	;'A'
   452  007D11  52                 	db	82	;'R'
   453  007D12  50                 	db	80	;'P'
   454  007D13  20                 	db	32
   455  007D14  4D                 	db	77	;'M'
   456  007D15  65                 	db	101	;'e'
   457  007D16  73                 	db	115	;'s'
   458  007D17  73                 	db	115	;'s'
   459  007D18  61                 	db	97	;'a'
   460  007D19  67                 	db	103	;'g'
   461  007D1A  65                 	db	101	;'e'
   462  007D1B  20                 	db	32
   463  007D1C  77                 	db	119	;'w'
   464  007D1D  61                 	db	97	;'a'
   465  007D1E  73                 	db	115	;'s'
   466  007D1F  20                 	db	32
   467  007D20  64                 	db	100	;'d'
   468  007D21  69                 	db	105	;'i'
   469  007D22  73                 	db	115	;'s'
   470  007D23  63                 	db	99	;'c'
   471  007D24  61                 	db	97	;'a'
   472  007D25  72                 	db	114	;'r'
   473  007D26  64                 	db	100	;'d'
   474  007D27  65                 	db	101	;'e'
   475  007D28  64                 	db	100	;'d'
   476  007D29  2E                 	db	46
   477  007D2A  5D                 	db	93	;']'
   478  007D2B  0D                 	db	13
   479  007D2C  0A                 	db	10
   480  007D2D  00                 	db	0
   481  007D2E                     STR_49:
   482  007D2E  45                 	db	69	;'E'
   483  007D2F  74                 	db	116	;'t'
   484  007D30  68                 	db	104	;'h'
   485  007D31  65                 	db	101	;'e'
   486  007D32  72                 	db	114	;'r'
   487  007D33  6E                 	db	110	;'n'
   488  007D34  65                 	db	101	;'e'
   489  007D35  74                 	db	116	;'t'
   490  007D36  20                 	db	32
   491  007D37  63                 	db	99	;'c'
   492  007D38  6F                 	db	111	;'o'
   493  007D39  6E                 	db	110	;'n'
   494  007D3A  74                 	db	116	;'t'
   495  007D3B  72                 	db	114	;'r'
   496  007D3C  6F                 	db	111	;'o'
   497  007D3D  6C                 	db	108	;'l'
   498  007D3E  6C                 	db	108	;'l'
   499  007D3F  65                 	db	101	;'e'
   500  007D40  72                 	db	114	;'r'
   501  007D41  20                 	db	32
   502  007D42  69                 	db	105	;'i'
   503  007D43  73                 	db	115	;'s'
   504  007D44  20                 	db	32
   505  007D45  75                 	db	117	;'u'
   506  007D46  6E                 	db	110	;'n'
   507  007D47  72                 	db	114	;'r'
   508  007D48  65                 	db	101	;'e'
   509  007D49  73                 	db	115	;'s'
   510  007D4A  70                 	db	112	;'p'
   511  007D4B  6F                 	db	111	;'o'
   512  007D4C  6E                 	db	110	;'n'
   513  007D4D  73                 	db	115	;'s'
   514  007D4E  69                 	db	105	;'i'
   515  007D4F  76                 	db	118	;'v'
   516  007D50  65                 	db	101	;'e'
   517  007D51  2E                 	db	46
   518  007D52  00                 	db	0
   519  007D53                     STR_51:
   520  007D53  49                 	db	73	;'I'
   521  007D54  50                 	db	80	;'P'
   522  007D55  20                 	db	32
   523  007D56  61                 	db	97	;'a'
   524  007D57  64                 	db	100	;'d'
   525  007D58  64                 	db	100	;'d'
   526  007D59  72                 	db	114	;'r'
   527  007D5A  65                 	db	101	;'e'
   528  007D5B  73                 	db	115	;'s'
   529  007D5C  73                 	db	115	;'s'
   530  007D5D  20                 	db	32
   531  007D5E  63                 	db	99	;'c'
   532  007D5F  6F                 	db	111	;'o'
   533  007D60  75                 	db	117	;'u'
   534  007D61  6C                 	db	108	;'l'
   535  007D62  64                 	db	100	;'d'
   536  007D63  20                 	db	32
   537  007D64  6E                 	db	110	;'n'
   538  007D65  6F                 	db	111	;'o'
   539  007D66  74                 	db	116	;'t'
   540  007D67  20                 	db	32
   541  007D68  62                 	db	98	;'b'
   542  007D69  65                 	db	101	;'e'
   543  007D6A  20                 	db	32
   544  007D6B  72                 	db	114	;'r'
   545  007D6C  65                 	db	101	;'e'
   546  007D6D  73                 	db	115	;'s'
   547  007D6E  6F                 	db	111	;'o'
   548  007D6F  6C                 	db	108	;'l'
   549  007D70  76                 	db	118	;'v'
   550  007D71  65                 	db	101	;'e'
   551  007D72  64                 	db	100	;'d'
   552  007D73  2E                 	db	46
   553  007D74  00                 	db	0
   554  007D75                     STR_45:
   555  007D75  20                 	db	32
   556  007D76  45                 	db	69	;'E'
   557  007D77  54                 	db	84	;'T'
   558  007D78  48                 	db	72	;'H'
   559  007D79  45                 	db	69	;'E'
   560  007D7A  52                 	db	82	;'R'
   561  007D7B  4E                 	db	78	;'N'
   562  007D7C  45                 	db	69	;'E'
   563  007D7D  54                 	db	84	;'T'
   564  007D7E  20                 	db	32
   565  007D7F  43                 	db	67	;'C'
   566  007D80  4F                 	db	79	;'O'
   567  007D81  4E                 	db	78	;'N'
   568  007D82  54                 	db	84	;'T'
   569  007D83  52                 	db	82	;'R'
   570  007D84  4F                 	db	79	;'O'
   571  007D85  4C                 	db	76	;'L'
   572  007D86  4C                 	db	76	;'L'
   573  007D87  45                 	db	69	;'E'
   574  007D88  52                 	db	82	;'R'
   575  007D89  20                 	db	32
   576  007D8A  4D                 	db	77	;'M'
   577  007D8B  4F                 	db	79	;'O'
   578  007D8C  44                 	db	68	;'D'
   579  007D8D  55                 	db	85	;'U'
   580  007D8E  4C                 	db	76	;'L'
   581  007D8F  45                 	db	69	;'E'
   582  007D90  3A                 	db	58	;':'
   583  007D91  20                 	db	32
   584  007D92  00                 	db	0
   585  007D93                     STR_52:
   586  007D93  41                 	db	65	;'A'
   587  007D94  6E                 	db	110	;'n'
   588  007D95  20                 	db	32
   589  007D96  75                 	db	117	;'u'
   590  007D97  6E                 	db	110	;'n'
   591  007D98  6B                 	db	107	;'k'
   592  007D99  6E                 	db	110	;'n'
   593  007D9A  6F                 	db	111	;'o'
   594  007D9B  77                 	db	119	;'w'
   595  007D9C  6E                 	db	110	;'n'
   596  007D9D  20                 	db	32
   597  007D9E  65                 	db	101	;'e'
   598  007D9F  72                 	db	114	;'r'
   599  007DA0  72                 	db	114	;'r'
   600  007DA1  6F                 	db	111	;'o'
   601  007DA2  72                 	db	114	;'r'
   602  007DA3  20                 	db	32
   603  007DA4  68                 	db	104	;'h'
   604  007DA5  61                 	db	97	;'a'
   605  007DA6  73                 	db	115	;'s'
   606  007DA7  20                 	db	32
   607  007DA8  6F                 	db	111	;'o'
   608  007DA9  63                 	db	99	;'c'
   609  007DAA  63                 	db	99	;'c'
   610  007DAB  75                 	db	117	;'u'
   611  007DAC  72                 	db	114	;'r'
   612  007DAD  65                 	db	101	;'e'
   613  007DAE  64                 	db	100	;'d'
   614  007DAF  2E                 	db	46
   615  007DB0  00                 	db	0
   616  007DB1                     STR_41:
   617  007DB1  63                 	db	99	;'c'
   618  007DB2  6F                 	db	111	;'o'
   619  007DB3  6E                 	db	110	;'n'
   620  007DB4  6E                 	db	110	;'n'
   621  007DB5  65                 	db	101	;'e'
   622  007DB6  63                 	db	99	;'c'
   623  007DB7  74                 	db	116	;'t'
   624  007DB8  69                 	db	105	;'i'
   625  007DB9  6F                 	db	111	;'o'
   626  007DBA  6E                 	db	110	;'n'
   627  007DBB  20                 	db	32
   628  007DBC  69                 	db	105	;'i'
   629  007DBD  73                 	db	115	;'s'
   630  007DBE  20                 	db	32
   631  007DBF  48                 	db	72	;'H'
   632  007DC0  61                 	db	97	;'a'
   633  007DC1  6C                 	db	108	;'l'
   634  007DC2  66                 	db	102	;'f'
   635  007DC3  20                 	db	32
   636  007DC4  44                 	db	68	;'D'
   637  007DC5  75                 	db	117	;'u'
   638  007DC6  70                 	db	112	;'p'
   639  007DC7  6C                 	db	108	;'l'
   640  007DC8  65                 	db	101	;'e'
   641  007DC9  78                 	db	120	;'x'
   642  007DCA  2E                 	db	46
   643  007DCB  0A                 	db	10
   644  007DCC  0D                 	db	13
   645  007DCD  00                 	db	0
   646  007DCE                     STR_42:
   647  007DCE  63                 	db	99	;'c'
   648  007DCF  6F                 	db	111	;'o'
   649  007DD0  6E                 	db	110	;'n'
   650  007DD1  6E                 	db	110	;'n'
   651  007DD2  65                 	db	101	;'e'
   652  007DD3  63                 	db	99	;'c'
   653  007DD4  74                 	db	116	;'t'
   654  007DD5  69                 	db	105	;'i'
   655  007DD6  6F                 	db	111	;'o'
   656  007DD7  6E                 	db	110	;'n'
   657  007DD8  20                 	db	32
   658  007DD9  69                 	db	105	;'i'
   659  007DDA  73                 	db	115	;'s'
   660  007DDB  20                 	db	32
   661  007DDC  46                 	db	70	;'F'
   662  007DDD  75                 	db	117	;'u'
   663  007DDE  6C                 	db	108	;'l'
   664  007DDF  6C                 	db	108	;'l'
   665  007DE0  20                 	db	32
   666  007DE1  44                 	db	68	;'D'
   667  007DE2  75                 	db	117	;'u'
   668  007DE3  70                 	db	112	;'p'
   669  007DE4  6C                 	db	108	;'l'
   670  007DE5  65                 	db	101	;'e'
   671  007DE6  78                 	db	120	;'x'
   672  007DE7  2E                 	db	46
   673  007DE8  0A                 	db	10
   674  007DE9  0D                 	db	13
   675  007DEA  00                 	db	0
   676  007DEB                     STR_36:
   677  007DEB  53                 	db	83	;'S'
   678  007DEC  65                 	db	101	;'e'
   679  007DED  74                 	db	116	;'t'
   680  007DEE  74                 	db	116	;'t'
   681  007DEF  69                 	db	105	;'i'
   682  007DF0  6E                 	db	110	;'n'
   683  007DF1  67                 	db	103	;'g'
   684  007DF2  20                 	db	32
   685  007DF3  49                 	db	73	;'I'
   686  007DF4  50                 	db	80	;'P'
   687  007DF5  76                 	db	118	;'v'
   688  007DF6  34                 	db	52	;'4'
   689  007DF7  20                 	db	32
   690  007DF8  41                 	db	65	;'A'
   691  007DF9  64                 	db	100	;'d'
   692  007DFA  64                 	db	100	;'d'
   693  007DFB  72                 	db	114	;'r'
   694  007DFC  65                 	db	101	;'e'
   695  007DFD  73                 	db	115	;'s'
   696  007DFE  73                 	db	115	;'s'
   697  007DFF  2E                 	db	46
   698  007E00  2E                 	db	46
   699  007E01  2E                 	db	46
   700  007E02  0A                 	db	10
   701  007E03  0D                 	db	13
   702  007E04  00                 	db	0
   703  007E05                     STR_27:
   704  007E05  46                 	db	70	;'F'
   705  007E06  49                 	db	73	;'I'
   706  007E07  52                 	db	82	;'R'
   707  007E08  4D                 	db	77	;'M'
   708  007E09  57                 	db	87	;'W'
   709  007E0A  41                 	db	65	;'A'
   710  007E0B  52                 	db	82	;'R'
   711  007E0C  45                 	db	69	;'E'
   712  007E0D  20                 	db	32
   713  007E0E  42                 	db	66	;'B'
   714  007E0F  55                 	db	85	;'U'
   715  007E10  49                 	db	73	;'I'
   716  007E11  4C                 	db	76	;'L'
   717  007E12  44                 	db	68	;'D'
   718  007E13  20                 	db	32
   719  007E14  44                 	db	68	;'D'
   720  007E15  41                 	db	65	;'A'
   721  007E16  54                 	db	84	;'T'
   722  007E17  45                 	db	69	;'E'
   723  007E18  20                 	db	32
   724  007E19  49                 	db	73	;'I'
   725  007E1A  53                 	db	83	;'S'
   726  007E1B  20                 	db	32
   727  007E1C  00                 	db	0
   728  007E1D                     STR_33:
   729  007E1D  53                 	db	83	;'S'
   730  007E1E  6F                 	db	111	;'o'
   731  007E1F  75                 	db	117	;'u'
   732  007E20  72                 	db	114	;'r'
   733  007E21  63                 	db	99	;'c'
   734  007E22  65                 	db	101	;'e'
   735  007E23  20                 	db	32
   736  007E24  4D                 	db	77	;'M'
   737  007E25  41                 	db	65	;'A'
   738  007E26  43                 	db	67	;'C'
   739  007E27  20                 	db	32
   740  007E28  61                 	db	97	;'a'
   741  007E29  64                 	db	100	;'d'
   742  007E2A  64                 	db	100	;'d'
   743  007E2B  72                 	db	114	;'r'
   744  007E2C  65                 	db	101	;'e'
   745  007E2D  73                 	db	115	;'s'
   746  007E2E  73                 	db	115	;'s'
   747  007E2F  20                 	db	32
   748  007E30  69                 	db	105	;'i'
   749  007E31  73                 	db	115	;'s'
   750  007E32  20                 	db	32
   751  007E33  00                 	db	0
   752  007E34                     STR_40:
   753  007E34  53                 	db	83	;'S'
   754  007E35  70                 	db	112	;'p'
   755  007E36  65                 	db	101	;'e'
   756  007E37  65                 	db	101	;'e'
   757  007E38  64                 	db	100	;'d'
   758  007E39  20                 	db	32
   759  007E3A  69                 	db	105	;'i'
   760  007E3B  73                 	db	115	;'s'
   761  007E3C  20                 	db	32
   762  007E3D  31                 	db	49	;'1'
   763  007E3E  30                 	db	48	;'0'
   764  007E3F  30                 	db	48	;'0'
   765  007E40  20                 	db	32
   766  007E41  4D                 	db	77	;'M'
   767  007E42  62                 	db	98	;'b'
   768  007E43  70                 	db	112	;'p'
   769  007E44  73                 	db	115	;'s'
   770  007E45  2C                 	db	44
   771  007E46  20                 	db	32
   772  007E47  00                 	db	0
   773  007E48                     STR_85:
   774  007E48  5B                 	db	91	;'['
   775  007E49  49                 	db	73	;'I'
   776  007E4A  4E                 	db	78	;'N'
   777  007E4B  56                 	db	86	;'V'
   778  007E4C  41                 	db	65	;'A'
   779  007E4D  4C                 	db	76	;'L'
   780  007E4E  49                 	db	73	;'I'
   781  007E4F  44                 	db	68	;'D'
   782  007E50  20                 	db	32
   783  007E51  43                 	db	67	;'C'
   784  007E52  48                 	db	72	;'H'
   785  007E53  45                 	db	69	;'E'
   786  007E54  43                 	db	67	;'C'
   787  007E55  4B                 	db	75	;'K'
   788  007E56  53                 	db	83	;'S'
   789  007E57  55                 	db	85	;'U'
   790  007E58  4D                 	db	77	;'M'
   791  007E59  5D                 	db	93	;']'
   792  007E5A  00                 	db	0
   793  007E5B                     STR_39:
   794  007E5B  53                 	db	83	;'S'
   795  007E5C  70                 	db	112	;'p'
   796  007E5D  65                 	db	101	;'e'
   797  007E5E  65                 	db	101	;'e'
   798  007E5F  64                 	db	100	;'d'
   799  007E60  20                 	db	32
   800  007E61  69                 	db	105	;'i'
   801  007E62  73                 	db	115	;'s'
   802  007E63  20                 	db	32
   803  007E64  31                 	db	49	;'1'
   804  007E65  30                 	db	48	;'0'
   805  007E66  20                 	db	32
   806  007E67  4D                 	db	77	;'M'
   807  007E68  62                 	db	98	;'b'
   808  007E69  70                 	db	112	;'p'
   809  007E6A  73                 	db	115	;'s'
   810  007E6B  2C                 	db	44
   811  007E6C  20                 	db	32
   812  007E6D  00                 	db	0
   813  007E6E                     STR_38:
   814  007E6E  4C                 	db	76	;'L'
   815  007E6F  69                 	db	105	;'i'
   816  007E70  6E                 	db	110	;'n'
   817  007E71  6B                 	db	107	;'k'
   818  007E72  20                 	db	32
   819  007E73  65                 	db	101	;'e'
   820  007E74  73                 	db	115	;'s'
   821  007E75  74                 	db	116	;'t'
   822  007E76  61                 	db	97	;'a'
   823  007E77  62                 	db	98	;'b'
   824  007E78  6C                 	db	108	;'l'
   825  007E79  69                 	db	105	;'i'
   826  007E7A  73                 	db	115	;'s'
   827  007E7B  68                 	db	104	;'h'
   828  007E7C  65                 	db	101	;'e'
   829  007E7D  64                 	db	100	;'d'
   830  007E7E  2E                 	db	46
   831  007E7F  20                 	db	32
   832  007E80  00                 	db	0
   833  007E81                     STR_46:
   834  007E81  20                 	db	32
   835  007E82  45                 	db	69	;'E'
   836  007E83  54                 	db	84	;'T'
   837  007E84  48                 	db	72	;'H'
   838  007E85  45                 	db	69	;'E'
   839  007E86  52                 	db	82	;'R'
   840  007E87  4E                 	db	78	;'N'
   841  007E88  45                 	db	69	;'E'
   842  007E89  54                 	db	84	;'T'
   843  007E8A  20                 	db	32
   844  007E8B  4D                 	db	77	;'M'
   845  007E8C  4F                 	db	79	;'O'
   846  007E8D  44                 	db	68	;'D'
   847  007E8E  55                 	db	85	;'U'
   848  007E8F  4C                 	db	76	;'L'
   849  007E90  45                 	db	69	;'E'
   850  007E91  3A                 	db	58	;':'
   851  007E92  20                 	db	32
   852  007E93  00                 	db	0
   853  007E94                     STR_20:
   854  007E94  43                 	db	67	;'C'
   855  007E95  6F                 	db	111	;'o'
   856  007E96  75                 	db	117	;'u'
   857  007E97  6C                 	db	108	;'l'
   858  007E98  64                 	db	100	;'d'
   859  007E99  20                 	db	32
   860  007E9A  6E                 	db	110	;'n'
   861  007E9B  6F                 	db	111	;'o'
   862  007E9C  74                 	db	116	;'t'
   863  007E9D  20                 	db	32
   864  007E9E  72                 	db	114	;'r'
   865  007E9F  65                 	db	101	;'e'
   866  007EA0  73                 	db	115	;'s'
   867  007EA1  6F                 	db	111	;'o'
   868  007EA2  6C                 	db	108	;'l'
   869  007EA3  76                 	db	118	;'v'
   870  007EA4  65                 	db	101	;'e'
   871  007EA5  20                 	db	32
   872  007EA6  00                 	db	0
   873  007EA7                     STR_57:
   874  007EA7  55                 	db	85	;'U'
   875  007EA8  6E                 	db	110	;'n'
   876  007EA9  6B                 	db	107	;'k'
   877  007EAA  6E                 	db	110	;'n'
   878  007EAB  6F                 	db	111	;'o'
   879  007EAC  77                 	db	119	;'w'
   880  007EAD  6E                 	db	110	;'n'
   881  007EAE  20                 	db	32
   882  007EAF  45                 	db	69	;'E'
   883  007EB0  74                 	db	116	;'t'
   884  007EB1  68                 	db	104	;'h'
   885  007EB2  65                 	db	101	;'e'
   886  007EB3  72                 	db	114	;'r'
   887  007EB4  54                 	db	84	;'T'
   888  007EB5  79                 	db	121	;'y'
   889  007EB6  70                 	db	112	;'p'
   890  007EB7  65                 	db	101	;'e'
   891  007EB8  00                 	db	0
   892  007EB9                     STR_22:
   893  007EB9  49                 	db	73	;'I'
   894  007EBA  50                 	db	80	;'P'
   895  007EBB  20                 	db	32
   896  007EBC  70                 	db	112	;'p'
   897  007EBD  61                 	db	97	;'a'
   898  007EBE  63                 	db	99	;'c'
   899  007EBF  6B                 	db	107	;'k'
   900  007EC0  65                 	db	101	;'e'
   901  007EC1  74                 	db	116	;'t'
   902  007EC2  20                 	db	32
   903  007EC3  73                 	db	115	;'s'
   904  007EC4  65                 	db	101	;'e'
   905  007EC5  6E                 	db	110	;'n'
   906  007EC6  74                 	db	116	;'t'
   907  007EC7  2E                 	db	46
   908  007EC8  0A                 	db	10
   909  007EC9  0D                 	db	13
   910  007ECA  00                 	db	0
   911  007ECB                     STR_61:
   912  007ECB  55                 	db	85	;'U'
   913  007ECC  6E                 	db	110	;'n'
   914  007ECD  6B                 	db	107	;'k'
   915  007ECE  6E                 	db	110	;'n'
   916  007ECF  6F                 	db	111	;'o'
   917  007ED0  77                 	db	119	;'w'
   918  007ED1  6E                 	db	110	;'n'
   919  007ED2  20                 	db	32
   920  007ED3  50                 	db	80	;'P'
   921  007ED4  72                 	db	114	;'r'
   922  007ED5  6F                 	db	111	;'o'
   923  007ED6  74                 	db	116	;'t'
   924  007ED7  6F                 	db	111	;'o'
   925  007ED8  63                 	db	99	;'c'
   926  007ED9  6F                 	db	111	;'o'
   927  007EDA  6C                 	db	108	;'l'
   928  007EDB  00                 	db	0
   929  007EDC                     STR_44:
   930  007EDC  20                 	db	32
   931  007EDD  4D                 	db	77	;'M'
   932  007EDE  45                 	db	69	;'E'
   933  007EDF  4D                 	db	77	;'M'
   934  007EE0  4F                 	db	79	;'O'
   935  007EE1  52                 	db	82	;'R'
   936  007EE2  59                 	db	89	;'Y'
   937  007EE3  20                 	db	32
   938  007EE4  4D                 	db	77	;'M'
   939  007EE5  4F                 	db	79	;'O'
   940  007EE6  44                 	db	68	;'D'
   941  007EE7  55                 	db	85	;'U'
   942  007EE8  4C                 	db	76	;'L'
   943  007EE9  45                 	db	69	;'E'
   944  007EEA  3A                 	db	58	;':'
   945  007EEB  20                 	db	32
   946  007EEC  00                 	db	0
   947  007EED                     STR_72:
   948  007EED  5B                 	db	91	;'['
   949  007EEE  52                 	db	82	;'R'
   950  007EEF  65                 	db	101	;'e'
   951  007EF0  70                 	db	112	;'p'
   952  007EF1  6C                 	db	108	;'l'
   953  007EF2  79                 	db	121	;'y'
   954  007EF3  20                 	db	32
   955  007EF4  73                 	db	115	;'s'
   956  007EF5  65                 	db	101	;'e'
   957  007EF6  6E                 	db	110	;'n'
   958  007EF7  74                 	db	116	;'t'
   959  007EF8  20                 	db	32
   960  007EF9  74                 	db	116	;'t'
   961  007EFA  6F                 	db	111	;'o'
   962  007EFB  20                 	db	32
   963  007EFC  00                 	db	0
   964  007EFD                     STR_5:
   965  007EFD  5B                 	db	91	;'['
   966  007EFE  53                 	db	83	;'S'
   967  007EFF  79                 	db	121	;'y'
   968  007F00  6D                 	db	109	;'m'
   969  007F01  62                 	db	98	;'b'
   970  007F02  6F                 	db	111	;'o'
   971  007F03  6C                 	db	108	;'l'
   972  007F04  20                 	db	32
   973  007F05  45                 	db	69	;'E'
   974  007F06  72                 	db	114	;'r'
   975  007F07  72                 	db	114	;'r'
   976  007F08  6F                 	db	111	;'o'
   977  007F09  72                 	db	114	;'r'
   978  007F0A  73                 	db	115	;'s'
   979  007F0B  5D                 	db	93	;']'
   980  007F0C  00                 	db	0
   981  007F0D                     STR_69:
   982  007F0D  5B                 	db	91	;'['
   983  007F0E  49                 	db	73	;'I'
   984  007F0F  73                 	db	115	;'s'
   985  007F10  47                 	db	71	;'G'
   986  007F11  72                 	db	114	;'r'
   987  007F12  61                 	db	97	;'a'
   988  007F13  74                 	db	116	;'t'
   989  007F14  75                 	db	117	;'u'
   990  007F15  69                 	db	105	;'i'
   991  007F16  74                 	db	116	;'t'
   992  007F17  6F                 	db	111	;'o'
   993  007F18  75                 	db	117	;'u'
   994  007F19  73                 	db	115	;'s'
   995  007F1A  5D                 	db	93	;']'
   996  007F1B  00                 	db	0
   997  007F1C                     STR_48:
   998  007F1C  20                 	db	32
   999  007F1D  49                 	db	73	;'I'
  1000  007F1E  50                 	db	80	;'P'
  1001  007F1F  76                 	db	118	;'v'
  1002  007F20  34                 	db	52	;'4'
  1003  007F21  20                 	db	32
  1004  007F22  4D                 	db	77	;'M'
  1005  007F23  4F                 	db	79	;'O'
  1006  007F24  44                 	db	68	;'D'
  1007  007F25  55                 	db	85	;'U'
  1008  007F26  4C                 	db	76	;'L'
  1009  007F27  45                 	db	69	;'E'
  1010  007F28  3A                 	db	58	;':'
  1011  007F29  20                 	db	32
  1012  007F2A  00                 	db	0
  1013  007F2B                     STR_47:
  1014  007F2B  20                 	db	32
  1015  007F2C  41                 	db	65	;'A'
  1016  007F2D  52                 	db	82	;'R'
  1017  007F2E  50                 	db	80	;'P'
  1018  007F2F  20                 	db	32
  1019  007F30  4D                 	db	77	;'M'
  1020  007F31  4F                 	db	79	;'O'
  1021  007F32  44                 	db	68	;'D'
  1022  007F33  55                 	db	85	;'U'
  1023  007F34  4C                 	db	76	;'L'
  1024  007F35  45                 	db	69	;'E'
  1025  007F36  3A                 	db	58	;':'
  1026  007F37  20                 	db	32
  1027  007F38  00                 	db	0
  1028  007F39                     STR_37:
  1029  007F39  4C                 	db	76	;'L'
  1030  007F3A  69                 	db	105	;'i'
  1031  007F3B  6E                 	db	110	;'n'
  1032  007F3C  6B                 	db	107	;'k'
  1033  007F3D  20                 	db	32
  1034  007F3E  6C                 	db	108	;'l'
  1035  007F3F  6F                 	db	111	;'o'
  1036  007F40  73                 	db	115	;'s'
  1037  007F41  74                 	db	116	;'t'
  1038  007F42  2E                 	db	46
  1039  007F43  0A                 	db	10
  1040  007F44  0D                 	db	13
  1041  007F45  00                 	db	0
  1042  007F46                     STR_32:
  1043  007F46  20                 	db	32
  1044  007F47  64                 	db	100	;'d'
  1045  007F48  65                 	db	101	;'e'
  1046  007F49  74                 	db	116	;'t'
  1047  007F4A  65                 	db	101	;'e'
  1048  007F4B  63                 	db	99	;'c'
  1049  007F4C  74                 	db	116	;'t'
  1050  007F4D  65                 	db	101	;'e'
  1051  007F4E  64                 	db	100	;'d'
  1052  007F4F  2E                 	db	46
  1053  007F50  20                 	db	32
  1054  007F51  00                 	db	0
  1055  007F52                     STR_28:
  1056  007F52  4D                 	db	77	;'M'
  1057  007F53  61                 	db	97	;'a'
  1058  007F54  72                 	db	114	;'r'
  1059  007F55  20                 	db	32
  1060  007F56  31                 	db	49	;'1'
  1061  007F57  32                 	db	50	;'2'
  1062  007F58  20                 	db	32
  1063  007F59  32                 	db	50	;'2'
  1064  007F5A  30                 	db	48	;'0'
  1065  007F5B  31                 	db	49	;'1'
  1066  007F5C  39                 	db	57	;'9'
  1067  007F5D  00                 	db	0
  1068  007F5E                     STR_3:
  1069  007F5E  5B                 	db	91	;'['
  1070  007F5F  42                 	db	66	;'B'
  1071  007F60  72                 	db	114	;'r'
  1072  007F61  6F                 	db	111	;'o'
  1073  007F62  61                 	db	97	;'a'
  1074  007F63  64                 	db	100	;'d'
  1075  007F64  63                 	db	99	;'c'
  1076  007F65  61                 	db	97	;'a'
  1077  007F66  73                 	db	115	;'s'
  1078  007F67  74                 	db	116	;'t'
  1079  007F68  5D                 	db	93	;']'
  1080  007F69  00                 	db	0
  1081  007F6A                     STR_86:
  1082  007F6A  5B                 	db	91	;'['
  1083  007F6B  45                 	db	69	;'E'
  1084  007F6C  78                 	db	120	;'x'
  1085  007F6D  70                 	db	112	;'p'
  1086  007F6E  65                 	db	101	;'e'
  1087  007F6F  63                 	db	99	;'c'
  1088  007F70  74                 	db	116	;'t'
  1089  007F71  65                 	db	101	;'e'
  1090  007F72  64                 	db	100	;'d'
  1091  007F73  20                 	db	32
  1092  007F74  00                 	db	0
  1093  007F75                     STR_68:
  1094  007F75  5B                 	db	91	;'['
  1095  007F76  49                 	db	73	;'I'
  1096  007F77  73                 	db	115	;'s'
  1097  007F78  50                 	db	80	;'P'
  1098  007F79  72                 	db	114	;'r'
  1099  007F7A  6F                 	db	111	;'o'
  1100  007F7B  62                 	db	98	;'b'
  1101  007F7C  65                 	db	101	;'e'
  1102  007F7D  5D                 	db	93	;']'
  1103  007F7E  00                 	db	0
  1104  007F7F                     STR_4:
  1105  007F7F  5B                 	db	91	;'['
  1106  007F80  55                 	db	85	;'U'
  1107  007F81  6E                 	db	110	;'n'
  1108  007F82  69                 	db	105	;'i'
  1109  007F83  63                 	db	99	;'c'
  1110  007F84  61                 	db	97	;'a'
  1111  007F85  73                 	db	115	;'s'
  1112  007F86  74                 	db	116	;'t'
  1113  007F87  5D                 	db	93	;']'
  1114  007F88  00                 	db	0
  1115  007F89                     STR_53:
  1116  007F89  20                 	db	32
  1117  007F8A  28                 	db	40
  1118  007F8B  43                 	db	67	;'C'
  1119  007F8C  6F                 	db	111	;'o'
  1120  007F8D  64                 	db	100	;'d'
  1121  007F8E  65                 	db	101	;'e'
  1122  007F8F  3A                 	db	58	;':'
  1123  007F90  20                 	db	32
  1124  007F91  00                 	db	0
  1125  007F92                     STR_30:
  1126  007F92  32                 	db	50	;'2'
  1127  007F93  32                 	db	50	;'2'
  1128  007F94  3A                 	db	58	;':'
  1129  007F95  34                 	db	52	;'4'
  1130  007F96  33                 	db	51	;'3'
  1131  007F97  3A                 	db	58	;':'
  1132  007F98  35                 	db	53	;'5'
  1133  007F99  35                 	db	53	;'5'
  1134  007F9A  00                 	db	0
  1135  007F9B                     STR_75:
  1136  007F9B  57                 	db	87	;'W'
  1137  007F9C  61                 	db	97	;'a'
  1138  007F9D  69                 	db	105	;'i'
  1139  007F9E  74                 	db	116	;'t'
  1140  007F9F  65                 	db	101	;'e'
  1141  007FA0  64                 	db	100	;'d'
  1142  007FA1  20                 	db	32
  1143  007FA2  00                 	db	0
  1144  007FA3                     STR_43:
  1145  007FA3  5B                 	db	91	;'['
  1146  007FA4  45                 	db	69	;'E'
  1147  007FA5  52                 	db	82	;'R'
  1148  007FA6  52                 	db	82	;'R'
  1149  007FA7  4F                 	db	79	;'O'
  1150  007FA8  52                 	db	82	;'R'
  1151  007FA9  5D                 	db	93	;']'
  1152  007FAA  00                 	db	0
  1153  007FAB                     STR_87:
  1154  007FAB  2C                 	db	44
  1155  007FAC  20                 	db	32
  1156  007FAD  67                 	db	103	;'g'
  1157  007FAE  6F                 	db	111	;'o'
  1158  007FAF  74                 	db	116	;'t'
  1159  007FB0  20                 	db	32
  1160  007FB1  00                 	db	0
  1161  007FB2                     STR_76:
  1162  007FB2  20                 	db	32
  1163  007FB3  6D                 	db	109	;'m'
  1164  007FB4  73                 	db	115	;'s'
  1165  007FB5  2E                 	db	46
  1166  007FB6  0A                 	db	10
  1167  007FB7  0D                 	db	13
  1168  007FB8  00                 	db	0
  1169  007FB9                     STR_9:
  1170  007FB9  5B                 	db	91	;'['
  1171  007FBA  49                 	db	73	;'I'
  1172  007FBB  50                 	db	80	;'P'
  1173  007FBC  76                 	db	118	;'v'
  1174  007FBD  34                 	db	52	;'4'
  1175  007FBE  5D                 	db	93	;']'
  1176  007FBF  00                 	db	0
  1177  007FC0                     STR_8:
  1178  007FC0  5B                 	db	91	;'['
  1179  007FC1  41                 	db	65	;'A'
  1180  007FC2  52                 	db	82	;'R'
  1181  007FC3  50                 	db	80	;'P'
  1182  007FC4  5D                 	db	93	;']'
  1183  007FC5  00                 	db	0
  1184  007FC6                     STR_79:
  1185  007FC6  20                 	db	32
  1186  007FC7  2D                 	db	45
  1187  007FC8  3E                 	db	62	;'>'
  1188  007FC9  20                 	db	32
  1189  007FCA  00                 	db	0
  1190  007FCB                     STR_65:
  1191  007FCB  5D                 	db	93	;']'
  1192  007FCC  2D                 	db	45
  1193  007FCD  3E                 	db	62	;'>'
  1194  007FCE  5B                 	db	91	;'['
  1195  007FCF  00                 	db	0
  1196  007FD0                     STR_55:
  1197  007FD0  49                 	db	73	;'I'
  1198  007FD1  50                 	db	80	;'P'
  1199  007FD2  76                 	db	118	;'v'
  1200  007FD3  34                 	db	52	;'4'
  1201  007FD4  00                 	db	0
  1202  007FD5                     STR_58:
  1203  007FD5  49                 	db	73	;'I'
  1204  007FD6  43                 	db	67	;'C'
  1205  007FD7  4D                 	db	77	;'M'
  1206  007FD8  50                 	db	80	;'P'
  1207  007FD9  00                 	db	0
  1208  007FDA                     STR_54:
  1209  007FDA  29                 	db	41
  1210  007FDB  2E                 	db	46
  1211  007FDC  0A                 	db	10
  1212  007FDD  0D                 	db	13
  1213  007FDE  00                 	db	0
  1214  007FDF                     STR_13:
  1215  007FDF  5D                 	db	93	;']'
  1216  007FE0  5B                 	db	91	;'['
  1217  007FE1  4C                 	db	76	;'L'
  1218  007FE2  3D                 	db	61	;'='
  1219  007FE3  00                 	db	0
  1220  007FE4                     STR_59:
  1221  007FE4  54                 	db	84	;'T'
  1222  007FE5  43                 	db	67	;'C'
  1223  007FE6  50                 	db	80	;'P'
  1224  007FE7  00                 	db	0
  1225  007FE8                     STR_60:
  1226  007FE8  55                 	db	85	;'U'
  1227  007FE9  44                 	db	68	;'D'
  1228  007FEA  50                 	db	80	;'P'
  1229  007FEB  00                 	db	0
  1230  007FEC                     STR_56:
  1231  007FEC  41                 	db	65	;'A'
  1232  007FED  52                 	db	82	;'R'
  1233  007FEE  50                 	db	80	;'P'
  1234  007FEF  00                 	db	0
  1235  007FF0                     STR_17:
  1236  007FF0  20                 	db	32
  1237  007FF1  28                 	db	40
  1238  007FF2  00                 	db	0
  1239  007FF3                     STR_11:
  1240  007FF3  2D                 	db	45
  1241  007FF4  3E                 	db	62	;'>'
  1242  007FF5  00                 	db	0
  1243  007FF6                     STR_12:
  1244  007FF6  5D                 	db	93	;']'
  1245  007FF7  5B                 	db	91	;'['
  1246  007FF8  00                 	db	0
  1247  007FF9                     STR_18:
  1248  007FF9  29                 	db	41
  1249  007FFA  5D                 	db	93	;']'
  1250  007FFB  00                 	db	0
  1251  007FFC                     STR_23:
  1252  007FFC  12                 	db	18
  1253  007FFD  00                 	db	0
  1254  0000                     
  1255                           ; #config settings
  1256  007FFE  00                 	db	0	; dummy byte at the end
  1257  0000                     
  1258                           	psect	cinit
  1259  003D84                     __pcinit:
  1260                           	opt stack 0
  1261  003D84                     start_initialization:
  1262                           	opt stack 0
  1263  003D84                     __initialization:
  1264                           	opt stack 0
  1265                           
  1266                           ; Initialize objects allocated to BANK2 (46 bytes)
  1267                           ; load TBLPTR registers with __pidataBANK2
  1268  003D84  0E90               	movlw	low __pidataBANK2
  1269  003D86  6EF6               	movwf	tblptrl,c
  1270  003D88  0E49               	movlw	high __pidataBANK2
  1271  003D8A  6EF7               	movwf	tblptrh,c
  1272  003D8C  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1273  003D8E  6EF8               	movwf	tblptru,c
  1274  003D90  EE02  F0B1         	lfsr	0,__pdataBANK2
  1275  003D94  EE10 F02E          	lfsr	1,46
  1276  003D98                     copy_data0:
  1277  003D98  0009               	tblrd		*+
  1278  003D9A  CFF5 FFEE          	movff	tablat,postinc0
  1279  003D9E  50E5               	movf	postdec1,w,c
  1280  003DA0  50E1               	movf	fsr1l,w,c
  1281  003DA2  E1FA               	bnz	copy_data0
  1282                           
  1283                           ; Initialize objects allocated to COMRAM (6 bytes)
  1284                           ; load TBLPTR registers with __pidataCOMRAM
  1285  003DA4  0E0E               	movlw	low __pidataCOMRAM
  1286  003DA6  6EF6               	movwf	tblptrl,c
  1287  003DA8  0E4D               	movlw	high __pidataCOMRAM
  1288  003DAA  6EF7               	movwf	tblptrh,c
  1289  003DAC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1290  003DAE  6EF8               	movwf	tblptru,c
  1291  003DB0  EE00  F04B         	lfsr	0,__pdataCOMRAM
  1292  003DB4  EE10 F006          	lfsr	1,6
  1293  003DB8                     copy_data1:
  1294  003DB8  0009               	tblrd		*+
  1295  003DBA  CFF5 FFEE          	movff	tablat,postinc0
  1296  003DBE  50E5               	movf	postdec1,w,c
  1297  003DC0  50E1               	movf	fsr1l,w,c
  1298  003DC2  E1FA               	bnz	copy_data1
  1299                           
  1300                           ; Clear objects allocated to BANK3 (122 bytes)
  1301  003DC4  EE03  F000         	lfsr	0,__pbssBANK3
  1302  003DC8  0E7A               	movlw	122
  1303  003DCA                     clear_0:
  1304  003DCA  6AEE               	clrf	postinc0,c
  1305  003DCC  06E8               	decf	wreg,f,c
  1306  003DCE  E1FD               	bnz	clear_0
  1307                           
  1308                           ; Clear objects allocated to BANK2 (177 bytes)
  1309  003DD0  EE02  F000         	lfsr	0,__pbssBANK2
  1310  003DD4  0EB1               	movlw	177
  1311  003DD6                     clear_1:
  1312  003DD6  6AEE               	clrf	postinc0,c
  1313  003DD8  06E8               	decf	wreg,f,c
  1314  003DDA  E1FD               	bnz	clear_1
  1315                           
  1316                           ; Clear objects allocated to BANK1 (104 bytes)
  1317  003DDC  EE01  F08C         	lfsr	0,__pbssBANK1
  1318  003DE0  0E68               	movlw	104
  1319  003DE2                     clear_2:
  1320  003DE2  6AEE               	clrf	postinc0,c
  1321  003DE4  06E8               	decf	wreg,f,c
  1322  003DE6  E1FD               	bnz	clear_2
  1323                           
  1324                           ; Clear objects allocated to COMRAM (34 bytes)
  1325  003DE8  EE00  F029         	lfsr	0,__pbssCOMRAM
  1326  003DEC  0E22               	movlw	34
  1327  003DEE                     clear_3:
  1328  003DEE  6AEE               	clrf	postinc0,c
  1329  003DF0  06E8               	decf	wreg,f,c
  1330  003DF2  E1FD               	bnz	clear_3
  1331  003DF4                     end_of_initialization:
  1332                           	opt stack 0
  1333  003DF4                     __end_of__initialization:
  1334                           	opt stack 0
  1335  003DF4  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1336  003DF6  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1337  003DF8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1338  003DFA  6EF8               	movwf	tblptru,c
  1339  003DFC  0100               	movlb	0
  1340  003DFE  EFB4  F00E         	goto	_main	;jump to C main() function
  1341                           tblptru	equ	0xFF8
  1342                           tblptrh	equ	0xFF7
  1343                           tblptrl	equ	0xFF6
  1344                           tablat	equ	0xFF5
  1345                           postinc0	equ	0xFEE
  1346                           wreg	equ	0xFE8
  1347                           postdec1	equ	0xFE5
  1348                           fsr1l	equ	0xFE1
  1349                           
  1350                           	psect	bssCOMRAM
  1351  000029                     __pbssCOMRAM:
  1352                           	opt stack 0
  1353  000029                     _time:
  1354                           	opt stack 0
  1355  000029                     	ds	4
  1356  00002D                     	ds	4
  1357  000031                     buttonHandler@debounceCounter:
  1358                           	opt stack 0
  1359  000031                     	ds	4
  1360  000035                     _numberToDisplay:
  1361                           	opt stack 0
  1362  000035                     	ds	4
  1363  000039                     ethernet_rxGetNewFrame@counter:
  1364                           	opt stack 0
  1365  000039                     	ds	4
  1366  00003D                     sevenSegmentUpdate@digitsToDisplay:
  1367                           	opt stack 0
  1368  00003D                     	ds	3
  1369  000040                     ethernetController_streamToTransmitBuffer@pointer:
  1370                           	opt stack 0
  1371  000040                     	ds	2
  1372  000042                     ethernetController_softReset@F5852:
  1373                           	opt stack 0
  1374  000042                     	ds	2
  1375  000044                     _nextPacketPointer:
  1376                           	opt stack 0
  1377  000044                     	ds	2
  1378  000046                     	ds	1
  1379  000047                     sevenSegmentUpdate@digitPointer:
  1380                           	opt stack 0
  1381  000047                     	ds	1
  1382  000048                     buttonHandler@newState:
  1383                           	opt stack 0
  1384  000048                     	ds	1
  1385  000049                     buttonHandler@oldState:
  1386                           	opt stack 0
  1387  000049                     	ds	1
  1388  00004A                     	ds	1
  1389                           tblptru	equ	0xFF8
  1390                           tblptrh	equ	0xFF7
  1391                           tblptrl	equ	0xFF6
  1392                           tablat	equ	0xFF5
  1393                           postinc0	equ	0xFEE
  1394                           wreg	equ	0xFE8
  1395                           postdec1	equ	0xFE5
  1396                           fsr1l	equ	0xFE1
  1397                           
  1398                           	psect	dataCOMRAM
  1399  00004B                     __pdataCOMRAM:
  1400                           	opt stack 0
  1401  00004B                     _randx:
  1402                           	opt stack 0
  1403  00004B                     	ds	4
  1404  00004F                     ethernetController_softReset@F5850:
  1405                           	opt stack 0
  1406  00004F                     	ds	2
  1407                           tblptru	equ	0xFF8
  1408                           tblptrh	equ	0xFF7
  1409                           tblptrl	equ	0xFF6
  1410                           tablat	equ	0xFF5
  1411                           postinc0	equ	0xFEE
  1412                           wreg	equ	0xFE8
  1413                           postdec1	equ	0xFE5
  1414                           fsr1l	equ	0xFE1
  1415                           
  1416                           	psect	bssBANK1
  1417  00018C                     __pbssBANK1:
  1418                           	opt stack 0
  1419  00018C                     _occupiedMemory:
  1420                           	opt stack 0
  1421  00018C                     	ds	72
  1422  0001D4                     _ipSource:
  1423                           	opt stack 0
  1424  0001D4                     	ds	4
  1425  0001D8                     ARP_probe@state:
  1426                           	opt stack 0
  1427  0001D8                     	ds	1
  1428  0001D9                     hexToString@number:
  1429                           	opt stack 0
  1430  0001D9                     	ds	10
  1431  0001E3                     intToString@number:
  1432                           	opt stack 0
  1433  0001E3                     	ds	10
  1434  0001ED                     ethernetController_getRSV@temp:
  1435                           	opt stack 0
  1436  0001ED                     	ds	6
  1437  0001F3                     _buttonState:
  1438                           	opt stack 0
  1439  0001F3                     	ds	1
  1440                           tblptru	equ	0xFF8
  1441                           tblptrh	equ	0xFF7
  1442                           tblptrl	equ	0xFF6
  1443                           tablat	equ	0xFF5
  1444                           postinc0	equ	0xFEE
  1445                           wreg	equ	0xFE8
  1446                           postdec1	equ	0xFE5
  1447                           fsr1l	equ	0xFE1
  1448                           
  1449                           	psect	bssBANK2
  1450  000200                     __pbssBANK2:
  1451                           	opt stack 0
  1452  000200                     printEthernetState@oldState:
  1453                           	opt stack 0
  1454  000200                     	ds	15
  1455  00020F                     _ARP_table:
  1456                           	opt stack 0
  1457  00020F                     	ds	112
  1458  00027F                     arpEntryToString@string:
  1459                           	opt stack 0
  1460  00027F                     	ds	50
  1461                           tblptru	equ	0xFF8
  1462                           tblptrh	equ	0xFF7
  1463                           tblptrl	equ	0xFF6
  1464                           tablat	equ	0xFF5
  1465                           postinc0	equ	0xFEE
  1466                           wreg	equ	0xFE8
  1467                           postdec1	equ	0xFE5
  1468                           fsr1l	equ	0xFE1
  1469                           
  1470                           	psect	dataBANK2
  1471  0002B1                     __pdataBANK2:
  1472                           	opt stack 0
  1473  0002B1                     macToString@F5817:
  1474                           	opt stack 0
  1475  0002B1                     	ds	18
  1476  0002C3                     _sevenSegCharacters:
  1477                           	opt stack 0
  1478  0002C3                     	ds	12
  1479  0002CF                     ipAdressToString@address:
  1480                           	opt stack 0
  1481  0002CF                     	ds	16
  1482                           tblptru	equ	0xFF8
  1483                           tblptrh	equ	0xFF7
  1484                           tblptrl	equ	0xFF6
  1485                           tablat	equ	0xFF5
  1486                           postinc0	equ	0xFEE
  1487                           wreg	equ	0xFE8
  1488                           postdec1	equ	0xFE5
  1489                           fsr1l	equ	0xFE1
  1490                           
  1491                           	psect	bssBANK3
  1492  000300                     __pbssBANK3:
  1493                           	opt stack 0
  1494  000300                     _stack:
  1495                           	opt stack 0
  1496  000300                     	ds	122
  1497                           tblptru	equ	0xFF8
  1498                           tblptrh	equ	0xFF7
  1499                           tblptrl	equ	0xFF6
  1500                           tablat	equ	0xFF5
  1501                           postinc0	equ	0xFEE
  1502                           wreg	equ	0xFE8
  1503                           postdec1	equ	0xFE5
  1504                           fsr1l	equ	0xFE1
  1505                           
  1506                           	psect	cstackBANK2
  1507  0002DF                     __pcstackBANK2:
  1508                           	opt stack 0
  1509  0002DF                     main@prescaler:
  1510                           	opt stack 0
  1511                           
  1512                           ; 4 bytes @ 0x0
  1513  0002DF                     	ds	4
  1514  0002E3                     _main$2355:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x4
  1518  0002E3                     	ds	2
  1519  0002E5                     main@err:
  1520                           	opt stack 0
  1521                           
  1522                           ; 3 bytes @ 0x6
  1523  0002E5                     	ds	3
  1524  0002E8                     main@IPsource:
  1525                           	opt stack 0
  1526                           
  1527                           ; 4 bytes @ 0x9
  1528  0002E8                     	ds	4
  1529  0002EC                     main@IPdestination:
  1530                           	opt stack 0
  1531                           
  1532                           ; 4 bytes @ 0xD
  1533  0002EC                     	ds	4
  1534                           tblptru	equ	0xFF8
  1535                           tblptrh	equ	0xFF7
  1536                           tblptrl	equ	0xFF6
  1537                           tablat	equ	0xFF5
  1538                           postinc0	equ	0xFEE
  1539                           wreg	equ	0xFE8
  1540                           postdec1	equ	0xFE5
  1541                           fsr1l	equ	0xFE1
  1542                           
  1543                           	psect	cstackBANK1
  1544  000100                     __pcstackBANK1:
  1545                           	opt stack 0
  1546  000100                     ARP_sendRequest@ipSender:
  1547                           	opt stack 0
  1548  000100                     ARP_sendReply@request:
  1549                           	opt stack 0
  1550                           
  1551                           ; 32 bytes @ 0x0
  1552  000100                     	ds	4
  1553  000104                     ARP_sendRequest@ipTarget:
  1554                           	opt stack 0
  1555                           
  1556                           ; 4 bytes @ 0x4
  1557  000104                     	ds	4
  1558  000108                     ARP_sendRequest@senderMAC:
  1559                           	opt stack 0
  1560                           
  1561                           ; 6 bytes @ 0x8
  1562  000108                     	ds	6
  1563  00010E                     ARP_sendRequest@targetMAC:
  1564                           	opt stack 0
  1565                           
  1566                           ; 6 bytes @ 0xE
  1567  00010E                     	ds	6
  1568  000114                     ARP_sendRequest@request:
  1569                           	opt stack 0
  1570                           
  1571                           ; 32 bytes @ 0x14
  1572  000114                     	ds	12
  1573  000120                     ARP_sendReply@senderMAC:
  1574                           	opt stack 0
  1575                           
  1576                           ; 6 bytes @ 0x20
  1577  000120                     	ds	6
  1578  000126                     ARP_sendReply@targetMAC:
  1579                           	opt stack 0
  1580                           
  1581                           ; 6 bytes @ 0x26
  1582  000126                     	ds	6
  1583  00012C                     ARP_sendReply@senderIP:
  1584                           	opt stack 0
  1585                           
  1586                           ; 4 bytes @ 0x2C
  1587  00012C                     	ds	4
  1588  000130                     ARP_sendReply@targetIP:
  1589                           	opt stack 0
  1590                           
  1591                           ; 4 bytes @ 0x30
  1592  000130                     	ds	4
  1593  000134                     ??_ARP_probe:
  1594  000134                     ARP_sendReply@myIP:
  1595                           	opt stack 0
  1596                           
  1597                           ; 4 bytes @ 0x34
  1598  000134                     	ds	4
  1599  000138                     ARP_sendReply@reply:
  1600                           	opt stack 0
  1601                           
  1602                           ; 32 bytes @ 0x38
  1603  000138                     	ds	4
  1604  00013C                     ARP_probe@timeStart:
  1605                           	opt stack 0
  1606                           
  1607                           ; 4 bytes @ 0x3C
  1608  00013C                     	ds	4
  1609  000140                     ARP_probe@waitingTime:
  1610                           	opt stack 0
  1611                           
  1612                           ; 4 bytes @ 0x40
  1613  000140                     	ds	4
  1614  000144                     ARP_probe@ipSender:
  1615                           	opt stack 0
  1616                           
  1617                           ; 4 bytes @ 0x44
  1618  000144                     	ds	4
  1619  000148                     ARP_probe@err:
  1620                           	opt stack 0
  1621                           
  1622                           ; 3 bytes @ 0x48
  1623  000148                     	ds	3
  1624  00014B                     ?_ipv4_setIPSourceAddress:
  1625                           	opt stack 0
  1626  00014B                     ipv4_setIPSourceAddress@ip:
  1627                           	opt stack 0
  1628                           
  1629                           ; 4 bytes @ 0x4B
  1630  00014B                     	ds	4
  1631  00014F                     ipv4_setIPSourceAddress@err:
  1632                           	opt stack 0
  1633                           
  1634                           ; 3 bytes @ 0x4F
  1635  00014F                     	ds	9
  1636  000158                     ARP_handleNewPacket@arp:
  1637                           	opt stack 0
  1638                           
  1639                           ; 32 bytes @ 0x58
  1640  000158                     	ds	32
  1641  000178                     ?_ethernet_rxGetNewFrame:
  1642                           	opt stack 0
  1643  000178                     ethernet_rxGetNewFrame@frame:
  1644                           	opt stack 0
  1645                           
  1646                           ; 2 bytes @ 0x78
  1647  000178                     	ds	3
  1648  00017B                     ??_ethernet_rxGetNewFrame:
  1649                           
  1650                           ; 1 bytes @ 0x7B
  1651  00017B                     	ds	8
  1652  000183                     ethernet_rxGetNewFrame@err:
  1653                           	opt stack 0
  1654                           
  1655                           ; 3 bytes @ 0x83
  1656  000183                     	ds	3
  1657  000186                     handleStackBackgroundTasks@stack:
  1658                           	opt stack 0
  1659                           
  1660                           ; 2 bytes @ 0x86
  1661  000186                     	ds	2
  1662  000188                     
  1663                           ; 1 bytes @ 0x88
  1664  000188                     	ds	2
  1665  00018A                     ??_main:
  1666                           
  1667                           ; 1 bytes @ 0x8A
  1668  00018A                     	ds	2
  1669                           tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           postdec1	equ	0xFE5
  1676                           fsr1l	equ	0xFE1
  1677                           
  1678                           	psect	cstackBANK0
  1679  000060                     __pcstackBANK0:
  1680                           	opt stack 0
  1681  000060                     ?_ENC424J600_getNextPacketPointer:
  1682                           	opt stack 0
  1683  000060                     ?_ethernetController_getDeviceName:
  1684                           	opt stack 0
  1685  000060                     ?_etherTypeToString:
  1686                           	opt stack 0
  1687  000060                     ?_ipProtocolToString:
  1688                           	opt stack 0
  1689  000060                     ?___wmul:
  1690                           	opt stack 0
  1691  000060                     ?___lwdiv:
  1692                           	opt stack 0
  1693  000060                     ?___lwmod:
  1694                           	opt stack 0
  1695  000060                     ?_ipv4_sendFrame:
  1696                           	opt stack 0
  1697  000060                     ?_getMillis:
  1698                           	opt stack 0
  1699  000060                     ?_ipv4_getIPSourceAddress:
  1700                           	opt stack 0
  1701  000060                     ?___lmul:
  1702                           	opt stack 0
  1703  000060                     ?___llmod:
  1704                           	opt stack 0
  1705  000060                     ?_ENC424J600_updateReceiveStatusVector:
  1706                           	opt stack 0
  1707  000060                     entireMemoryEmpty@i:
  1708                           	opt stack 0
  1709  000060                     entireMemoryFull@i:
  1710                           	opt stack 0
  1711  000060                     memory_txFrameClear@index:
  1712                           	opt stack 0
  1713  000060                     hexToChar@val:
  1714                           	opt stack 0
  1715  000060                     ENC424J600_writeSPI@data:
  1716                           	opt stack 0
  1717  000060                     ENC424J600_readSPI@data:
  1718                           	opt stack 0
  1719  000060                     ENC424J600_setNextPacketPointer@ptr:
  1720                           	opt stack 0
  1721  000060                     ENC424J600_updateReceiveStatusVector@rsv:
  1722                           	opt stack 0
  1723  000060                     mac_setToBroadcast@mac:
  1724                           	opt stack 0
  1725  000060                     mac_isAllZero@mac:
  1726                           	opt stack 0
  1727  000060                     mac_cmp@a:
  1728                           	opt stack 0
  1729  000060                     mac_setAllZero@mac:
  1730                           	opt stack 0
  1731  000060                     etherTypeToString@ethertype:
  1732                           	opt stack 0
  1733  000060                     ipv4_calculateHeaderChecksum@header:
  1734                           	opt stack 0
  1735  000060                     ipv4_cmp@a:
  1736                           	opt stack 0
  1737  000060                     ipv4_isAllZero@ip:
  1738                           	opt stack 0
  1739  000060                     ipv4_setToAllZero@ip:
  1740                           	opt stack 0
  1741  000060                     ___wmul@multiplier:
  1742                           	opt stack 0
  1743  000060                     ___lwdiv@dividend:
  1744                           	opt stack 0
  1745  000060                     ___lwmod@dividend:
  1746                           	opt stack 0
  1747  000060                     ___lmul@multiplier:
  1748                           	opt stack 0
  1749  000060                     ___llmod@dividend:
  1750                           	opt stack 0
  1751  000060                     checkForOverlapSwitched@a:
  1752                           	opt stack 0
  1753  000060                     ipv4_sendFrame@ipPacket:
  1754                           	opt stack 0
  1755                           
  1756                           ; 66 bytes @ 0x0
  1757  000060                     	ds	1
  1758  000061                     ?_hexToString:
  1759                           	opt stack 0
  1760  000061                     hexToString@val:
  1761                           	opt stack 0
  1762                           
  1763                           ; 4 bytes @ 0x1
  1764  000061                     	ds	1
  1765  000062                     ??_ENC424J600_writeSPI:
  1766  000062                     ??_ENC424J600_readSPI:
  1767  000062                     ??_etherTypeToString:
  1768  000062                     ??_ipv4_calculateHeaderChecksum:
  1769  000062                     ?_ethernetController_getNextPacketPointer:
  1770                           	opt stack 0
  1771  000062                     mac_setToBroadcast@i:
  1772                           	opt stack 0
  1773  000062                     mac_isAllZero@i:
  1774                           	opt stack 0
  1775  000062                     mac_setAllZero@i:
  1776                           	opt stack 0
  1777  000062                     ipProtocolToString@protocol:
  1778                           	opt stack 0
  1779  000062                     ipv4_isAllZero@i:
  1780                           	opt stack 0
  1781  000062                     ipv4_setToAllZero@i:
  1782                           	opt stack 0
  1783  000062                     mac_cmp@b:
  1784                           	opt stack 0
  1785  000062                     ipv4_cmp@b:
  1786                           	opt stack 0
  1787  000062                     ___wmul@multiplicand:
  1788                           	opt stack 0
  1789  000062                     ___lwdiv@divisor:
  1790                           	opt stack 0
  1791  000062                     ___lwmod@divisor:
  1792                           	opt stack 0
  1793  000062                     ethernetController_getDeviceName@string:
  1794                           	opt stack 0
  1795                           
  1796                           ; 11 bytes @ 0x2
  1797  000062                     	ds	2
  1798  000064                     ___lwdiv@counter:
  1799                           	opt stack 0
  1800  000064                     ___lwmod@counter:
  1801                           	opt stack 0
  1802  000064                     ___wmul@product:
  1803                           	opt stack 0
  1804  000064                     ___lmul@multiplicand:
  1805                           	opt stack 0
  1806  000064                     ___llmod@divisor:
  1807                           	opt stack 0
  1808  000064                     ARP_setNewEntry@mac:
  1809                           	opt stack 0
  1810                           
  1811                           ; 6 bytes @ 0x4
  1812  000064                     	ds	1
  1813  000065                     ??_ENC424J600_updateReceiveStatusVector:
  1814  000065                     ??_hexToString:
  1815  000065                     ___lwdiv@quotient:
  1816                           	opt stack 0
  1817                           
  1818                           ; 2 bytes @ 0x5
  1819  000065                     	ds	1
  1820  000066                     mac_cmp@i:
  1821                           	opt stack 0
  1822  000066                     ipv4_cmp@i:
  1823                           	opt stack 0
  1824  000066                     ENC424J600_writeSPI@timeoutCounter:
  1825                           	opt stack 0
  1826  000066                     ENC424J600_readSPI@timeoutCounter:
  1827                           	opt stack 0
  1828                           
  1829                           ; 4 bytes @ 0x6
  1830  000066                     	ds	1
  1831  000067                     ?_ipAdressToString:
  1832                           	opt stack 0
  1833  000067                     ipAdressToString@ip:
  1834                           	opt stack 0
  1835                           
  1836                           ; 4 bytes @ 0x7
  1837  000067                     	ds	1
  1838  000068                     ___llmod@counter:
  1839                           	opt stack 0
  1840  000068                     ___lmul@product:
  1841                           	opt stack 0
  1842                           
  1843                           ; 4 bytes @ 0x8
  1844  000068                     	ds	1
  1845  000069                     hexToString@pointer:
  1846                           	opt stack 0
  1847  000069                     checkForOverlapSwitched@b:
  1848                           	opt stack 0
  1849                           
  1850                           ; 9 bytes @ 0x9
  1851  000069                     	ds	1
  1852  00006A                     ENC424J600_writeSingleByte@opcode:
  1853                           	opt stack 0
  1854  00006A                     ENC424J600_writeControlRegisterUnbanked@data:
  1855                           	opt stack 0
  1856  00006A                     ENC424J600_readControlRegisterUnbanked@data:
  1857                           	opt stack 0
  1858  00006A                     ENC424J600_setGPDATAWritePointer@addr:
  1859                           	opt stack 0
  1860  00006A                     ENC424J600_setERXDATAReadPointer@addr:
  1861                           	opt stack 0
  1862  00006A                     ARP_setNewEntry@ip:
  1863                           	opt stack 0
  1864                           
  1865                           ; 4 bytes @ 0xA
  1866  00006A                     	ds	1
  1867  00006B                     ??_ipAdressToString:
  1868                           
  1869                           ; 1 bytes @ 0xB
  1870  00006B                     	ds	1
  1871  00006C                     ?_rand:
  1872                           	opt stack 0
  1873  00006C                     ?___lldiv:
  1874                           	opt stack 0
  1875  00006C                     ENC424J600_writeControlRegisterUnbanked@addr:
  1876                           	opt stack 0
  1877  00006C                     ENC424J600_readControlRegisterUnbanked@addr:
  1878                           	opt stack 0
  1879  00006C                     ENC424J600_setGPDATAWritePointer@opcode:
  1880                           	opt stack 0
  1881  00006C                     ENC424J600_setERXDATAReadPointer@opcode:
  1882                           	opt stack 0
  1883  00006C                     ___lldiv@dividend:
  1884                           	opt stack 0
  1885  00006C                     ENC424J600_updateReceiveStatusVector@receiveStatusVector:
  1886                           	opt stack 0
  1887                           
  1888                           ; 5 bytes @ 0xC
  1889  00006C                     	ds	1
  1890  00006D                     ENC424J600_writeControlRegisterUnbanked@opcode:
  1891                           	opt stack 0
  1892  00006D                     ENC424J600_readControlRegisterUnbanked@opcode:
  1893                           	opt stack 0
  1894  00006D                     ENC424J600_setGPDATAWritePointer@lowByte:
  1895                           	opt stack 0
  1896  00006D                     ENC424J600_setERXDATAReadPointer@lowByte:
  1897                           	opt stack 0
  1898                           
  1899                           ; 1 bytes @ 0xD
  1900  00006D                     	ds	1
  1901  00006E                     ??_ENC424J600_clearInterruptFlag:
  1902  00006E                     ?_ENC424J600_getInterruptFlags:
  1903                           	opt stack 0
  1904  00006E                     ?___awmod:
  1905                           	opt stack 0
  1906  00006E                     ?_ethernetController_softReset:
  1907                           	opt stack 0
  1908  00006E                     ?_ethernetController_checkDeviceId:
  1909                           	opt stack 0
  1910  00006E                     ?_ethernetController_getMacAddress:
  1911                           	opt stack 0
  1912  00006E                     ethernetController_setLEDConfig@conf:
  1913                           	opt stack 0
  1914  00006E                     ENC424J600_getPacketCount@lowByte:
  1915                           	opt stack 0
  1916  00006E                     ENC424J600_setGPDATAWritePointer@highByte:
  1917                           	opt stack 0
  1918  00006E                     ENC424J600_setERXDATAReadPointer@highByte:
  1919                           	opt stack 0
  1920  00006E                     ENC424J600_enableAutoMACInsertion@temp:
  1921                           	opt stack 0
  1922  00006E                     ENC424J600_readPHYRegister@data:
  1923                           	opt stack 0
  1924  00006E                     ENC424J600_setTXLength@len:
  1925                           	opt stack 0
  1926  00006E                     ENC424J600_setTXStartAddress@addr:
  1927                           	opt stack 0
  1928  00006E                     ENC424J600_setRXBufferStartAddress@addr:
  1929                           	opt stack 0
  1930  00006E                     ENC424J600_setRXTailPointer@addr:
  1931                           	opt stack 0
  1932  00006E                     ___awmod@dividend:
  1933                           	opt stack 0
  1934  00006E                     ARP_setNewEntry@timestamp:
  1935                           	opt stack 0
  1936  00006E                     ipv4_calculateHeaderChecksum@sum:
  1937                           	opt stack 0
  1938                           
  1939                           ; 4 bytes @ 0xE
  1940  00006E                     	ds	1
  1941  00006F                     ??_ethernetController_updateNextPacketPointer:
  1942  00006F                     ?_ethernetController_getEtherTypeField:
  1943                           	opt stack 0
  1944  00006F                     ?_ethernetController_getSourceMACAddress:
  1945                           	opt stack 0
  1946  00006F                     ethernetController_setLEDConfig@LED:
  1947                           	opt stack 0
  1948  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  1949                           	opt stack 0
  1950  00006F                     ipAdressToString@ones:
  1951                           	opt stack 0
  1952  00006F                     ethernetController_writeDestinationMACAddress@addr:
  1953                           	opt stack 0
  1954  00006F                     ethernetController_streamToTransmitBuffer@field:
  1955                           	opt stack 0
  1956  00006F                     ethernetController_getSourceMACAddress@field:
  1957                           	opt stack 0
  1958  00006F                     ethernetController_getEtherTypeField@field:
  1959                           	opt stack 0
  1960                           
  1961                           ; 9 bytes @ 0xF
  1962  00006F                     	ds	1
  1963  000070                     ??_ENC424J600_getInterruptFlags:
  1964  000070                     ??_ENC424J600_readPHYRegister:
  1965  000070                     ethernetController_setLEDConfig@data:
  1966                           	opt stack 0
  1967  000070                     ENC424J600_setTXLength@lowByte:
  1968                           	opt stack 0
  1969  000070                     ENC424J600_setTXStartAddress@lowByte:
  1970                           	opt stack 0
  1971  000070                     ENC424J600_setRXBufferStartAddress@lowByte:
  1972                           	opt stack 0
  1973  000070                     ENC424J600_setRXTailPointer@lowByte:
  1974                           	opt stack 0
  1975  000070                     ENC424J600_clearInterruptFlag@flag:
  1976                           	opt stack 0
  1977  000070                     ___awmod@divisor:
  1978                           	opt stack 0
  1979  000070                     ___lldiv@divisor:
  1980                           	opt stack 0
  1981                           
  1982                           ; 4 bytes @ 0x10
  1983  000070                     	ds	1
  1984  000071                     ??_ethernetController_softReset:
  1985  000071                     ?_ethernetController_getRSV:
  1986                           	opt stack 0
  1987  000071                     ethernetController_checkDeviceId@data:
  1988                           	opt stack 0
  1989  000071                     ENC424J600_setTXLength@highByte:
  1990                           	opt stack 0
  1991  000071                     ENC424J600_setTXStartAddress@highByte:
  1992                           	opt stack 0
  1993  000071                     ENC424J600_setRXBufferStartAddress@highByte:
  1994                           	opt stack 0
  1995  000071                     ENC424J600_setRXTailPointer@highByte:
  1996                           	opt stack 0
  1997  000071                     ENC424J600_clearInterruptFlag@temp:
  1998                           	opt stack 0
  1999  000071                     ethernetController_getRSV@address:
  2000                           	opt stack 0
  2001  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  2002                           	opt stack 0
  2003                           
  2004                           ; 9 bytes @ 0x11
  2005  000071                     	ds	1
  2006  000072                     ethernetController_softReset@comFailCount:
  2007                           	opt stack 0
  2008  000072                     ethernetController_clearInterruptFlag@flag:
  2009                           	opt stack 0
  2010  000072                     ___awmod@counter:
  2011                           	opt stack 0
  2012  000072                     ethernetController_streamFromRXBuffer@startAddress:
  2013                           	opt stack 0
  2014  000072                     ethernetController_dropPacket@frame:
  2015                           	opt stack 0
  2016  000072                     ethernetController_checkDeviceId@err:
  2017                           	opt stack 0
  2018  000072                     ethernetController_sendPacket@field:
  2019                           	opt stack 0
  2020  000072                     checkForOverlap@a:
  2021                           	opt stack 0
  2022                           
  2023                           ; 9 bytes @ 0x12
  2024  000072                     	ds	1
  2025  000073                     ___awmod@sign:
  2026                           	opt stack 0
  2027  000073                     ethernetController_softReset@dataToSend:
  2028                           	opt stack 0
  2029  000073                     ipAdressToString@tens:
  2030                           	opt stack 0
  2031                           
  2032                           ; 4 bytes @ 0x13
  2033  000073                     	ds	1
  2034  000074                     ethernetController_streamFromRXBuffer@startEnd:
  2035                           	opt stack 0
  2036  000074                     ___lldiv@quotient:
  2037                           	opt stack 0
  2038  000074                     ethernetController_getMacAddress@mac:
  2039                           	opt stack 0
  2040                           
  2041                           ; 6 bytes @ 0x14
  2042  000074                     	ds	1
  2043  000075                     ethernetController_streamFromRXBuffer@opcode:
  2044                           	opt stack 0
  2045  000075                     ethernetController_softReset@receivedData:
  2046                           	opt stack 0
  2047  000075                     ethernetController_updateNextPacketPointer@nextPktPointer:
  2048                           	opt stack 0
  2049  000075                     ethernetController_writeDestinationMACAddress@field:
  2050                           	opt stack 0
  2051                           
  2052                           ; 9 bytes @ 0x15
  2053  000075                     	ds	1
  2054  000076                     ethernetController_getRSV@opcode:
  2055                           	opt stack 0
  2056  000076                     ethernetController_streamFromRXBuffer@temp:
  2057                           	opt stack 0
  2058  000076                     ENC424J600_readPHYRegister@addr:
  2059                           	opt stack 0
  2060  000076                     ENC424J600_getInterruptFlags@low:
  2061                           	opt stack 0
  2062  000076                     ARP_setNewEntry@maxSeconds:
  2063                           	opt stack 0
  2064                           
  2065                           ; 4 bytes @ 0x16
  2066  000076                     	ds	1
  2067  000077                     ?_ipv4_parseHeader:
  2068                           	opt stack 0
  2069  000077                     ?_ARP_parseFromRXBuffer:
  2070                           	opt stack 0
  2071  000077                     ethernetController_getRSV@i:
  2072                           	opt stack 0
  2073  000077                     ethernetController_updateNextPacketPointer@opcode:
  2074                           	opt stack 0
  2075  000077                     ENC424J600_readPHYRegister@PHYaddress:
  2076                           	opt stack 0
  2077  000077                     ENC424J600_getInterruptFlags@high:
  2078                           	opt stack 0
  2079  000077                     ARP_parseFromRXBuffer@frame:
  2080                           	opt stack 0
  2081  000077                     ipv4_parseHeader@field:
  2082                           	opt stack 0
  2083  000077                     ethernetController_softReset@err:
  2084                           	opt stack 0
  2085  000077                     ipAdressToString@hundreds:
  2086                           	opt stack 0
  2087                           
  2088                           ; 4 bytes @ 0x17
  2089  000077                     	ds	1
  2090  000078                     ??_ethernetController_streamToTransmitBuffer:
  2091  000078                     ??_ethernetController_getEtherTypeField:
  2092  000078                     ?_ethernetController_pollInterruptFlags:
  2093                           	opt stack 0
  2094  000078                     ethernetController_getSourceMACAddress@opcode:
  2095                           	opt stack 0
  2096  000078                     ethernetController_updateNextPacketPointer@newPointerL:
  2097                           	opt stack 0
  2098  000078                     ENC424J600_readPHYRegister@unusedBits:
  2099                           	opt stack 0
  2100  000078                     ___lldiv@counter:
  2101                           	opt stack 0
  2102                           
  2103                           ; 1 bytes @ 0x18
  2104  000078                     	ds	1
  2105  000079                     ?_intToString:
  2106                           	opt stack 0
  2107  000079                     ethernetController_updateNextPacketPointer@newPointerH:
  2108                           	opt stack 0
  2109  000079                     ENC424J600_readPHYRegister@timeoutCounter:
  2110                           	opt stack 0
  2111  000079                     intToString@val:
  2112                           	opt stack 0
  2113  000079                     ethernetController_getSourceMACAddress@sourceAddress:
  2114                           	opt stack 0
  2115                           
  2116                           ; 6 bytes @ 0x19
  2117  000079                     	ds	1
  2118  00007A                     ??_ethernetController_pollInterruptFlags:
  2119  00007A                     ?_macToString:
  2120                           	opt stack 0
  2121  00007A                     ?_ethernetController_init:
  2122                           	opt stack 0
  2123  00007A                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  2124                           	opt stack 0
  2125  00007A                     ARP_setNewEntry@oldestIndex:
  2126                           	opt stack 0
  2127  00007A                     srand@x:
  2128                           	opt stack 0
  2129  00007A                     macToString@addr:
  2130                           	opt stack 0
  2131                           
  2132                           ; 6 bytes @ 0x1A
  2133  00007A                     	ds	1
  2134  00007B                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  2135                           	opt stack 0
  2136  00007B                     ipAdressToString@pointer:
  2137                           	opt stack 0
  2138  00007B                     ARP_setNewEntry@i:
  2139                           	opt stack 0
  2140  00007B                     ethernetController_pollInterruptFlags@flags:
  2141                           	opt stack 0
  2142  00007B                     checkForOverlap@b:
  2143                           	opt stack 0
  2144                           
  2145                           ; 9 bytes @ 0x1B
  2146  00007B                     	ds	1
  2147  00007C                     ethernetController_streamToTransmitBuffer@data:
  2148                           	opt stack 0
  2149  00007C                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  2150                           	opt stack 0
  2151  00007C                     ipAdressToString@i:
  2152                           	opt stack 0
  2153  00007C                     ethernetController_getEtherTypeField@ethertype:
  2154                           	opt stack 0
  2155  00007C                     ARP_initTable@mac:
  2156                           	opt stack 0
  2157                           
  2158                           ; 6 bytes @ 0x1C
  2159  00007C                     	ds	1
  2160  00007D                     ??_intToString:
  2161  00007D                     ethernetController_streamToTransmitBuffer@opcode:
  2162                           	opt stack 0
  2163  00007D                     ENC424J600_readPHYRegister@lowByte:
  2164                           	opt stack 0
  2165  00007D                     ethernetController_pollInterruptFlags@reg:
  2166                           	opt stack 0
  2167  00007D                     ethernetController_init@err:
  2168                           	opt stack 0
  2169                           
  2170                           ; 3 bytes @ 0x1D
  2171  00007D                     	ds	1
  2172  00007E                     ethernetController_getEtherTypeField@opcode:
  2173                           	opt stack 0
  2174  00007E                     ENC424J600_readPHYRegister@highByte:
  2175                           	opt stack 0
  2176  00007E                     ethernetController_writeDestinationMACAddress@data:
  2177                           	opt stack 0
  2178                           
  2179                           ; 6 bytes @ 0x1E
  2180  00007E                     	ds	1
  2181  00007F                     ethernetController_getSourceMACAddress@temp:
  2182                           	opt stack 0
  2183  00007F                     ethernetController_getEtherTypeField@lowByte:
  2184                           	opt stack 0
  2185  00007F                     ENC424J600_readPHYRegister@temp:
  2186                           	opt stack 0
  2187                           
  2188                           ; 1 bytes @ 0x1F
  2189  00007F                     	ds	1
  2190  000080                     ??_macToString:
  2191  000080                     ethernetController_getSourceMACAddress@i:
  2192                           	opt stack 0
  2193  000080                     ethernetController_getEtherTypeField@highByte:
  2194                           	opt stack 0
  2195  000080                     ethernetController_updateLinkStatus@state:
  2196                           	opt stack 0
  2197                           
  2198                           ; 2 bytes @ 0x20
  2199  000080                     	ds	1
  2200  000081                     macToString@address:
  2201                           	opt stack 0
  2202                           
  2203                           ; 18 bytes @ 0x21
  2204  000081                     	ds	1
  2205  000082                     ethernetController_updateLinkStatus@temp:
  2206                           	opt stack 0
  2207  000082                     ARP_initTable@ip:
  2208                           	opt stack 0
  2209                           
  2210                           ; 4 bytes @ 0x22
  2211  000082                     	ds	1
  2212  000083                     ethernetController_updateLinkStatus@temp16:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x23
  2216  000083                     	ds	1
  2217  000084                     ?_memory_txFrameRequest:
  2218                           	opt stack 0
  2219  000084                     ethernetController_writeDestinationMACAddress@opcode:
  2220                           	opt stack 0
  2221  000084                     memory_txFrameRequest@length:
  2222                           	opt stack 0
  2223                           
  2224                           ; 2 bytes @ 0x24
  2225  000084                     	ds	1
  2226  000085                     ethernetController_writeDestinationMACAddress@i_634:
  2227                           	opt stack 0
  2228                           
  2229                           ; 1 bytes @ 0x25
  2230  000085                     	ds	1
  2231  000086                     ethernetController_writeDestinationMACAddress@i:
  2232                           	opt stack 0
  2233  000086                     ARP_initTable@i:
  2234                           	opt stack 0
  2235                           
  2236                           ; 1 bytes @ 0x26
  2237  000086                     	ds	7
  2238  00008D                     ??_memory_txFrameRequest:
  2239                           
  2240                           ; 1 bytes @ 0x2D
  2241  00008D                     	ds	1
  2242  00008E                     ??_ipv4_parseHeader:
  2243                           
  2244                           ; 1 bytes @ 0x2E
  2245  00008E                     	ds	1
  2246  00008F                     intToString@ones:
  2247                           	opt stack 0
  2248  00008F                     ipv4_parseHeader@i:
  2249                           	opt stack 0
  2250                           
  2251                           ; 1 bytes @ 0x2F
  2252  00008F                     	ds	1
  2253  000090                     intToString@tens:
  2254                           	opt stack 0
  2255  000090                     ipv4_parseHeader@i_3594:
  2256                           	opt stack 0
  2257                           
  2258                           ; 1 bytes @ 0x30
  2259  000090                     	ds	1
  2260  000091                     intToString@hundreds:
  2261                           	opt stack 0
  2262  000091                     ipv4_parseHeader@temp:
  2263                           	opt stack 0
  2264                           
  2265                           ; 1 bytes @ 0x31
  2266  000091                     	ds	1
  2267  000092                     intToString@thousands:
  2268                           	opt stack 0
  2269  000092                     ipv4_parseHeader@ip:
  2270                           	opt stack 0
  2271                           
  2272                           ; 23 bytes @ 0x32
  2273  000092                     	ds	1
  2274  000093                     intToString@tenthousands:
  2275                           	opt stack 0
  2276  000093                     macToString@firstDigit:
  2277                           	opt stack 0
  2278  000093                     _memory_txFrameRequest$1170:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0x33
  2282  000093                     	ds	1
  2283  000094                     intToString@hundredthds:
  2284                           	opt stack 0
  2285  000094                     macToString@secondDigit:
  2286                           	opt stack 0
  2287                           
  2288                           ; 1 bytes @ 0x34
  2289  000094                     	ds	1
  2290  000095                     memory_txFrameRequest@fNoOverlapMarker:
  2291                           	opt stack 0
  2292  000095                     intToString@millions:
  2293                           	opt stack 0
  2294  000095                     macToString@i:
  2295                           	opt stack 0
  2296                           
  2297                           ; 2 bytes @ 0x35
  2298  000095                     	ds	1
  2299  000096                     memory_txFrameRequest@i:
  2300                           	opt stack 0
  2301  000096                     intToString@pointer:
  2302                           	opt stack 0
  2303                           
  2304                           ; 1 bytes @ 0x36
  2305  000096                     	ds	1
  2306  000097                     ??_ARP_parseFromRXBuffer:
  2307  000097                     memory_txFrameRequest@i_1174:
  2308                           	opt stack 0
  2309  000097                     macToString@j:
  2310                           	opt stack 0
  2311                           
  2312                           ; 1 bytes @ 0x37
  2313  000097                     	ds	1
  2314  000098                     UARTTransmitText@str:
  2315                           	opt stack 0
  2316  000098                     memory_txFrameRequest@field:
  2317                           	opt stack 0
  2318                           
  2319                           ; 9 bytes @ 0x38
  2320  000098                     	ds	2
  2321  00009A                     ARP_parseFromRXBuffer@i:
  2322                           	opt stack 0
  2323  00009A                     ipv4_checkHeaderChecksum@header:
  2324                           	opt stack 0
  2325  00009A                     printErrorMessage@err:
  2326                           	opt stack 0
  2327  00009A                     UARTTransmitInt@val:
  2328                           	opt stack 0
  2329  00009A                     printEthernetState@state:
  2330                           	opt stack 0
  2331                           
  2332                           ; 15 bytes @ 0x3A
  2333  00009A                     	ds	1
  2334  00009B                     ARP_parseFromRXBuffer@i_2962:
  2335                           	opt stack 0
  2336                           
  2337                           ; 1 bytes @ 0x3B
  2338  00009B                     	ds	1
  2339  00009C                     ??_ipv4_checkHeaderChecksum:
  2340  00009C                     ARP_parseFromRXBuffer@i_2963:
  2341                           	opt stack 0
  2342                           
  2343                           ; 1 bytes @ 0x3C
  2344  00009C                     	ds	1
  2345  00009D                     ??_printErrorMessage:
  2346  00009D                     ARP_parseFromRXBuffer@i_2964:
  2347                           	opt stack 0
  2348                           
  2349                           ; 1 bytes @ 0x3D
  2350  00009D                     	ds	1
  2351  00009E                     ARP_parseFromRXBuffer@offset:
  2352                           	opt stack 0
  2353  00009E                     ipv4_checkHeaderChecksum@testHeader:
  2354                           	opt stack 0
  2355                           
  2356                           ; 23 bytes @ 0x3E
  2357  00009E                     	ds	2
  2358  0000A0                     ARP_parseFromRXBuffer@arp:
  2359                           	opt stack 0
  2360                           
  2361                           ; 32 bytes @ 0x40
  2362  0000A0                     	ds	1
  2363  0000A1                     memory_txFrameRequest@freeIndex:
  2364                           	opt stack 0
  2365                           
  2366                           ; 1 bytes @ 0x41
  2367  0000A1                     	ds	1
  2368  0000A2                     ethernet_txFrameRequest@frame:
  2369                           	opt stack 0
  2370  0000A2                     ipv4_sendFrame@err:
  2371                           	opt stack 0
  2372                           
  2373                           ; 3 bytes @ 0x42
  2374  0000A2                     	ds	2
  2375  0000A4                     ethernet_txFrameRequest@err:
  2376                           	opt stack 0
  2377                           
  2378                           ; 3 bytes @ 0x44
  2379  0000A4                     	ds	3
  2380  0000A7                     ARP_send@arp:
  2381                           	opt stack 0
  2382                           
  2383                           ; 32 bytes @ 0x47
  2384  0000A7                     	ds	2
  2385  0000A9                     
  2386                           ; 1 bytes @ 0x49
  2387  0000A9                     	ds	12
  2388  0000B5                     ipv4_handleNewPacket@frame:
  2389                           	opt stack 0
  2390                           
  2391                           ; 2 bytes @ 0x55
  2392  0000B5                     	ds	2
  2393  0000B7                     ??_ipv4_handleNewPacket:
  2394                           
  2395                           ; 1 bytes @ 0x57
  2396  0000B7                     	ds	2
  2397  0000B9                     ipv4_handleNewPacket@headerField:
  2398                           	opt stack 0
  2399                           
  2400                           ; 9 bytes @ 0x59
  2401  0000B9                     	ds	9
  2402  0000C2                     ipv4_handleNewPacket@ip:
  2403                           	opt stack 0
  2404                           
  2405                           ; 23 bytes @ 0x62
  2406  0000C2                     	ds	5
  2407  0000C7                     ARP_send@destination:
  2408                           	opt stack 0
  2409                           
  2410                           ; 6 bytes @ 0x67
  2411  0000C7                     	ds	6
  2412  0000CD                     ARP_send@i:
  2413                           	opt stack 0
  2414                           
  2415                           ; 1 bytes @ 0x6D
  2416  0000CD                     	ds	1
  2417  0000CE                     ARP_send@i_3039:
  2418                           	opt stack 0
  2419                           
  2420                           ; 1 bytes @ 0x6E
  2421  0000CE                     	ds	1
  2422  0000CF                     ARP_send@i_3040:
  2423                           	opt stack 0
  2424                           
  2425                           ; 1 bytes @ 0x6F
  2426  0000CF                     	ds	1
  2427  0000D0                     ARP_send@i_3041:
  2428                           	opt stack 0
  2429                           
  2430                           ; 1 bytes @ 0x70
  2431  0000D0                     	ds	1
  2432  0000D1                     ARP_send@ethFrame:
  2433                           	opt stack 0
  2434                           
  2435                           ; 34 bytes @ 0x71
  2436  0000D1                     	ds	34
  2437  0000F3                     ARP_send@field:
  2438                           	opt stack 0
  2439                           
  2440                           ; 9 bytes @ 0x93
  2441  0000F3                     	ds	9
  2442  0000FC                     ARP_handleNewPacket@frame:
  2443                           	opt stack 0
  2444  0000FC                     ARP_probe@ipTarget:
  2445                           	opt stack 0
  2446                           
  2447                           ; 4 bytes @ 0x9C
  2448  0000FC                     	ds	2
  2449  0000FE                     
  2450                           ; 1 bytes @ 0x9E
  2451  0000FE                     	ds	2
  2452  000100                     tblptru	equ	0xFF8
  2453                           tblptrh	equ	0xFF7
  2454                           tblptrl	equ	0xFF6
  2455                           tablat	equ	0xFF5
  2456                           postinc0	equ	0xFEE
  2457                           wreg	equ	0xFE8
  2458                           postdec1	equ	0xFE5
  2459                           fsr1l	equ	0xFE1
  2460                           
  2461                           ; 1 bytes @ 0xA0
  2462                           
  2463                           	psect	cstackCOMRAM
  2464  000001                     __pcstackCOMRAM:
  2465                           	opt stack 0
  2466  000001                     ?i2___lwdiv:
  2467                           	opt stack 0
  2468  000001                     buttonHandler@state:
  2469                           	opt stack 0
  2470  000001                     i2___lwdiv@dividend:
  2471                           	opt stack 0
  2472                           
  2473                           ; 2 bytes @ 0x0
  2474  000001                     	ds	2
  2475  000003                     i2___lwdiv@divisor:
  2476                           	opt stack 0
  2477  000003                     buttonHandler@debounceValue:
  2478                           	opt stack 0
  2479                           
  2480                           ; 4 bytes @ 0x2
  2481  000003                     	ds	2
  2482  000005                     i2___lwdiv@quotient:
  2483                           	opt stack 0
  2484                           
  2485                           ; 2 bytes @ 0x4
  2486  000005                     	ds	2
  2487  000007                     i2___lwdiv@counter:
  2488                           	opt stack 0
  2489                           
  2490                           ; 1 bytes @ 0x6
  2491  000007                     	ds	1
  2492  000008                     parseNumber@numberToDisplay:
  2493                           	opt stack 0
  2494                           
  2495                           ; 2 bytes @ 0x7
  2496  000008                     	ds	2
  2497  00000A                     parseNumber@digit:
  2498                           	opt stack 0
  2499                           
  2500                           ; 1 bytes @ 0x9
  2501  00000A                     	ds	1
  2502  00000B                     ??_parseNumber:
  2503                           
  2504                           ; 1 bytes @ 0xA
  2505  00000B                     	ds	1
  2506  00000C                     parseNumber@ones:
  2507                           	opt stack 0
  2508                           
  2509                           ; 1 bytes @ 0xB
  2510  00000C                     	ds	1
  2511  00000D                     parseNumber@tens:
  2512                           	opt stack 0
  2513                           
  2514                           ; 1 bytes @ 0xC
  2515  00000D                     	ds	1
  2516  00000E                     parseNumber@hundreds:
  2517                           	opt stack 0
  2518                           
  2519                           ; 1 bytes @ 0xD
  2520  00000E                     	ds	1
  2521  00000F                     sevenSegmentUpdate@numberToDisplay:
  2522                           	opt stack 0
  2523                           
  2524                           ; 2 bytes @ 0xE
  2525  00000F                     	ds	2
  2526  000011                     ??_sevenSegmentUpdate:
  2527                           
  2528                           ; 1 bytes @ 0x10
  2529  000011                     	ds	2
  2530  000013                     _sevenSegmentUpdate$2439:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x12
  2534  000013                     	ds	2
  2535  000015                     sevenSegmentUpdate@i:
  2536                           	opt stack 0
  2537                           
  2538                           ; 1 bytes @ 0x14
  2539  000015                     	ds	1
  2540  000016                     ??_ISR:
  2541                           
  2542                           ; 1 bytes @ 0x15
  2543  000016                     	ds	19
  2544                           tblptru	equ	0xFF8
  2545                           tblptrh	equ	0xFF7
  2546                           tblptrl	equ	0xFF6
  2547                           tablat	equ	0xFF5
  2548                           postinc0	equ	0xFEE
  2549                           wreg	equ	0xFE8
  2550                           postdec1	equ	0xFE5
  2551                           fsr1l	equ	0xFE1
  2552                           
  2553 ;;
  2554 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2555 ;;
  2556 ;; *************** function _main *****************
  2557 ;; Defined at:
  2558 ;;		line 33 in file "src/system/main.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;		None
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;  IPdestinatio    4   13[BANK2 ] struct ipv4_address
  2563 ;;  IPsource        4    9[BANK2 ] struct ipv4_address
  2564 ;;  prescaler       4    0[BANK2 ] unsigned long 
  2565 ;;  err             3    6[BANK2 ] struct error
  2566 ;;  oldState        1    0        unsigned char 
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  1    wreg      void 
  2569 ;; Registers used:
  2570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2576 ;;      Params:         0       0       0       0       0       0       0       0       0
  2577 ;;      Locals:         0       0       0      17       0       0       0       0       0
  2578 ;;      Temps:          0       0       2       0       0       0       0       0       0
  2579 ;;      Totals:         0       0       2      17       0       0       0       0       0
  2580 ;;Total ram usage:       19 bytes
  2581 ;; Hardware stack levels required when called:   14
  2582 ;; This function calls:
  2583 ;;		_ARP_initTable
  2584 ;;		_UARTInit
  2585 ;;		_UARTTransmitText
  2586 ;;		_ethernetController_checkDeviceId
  2587 ;;		_ethernetController_getCurrentPacketCount
  2588 ;;		_ethernetController_getDeviceName
  2589 ;;		_ethernetController_getMacAddress
  2590 ;;		_ethernetController_init
  2591 ;;		_ethernetController_setLEDConfig
  2592 ;;		_handleStackBackgroundTasks
  2593 ;;		_macToString
  2594 ;;		_printErrorMessage
  2595 ;;		_printEthernetState
  2596 ;;		_sevenSegmentInit
  2597 ;;		_srand
  2598 ;; This function is called by:
  2599 ;;		Startup code after reset
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text0
  2604  001D68                     __ptext0:
  2605                           	opt stack 0
  2606  001D68                     _main:
  2607                           	opt stack 17
  2608                           
  2609                           ;main.c: 36: OSCCONbits.SCS = 0b00;
  2610                           
  2611                           ;incstack = 0
  2612  001D68  0EFC               	movlw	-4
  2613  001D6A  16D3               	andwf	4051,f,c	;volatile
  2614                           
  2615                           ;main.c: 37: OSCCONbits.IRCF = 0b1110;
  2616  001D6C  50D3               	movf	4051,w,c	;volatile
  2617  001D6E  0B8F               	andlw	-113
  2618  001D70  0960               	iorlw	96
  2619  001D72  6ED3               	movwf	4051,c	;volatile
  2620                           
  2621                           ;main.c: 38: OSCCON2bits.PLLEN = 0b1;
  2622  001D74  88D2               	bsf	4050,4,c	;volatile
  2623                           
  2624                           ;main.c: 41: INTCONbits.GIE = 0;
  2625  001D76  9EF2               	bcf	intcon,7,c	;volatile
  2626                           
  2627                           ;main.c: 42: INTCONbits.TMR0IE = 1;
  2628  001D78  8AF2               	bsf	intcon,5,c	;volatile
  2629                           
  2630                           ;main.c: 43: INTCON3bits.INT2IE = 1;
  2631  001D7A  88F0               	bsf	intcon3,4,c	;volatile
  2632                           
  2633                           ;main.c: 44: RCIP = 0;
  2634  001D7C  9A9F               	bcf	3999,5,c	;volatile
  2635                           
  2636                           ;main.c: 45: RCIE = 1;
  2637  001D7E  8A9D               	bsf	3997,5,c	;volatile
  2638                           
  2639                           ;main.c: 46: INTCONbits.PEIE = 1;
  2640  001D80  8CF2               	bsf	intcon,6,c	;volatile
  2641                           
  2642                           ;main.c: 50: T0CONbits.TMR0ON = 1;
  2643  001D82  8ED5               	bsf	4053,7,c	;volatile
  2644                           
  2645                           ;main.c: 51: T0CONbits.T08BIT = 1;
  2646  001D84  8CD5               	bsf	4053,6,c	;volatile
  2647                           
  2648                           ;main.c: 52: T0CONbits.T0CS = 0;
  2649  001D86  9AD5               	bcf	4053,5,c	;volatile
  2650                           
  2651                           ;main.c: 53: T0CONbits.PSA = 0;
  2652  001D88  96D5               	bcf	4053,3,c	;volatile
  2653                           
  2654                           ;main.c: 54: T0CONbits.T0PS = 0b101;
  2655  001D8A  50D5               	movf	4053,w,c	;volatile
  2656  001D8C  0BF8               	andlw	-8
  2657  001D8E  0905               	iorlw	5
  2658  001D90  6ED5               	movwf	4053,c	;volatile
  2659                           
  2660                           ;main.c: 58: T1CONbits.TMR1ON = 1;
  2661  001D92  80CD               	bsf	4045,0,c	;volatile
  2662                           
  2663                           ;main.c: 59: CCP1CONbits.CCP1M = 0b1011;
  2664  001D94  50BD               	movf	4029,w,c	;volatile
  2665  001D96  0BF0               	andlw	-16
  2666  001D98  090B               	iorlw	11
  2667  001D9A  6EBD               	movwf	4029,c	;volatile
  2668                           
  2669                           ;main.c: 60: CCPR1 = 8000;
  2670  001D9C  0E1F               	movlw	31
  2671  001D9E  6EBF               	movwf	4031,c	;volatile
  2672  001DA0  0E40               	movlw	64
  2673  001DA2  6EBE               	movwf	4030,c	;volatile
  2674                           
  2675                           ;main.c: 61: PIE1bits.CCP1IE = 1;
  2676  001DA4  849D               	bsf	3997,2,c	;volatile
  2677                           
  2678                           ;main.c: 62: INTCONbits.PEIE = 1;
  2679  001DA6  8CF2               	bsf	intcon,6,c	;volatile
  2680                           
  2681                           ;main.c: 64: TRISBbits.RB6 = 0;
  2682  001DA8  9C93               	bcf	3987,6,c	;volatile
  2683                           
  2684                           ;main.c: 67: UARTInit();
  2685  001DAA  EC55  F026         	call	_UARTInit	;wreg free
  2686                           
  2687                           ;main.c: 68: sevenSegmentInit();
  2688  001DAE  EC14  F026         	call	_sevenSegmentInit	;wreg free
  2689                           
  2690                           ;main.c: 69: _delay((unsigned long)((10)*(32000000UL/4000.0)));
  2691  001DB2  0E68               	movlw	104
  2692  001DB4  0101               	movlb	1	; () banked
  2693  001DB6  6F8A               	movwf	??_main& (0+255),b
  2694  001DB8  0EE4               	movlw	228
  2695  001DBA                     u11617:
  2696  001DBA  2EE8               	decfsz	wreg,f,c
  2697  001DBC  D7FE               	bra	u11617
  2698  001DBE  2F8A               	decfsz	??_main& (0+255),f,b
  2699  001DC0  D7FC               	bra	u11617
  2700  001DC2  F000               	nop	
  2701                           
  2702                           ;main.c: 70: UARTTransmitText("\x12");
  2703  001DC4  0EFC               	movlw	low STR_23
  2704  001DC6  0100               	movlb	0	; () banked
  2705  001DC8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2706  001DCA  0E7F               	movlw	high STR_23
  2707  001DCC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2708  001DCE  EC34  F022         	call	_UARTTransmitText	;wreg free
  2709                           
  2710                           ;main.c: 71: if (!RCONbits.TO) {
  2711  001DD2  B6D0               	btfsc	4048,3,c	;volatile
  2712  001DD4  D015               	goto	l624
  2713                           
  2714                           ;main.c: 72: UARTTransmitText("------------------------------------------------\n\r");
  2715  001DD6  0EA3               	movlw	low STR_24
  2716  001DD8  0100               	movlb	0	; () banked
  2717  001DDA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2718  001DDC  0E7C               	movlw	high STR_24
  2719  001DDE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2720  001DE0  EC34  F022         	call	_UARTTransmitText	;wreg free
  2721                           
  2722                           ;main.c: 73: UARTTransmitText("\a*** CRITICAL ERROR: WATCHDOG CAUSED RESET ***\n\r");
  2723  001DE4  0ED6               	movlw	low STR_25
  2724  001DE6  0100               	movlb	0	; () banked
  2725  001DE8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2726  001DEA  0E7C               	movlw	high STR_25
  2727  001DEC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2728  001DEE  EC34  F022         	call	_UARTTransmitText	;wreg free
  2729                           
  2730                           ;main.c: 74: UARTTransmitText("------------------------------------------------\n\r");
  2731  001DF2  0EA3               	movlw	low STR_24
  2732  001DF4  0100               	movlb	0	; () banked
  2733  001DF6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2734  001DF8  0E7C               	movlw	high STR_24
  2735  001DFA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2736  001DFC  EC34  F022         	call	_UARTTransmitText	;wreg free
  2737  001E00                     l624:
  2738                           
  2739                           ;main.c: 75: }
  2740                           ;main.c: 76: UARTTransmitText("FIRMWARE BUILD DATE IS ");
  2741  001E00  0E05               	movlw	low STR_27
  2742  001E02  0100               	movlb	0	; () banked
  2743  001E04  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2744  001E06  0E7E               	movlw	high STR_27
  2745  001E08  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2746  001E0A  EC34  F022         	call	_UARTTransmitText	;wreg free
  2747                           
  2748                           ;main.c: 77: UARTTransmitText("Mar 12 2019");
  2749  001E0E  0E52               	movlw	low STR_28
  2750  001E10  0100               	movlb	0	; () banked
  2751  001E12  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2752  001E14  0E7F               	movlw	high STR_28
  2753  001E16  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2754  001E18  EC34  F022         	call	_UARTTransmitText	;wreg free
  2755                           
  2756                           ;main.c: 78: UARTTransmitText(" ");
  2757  001E1C  0E46               	movlw	low (STR_40+18)
  2758  001E1E  0100               	movlb	0	; () banked
  2759  001E20  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2760  001E22  0E7E               	movlw	high (STR_40+18)
  2761  001E24  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2762  001E26  EC34  F022         	call	_UARTTransmitText	;wreg free
  2763                           
  2764                           ;main.c: 79: UARTTransmitText("22:43:55");
  2765  001E2A  0E92               	movlw	low STR_30
  2766  001E2C  0100               	movlb	0	; () banked
  2767  001E2E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2768  001E30  0E7F               	movlw	high STR_30
  2769  001E32  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2770  001E34  EC34  F022         	call	_UARTTransmitText	;wreg free
  2771                           
  2772                           ;main.c: 80: UARTTransmitText(".\n\r");
  2773  001E38  0EDB               	movlw	low (STR_54+1)
  2774  001E3A  0100               	movlb	0	; () banked
  2775  001E3C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2776  001E3E  0E7F               	movlw	high (STR_54+1)
  2777  001E40  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2778  001E42  EC34  F022         	call	_UARTTransmitText	;wreg free
  2779                           
  2780                           ;main.c: 81: error_t err;
  2781                           ;main.c: 82: err = ethernetController_init();
  2782  001E46  EC66  F020         	call	_ethernetController_init	;wreg free
  2783  001E4A  C07A  F2E5         	movff	?_ethernetController_init,main@err
  2784  001E4E  C07B  F2E6         	movff	?_ethernetController_init+1,main@err+1
  2785  001E52  C07C  F2E7         	movff	?_ethernetController_init+2,main@err+2
  2786                           
  2787                           ;main.c: 83: if (err.code != (uint16_t)0)
  2788  001E56  0102               	movlb	2	; () banked
  2789  001E58  51E6               	movf	(main@err+1)& (0+255),w,b
  2790  001E5A  11E7               	iorwf	(main@err+2)& (0+255),w,b
  2791  001E5C  B4D8               	btfsc	status,2,c
  2792  001E5E  D008               	goto	l625
  2793                           
  2794                           ; BSR set to: 2
  2795                           ;main.c: 84: printErrorMessage(err);
  2796  001E60  C2E5  F09A         	movff	main@err,printErrorMessage@err
  2797  001E64  C2E6  F09B         	movff	main@err+1,printErrorMessage@err+1
  2798  001E68  C2E7  F09C         	movff	main@err+2,printErrorMessage@err+2
  2799  001E6C  EC65  F016         	call	_printErrorMessage	;wreg free
  2800  001E70                     l625:
  2801                           
  2802                           ;main.c: 85: err = ethernetController_checkDeviceId();
  2803  001E70  ECD9  F022         	call	_ethernetController_checkDeviceId	;wreg free
  2804  001E74  C06E  F2E5         	movff	?_ethernetController_checkDeviceId,main@err
  2805  001E78  C06F  F2E6         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  2806  001E7C  C070  F2E7         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  2807                           
  2808                           ;main.c: 86: if (err.code == (uint16_t)0) {
  2809  001E80  0102               	movlb	2	; () banked
  2810  001E82  51E6               	movf	(main@err+1)& (0+255),w,b
  2811  001E84  11E7               	iorwf	(main@err+2)& (0+255),w,b
  2812  001E86  A4D8               	btfss	status,2,c
  2813  001E88  D00F               	goto	l626
  2814                           
  2815                           ; BSR set to: 2
  2816                           ;main.c: 87: UARTTransmitText(ethernetController_getDeviceName());
  2817  001E8A  ECA7  F025         	call	_ethernetController_getDeviceName	;wreg free
  2818  001E8E  C060  F098         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  2819  001E92  C061  F099         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  2820  001E96  EC34  F022         	call	_UARTTransmitText	;wreg free
  2821                           
  2822                           ;main.c: 88: UARTTransmitText(" detected. ");
  2823  001E9A  0E46               	movlw	low STR_32
  2824  001E9C  0100               	movlb	0	; () banked
  2825  001E9E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2826  001EA0  0E7F               	movlw	high STR_32
  2827  001EA2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2828  001EA4  EC34  F022         	call	_UARTTransmitText	;wreg free
  2829  001EA8                     l626:
  2830                           
  2831                           ;main.c: 89: }
  2832                           ;main.c: 90: UARTTransmitText("Source MAC address is ");
  2833  001EA8  0E1D               	movlw	low STR_33
  2834  001EAA  0100               	movlb	0	; () banked
  2835  001EAC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2836  001EAE  0E7E               	movlw	high STR_33
  2837  001EB0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2838  001EB2  EC34  F022         	call	_UARTTransmitText	;wreg free
  2839                           
  2840                           ;main.c: 91: UARTTransmitText(macToString(ethernetController_getMacAddress()));
  2841  001EB6  ECF3  F01F         	call	_ethernetController_getMacAddress	;wreg free
  2842  001EBA  CFE9 FFD9          	movff	fsr0l,fsr2l
  2843  001EBE  CFEA FFDA          	movff	fsr0h,fsr2h
  2844  001EC2  EE00  F07A         	lfsr	0,macToString@addr
  2845  001EC6  0E05               	movlw	5
  2846  001EC8                     u11491:
  2847  001EC8  CFDB FFEB          	movff	plusw2,plusw0
  2848  001ECC  06E8               	decf	wreg,f,c
  2849  001ECE  E2FC               	bc	u11491
  2850  001ED0  ECA5  F018         	call	_macToString	;wreg free
  2851  001ED4  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  2852  001ED8  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  2853  001EDC  EC34  F022         	call	_UARTTransmitText	;wreg free
  2854                           
  2855                           ;main.c: 92: UARTTransmitText(".\n\r");
  2856  001EE0  0EDB               	movlw	low (STR_54+1)
  2857  001EE2  0100               	movlb	0	; () banked
  2858  001EE4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2859  001EE6  0E7F               	movlw	high (STR_54+1)
  2860  001EE8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2861  001EEA  EC34  F022         	call	_UARTTransmitText	;wreg free
  2862                           
  2863                           ;main.c: 93: UARTTransmitText("------------------------------------------------\n\r");
  2864  001EEE  0EA3               	movlw	low STR_24
  2865  001EF0  0100               	movlb	0	; () banked
  2866  001EF2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2867  001EF4  0E7C               	movlw	high STR_24
  2868  001EF6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2869  001EF8  EC34  F022         	call	_UARTTransmitText	;wreg free
  2870                           
  2871                           ;main.c: 95: ARP_initTable();
  2872  001EFC  EC78  F021         	call	_ARP_initTable	;wreg free
  2873                           
  2874                           ;main.c: 97: ethernetController_setLEDConfig(LEDA, LED_ON);
  2875  001F00  0E00               	movlw	0
  2876  001F02  0100               	movlb	0	; () banked
  2877  001F04  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  2878  001F06  0E00               	movlw	0
  2879  001F08  EC6F  F01D         	call	_ethernetController_setLEDConfig
  2880                           
  2881                           ;main.c: 98: ethernetController_setLEDConfig(LEDA, LED_ON);
  2882  001F0C  0E00               	movlw	0
  2883  001F0E  0100               	movlb	0	; () banked
  2884  001F10  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  2885  001F12  0E00               	movlw	0
  2886  001F14  EC6F  F01D         	call	_ethernetController_setLEDConfig
  2887                           
  2888                           ;main.c: 99: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  2889  001F18  0E15               	movlw	21
  2890  001F1A  0101               	movlb	1	; () banked
  2891  001F1C  6F8B               	movwf	(??_main+1)& (0+255),b
  2892  001F1E  0E4B               	movlw	75
  2893  001F20  6F8A               	movwf	??_main& (0+255),b
  2894  001F22  0EBE               	movlw	190
  2895  001F24                     u11627:
  2896  001F24  2EE8               	decfsz	wreg,f,c
  2897  001F26  D7FE               	bra	u11627
  2898  001F28  2F8A               	decfsz	??_main& (0+255),f,b
  2899  001F2A  D7FC               	bra	u11627
  2900  001F2C  2F8B               	decfsz	(??_main+1)& (0+255),f,b
  2901  001F2E  D7FA               	bra	u11627
  2902  001F30  F000               	nop	
  2903                           
  2904                           ;main.c: 101: ethernetController_setLEDConfig(LEDA, LED_OFF);
  2905  001F32  0E01               	movlw	1
  2906  001F34  0100               	movlb	0	; () banked
  2907  001F36  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  2908  001F38  0E00               	movlw	0
  2909  001F3A  EC6F  F01D         	call	_ethernetController_setLEDConfig
  2910                           
  2911                           ;main.c: 102: ethernetController_setLEDConfig(LEDA, LED_OFF);
  2912  001F3E  0E01               	movlw	1
  2913  001F40  0100               	movlb	0	; () banked
  2914  001F42  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  2915  001F44  0E00               	movlw	0
  2916  001F46  EC6F  F01D         	call	_ethernetController_setLEDConfig
  2917                           
  2918                           ;main.c: 105: uint32_t prescaler = 0;
  2919  001F4A  0E00               	movlw	0
  2920  001F4C  0102               	movlb	2	; () banked
  2921  001F4E  6FDF               	movwf	main@prescaler& (0+255),b
  2922  001F50  0E00               	movlw	0
  2923  001F52  6FE0               	movwf	(main@prescaler+1)& (0+255),b
  2924  001F54  0E00               	movlw	0
  2925  001F56  6FE1               	movwf	(main@prescaler+2)& (0+255),b
  2926  001F58  0E00               	movlw	0
  2927  001F5A  6FE2               	movwf	(main@prescaler+3)& (0+255),b
  2928                           
  2929                           ; BSR set to: 2
  2930                           ;main.c: 107: ANSELB &= ~(1<<5);
  2931  001F5C  010F               	movlb	15	; () banked
  2932  001F5E  9B5C               	bcf	92,5,b	;volatile
  2933                           
  2934                           ; BSR set to: 15
  2935                           ;main.c: 108: TRISB |= (1<<5);
  2936  001F60  8A93               	bsf	3987,5,c	;volatile
  2937                           
  2938                           ; BSR set to: 15
  2939                           ;main.c: 110: uint8_t oldState;
  2940                           ;main.c: 112: ipv4_address_t IPsource;
  2941                           ;main.c: 113: IPsource.address[0] = 192;
  2942  001F62  0EC0               	movlw	192
  2943  001F64  0102               	movlb	2	; () banked
  2944  001F66  6FE8               	movwf	main@IPsource& (0+255),b
  2945                           
  2946                           ; BSR set to: 2
  2947                           ;main.c: 114: IPsource.address[1] = 168;
  2948  001F68  0EA8               	movlw	168
  2949  001F6A  6FE9               	movwf	(main@IPsource+1)& (0+255),b
  2950                           
  2951                           ; BSR set to: 2
  2952                           ;main.c: 115: IPsource.address[2] = 0;
  2953  001F6C  0E00               	movlw	0
  2954  001F6E  6FEA               	movwf	(main@IPsource+2)& (0+255),b
  2955                           
  2956                           ; BSR set to: 2
  2957                           ;main.c: 116: IPsource.address[3] = 4;
  2958  001F70  0E04               	movlw	4
  2959  001F72  6FEB               	movwf	(main@IPsource+3)& (0+255),b
  2960                           
  2961                           ; BSR set to: 2
  2962                           ;main.c: 118: ipv4_address_t IPdestination;
  2963                           ;main.c: 119: IPdestination.address[0] = 192;
  2964  001F74  0EC0               	movlw	192
  2965  001F76  6FEC               	movwf	main@IPdestination& (0+255),b
  2966                           
  2967                           ; BSR set to: 2
  2968                           ;main.c: 120: IPdestination.address[1] = 168;
  2969  001F78  0EA8               	movlw	168
  2970  001F7A  6FED               	movwf	(main@IPdestination+1)& (0+255),b
  2971                           
  2972                           ; BSR set to: 2
  2973                           ;main.c: 121: IPdestination.address[2] = 0;
  2974  001F7C  0E00               	movlw	0
  2975  001F7E  6FEE               	movwf	(main@IPdestination+2)& (0+255),b
  2976                           
  2977                           ; BSR set to: 2
  2978                           ;main.c: 122: IPdestination.address[3] = 5;
  2979  001F80  0E05               	movlw	5
  2980  001F82  6FEF               	movwf	(main@IPdestination+3)& (0+255),b
  2981                           
  2982                           ; BSR set to: 2
  2983                           ;main.c: 125: INTCONbits.GIE = 1;
  2984  001F84  8EF2               	bsf	intcon,7,c	;volatile
  2985                           
  2986                           ; BSR set to: 2
  2987                           ;main.c: 126: INTCONbits.PEIE = 1;
  2988  001F86  8CF2               	bsf	intcon,6,c	;volatile
  2989                           
  2990                           ; BSR set to: 2
  2991                           ;main.c: 130: srand(ethernetController_getMacAddress().address[5]);
  2992  001F88  ECF3  F01F         	call	_ethernetController_getMacAddress	;wreg free
  2993  001F8C  0E05               	movlw	5
  2994  001F8E  26E9               	addwf	fsr0l,f,c
  2995  001F90  0E00               	movlw	0
  2996  001F92  22EA               	addwfc	fsr0h,f,c
  2997  001F94  50EF               	movf	indf0,w,c
  2998  001F96  0101               	movlb	1	; () banked
  2999  001F98  6F8A               	movwf	??_main& (0+255),b
  3000  001F9A  518A               	movf	??_main& (0+255),w,b
  3001  001F9C  0100               	movlb	0	; () banked
  3002  001F9E  6F7A               	movwf	srand@x& (0+255),b
  3003  001FA0  6B7B               	clrf	(srand@x+1)& (0+255),b
  3004  001FA2  EC5D  F026         	call	_srand	;wreg free
  3005  001FA6                     l627:
  3006  001FA6  0004               	clrwdt		;# 
  3007                           
  3008                           ;main.c: 136: handleStackBackgroundTasks(&stack);
  3009  001FA8  0E00               	movlw	low _stack
  3010  001FAA  0101               	movlb	1	; () banked
  3011  001FAC  6F86               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  3012  001FAE  0E03               	movlw	high _stack
  3013  001FB0  6F87               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  3014  001FB2  EC37  F011         	call	_handleStackBackgroundTasks	;wreg free
  3015                           
  3016                           ;main.c: 138: printEthernetState(stack.ethernet);
  3017  001FB6  EE23  F000         	lfsr	2,_stack	;volatile
  3018  001FBA  EE00  F09A         	lfsr	0,printEthernetState@state
  3019  001FBE  0E0E               	movlw	14
  3020  001FC0                     u11501:
  3021  001FC0  CFDB FFEB          	movff	plusw2,plusw0
  3022  001FC4  06E8               	decf	wreg,f,c
  3023  001FC6  E2FC               	bc	u11501
  3024  001FC8  EC84  F01C         	call	_printEthernetState	;wreg free
  3025                           
  3026                           ;main.c: 139: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000 : ethernetContro
      +                          ller_getCurrentPacketCount();
  3027  001FCC  0103               	movlb	3	; () banked
  3028  001FCE  5100               	movf	_stack& (0+255),w,b	;volatile
  3029  001FD0  B4D8               	btfsc	status,2,c
  3030  001FD2  D009               	goto	l629
  3031                           
  3032                           ; BSR set to: 3
  3033  001FD4  EC8A  F026         	call	_ethernetController_getCurrentPacketCount	;wreg free
  3034  001FD8  0101               	movlb	1	; () banked
  3035  001FDA  6F8A               	movwf	??_main& (0+255),b
  3036  001FDC  518A               	movf	??_main& (0+255),w,b
  3037  001FDE  0102               	movlb	2	; () banked
  3038  001FE0  6FE3               	movwf	_main$2355& (0+255),b
  3039  001FE2  6BE4               	clrf	(_main$2355+1)& (0+255),b
  3040  001FE4  D005               	goto	l631
  3041  001FE6                     l629:
  3042                           
  3043                           ; BSR set to: 2
  3044  001FE6  0E03               	movlw	3
  3045  001FE8  0102               	movlb	2	; () banked
  3046  001FEA  6FE4               	movwf	(_main$2355+1)& (0+255),b
  3047  001FEC  0EE8               	movlw	232
  3048  001FEE  6FE3               	movwf	_main$2355& (0+255),b
  3049  001FF0                     l631:
  3050                           
  3051                           ; BSR set to: 2
  3052                           
  3053                           ; BSR set to: 2
  3054  001FF0  C2E3  F035         	movff	_main$2355,_numberToDisplay	;volatile
  3055  001FF4  C2E4  F036         	movff	_main$2355+1,_numberToDisplay+1	;volatile
  3056  001FF8  0E00               	movlw	0
  3057  001FFA  BE36               	btfsc	_numberToDisplay+1,7,c	;volatile
  3058  001FFC  0EFF               	movlw	-1
  3059  001FFE  6E37               	movwf	_numberToDisplay+2,c	;volatile
  3060  002000  6E38               	movwf	_numberToDisplay+3,c	;volatile
  3061                           
  3062                           ; BSR set to: 2
  3063                           ;main.c: 141: if (buttonState) {
  3064  002002  0101               	movlb	1	; () banked
  3065  002004  51F3               	movf	_buttonState& (0+255),w,b	;volatile
  3066  002006  B4D8               	btfsc	status,2,c
  3067  002008  D7CE               	goto	l627
  3068                           
  3069                           ; BSR set to: 1
  3070                           ;main.c: 142: buttonState = 0;
  3071  00200A  0E00               	movlw	0
  3072  00200C  6FF3               	movwf	_buttonState& (0+255),b	;volatile
  3073                           
  3074                           ; BSR set to: 1
  3075                           ;main.c: 144: UARTTransmitText("Setting IPv4 Address...\n\r");
  3076  00200E  0EEB               	movlw	low STR_36
  3077  002010  0100               	movlb	0	; () banked
  3078  002012  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3079  002014  0E7D               	movlw	high STR_36
  3080  002016  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3081  002018  EC34  F022         	call	_UARTTransmitText	;wreg free
  3082                           
  3083                           ;main.c: 145: stack.background.fSetSourceAddr = 1;
  3084  00201C  0E01               	movlw	1
  3085  00201E  0103               	movlb	3	; () banked
  3086  002020  6F15               	movwf	(_stack+21)& (0+255),b	;volatile
  3087                           
  3088                           ; BSR set to: 3
  3089                           
  3090                           ; BSR set to: 3
  3091  002022  D7C1               	goto	l627
  3092  002024                     __end_of_main:
  3093                           	opt stack 0
  3094                           tblptru	equ	0xFF8
  3095                           tblptrh	equ	0xFF7
  3096                           tblptrl	equ	0xFF6
  3097                           tablat	equ	0xFF5
  3098                           intcon	equ	0xFF2
  3099                           intcon3	equ	0xFF0
  3100                           indf0	equ	0xFEF
  3101                           postinc0	equ	0xFEE
  3102                           plusw0	equ	0xFEB
  3103                           fsr0h	equ	0xFEA
  3104                           fsr0l	equ	0xFE9
  3105                           wreg	equ	0xFE8
  3106                           postdec1	equ	0xFE5
  3107                           fsr1l	equ	0xFE1
  3108                           plusw2	equ	0xFDB
  3109                           fsr2h	equ	0xFDA
  3110                           fsr2l	equ	0xFD9
  3111                           status	equ	0xFD8
  3112                           
  3113 ;; *************** function _srand *****************
  3114 ;; Defined at:
  3115 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;  x               2   26[BANK0 ] unsigned int 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;		None
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  1    wreg      void 
  3122 ;; Registers used:
  3123 ;;		status,2
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3129 ;;      Params:         0       2       0       0       0       0       0       0       0
  3130 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3131 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3132 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3133 ;;Total ram usage:        2 bytes
  3134 ;; Hardware stack levels used:    1
  3135 ;; Hardware stack levels required when called:    4
  3136 ;; This function calls:
  3137 ;;		Nothing
  3138 ;; This function is called by:
  3139 ;;		_main
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           	psect	text1
  3144  004CBA                     __ptext1:
  3145                           	opt stack 0
  3146  004CBA                     _srand:
  3147                           	opt stack 26
  3148                           
  3149                           ; BSR set to: 3
  3150                           ;incstack = 0
  3151  004CBA  C07A  F04B         	movff	srand@x,_randx
  3152  004CBE  C07B  F04C         	movff	srand@x+1,_randx+1
  3153  004CC2  6A4D               	clrf	_randx+2,c
  3154  004CC4  6A4E               	clrf	_randx+3,c
  3155  004CC6  0012               	return		;funcret
  3156  004CC8                     __end_of_srand:
  3157                           	opt stack 0
  3158                           tblptru	equ	0xFF8
  3159                           tblptrh	equ	0xFF7
  3160                           tblptrl	equ	0xFF6
  3161                           tablat	equ	0xFF5
  3162                           intcon	equ	0xFF2
  3163                           intcon3	equ	0xFF0
  3164                           indf0	equ	0xFEF
  3165                           postinc0	equ	0xFEE
  3166                           plusw0	equ	0xFEB
  3167                           fsr0h	equ	0xFEA
  3168                           fsr0l	equ	0xFE9
  3169                           wreg	equ	0xFE8
  3170                           postdec1	equ	0xFE5
  3171                           fsr1l	equ	0xFE1
  3172                           plusw2	equ	0xFDB
  3173                           fsr2h	equ	0xFDA
  3174                           fsr2l	equ	0xFD9
  3175                           status	equ	0xFD8
  3176                           
  3177 ;; *************** function _sevenSegmentInit *****************
  3178 ;; Defined at:
  3179 ;;		line 28 in file "src/system/sevenseg.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;		None
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;		None
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      void 
  3186 ;; Registers used:
  3187 ;;		wreg, status,2, status,0
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3193 ;;      Params:         0       0       0       0       0       0       0       0       0
  3194 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3195 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3196 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3197 ;;Total ram usage:        0 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    4
  3200 ;; This function calls:
  3201 ;;		Nothing
  3202 ;; This function is called by:
  3203 ;;		_main
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           	psect	text2
  3208  004C28                     __ptext2:
  3209                           	opt stack 0
  3210  004C28                     _sevenSegmentInit:
  3211                           	opt stack 26
  3212                           
  3213                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  3214                           
  3215                           ;incstack = 0
  3216  004C28  0EF8               	movlw	248
  3217  004C2A  1682               	andwf	3970,f,c	;volatile
  3218                           
  3219                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  3220  004C2C  0EF8               	movlw	248
  3221  004C2E  1694               	andwf	3988,f,c	;volatile
  3222                           
  3223                           ;sevenseg.c: 33: TRISA &=~0xff;;
  3224  004C30  0E00               	movlw	0
  3225  004C32  6E92               	movwf	3986,c	;volatile
  3226                           
  3227                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  3228  004C34  0E00               	movlw	0
  3229  004C36  010F               	movlb	15	; () banked
  3230  004C38  6F5B               	movwf	91,b	;volatile
  3231                           
  3232                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  3233  004C3A  0EF8               	movlw	248
  3234  004C3C  175D               	andwf	93,f,b	;volatile
  3235                           
  3236                           ; BSR set to: 15
  3237                           ;sevenseg.c: 38: PORTA = 0xff;
  3238  004C3E  6880               	setf	3968,c	;volatile
  3239                           
  3240                           ; BSR set to: 15
  3241  004C40  0012               	return		;funcret
  3242  004C42                     __end_of_sevenSegmentInit:
  3243                           	opt stack 0
  3244                           tblptru	equ	0xFF8
  3245                           tblptrh	equ	0xFF7
  3246                           tblptrl	equ	0xFF6
  3247                           tablat	equ	0xFF5
  3248                           intcon	equ	0xFF2
  3249                           intcon3	equ	0xFF0
  3250                           indf0	equ	0xFEF
  3251                           postinc0	equ	0xFEE
  3252                           plusw0	equ	0xFEB
  3253                           fsr0h	equ	0xFEA
  3254                           fsr0l	equ	0xFE9
  3255                           wreg	equ	0xFE8
  3256                           postdec1	equ	0xFE5
  3257                           fsr1l	equ	0xFE1
  3258                           plusw2	equ	0xFDB
  3259                           fsr2h	equ	0xFDA
  3260                           fsr2l	equ	0xFD9
  3261                           status	equ	0xFD8
  3262                           
  3263 ;; *************** function _printEthernetState *****************
  3264 ;; Defined at:
  3265 ;;		line 179 in file "src/system/main.c"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;  state          15   58[BANK0 ] struct ethernetConnectio
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;		None
  3270 ;; Return value:  Size  Location     Type
  3271 ;;                  1    wreg      void 
  3272 ;; Registers used:
  3273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3279 ;;      Params:         0      15       0       0       0       0       0       0       0
  3280 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3281 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3282 ;;      Totals:         0      15       0       0       0       0       0       0       0
  3283 ;;Total ram usage:       15 bytes
  3284 ;; Hardware stack levels used:    1
  3285 ;; Hardware stack levels required when called:    5
  3286 ;; This function calls:
  3287 ;;		_UARTTransmitText
  3288 ;; This function is called by:
  3289 ;;		_main
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           	psect	text3
  3294  003908                     __ptext3:
  3295                           	opt stack 0
  3296  003908                     _printEthernetState:
  3297                           	opt stack 25
  3298                           
  3299                           ;main.c: 180: static ethernetConnection_t oldState;
  3300                           ;main.c: 181: if (state.link != oldState.link) {
  3301                           
  3302                           ; BSR set to: 15
  3303                           ;incstack = 0
  3304  003908  0102               	movlb	2	; () banked
  3305  00390A  5100               	movf	printEthernetState@oldState& (0+255),w,b
  3306  00390C  0100               	movlb	0	; () banked
  3307  00390E  199A               	xorwf	printEthernetState@state& (0+255),w,b
  3308  003910  B4D8               	btfsc	status,2,c
  3309  003912  D041               	goto	l650
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;main.c: 182: if (state.link == NO_LINK) {
  3313  003914  519A               	movf	printEthernetState@state& (0+255),w,b
  3314  003916  A4D8               	btfss	status,2,c
  3315  003918  D007               	goto	l641
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;main.c: 183: UARTTransmitText("Link lost.\n\r");
  3319  00391A  0E39               	movlw	low STR_37
  3320  00391C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3321  00391E  0E7F               	movlw	high STR_37
  3322  003920  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3323  003922  EC34  F022         	call	_UARTTransmitText	;wreg free
  3324                           
  3325                           ;main.c: 184: } else if (state.link == LINK_ESTABLISHED) {
  3326  003926  D00A               	goto	l643
  3327  003928                     l641:
  3328  003928  0100               	movlb	0	; () banked
  3329  00392A  059A               	decf	printEthernetState@state& (0+255),w,b
  3330  00392C  A4D8               	btfss	status,2,c
  3331  00392E  D006               	goto	l643
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;main.c: 185: UARTTransmitText("Link established. ");
  3335  003930  0E6E               	movlw	low STR_38
  3336  003932  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3337  003934  0E7E               	movlw	high STR_38
  3338  003936  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3339  003938  EC34  F022         	call	_UARTTransmitText	;wreg free
  3340  00393C                     l643:
  3341                           
  3342                           ;main.c: 186: }
  3343                           ;main.c: 188: if (state.link == LINK_ESTABLISHED) {
  3344  00393C  0100               	movlb	0	; () banked
  3345  00393E  059A               	decf	printEthernetState@state& (0+255),w,b
  3346  003940  A4D8               	btfss	status,2,c
  3347  003942  D029               	goto	l650
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;main.c: 189: if (state.speed == TEN_MBIT) {
  3351  003944  519B               	movf	(printEthernetState@state+1)& (0+255),w,b
  3352  003946  A4D8               	btfss	status,2,c
  3353  003948  D007               	goto	l645
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;main.c: 190: UARTTransmitText("Speed is 10 Mbps, ");
  3357  00394A  0E5B               	movlw	low STR_39
  3358  00394C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3359  00394E  0E7E               	movlw	high STR_39
  3360  003950  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3361  003952  EC34  F022         	call	_UARTTransmitText	;wreg free
  3362                           
  3363                           ;main.c: 191: } else if (state.speed == HUNDRED_MBIT) {
  3364  003956  D00A               	goto	l647
  3365  003958                     l645:
  3366  003958  0100               	movlb	0	; () banked
  3367  00395A  059B               	decf	(printEthernetState@state+1)& (0+255),w,b
  3368  00395C  A4D8               	btfss	status,2,c
  3369  00395E  D006               	goto	l647
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;main.c: 192: UARTTransmitText("Speed is 100 Mbps, ");
  3373  003960  0E34               	movlw	low STR_40
  3374  003962  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3375  003964  0E7E               	movlw	high STR_40
  3376  003966  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3377  003968  EC34  F022         	call	_UARTTransmitText	;wreg free
  3378  00396C                     l647:
  3379                           
  3380                           ;main.c: 193: }
  3381                           ;main.c: 194: if (state.duplex == HALF_DUPLEX) {
  3382  00396C  0100               	movlb	0	; () banked
  3383  00396E  519C               	movf	(printEthernetState@state+2)& (0+255),w,b
  3384  003970  A4D8               	btfss	status,2,c
  3385  003972  D007               	goto	l648
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;main.c: 195: UARTTransmitText("connection is Half Duplex.\n\r");
  3389  003974  0EB1               	movlw	low STR_41
  3390  003976  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3391  003978  0E7D               	movlw	high STR_41
  3392  00397A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3393  00397C  EC34  F022         	call	_UARTTransmitText	;wreg free
  3394                           
  3395                           ;main.c: 196: } else if (state.duplex == FULL_DUPLEX) {
  3396  003980  D00A               	goto	l650
  3397  003982                     l648:
  3398  003982  0100               	movlb	0	; () banked
  3399  003984  059C               	decf	(printEthernetState@state+2)& (0+255),w,b
  3400  003986  A4D8               	btfss	status,2,c
  3401  003988  D006               	goto	l650
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;main.c: 198: UARTTransmitText("connection is Full Duplex.\n\r");
  3405  00398A  0ECE               	movlw	low STR_42
  3406  00398C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3407  00398E  0E7D               	movlw	high STR_42
  3408  003990  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3409  003992  EC34  F022         	call	_UARTTransmitText	;wreg free
  3410  003996                     l650:
  3411                           
  3412                           ;main.c: 199: }
  3413                           ;main.c: 200: }
  3414                           ;main.c: 201: }
  3415                           ;main.c: 202: oldState = state;
  3416  003996  EE20  F09A         	lfsr	2,printEthernetState@state
  3417  00399A  EE12  F000         	lfsr	1,printEthernetState@oldState
  3418  00399E  0E0E               	movlw	14
  3419  0039A0                     u11391:
  3420  0039A0  CFDB FFE3          	movff	plusw2,plusw1
  3421  0039A4  06E8               	decf	wreg,f,c
  3422  0039A6  E2FC               	bc	u11391
  3423  0039A8  0012               	return		;funcret
  3424  0039AA                     __end_of_printEthernetState:
  3425                           	opt stack 0
  3426                           tblptru	equ	0xFF8
  3427                           tblptrh	equ	0xFF7
  3428                           tblptrl	equ	0xFF6
  3429                           tablat	equ	0xFF5
  3430                           intcon	equ	0xFF2
  3431                           intcon3	equ	0xFF0
  3432                           indf0	equ	0xFEF
  3433                           postinc0	equ	0xFEE
  3434                           plusw0	equ	0xFEB
  3435                           fsr0h	equ	0xFEA
  3436                           fsr0l	equ	0xFE9
  3437                           wreg	equ	0xFE8
  3438                           postdec1	equ	0xFE5
  3439                           plusw1	equ	0xFE3
  3440                           fsr1l	equ	0xFE1
  3441                           plusw2	equ	0xFDB
  3442                           fsr2h	equ	0xFDA
  3443                           fsr2l	equ	0xFD9
  3444                           status	equ	0xFD8
  3445                           
  3446 ;; *************** function _printErrorMessage *****************
  3447 ;; Defined at:
  3448 ;;		line 205 in file "src/system/main.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;  err             3   58[BANK0 ] struct error
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;		None
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      void 
  3455 ;; Registers used:
  3456 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3462 ;;      Params:         0       3       0       0       0       0       0       0       0
  3463 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3464 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3465 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3466 ;;Total ram usage:        5 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    6
  3469 ;; This function calls:
  3470 ;;		_UARTTransmitText
  3471 ;;		_intToString
  3472 ;; This function is called by:
  3473 ;;		_main
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text4
  3478  002CCA                     __ptext4:
  3479                           	opt stack 0
  3480  002CCA                     _printErrorMessage:
  3481                           	opt stack 24
  3482                           
  3483                           ;main.c: 206: UARTTransmitText("[ERROR]");
  3484                           
  3485                           ;incstack = 0
  3486  002CCA  0EA3               	movlw	low STR_43
  3487  002CCC  0100               	movlb	0	; () banked
  3488  002CCE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3489  002CD0  0E7F               	movlw	high STR_43
  3490  002CD2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3491  002CD4  EC34  F022         	call	_UARTTransmitText	;wreg free
  3492                           
  3493                           ;main.c: 207: switch (err.module) {
  3494  002CD8  D028               	goto	l654
  3495  002CDA                     
  3496                           ;main.c: 209: UARTTransmitText(" MEMORY MODULE: ");
  3497  002CDA  0EDC               	movlw	low STR_44
  3498  002CDC  0100               	movlb	0	; () banked
  3499  002CDE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3500  002CE0  0E7E               	movlw	high STR_44
  3501  002CE2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3502  002CE4  EC34  F022         	call	_UARTTransmitText	;wreg free
  3503                           
  3504                           ;main.c: 210: break;
  3505  002CE8  D050               	goto	l662
  3506  002CEA                     
  3507                           ;main.c: 212: UARTTransmitText(" ETHERNET CONTROLLER MODULE: ");
  3508  002CEA  0E75               	movlw	low STR_45
  3509  002CEC  0100               	movlb	0	; () banked
  3510  002CEE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3511  002CF0  0E7D               	movlw	high STR_45
  3512  002CF2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3513  002CF4  EC34  F022         	call	_UARTTransmitText	;wreg free
  3514                           
  3515                           ;main.c: 213: break;
  3516  002CF8  D048               	goto	l662
  3517  002CFA                     
  3518                           ;main.c: 215: UARTTransmitText(" ETHERNET MODULE: ");
  3519  002CFA  0E81               	movlw	low STR_46
  3520  002CFC  0100               	movlb	0	; () banked
  3521  002CFE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3522  002D00  0E7E               	movlw	high STR_46
  3523  002D02  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3524  002D04  EC34  F022         	call	_UARTTransmitText	;wreg free
  3525                           
  3526                           ;main.c: 216: break;
  3527  002D08  D040               	goto	l662
  3528  002D0A                     
  3529                           ;main.c: 218: UARTTransmitText(" ARP MODULE: ");
  3530  002D0A  0E2B               	movlw	low STR_47
  3531  002D0C  0100               	movlb	0	; () banked
  3532  002D0E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3533  002D10  0E7F               	movlw	high STR_47
  3534  002D12  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3535  002D14  EC34  F022         	call	_UARTTransmitText	;wreg free
  3536                           
  3537                           ;main.c: 219: break;
  3538  002D18  D038               	goto	l662
  3539  002D1A                     
  3540                           ;main.c: 221: UARTTransmitText(" IPv4 MODULE: ");
  3541  002D1A  0E1C               	movlw	low STR_48
  3542  002D1C  0100               	movlb	0	; () banked
  3543  002D1E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3544  002D20  0E7F               	movlw	high STR_48
  3545  002D22  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3546  002D24  EC34  F022         	call	_UARTTransmitText	;wreg free
  3547                           
  3548                           ;main.c: 224: }
  3549                           
  3550                           ;main.c: 223: break;
  3551                           
  3552                           ;main.c: 222: default:
  3553  002D28  D030               	goto	l662
  3554  002D2A                     l654:
  3555  002D2A  0100               	movlb	0	; () banked
  3556  002D2C  519A               	movf	printErrorMessage@err& (0+255),w,b
  3557                           
  3558                           ; Switch size 1, requested type "space"
  3559                           ; Number of cases is 5, Range of values is 0 to 4
  3560                           ; switch strategies available:
  3561                           ; Name         Instructions Cycles
  3562                           ; simple_byte           16     9 (average)
  3563                           ;	Chosen strategy is simple_byte
  3564  002D2E  0A00               	xorlw	0	; case 0
  3565  002D30  B4D8               	btfsc	status,2,c
  3566  002D32  D7D3               	goto	l655
  3567  002D34  0A01               	xorlw	1	; case 1
  3568  002D36  B4D8               	btfsc	status,2,c
  3569  002D38  D7D8               	goto	l657
  3570  002D3A  0A03               	xorlw	3	; case 2
  3571  002D3C  B4D8               	btfsc	status,2,c
  3572  002D3E  D7DD               	goto	l658
  3573  002D40  0A01               	xorlw	1	; case 3
  3574  002D42  B4D8               	btfsc	status,2,c
  3575  002D44  D7E2               	goto	l659
  3576  002D46  0A07               	xorlw	7	; case 4
  3577  002D48  B4D8               	btfsc	status,2,c
  3578  002D4A  D7E7               	goto	l660
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;main.c: 225: switch (err.code) {
  3582  002D4C  D01E               	goto	l662
  3583  002D4E                     
  3584                           ; BSR set to: 0
  3585                           ;main.c: 227: UARTTransmitText("Ethernet controller is unresponsive.");
  3586                           
  3587                           ; BSR set to: 0
  3588  002D4E  0E2E               	movlw	low STR_49
  3589  002D50  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3590  002D52  0E7D               	movlw	high STR_49
  3591  002D54  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3592  002D56  EC34  F022         	call	_UARTTransmitText	;wreg free
  3593                           
  3594                           ;main.c: 228: break;
  3595  002D5A  D030               	goto	l664
  3596  002D5C                     
  3597                           ;main.c: 230: UARTTransmitText("Ethernet controller has returned an unknown device ID.")
      +                          ;
  3598  002D5C  0E6C               	movlw	low STR_50
  3599  002D5E  0100               	movlb	0	; () banked
  3600  002D60  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3601  002D62  0E7C               	movlw	high STR_50
  3602  002D64  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3603  002D66  EC34  F022         	call	_UARTTransmitText	;wreg free
  3604                           
  3605                           ;main.c: 231: break;
  3606  002D6A  D028               	goto	l664
  3607  002D6C                     
  3608                           ;main.c: 233: UARTTransmitText("IP address could not be resolved.");
  3609  002D6C  0E53               	movlw	low STR_51
  3610  002D6E  0100               	movlb	0	; () banked
  3611  002D70  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3612  002D72  0E7D               	movlw	high STR_51
  3613  002D74  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3614  002D76  EC34  F022         	call	_UARTTransmitText	;wreg free
  3615  002D7A                     
  3616                           ;main.c: 236: UARTTransmitText("An unknown error has occured.");
  3617                           
  3618                           ;main.c: 235: case ERROR_ETHERNET_CONTROLLER_UNKNOWN:
  3619  002D7A  0E93               	movlw	low STR_52
  3620  002D7C  0100               	movlb	0	; () banked
  3621  002D7E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3622  002D80  0E7D               	movlw	high STR_52
  3623  002D82  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3624  002D84  EC34  F022         	call	_UARTTransmitText	;wreg free
  3625                           
  3626                           ;main.c: 238: }
  3627                           
  3628                           ;main.c: 237: break;
  3629  002D88  D019               	goto	l664
  3630  002D8A                     l662:
  3631  002D8A  EE20  F09B         	lfsr	2,printErrorMessage@err+1
  3632  002D8E  CFDE F09D          	movff	postinc2,??_printErrorMessage
  3633  002D92  CFDD F09E          	movff	postdec2,??_printErrorMessage+1
  3634                           
  3635                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3636                           ; Switch size 1, requested type "space"
  3637                           ; Number of cases is 1, Range of values is 1 to 1
  3638                           ; switch strategies available:
  3639                           ; Name         Instructions Cycles
  3640                           ; simple_byte            4     3 (average)
  3641                           ;	Chosen strategy is simple_byte
  3642  002D96  0100               	movlb	0	; () banked
  3643  002D98  519E               	movf	(??_printErrorMessage+1)& (0+255),w,b
  3644  002D9A  0A01               	xorlw	1	; case 1
  3645  002D9C  A4D8               	btfss	status,2,c
  3646  002D9E  D7ED               	goto	l667
  3647                           
  3648                           ; BSR set to: 0
  3649                           ; Switch size 1, requested type "space"
  3650                           ; Number of cases is 4, Range of values is 45 to 146
  3651                           ; switch strategies available:
  3652                           ; Name         Instructions Cycles
  3653                           ; simple_byte           13     7 (average)
  3654                           ;	Chosen strategy is simple_byte
  3655  002DA0  519D               	movf	??_printErrorMessage& (0+255),w,b
  3656  002DA2  0A2D               	xorlw	45	; case 45
  3657  002DA4  B4D8               	btfsc	status,2,c
  3658  002DA6  D7DA               	goto	l665
  3659  002DA8  0A03               	xorlw	3	; case 46
  3660  002DAA  B4D8               	btfsc	status,2,c
  3661  002DAC  D7D0               	goto	l663
  3662  002DAE  0AA1               	xorlw	161	; case 143
  3663  002DB0  B4D8               	btfsc	status,2,c
  3664  002DB2  D7E3               	goto	l667
  3665  002DB4  0A1D               	xorlw	29	; case 146
  3666  002DB6  B4D8               	btfsc	status,2,c
  3667  002DB8  D7D9               	goto	l666
  3668  002DBA  D7DF               	goto	l667
  3669  002DBC                     l664:
  3670                           
  3671                           ;main.c: 240: UARTTransmitText(" (Code: ");
  3672                           
  3673                           ; BSR set to: 0
  3674  002DBC  0E89               	movlw	low STR_53
  3675  002DBE  0100               	movlb	0	; () banked
  3676  002DC0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3677  002DC2  0E7F               	movlw	high STR_53
  3678  002DC4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3679  002DC6  EC34  F022         	call	_UARTTransmitText	;wreg free
  3680                           
  3681                           ;main.c: 241: UARTTransmitText(intToString(err.code));
  3682  002DCA  C09B  F079         	movff	printErrorMessage@err+1,intToString@val
  3683  002DCE  C09C  F07A         	movff	printErrorMessage@err+2,intToString@val+1
  3684  002DD2  0100               	movlb	0	; () banked
  3685  002DD4  6B7B               	clrf	(intToString@val+2)& (0+255),b
  3686  002DD6  6B7C               	clrf	(intToString@val+3)& (0+255),b
  3687  002DD8  EC76  F000         	call	_intToString	;wreg free
  3688  002DDC  C079  F098         	movff	?_intToString,UARTTransmitText@str
  3689  002DE0  C07A  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  3690  002DE4  EC34  F022         	call	_UARTTransmitText	;wreg free
  3691                           
  3692                           ;main.c: 242: UARTTransmitText(").\n\r");
  3693  002DE8  0EDA               	movlw	low STR_54
  3694  002DEA  0100               	movlb	0	; () banked
  3695  002DEC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3696  002DEE  0E7F               	movlw	high STR_54
  3697  002DF0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3698  002DF2  EC34  F022         	call	_UARTTransmitText	;wreg free
  3699  002DF6  0012               	return		;funcret
  3700  002DF8                     __end_of_printErrorMessage:
  3701                           	opt stack 0
  3702                           tblptru	equ	0xFF8
  3703                           tblptrh	equ	0xFF7
  3704                           tblptrl	equ	0xFF6
  3705                           tablat	equ	0xFF5
  3706                           intcon	equ	0xFF2
  3707                           intcon3	equ	0xFF0
  3708                           indf0	equ	0xFEF
  3709                           postinc0	equ	0xFEE
  3710                           plusw0	equ	0xFEB
  3711                           fsr0h	equ	0xFEA
  3712                           fsr0l	equ	0xFE9
  3713                           wreg	equ	0xFE8
  3714                           postdec1	equ	0xFE5
  3715                           plusw1	equ	0xFE3
  3716                           fsr1l	equ	0xFE1
  3717                           postinc2	equ	0xFDE
  3718                           postdec2	equ	0xFDD
  3719                           plusw2	equ	0xFDB
  3720                           fsr2h	equ	0xFDA
  3721                           fsr2l	equ	0xFD9
  3722                           status	equ	0xFD8
  3723                           
  3724 ;; *************** function _handleStackBackgroundTasks *****************
  3725 ;; Defined at:
  3726 ;;		line 27 in file "src/stack/backgroundTasks.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;  stack           2  134[BANK1 ] PTR volatile struct stac
  3729 ;;		 -> stack(122), 
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;		None
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  1    wreg      void 
  3734 ;; Registers used:
  3735 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3741 ;;      Params:         0       0       2       0       0       0       0       0       0
  3742 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3743 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3744 ;;      Totals:         0       0       4       0       0       0       0       0       0
  3745 ;;Total ram usage:        4 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:   13
  3748 ;; This function calls:
  3749 ;;		_UARTTransmitText
  3750 ;;		_ethernetController_clearInterruptFlag
  3751 ;;		_ethernetController_newPacketAvailable
  3752 ;;		_ethernetController_pollInterruptFlags
  3753 ;;		_ethernetController_setLEDConfig
  3754 ;;		_ethernetController_updateLinkStatus
  3755 ;;		_ethernet_rxGetNewFrame
  3756 ;;		_ipAdressToString
  3757 ;;		_ipv4_sendFrame
  3758 ;;		_ipv4_setIPSourceAddress
  3759 ;; This function is called by:
  3760 ;;		_main
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           	psect	text5
  3765  00226E                     __ptext5:
  3766                           	opt stack 0
  3767  00226E                     _handleStackBackgroundTasks:
  3768                           	opt stack 17
  3769                           
  3770                           ;backgroundTasks.c: 28: stack->background.interruptFlags = ethernetController_pollInterr
      +                          uptFlags();
  3771                           
  3772                           ;incstack = 0
  3773  00226E  ECFC  F016         	call	_ethernetController_pollInterruptFlags	;wreg free
  3774  002272  0101               	movlb	1	; () banked
  3775  002274  EE20 F012          	lfsr	2,18
  3776  002278  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3777  00227A  26D9               	addwf	fsr2l,f,c
  3778  00227C  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3779  00227E  22DA               	addwfc	fsr2h,f,c
  3780  002280  0100               	movlb	0	; () banked
  3781  002282  C078  FFDE         	movff	?_ethernetController_pollInterruptFlags,postinc2
  3782  002286  C079  FFDD         	movff	?_ethernetController_pollInterruptFlags+1,postdec2
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;backgroundTasks.c: 29: if (stack->background.interruptFlags.PKTIF) {
  3786  00228A  0101               	movlb	1	; () banked
  3787  00228C  EE20 F012          	lfsr	2,18
  3788  002290  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3789  002292  26D9               	addwf	fsr2l,f,c
  3790  002294  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3791  002296  22DA               	addwfc	fsr2h,f,c
  3792  002298  A8DF               	btfss	indf2,4,c
  3793  00229A  D018               	goto	l521
  3794                           
  3795                           ; BSR set to: 1
  3796                           ;backgroundTasks.c: 31: if (ethernetController_newPacketAvailable()) {
  3797  00229C  EC4C  F026         	call	_ethernetController_newPacketAvailable	;wreg free
  3798  0022A0  0900               	iorlw	0
  3799  0022A2  B4D8               	btfsc	status,2,c
  3800  0022A4  D013               	goto	l521
  3801                           
  3802                           ;backgroundTasks.c: 32: stack->background.err = ethernet_rxGetNewFrame(&stack->ethernet)
      +                          ;
  3803  0022A6  C186  F178         	movff	handleStackBackgroundTasks@stack,ethernet_rxGetNewFrame@frame
  3804  0022AA  C187  F179         	movff	handleStackBackgroundTasks@stack+1,ethernet_rxGetNewFrame@frame+1
  3805  0022AE  EC3F  F003         	call	_ethernet_rxGetNewFrame	;wreg free
  3806  0022B2  0101               	movlb	1	; () banked
  3807  0022B4  EE20 F00F          	lfsr	2,15
  3808  0022B8  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3809  0022BA  26D9               	addwf	fsr2l,f,c
  3810  0022BC  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3811  0022BE  22DA               	addwfc	fsr2h,f,c
  3812  0022C0  C178  FFDE         	movff	?_ethernet_rxGetNewFrame,postinc2
  3813  0022C4  C179  FFDE         	movff	?_ethernet_rxGetNewFrame+1,postinc2
  3814  0022C8  C17A  FFDE         	movff	?_ethernet_rxGetNewFrame+2,postinc2
  3815  0022CC                     l521:
  3816                           
  3817                           ;backgroundTasks.c: 33: }
  3818                           ;backgroundTasks.c: 34: }
  3819                           ;backgroundTasks.c: 40: if (stack->background.fPacketPending) {
  3820                           
  3821                           ; BSR set to: 1
  3822                           
  3823                           ; BSR set to: 1
  3824  0022CC  0101               	movlb	1	; () banked
  3825  0022CE  EE20 F014          	lfsr	2,20
  3826  0022D2  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3827  0022D4  26D9               	addwf	fsr2l,f,c
  3828  0022D6  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3829  0022D8  22DA               	addwfc	fsr2h,f,c
  3830  0022DA  50DF               	movf	indf2,w,c
  3831  0022DC  B4D8               	btfsc	status,2,c
  3832  0022DE  D08A               	goto	l525
  3833                           
  3834                           ; BSR set to: 1
  3835                           ;backgroundTasks.c: 43: stack->background.err = ipv4_sendFrame(stack->pendingPacketToSen
      +                          d);
  3836  0022E0  EE20 F038          	lfsr	2,56
  3837  0022E4  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3838  0022E6  26D9               	addwf	fsr2l,f,c
  3839  0022E8  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3840  0022EA  22DA               	addwfc	fsr2h,f,c
  3841  0022EC  EE00  F060         	lfsr	0,ipv4_sendFrame@ipPacket
  3842  0022F0  0E41               	movlw	65
  3843  0022F2                     u11191:
  3844  0022F2  CFDB FFEB          	movff	plusw2,plusw0
  3845  0022F6  06E8               	decf	wreg,f,c
  3846  0022F8  E2FC               	bc	u11191
  3847  0022FA  ECF8  F025         	call	_ipv4_sendFrame	;wreg free
  3848  0022FE  0101               	movlb	1	; () banked
  3849  002300  EE20 F00F          	lfsr	2,15
  3850  002304  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3851  002306  26D9               	addwf	fsr2l,f,c
  3852  002308  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3853  00230A  22DA               	addwfc	fsr2h,f,c
  3854  00230C  C060  FFDE         	movff	?_ipv4_sendFrame,postinc2
  3855  002310  C061  FFDE         	movff	?_ipv4_sendFrame+1,postinc2
  3856  002314  C062  FFDE         	movff	?_ipv4_sendFrame+2,postinc2
  3857                           
  3858                           ; BSR set to: 1
  3859                           ;backgroundTasks.c: 44: if (stack->background.err.code == ERROR_ARP_WAITING_FOR_REPLY) {
  3860  002318  EE20 F010          	lfsr	2,16
  3861  00231C  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3862  00231E  26D9               	addwf	fsr2l,f,c
  3863  002320  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3864  002322  22DA               	addwfc	fsr2h,f,c
  3865                           
  3866                           ; BSR set to: 1
  3867                           ;backgroundTasks.c: 46: }
  3868                           ;backgroundTasks.c: 47: if (stack->background.err.module == ERROR_MODULE_ARP &&
  3869                           ;backgroundTasks.c: 48: stack->background.err.code == ERROR_ARP_MAXIMUM_NUMBER_OF_REQUES
      +                          TS_REACHED) {
  3870                           
  3871                           ; BSR set to: 1
  3872  002324  EE20 F00F          	lfsr	2,15
  3873  002328  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3874  00232A  26D9               	addwf	fsr2l,f,c
  3875  00232C  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3876  00232E  22DA               	addwfc	fsr2h,f,c
  3877  002330  0E03               	movlw	3
  3878  002332  18DE               	xorwf	postinc2,w,c
  3879  002334  A4D8               	btfss	status,2,c
  3880  002336  D03A               	goto	l524
  3881                           
  3882                           ; BSR set to: 1
  3883  002338  EE20 F010          	lfsr	2,16
  3884  00233C  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3885  00233E  26D9               	addwf	fsr2l,f,c
  3886  002340  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3887  002342  22DA               	addwfc	fsr2h,f,c
  3888  002344  0E92               	movlw	146
  3889  002346  18DE               	xorwf	postinc2,w,c
  3890  002348  E131               	bnz	l9065
  3891  00234A  04DE               	decf	postinc2,w,c
  3892  00234C  A4D8               	btfss	status,2,c
  3893  00234E  D02E               	goto	l524
  3894                           
  3895                           ; BSR set to: 1
  3896                           ;backgroundTasks.c: 49: UARTTransmitText("Could not resolve ");
  3897  002350  0E94               	movlw	low STR_20
  3898  002352  0100               	movlb	0	; () banked
  3899  002354  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3900  002356  0E7E               	movlw	high STR_20
  3901  002358  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3902  00235A  EC34  F022         	call	_UARTTransmitText	;wreg free
  3903                           
  3904                           ;backgroundTasks.c: 50: UARTTransmitText(ipAdressToString(stack->pendingPacketToSend.ipv
      +                          4Header.destination));
  3905  00235E  0101               	movlb	1	; () banked
  3906  002360  EE20 F04B          	lfsr	2,75
  3907  002364  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3908  002366  26D9               	addwf	fsr2l,f,c
  3909  002368  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3910  00236A  22DA               	addwfc	fsr2h,f,c
  3911  00236C  CFDE F067          	movff	postinc2,ipAdressToString@ip
  3912  002370  CFDE F068          	movff	postinc2,ipAdressToString@ip+1
  3913  002374  CFDE F069          	movff	postinc2,ipAdressToString@ip+2
  3914  002378  CFDE F06A          	movff	postinc2,ipAdressToString@ip+3
  3915  00237C  EC55  F012         	call	_ipAdressToString	;wreg free
  3916  002380  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  3917  002384  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  3918  002388  EC34  F022         	call	_UARTTransmitText	;wreg free
  3919                           
  3920                           ;backgroundTasks.c: 51: UARTTransmitText("\n\r");
  3921  00238C  0E04               	movlw	low (STR_25+46)
  3922  00238E  0100               	movlb	0	; () banked
  3923  002390  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3924  002392  0E7D               	movlw	high (STR_25+46)
  3925  002394  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3926  002396  EC34  F022         	call	_UARTTransmitText	;wreg free
  3927                           
  3928                           ;backgroundTasks.c: 52: stack->background.fPacketPending = 0;
  3929  00239A  0101               	movlb	1	; () banked
  3930  00239C  EE20 F014          	lfsr	2,20
  3931  0023A0  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3932  0023A2  26D9               	addwf	fsr2l,f,c
  3933  0023A4  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3934  0023A6  22DA               	addwfc	fsr2h,f,c
  3935  0023A8  0E00               	movlw	0
  3936  0023AA  6EDF               	movwf	indf2,c
  3937  0023AC                     l524:
  3938  0023AC                     l9065:
  3939                           
  3940                           ; BSR set to: 1
  3941                           ;backgroundTasks.c: 53: }
  3942                           ;backgroundTasks.c: 54: if (stack->background.err.module == ERROR_MODULE_ARP &&
  3943                           ;backgroundTasks.c: 55: stack->background.err.code == (uint16_t)0) {
  3944  0023AC  EE20 F00F          	lfsr	2,15
  3945  0023B0  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3946  0023B2  26D9               	addwf	fsr2l,f,c
  3947  0023B4  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3948  0023B6  22DA               	addwfc	fsr2h,f,c
  3949  0023B8  0E03               	movlw	3
  3950  0023BA  18DE               	xorwf	postinc2,w,c
  3951  0023BC  A4D8               	btfss	status,2,c
  3952  0023BE  D01A               	goto	l525
  3953                           
  3954                           ; BSR set to: 1
  3955  0023C0  EE20 F010          	lfsr	2,16
  3956  0023C4  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3957  0023C6  26D9               	addwf	fsr2l,f,c
  3958  0023C8  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3959  0023CA  22DA               	addwfc	fsr2h,f,c
  3960  0023CC  50DE               	movf	postinc2,w,c
  3961  0023CE  10DE               	iorwf	postinc2,w,c
  3962  0023D0  A4D8               	btfss	status,2,c
  3963  0023D2  D010               	goto	l525
  3964                           
  3965                           ; BSR set to: 1
  3966                           ;backgroundTasks.c: 56: UARTTransmitText("IP packet sent.\n\r");
  3967  0023D4  0EB9               	movlw	low STR_22
  3968  0023D6  0100               	movlb	0	; () banked
  3969  0023D8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3970  0023DA  0E7E               	movlw	high STR_22
  3971  0023DC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3972  0023DE  EC34  F022         	call	_UARTTransmitText	;wreg free
  3973                           
  3974                           ;backgroundTasks.c: 58: stack->background.fPacketPending = 0;
  3975  0023E2  0101               	movlb	1	; () banked
  3976  0023E4  EE20 F014          	lfsr	2,20
  3977  0023E8  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3978  0023EA  26D9               	addwf	fsr2l,f,c
  3979  0023EC  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3980  0023EE  22DA               	addwfc	fsr2h,f,c
  3981  0023F0  0E00               	movlw	0
  3982  0023F2  6EDF               	movwf	indf2,c
  3983  0023F4                     l525:
  3984                           
  3985                           ; BSR set to: 1
  3986                           ;backgroundTasks.c: 59: }
  3987                           ;backgroundTasks.c: 60: }
  3988                           ;backgroundTasks.c: 61: if (stack->background.interruptFlags.LINKIF) {
  3989                           
  3990                           ; BSR set to: 1
  3991                           
  3992                           ; BSR set to: 1
  3993  0023F4  EE20 F012          	lfsr	2,18
  3994  0023F8  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  3995  0023FA  26D9               	addwf	fsr2l,f,c
  3996  0023FC  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  3997  0023FE  22DA               	addwfc	fsr2h,f,c
  3998  002400  A6DF               	btfss	indf2,3,c
  3999  002402  D029               	goto	l526
  4000                           
  4001                           ; BSR set to: 1
  4002                           ;backgroundTasks.c: 62: ethernetController_updateLinkStatus(&(stack->ethernet));
  4003  002404  C186  F080         	movff	handleStackBackgroundTasks@stack,ethernetController_updateLinkStatus@state
  4004  002408  C187  F081         	movff	handleStackBackgroundTasks@stack+1,ethernetController_updateLinkStatus@state+1
  4005  00240C  ECB6  F01D         	call	_ethernetController_updateLinkStatus	;wreg free
  4006                           
  4007                           ;backgroundTasks.c: 64: if (stack->ethernet.link == LINK_ESTABLISHED) {
  4008  002410  C186  FFD9         	movff	handleStackBackgroundTasks@stack,fsr2l
  4009  002414  C187  FFDA         	movff	handleStackBackgroundTasks@stack+1,fsr2h
  4010  002418  04DE               	decf	postinc2,w,c
  4011  00241A  A4D8               	btfss	status,2,c
  4012  00241C  D00D               	goto	l527
  4013                           
  4014                           ;backgroundTasks.c: 65: ethernetController_setLEDConfig(LEDA, LED_ON);
  4015  00241E  0E00               	movlw	0
  4016  002420  0100               	movlb	0	; () banked
  4017  002422  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4018  002424  0E00               	movlw	0
  4019  002426  EC6F  F01D         	call	_ethernetController_setLEDConfig
  4020                           
  4021                           ;backgroundTasks.c: 66: ethernetController_setLEDConfig(LEDB, LED_TRANSMIT_RECEIVE_EVENT
      +                          S);
  4022  00242A  0E02               	movlw	2
  4023  00242C  0100               	movlb	0	; () banked
  4024  00242E  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4025  002430  0E01               	movlw	1
  4026  002432  EC6F  F01D         	call	_ethernetController_setLEDConfig
  4027                           
  4028                           ;backgroundTasks.c: 67: } else {
  4029  002436  D00C               	goto	l528
  4030  002438                     l527:
  4031                           
  4032                           ;backgroundTasks.c: 68: ethernetController_setLEDConfig(LEDA, LED_OFF);
  4033  002438  0E01               	movlw	1
  4034  00243A  0100               	movlb	0	; () banked
  4035  00243C  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4036  00243E  0E00               	movlw	0
  4037  002440  EC6F  F01D         	call	_ethernetController_setLEDConfig
  4038                           
  4039                           ;backgroundTasks.c: 69: ethernetController_setLEDConfig(LEDB, LED_OFF);
  4040  002444  0E01               	movlw	1
  4041  002446  0100               	movlb	0	; () banked
  4042  002448  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4043  00244A  0E01               	movlw	1
  4044  00244C  EC6F  F01D         	call	_ethernetController_setLEDConfig
  4045  002450                     l528:
  4046                           
  4047                           ;backgroundTasks.c: 70: }
  4048                           ;backgroundTasks.c: 71: ethernetController_clearInterruptFlag(LINKIF);
  4049  002450  0E0B               	movlw	11
  4050  002452  EC6B  F026         	call	_ethernetController_clearInterruptFlag
  4051  002456                     l526:
  4052                           
  4053                           ;backgroundTasks.c: 72: }
  4054                           ;backgroundTasks.c: 74: if (stack->background.fSetSourceAddr) {
  4055  002456  0101               	movlb	1	; () banked
  4056  002458  EE20 F015          	lfsr	2,21
  4057  00245C  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4058  00245E  26D9               	addwf	fsr2l,f,c
  4059  002460  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4060  002462  22DA               	addwfc	fsr2h,f,c
  4061  002464  50DF               	movf	indf2,w,c
  4062  002466  B4D8               	btfsc	status,2,c
  4063  002468  0012               	return	
  4064                           
  4065                           ; BSR set to: 1
  4066                           ;backgroundTasks.c: 75: if(ipv4_setIPSourceAddress(ipSource).code==(uint16_t)0){
  4067  00246A  C1D4  F14B         	movff	_ipSource,ipv4_setIPSourceAddress@ip
  4068  00246E  C1D5  F14C         	movff	_ipSource+1,ipv4_setIPSourceAddress@ip+1
  4069  002472  C1D6  F14D         	movff	_ipSource+2,ipv4_setIPSourceAddress@ip+2
  4070  002476  C1D7  F14E         	movff	_ipSource+3,ipv4_setIPSourceAddress@ip+3
  4071  00247A  ECEA  F025         	call	_ipv4_setIPSourceAddress	;wreg free
  4072  00247E  0E4B               	movlw	low ?_ipv4_setIPSourceAddress
  4073  002480  6ED9               	movwf	fsr2l,c
  4074  002482  0E01               	movlw	high ?_ipv4_setIPSourceAddress
  4075  002484  6EDA               	movwf	fsr2h,c
  4076  002486  0E01               	movlw	1
  4077  002488  26D9               	addwf	fsr2l,f,c
  4078  00248A  0E00               	movlw	0
  4079  00248C  22DA               	addwfc	fsr2h,f,c
  4080  00248E  50DE               	movf	postinc2,w,c
  4081  002490  10DE               	iorwf	postinc2,w,c
  4082  002492  A4D8               	btfss	status,2,c
  4083  002494  0012               	return	
  4084                           
  4085                           ;backgroundTasks.c: 76: stack->background.fSetSourceAddr=0;
  4086  002496  0101               	movlb	1	; () banked
  4087  002498  EE20 F015          	lfsr	2,21
  4088  00249C  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4089  00249E  26D9               	addwf	fsr2l,f,c
  4090  0024A0  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4091  0024A2  22DA               	addwfc	fsr2h,f,c
  4092  0024A4  0E00               	movlw	0
  4093  0024A6  6EDF               	movwf	indf2,c
  4094                           
  4095                           ; BSR set to: 1
  4096  0024A8  0012               	return	
  4097  0024AA                     __end_of_handleStackBackgroundTasks:
  4098                           	opt stack 0
  4099                           tblptru	equ	0xFF8
  4100                           tblptrh	equ	0xFF7
  4101                           tblptrl	equ	0xFF6
  4102                           tablat	equ	0xFF5
  4103                           intcon	equ	0xFF2
  4104                           intcon3	equ	0xFF0
  4105                           indf0	equ	0xFEF
  4106                           postinc0	equ	0xFEE
  4107                           plusw0	equ	0xFEB
  4108                           fsr0h	equ	0xFEA
  4109                           fsr0l	equ	0xFE9
  4110                           wreg	equ	0xFE8
  4111                           postdec1	equ	0xFE5
  4112                           plusw1	equ	0xFE3
  4113                           fsr1l	equ	0xFE1
  4114                           indf2	equ	0xFDF
  4115                           postinc2	equ	0xFDE
  4116                           postdec2	equ	0xFDD
  4117                           plusw2	equ	0xFDB
  4118                           fsr2h	equ	0xFDA
  4119                           fsr2l	equ	0xFD9
  4120                           status	equ	0xFD8
  4121                           
  4122 ;; *************** function _ipv4_setIPSourceAddress *****************
  4123 ;; Defined at:
  4124 ;;		line 225 in file "src/stack/protocols/ipv4.c"
  4125 ;; Parameters:    Size  Location     Type
  4126 ;;  ip              4   75[BANK1 ] struct ipv4_address
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;  err             3   79[BANK1 ] struct error
  4129 ;;  index           1    0        unsigned char 
  4130 ;; Return value:  Size  Location     Type
  4131 ;;                  3   75[BANK1 ] struct error
  4132 ;; Registers used:
  4133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4134 ;; Tracked objects:
  4135 ;;		On entry : 0/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4139 ;;      Params:         0       0       4       0       0       0       0       0       0
  4140 ;;      Locals:         0       0       3       0       0       0       0       0       0
  4141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4142 ;;      Totals:         0       0       7       0       0       0       0       0       0
  4143 ;;Total ram usage:        7 bytes
  4144 ;; Hardware stack levels used:    1
  4145 ;; Hardware stack levels required when called:   12
  4146 ;; This function calls:
  4147 ;;		_ARP_probe
  4148 ;; This function is called by:
  4149 ;;		_handleStackBackgroundTasks
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           	psect	text6
  4154  004BD4                     __ptext6:
  4155                           	opt stack 0
  4156  004BD4                     _ipv4_setIPSourceAddress:
  4157                           	opt stack 17
  4158                           
  4159                           ;ipv4.c: 226: uint8_t index;
  4160                           ;ipv4.c: 227: error_t err;
  4161                           ;ipv4.c: 228: err.module = ERROR_MODULE_IPv4;
  4162                           
  4163                           ;incstack = 0
  4164  004BD4  0E04               	movlw	4
  4165  004BD6  0101               	movlb	1	; () banked
  4166  004BD8  6F4F               	movwf	ipv4_setIPSourceAddress@err& (0+255),b
  4167                           
  4168                           ; BSR set to: 1
  4169                           ;ipv4.c: 230: ARP_probe(ip);
  4170  004BDA  C14B  F0FC         	movff	ipv4_setIPSourceAddress@ip,ARP_probe@ipTarget
  4171  004BDE  C14C  F0FD         	movff	ipv4_setIPSourceAddress@ip+1,ARP_probe@ipTarget+1
  4172  004BE2  C14D  F0FE         	movff	ipv4_setIPSourceAddress@ip+2,ARP_probe@ipTarget+2
  4173  004BE6  C14E  F0FF         	movff	ipv4_setIPSourceAddress@ip+3,ARP_probe@ipTarget+3
  4174  004BEA  ECB5  F015         	call	_ARP_probe	;wreg free
  4175  004BEE  0012               	return		;funcret
  4176  004BF0                     __end_of_ipv4_setIPSourceAddress:
  4177                           	opt stack 0
  4178                           tblptru	equ	0xFF8
  4179                           tblptrh	equ	0xFF7
  4180                           tblptrl	equ	0xFF6
  4181                           tablat	equ	0xFF5
  4182                           intcon	equ	0xFF2
  4183                           intcon3	equ	0xFF0
  4184                           indf0	equ	0xFEF
  4185                           postinc0	equ	0xFEE
  4186                           plusw0	equ	0xFEB
  4187                           fsr0h	equ	0xFEA
  4188                           fsr0l	equ	0xFE9
  4189                           wreg	equ	0xFE8
  4190                           postdec1	equ	0xFE5
  4191                           plusw1	equ	0xFE3
  4192                           fsr1l	equ	0xFE1
  4193                           indf2	equ	0xFDF
  4194                           postinc2	equ	0xFDE
  4195                           postdec2	equ	0xFDD
  4196                           plusw2	equ	0xFDB
  4197                           fsr2h	equ	0xFDA
  4198                           fsr2l	equ	0xFD9
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function _ARP_probe *****************
  4202 ;; Defined at:
  4203 ;;		line 248 in file "src/stack/protocols/arp.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;  ipTarget        4  156[BANK0 ] struct ipv4_address
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  ipSender        4   68[BANK1 ] struct ipv4_address
  4208 ;;  waitingTime     4   64[BANK1 ] unsigned long 
  4209 ;;  timeStart       4   60[BANK1 ] unsigned long 
  4210 ;;  err             3   72[BANK1 ] struct error
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  3  156[BANK0 ] struct error
  4213 ;; Registers used:
  4214 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4220 ;;      Params:         0       4       0       0       0       0       0       0       0
  4221 ;;      Locals:         0       0      15       0       0       0       0       0       0
  4222 ;;      Temps:          0       0       8       0       0       0       0       0       0
  4223 ;;      Totals:         0       4      23       0       0       0       0       0       0
  4224 ;;Total ram usage:       27 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:   11
  4227 ;; This function calls:
  4228 ;;		_ARP_sendRequest
  4229 ;;		_UARTTransmitText
  4230 ;;		___awmod
  4231 ;;		_getMillis
  4232 ;;		_intToString
  4233 ;;		_ipv4_setToAllZero
  4234 ;;		_rand
  4235 ;; This function is called by:
  4236 ;;		_ipv4_setIPSourceAddress
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text7
  4241  002B6A                     __ptext7:
  4242                           	opt stack 0
  4243  002B6A                     _ARP_probe:
  4244                           	opt stack 17
  4245                           
  4246                           ;arp.c: 249: uint8_t static state = 0;
  4247                           ;arp.c: 250: time_t timeStart;
  4248                           ;arp.c: 251: time_t waitingTime;
  4249                           ;arp.c: 252: ipv4_address_t ipSender;
  4250                           ;arp.c: 253: error_t err;
  4251                           ;arp.c: 254: err.module = ERROR_MODULE_ARP;
  4252                           
  4253                           ;incstack = 0
  4254  002B6A  0E03               	movlw	3
  4255  002B6C  0101               	movlb	1	; () banked
  4256  002B6E  6F48               	movwf	ARP_probe@err& (0+255),b
  4257                           
  4258                           ;arp.c: 256: switch (state) {
  4259  002B70  D0A1               	goto	l960
  4260  002B72                     
  4261                           ; BSR set to: 1
  4262                           ;arp.c: 258: ipv4_setToAllZero(&ipSender);
  4263                           
  4264                           ; BSR set to: 1
  4265  002B72  0E44               	movlw	low ARP_probe@ipSender
  4266  002B74  0100               	movlb	0	; () banked
  4267  002B76  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
  4268  002B78  0E01               	movlw	high ARP_probe@ipSender
  4269  002B7A  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
  4270  002B7C  ECDB  F025         	call	_ipv4_setToAllZero	;wreg free
  4271                           
  4272                           ;arp.c: 259: timeStart = getMillis();
  4273  002B80  EC3A  F026         	call	_getMillis	;wreg free
  4274  002B84  C060  F13C         	movff	?_getMillis,ARP_probe@timeStart
  4275  002B88  C061  F13D         	movff	?_getMillis+1,ARP_probe@timeStart+1
  4276  002B8C  C062  F13E         	movff	?_getMillis+2,ARP_probe@timeStart+2
  4277  002B90  C063  F13F         	movff	?_getMillis+3,ARP_probe@timeStart+3
  4278                           
  4279                           ;arp.c: 260: waitingTime = rand() % 3000;
  4280  002B94  EC09  F022         	call	_rand	;wreg free
  4281  002B98  C06C  F06E         	movff	?_rand,___awmod@dividend
  4282  002B9C  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
  4283  002BA0  0E0B               	movlw	11
  4284  002BA2  0100               	movlb	0	; () banked
  4285  002BA4  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
  4286  002BA6  0EB8               	movlw	184
  4287  002BA8  6F70               	movwf	___awmod@divisor& (0+255),b
  4288  002BAA  EC2D  F020         	call	___awmod	;wreg free
  4289  002BAE  0100               	movlb	0	; () banked
  4290  002BB0  C06E  F140         	movff	?___awmod,ARP_probe@waitingTime
  4291  002BB4  C06F  F141         	movff	?___awmod+1,ARP_probe@waitingTime+1
  4292  002BB8  0101               	movlb	1	; () banked
  4293  002BBA  0E00               	movlw	0
  4294  002BBC  BF41               	btfsc	(ARP_probe@waitingTime+1)& (0+255),7,b
  4295  002BBE  0EFF               	movlw	-1
  4296  002BC0  6F42               	movwf	(ARP_probe@waitingTime+2)& (0+255),b
  4297  002BC2  6F43               	movwf	(ARP_probe@waitingTime+3)& (0+255),b
  4298                           
  4299                           ; BSR set to: 1
  4300                           ;arp.c: 261: state = 1;
  4301  002BC4  0E01               	movlw	1
  4302  002BC6  6FD8               	movwf	ARP_probe@state& (0+255),b
  4303                           
  4304                           ; BSR set to: 1
  4305                           ;arp.c: 262: err.code = ERROR_ARP_WAITING_FOR_REPLY;
  4306  002BC8  0E01               	movlw	1
  4307  002BCA  6F4A               	movwf	(ARP_probe@err+2)& (0+255),b
  4308  002BCC  0E91               	movlw	145
  4309  002BCE  6F49               	movwf	(ARP_probe@err+1)& (0+255),b
  4310                           
  4311                           ;arp.c: 263: break;
  4312  002BD0  0012               	return	
  4313  002BD2                     
  4314                           ; BSR set to: 1
  4315                           ;arp.c: 265: if (getMillis() - timeStart >= waitingTime) {
  4316                           
  4317                           ; BSR set to: 1
  4318  002BD2  C13C  F134         	movff	ARP_probe@timeStart,??_ARP_probe
  4319  002BD6  C13D  F135         	movff	ARP_probe@timeStart+1,??_ARP_probe+1
  4320  002BDA  C13E  F136         	movff	ARP_probe@timeStart+2,??_ARP_probe+2
  4321  002BDE  C13F  F137         	movff	ARP_probe@timeStart+3,??_ARP_probe+3
  4322  002BE2  1F34               	comf	??_ARP_probe& (0+255),f,b
  4323  002BE4  1F35               	comf	(??_ARP_probe+1)& (0+255),f,b
  4324  002BE6  1F36               	comf	(??_ARP_probe+2)& (0+255),f,b
  4325  002BE8  1F37               	comf	(??_ARP_probe+3)& (0+255),f,b
  4326  002BEA  2B34               	incf	??_ARP_probe& (0+255),f,b
  4327  002BEC  0E00               	movlw	0
  4328  002BEE  2335               	addwfc	(??_ARP_probe+1)& (0+255),f,b
  4329  002BF0  2336               	addwfc	(??_ARP_probe+2)& (0+255),f,b
  4330  002BF2  2337               	addwfc	(??_ARP_probe+3)& (0+255),f,b
  4331  002BF4  EC3A  F026         	call	_getMillis	;wreg free
  4332  002BF8  0101               	movlb	1	; () banked
  4333  002BFA  5134               	movf	??_ARP_probe& (0+255),w,b
  4334  002BFC  0100               	movlb	0	; () banked
  4335  002BFE  2560               	addwf	?_getMillis& (0+255),w,b
  4336  002C00  0101               	movlb	1	; () banked
  4337  002C02  6F38               	movwf	(??_ARP_probe+4)& (0+255),b
  4338  002C04  5135               	movf	(??_ARP_probe+1)& (0+255),w,b
  4339  002C06  0100               	movlb	0	; () banked
  4340  002C08  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
  4341  002C0A  0101               	movlb	1	; () banked
  4342  002C0C  6F39               	movwf	(??_ARP_probe+5)& (0+255),b
  4343  002C0E  5136               	movf	(??_ARP_probe+2)& (0+255),w,b
  4344  002C10  0100               	movlb	0	; () banked
  4345  002C12  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
  4346  002C14  0101               	movlb	1	; () banked
  4347  002C16  6F3A               	movwf	(??_ARP_probe+6)& (0+255),b
  4348  002C18  5137               	movf	(??_ARP_probe+3)& (0+255),w,b
  4349  002C1A  0100               	movlb	0	; () banked
  4350  002C1C  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
  4351  002C1E  0101               	movlb	1	; () banked
  4352  002C20  6F3B               	movwf	(??_ARP_probe+7)& (0+255),b
  4353  002C22  5140               	movf	ARP_probe@waitingTime& (0+255),w,b
  4354  002C24  5D38               	subwf	(??_ARP_probe+4)& (0+255),w,b
  4355  002C26  5141               	movf	(ARP_probe@waitingTime+1)& (0+255),w,b
  4356  002C28  5939               	subwfb	(??_ARP_probe+5)& (0+255),w,b
  4357  002C2A  5142               	movf	(ARP_probe@waitingTime+2)& (0+255),w,b
  4358  002C2C  593A               	subwfb	(??_ARP_probe+6)& (0+255),w,b
  4359  002C2E  5143               	movf	(ARP_probe@waitingTime+3)& (0+255),w,b
  4360  002C30  593B               	subwfb	(??_ARP_probe+7)& (0+255),w,b
  4361  002C32  A0D8               	btfss	status,0,c
  4362  002C34  D033               	goto	l964
  4363                           
  4364                           ; BSR set to: 1
  4365                           ;arp.c: 266: UARTTransmitText("Waited ");
  4366  002C36  0E9B               	movlw	low STR_75
  4367  002C38  0100               	movlb	0	; () banked
  4368  002C3A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4369  002C3C  0E7F               	movlw	high STR_75
  4370  002C3E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4371  002C40  EC34  F022         	call	_UARTTransmitText	;wreg free
  4372                           
  4373                           ;arp.c: 267: UARTTransmitText(intToString(waitingTime));
  4374  002C44  C140  F079         	movff	ARP_probe@waitingTime,intToString@val
  4375  002C48  C141  F07A         	movff	ARP_probe@waitingTime+1,intToString@val+1
  4376  002C4C  C142  F07B         	movff	ARP_probe@waitingTime+2,intToString@val+2
  4377  002C50  C143  F07C         	movff	ARP_probe@waitingTime+3,intToString@val+3
  4378  002C54  EC76  F000         	call	_intToString	;wreg free
  4379  002C58  C079  F098         	movff	?_intToString,UARTTransmitText@str
  4380  002C5C  C07A  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  4381  002C60  EC34  F022         	call	_UARTTransmitText	;wreg free
  4382                           
  4383                           ;arp.c: 268: UARTTransmitText(" ms.\n\r");
  4384  002C64  0EB2               	movlw	low STR_76
  4385  002C66  0100               	movlb	0	; () banked
  4386  002C68  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4387  002C6A  0E7F               	movlw	high STR_76
  4388  002C6C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4389  002C6E  EC34  F022         	call	_UARTTransmitText	;wreg free
  4390                           
  4391                           ;arp.c: 269: ARP_sendRequest(ipSender, ipTarget);
  4392  002C72  C144  F100         	movff	ARP_probe@ipSender,ARP_sendRequest@ipSender
  4393  002C76  C145  F101         	movff	ARP_probe@ipSender+1,ARP_sendRequest@ipSender+1
  4394  002C7A  C146  F102         	movff	ARP_probe@ipSender+2,ARP_sendRequest@ipSender+2
  4395  002C7E  C147  F103         	movff	ARP_probe@ipSender+3,ARP_sendRequest@ipSender+3
  4396  002C82  C0FC  F104         	movff	ARP_probe@ipTarget,ARP_sendRequest@ipTarget
  4397  002C86  C0FD  F105         	movff	ARP_probe@ipTarget+1,ARP_sendRequest@ipTarget+1
  4398  002C8A  C0FE  F106         	movff	ARP_probe@ipTarget+2,ARP_sendRequest@ipTarget+2
  4399  002C8E  C0FF  F107         	movff	ARP_probe@ipTarget+3,ARP_sendRequest@ipTarget+3
  4400  002C92  ECD2  F01B         	call	_ARP_sendRequest	;wreg free
  4401                           
  4402                           ;arp.c: 270: state = 2;
  4403  002C96  0E02               	movlw	2
  4404  002C98  0101               	movlb	1	; () banked
  4405  002C9A  6FD8               	movwf	ARP_probe@state& (0+255),b
  4406  002C9C                     l964:
  4407                           
  4408                           ; BSR set to: 1
  4409                           ;arp.c: 271: }
  4410                           ;arp.c: 272: err.code = ERROR_ARP_WAITING_FOR_REPLY;
  4411                           
  4412                           ; BSR set to: 1
  4413  002C9C  0E01               	movlw	1
  4414  002C9E  6F4A               	movwf	(ARP_probe@err+2)& (0+255),b
  4415  002CA0  0E91               	movlw	145
  4416  002CA2  6F49               	movwf	(ARP_probe@err+1)& (0+255),b
  4417                           
  4418                           ;arp.c: 273: break;
  4419  002CA4  0012               	return	
  4420  002CA6                     
  4421                           ; BSR set to: 1
  4422                           ;arp.c: 275: state = 0;
  4423                           
  4424                           ; BSR set to: 1
  4425  002CA6  0E00               	movlw	0
  4426  002CA8  6FD8               	movwf	ARP_probe@state& (0+255),b
  4427                           
  4428                           ;arp.c: 276: err.code = (uint16_t)0;
  4429  002CAA  0E00               	movlw	0
  4430  002CAC  6F4A               	movwf	(ARP_probe@err+2)& (0+255),b
  4431  002CAE  0E00               	movlw	0
  4432  002CB0  6F49               	movwf	(ARP_probe@err+1)& (0+255),b
  4433                           
  4434                           ; BSR set to: 1
  4435                           ;arp.c: 278: }
  4436                           
  4437                           ;arp.c: 277: break;
  4438  002CB2  0012               	return	
  4439  002CB4                     l960:
  4440                           
  4441                           ; BSR set to: 1
  4442                           
  4443                           ; BSR set to: 1
  4444  002CB4  51D8               	movf	ARP_probe@state& (0+255),w,b
  4445                           
  4446                           ; Switch size 1, requested type "space"
  4447                           ; Number of cases is 3, Range of values is 0 to 2
  4448                           ; switch strategies available:
  4449                           ; Name         Instructions Cycles
  4450                           ; simple_byte           10     6 (average)
  4451                           ;	Chosen strategy is simple_byte
  4452  002CB6  0A00               	xorlw	0	; case 0
  4453  002CB8  B4D8               	btfsc	status,2,c
  4454  002CBA  D75B               	goto	l961
  4455  002CBC  0A01               	xorlw	1	; case 1
  4456  002CBE  B4D8               	btfsc	status,2,c
  4457  002CC0  D788               	goto	l963
  4458  002CC2  0A03               	xorlw	3	; case 2
  4459  002CC4  A4D8               	btfss	status,2,c
  4460  002CC6  0012               	return	
  4461  002CC8  D7EE               	goto	l965
  4462  002CCA                     __end_of_ARP_probe:
  4463                           	opt stack 0
  4464                           tblptru	equ	0xFF8
  4465                           tblptrh	equ	0xFF7
  4466                           tblptrl	equ	0xFF6
  4467                           tablat	equ	0xFF5
  4468                           intcon	equ	0xFF2
  4469                           intcon3	equ	0xFF0
  4470                           indf0	equ	0xFEF
  4471                           postinc0	equ	0xFEE
  4472                           plusw0	equ	0xFEB
  4473                           fsr0h	equ	0xFEA
  4474                           fsr0l	equ	0xFE9
  4475                           wreg	equ	0xFE8
  4476                           postdec1	equ	0xFE5
  4477                           plusw1	equ	0xFE3
  4478                           fsr1l	equ	0xFE1
  4479                           indf2	equ	0xFDF
  4480                           postinc2	equ	0xFDE
  4481                           postdec2	equ	0xFDD
  4482                           plusw2	equ	0xFDB
  4483                           fsr2h	equ	0xFDA
  4484                           fsr2l	equ	0xFD9
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function _rand *****************
  4488 ;; Defined at:
  4489 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;		None
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  2   12[BANK0 ] int 
  4496 ;; Registers used:
  4497 ;;		wreg, status,2, status,0, cstack
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4503 ;;      Params:         0       2       0       0       0       0       0       0       0
  4504 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4505 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4506 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4507 ;;Total ram usage:        2 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    5
  4510 ;; This function calls:
  4511 ;;		___lmul
  4512 ;; This function is called by:
  4513 ;;		_ARP_probe
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           	psect	text8
  4518  004412                     __ptext8:
  4519                           	opt stack 0
  4520  004412                     _rand:
  4521                           	opt stack 22
  4522                           
  4523                           ; BSR set to: 1
  4524                           ;incstack = 0
  4525  004412  C04B  F060         	movff	_randx,___lmul@multiplier
  4526  004416  C04C  F061         	movff	_randx+1,___lmul@multiplier+1
  4527  00441A  C04D  F062         	movff	_randx+2,___lmul@multiplier+2
  4528  00441E  C04E  F063         	movff	_randx+3,___lmul@multiplier+3
  4529  004422  0E6D               	movlw	109
  4530  004424  0100               	movlb	0	; () banked
  4531  004426  6F64               	movwf	___lmul@multiplicand& (0+255),b
  4532  004428  0E4E               	movlw	78
  4533  00442A  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  4534  00442C  0EC6               	movlw	198
  4535  00442E  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  4536  004430  0E41               	movlw	65
  4537  004432  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  4538  004434  ECDD  F021         	call	___lmul	;wreg free
  4539  004438  C060  F04B         	movff	?___lmul,_randx
  4540  00443C  C061  F04C         	movff	?___lmul+1,_randx+1
  4541  004440  C062  F04D         	movff	?___lmul+2,_randx+2
  4542  004444  C063  F04E         	movff	?___lmul+3,_randx+3
  4543  004448  0E39               	movlw	57
  4544  00444A  264B               	addwf	_randx,f,c
  4545  00444C  0E30               	movlw	48
  4546  00444E  224C               	addwfc	_randx+1,f,c
  4547  004450  0E00               	movlw	0
  4548  004452  224D               	addwfc	_randx+2,f,c
  4549  004454  0E00               	movlw	0
  4550  004456  224E               	addwfc	_randx+3,f,c
  4551  004458  0EFF               	movlw	255
  4552  00445A  144D               	andwf	_randx+2,w,c
  4553  00445C  0100               	movlb	0	; () banked
  4554  00445E  6F6C               	movwf	?_rand& (0+255),b
  4555  004460  0E7F               	movlw	127
  4556  004462  144E               	andwf	_randx+3,w,c
  4557  004464  6F6D               	movwf	(?_rand+1)& (0+255),b
  4558  004466  0012               	return	
  4559  004468                     __end_of_rand:
  4560                           	opt stack 0
  4561                           tblptru	equ	0xFF8
  4562                           tblptrh	equ	0xFF7
  4563                           tblptrl	equ	0xFF6
  4564                           tablat	equ	0xFF5
  4565                           intcon	equ	0xFF2
  4566                           intcon3	equ	0xFF0
  4567                           indf0	equ	0xFEF
  4568                           postinc0	equ	0xFEE
  4569                           plusw0	equ	0xFEB
  4570                           fsr0h	equ	0xFEA
  4571                           fsr0l	equ	0xFE9
  4572                           wreg	equ	0xFE8
  4573                           postdec1	equ	0xFE5
  4574                           plusw1	equ	0xFE3
  4575                           fsr1l	equ	0xFE1
  4576                           indf2	equ	0xFDF
  4577                           postinc2	equ	0xFDE
  4578                           postdec2	equ	0xFDD
  4579                           plusw2	equ	0xFDB
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584 ;; *************** function ___awmod *****************
  4585 ;; Defined at:
  4586 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  dividend        2   14[BANK0 ] int 
  4589 ;;  divisor         2   16[BANK0 ] int 
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;  sign            1   19[BANK0 ] unsigned char 
  4592 ;;  counter         1   18[BANK0 ] unsigned char 
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  2   14[BANK0 ] int 
  4595 ;; Registers used:
  4596 ;;		wreg, status,2, status,0
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4602 ;;      Params:         0       4       0       0       0       0       0       0       0
  4603 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4605 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4606 ;;Total ram usage:        6 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    4
  4609 ;; This function calls:
  4610 ;;		Nothing
  4611 ;; This function is called by:
  4612 ;;		_ARP_probe
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           	psect	text9
  4617  00405A                     __ptext9:
  4618                           	opt stack 0
  4619  00405A                     ___awmod:
  4620                           	opt stack 23
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;incstack = 0
  4624  00405A  0E00               	movlw	0
  4625  00405C  0100               	movlb	0	; () banked
  4626  00405E  6F73               	movwf	___awmod@sign& (0+255),b
  4627                           
  4628                           ; BSR set to: 0
  4629  004060  AF6F               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4630  004062  D006               	goto	l1268
  4631                           
  4632                           ; BSR set to: 0
  4633  004064  6D6E               	negf	___awmod@dividend& (0+255),b
  4634  004066  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
  4635  004068  B0D8               	btfsc	status,0,c
  4636  00406A  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
  4637                           
  4638                           ; BSR set to: 0
  4639  00406C  0E01               	movlw	1
  4640  00406E  6F73               	movwf	___awmod@sign& (0+255),b
  4641  004070                     l1268:
  4642                           
  4643                           ; BSR set to: 0
  4644                           
  4645                           ; BSR set to: 0
  4646  004070  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4647  004072  D004               	goto	l1269
  4648                           
  4649                           ; BSR set to: 0
  4650  004074  6D70               	negf	___awmod@divisor& (0+255),b
  4651  004076  1F71               	comf	(___awmod@divisor+1)& (0+255),f,b
  4652  004078  B0D8               	btfsc	status,0,c
  4653  00407A  2B71               	incf	(___awmod@divisor+1)& (0+255),f,b
  4654  00407C                     l1269:
  4655                           
  4656                           ; BSR set to: 0
  4657                           
  4658                           ; BSR set to: 0
  4659  00407C  5170               	movf	___awmod@divisor& (0+255),w,b
  4660  00407E  1171               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4661  004080  B4D8               	btfsc	status,2,c
  4662  004082  D018               	goto	l1276
  4663                           
  4664                           ; BSR set to: 0
  4665  004084  0E01               	movlw	1
  4666  004086  6F72               	movwf	___awmod@counter& (0+255),b
  4667  004088  D004               	goto	l1271
  4668  00408A                     
  4669                           ; BSR set to: 0
  4670                           
  4671                           ; BSR set to: 0
  4672  00408A  90D8               	bcf	status,0,c
  4673  00408C  3770               	rlcf	___awmod@divisor& (0+255),f,b
  4674  00408E  3771               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4675  004090  2B72               	incf	___awmod@counter& (0+255),f,b
  4676  004092                     l1271:
  4677                           
  4678                           ; BSR set to: 0
  4679                           
  4680                           ; BSR set to: 0
  4681  004092  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4682  004094  D7FA               	goto	l1272
  4683  004096                     u10480:
  4684                           
  4685                           ; BSR set to: 0
  4686                           
  4687                           ; BSR set to: 0
  4688                           
  4689                           ; BSR set to: 0
  4690  004096  5170               	movf	___awmod@divisor& (0+255),w,b
  4691  004098  5D6E               	subwf	___awmod@dividend& (0+255),w,b
  4692  00409A  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
  4693  00409C  596F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4694  00409E  A0D8               	btfss	status,0,c
  4695  0040A0  D004               	goto	l1275
  4696                           
  4697                           ; BSR set to: 0
  4698  0040A2  5170               	movf	___awmod@divisor& (0+255),w,b
  4699  0040A4  5F6E               	subwf	___awmod@dividend& (0+255),f,b
  4700  0040A6  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
  4701  0040A8  5B6F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4702  0040AA                     l1275:
  4703                           
  4704                           ; BSR set to: 0
  4705                           
  4706                           ; BSR set to: 0
  4707  0040AA  90D8               	bcf	status,0,c
  4708  0040AC  3371               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4709  0040AE  3370               	rrcf	___awmod@divisor& (0+255),f,b
  4710                           
  4711                           ; BSR set to: 0
  4712  0040B0  2F72               	decfsz	___awmod@counter& (0+255),f,b
  4713  0040B2  D7F1               	goto	u10480
  4714  0040B4                     l1276:
  4715                           
  4716                           ; BSR set to: 0
  4717                           
  4718                           ; BSR set to: 0
  4719                           
  4720                           ; BSR set to: 0
  4721  0040B4  5173               	movf	___awmod@sign& (0+255),w,b
  4722  0040B6  B4D8               	btfsc	status,2,c
  4723  0040B8  D004               	goto	l1277
  4724                           
  4725                           ; BSR set to: 0
  4726  0040BA  6D6E               	negf	___awmod@dividend& (0+255),b
  4727  0040BC  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
  4728  0040BE  B0D8               	btfsc	status,0,c
  4729  0040C0  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
  4730  0040C2                     l1277:
  4731                           
  4732                           ; BSR set to: 0
  4733                           
  4734                           ; BSR set to: 0
  4735  0040C2  C06E  F06E         	movff	___awmod@dividend,?___awmod
  4736  0040C6  C06F  F06F         	movff	___awmod@dividend+1,?___awmod+1
  4737  0040CA  0012               	return	
  4738  0040CC                     __end_of___awmod:
  4739                           	opt stack 0
  4740                           tblptru	equ	0xFF8
  4741                           tblptrh	equ	0xFF7
  4742                           tblptrl	equ	0xFF6
  4743                           tablat	equ	0xFF5
  4744                           intcon	equ	0xFF2
  4745                           intcon3	equ	0xFF0
  4746                           indf0	equ	0xFEF
  4747                           postinc0	equ	0xFEE
  4748                           plusw0	equ	0xFEB
  4749                           fsr0h	equ	0xFEA
  4750                           fsr0l	equ	0xFE9
  4751                           wreg	equ	0xFE8
  4752                           postdec1	equ	0xFE5
  4753                           plusw1	equ	0xFE3
  4754                           fsr1l	equ	0xFE1
  4755                           indf2	equ	0xFDF
  4756                           postinc2	equ	0xFDE
  4757                           postdec2	equ	0xFDD
  4758                           plusw2	equ	0xFDB
  4759                           fsr2h	equ	0xFDA
  4760                           fsr2l	equ	0xFD9
  4761                           status	equ	0xFD8
  4762                           
  4763 ;; *************** function _ARP_sendRequest *****************
  4764 ;; Defined at:
  4765 ;;		line 186 in file "src/stack/protocols/arp.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;  ipSender        4    0[BANK1 ] struct ipv4_address
  4768 ;;  ipTarget        4    4[BANK1 ] struct ipv4_address
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;  request        32   20[BANK1 ] struct ARP_message
  4771 ;;  targetMAC       6   14[BANK1 ] struct macaddress
  4772 ;;  senderMAC       6    8[BANK1 ] struct macaddress
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    wreg      void 
  4775 ;; Registers used:
  4776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4782 ;;      Params:         0       0       8       0       0       0       0       0       0
  4783 ;;      Locals:         0       0      44       0       0       0       0       0       0
  4784 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4785 ;;      Totals:         0       0      52       0       0       0       0       0       0
  4786 ;;Total ram usage:       52 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:   10
  4789 ;; This function calls:
  4790 ;;		_ARP_send
  4791 ;;		_ethernetController_getMacAddress
  4792 ;;		_ipv4_getIPSourceAddress
  4793 ;;		_mac_setAllZero
  4794 ;; This function is called by:
  4795 ;;		_ARP_probe
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           	psect	text10
  4800  0037A4                     __ptext10:
  4801                           	opt stack 0
  4802  0037A4                     _ARP_sendRequest:
  4803                           	opt stack 17
  4804                           
  4805                           ;arp.c: 187: ARP_message_t request;
  4806                           ;arp.c: 188: macaddress_t senderMAC;
  4807                           ;arp.c: 189: macaddress_t targetMAC;
  4808                           ;arp.c: 191: senderMAC = ethernetController_getMacAddress();
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;incstack = 0
  4812  0037A4  ECF3  F01F         	call	_ethernetController_getMacAddress	;wreg free
  4813  0037A8  EE21  F008         	lfsr	2,ARP_sendRequest@senderMAC
  4814  0037AC  0E05               	movlw	5
  4815  0037AE                     u10321:
  4816  0037AE  CFEB FFDB          	movff	plusw0,plusw2
  4817  0037B2  06E8               	decf	wreg,f,c
  4818  0037B4  E2FC               	bc	u10321
  4819                           
  4820                           ;arp.c: 193: ipSender = ipv4_getIPSourceAddress();
  4821  0037B6  EC43  F026         	call	_ipv4_getIPSourceAddress	;wreg free
  4822  0037BA  C060  F100         	movff	?_ipv4_getIPSourceAddress,ARP_sendRequest@ipSender
  4823  0037BE  C061  F101         	movff	?_ipv4_getIPSourceAddress+1,ARP_sendRequest@ipSender+1
  4824  0037C2  C062  F102         	movff	?_ipv4_getIPSourceAddress+2,ARP_sendRequest@ipSender+2
  4825  0037C6  C063  F103         	movff	?_ipv4_getIPSourceAddress+3,ARP_sendRequest@ipSender+3
  4826                           
  4827                           ;arp.c: 194: mac_setAllZero(&targetMAC);
  4828  0037CA  0E0E               	movlw	low ARP_sendRequest@targetMAC
  4829  0037CC  0100               	movlb	0	; () banked
  4830  0037CE  6F60               	movwf	mac_setAllZero@mac& (0+255),b
  4831  0037D0  0E01               	movlw	high ARP_sendRequest@targetMAC
  4832  0037D2  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
  4833  0037D4  EC82  F025         	call	_mac_setAllZero	;wreg free
  4834                           
  4835                           ;arp.c: 196: request.hlen = 6;
  4836  0037D8  0E06               	movlw	6
  4837  0037DA  0101               	movlb	1	; () banked
  4838  0037DC  6F18               	movwf	(ARP_sendRequest@request+4)& (0+255),b
  4839                           
  4840                           ; BSR set to: 1
  4841                           ;arp.c: 197: request.plen = 4;
  4842  0037DE  0E04               	movlw	4
  4843  0037E0  6F19               	movwf	(ARP_sendRequest@request+5)& (0+255),b
  4844                           
  4845                           ; BSR set to: 1
  4846                           ;arp.c: 198: request.htype = ARP_HTYPE_ETHERNET;
  4847  0037E2  0E00               	movlw	0
  4848  0037E4  6F15               	movwf	(ARP_sendRequest@request+1)& (0+255),b
  4849  0037E6  0E01               	movlw	1
  4850  0037E8  6F14               	movwf	ARP_sendRequest@request& (0+255),b
  4851                           
  4852                           ; BSR set to: 1
  4853                           ;arp.c: 199: request.ptype = ARP_PTYPE_IPv4;
  4854  0037EA  0E08               	movlw	8
  4855  0037EC  6F17               	movwf	(ARP_sendRequest@request+3)& (0+255),b
  4856  0037EE  0E00               	movlw	0
  4857  0037F0  6F16               	movwf	(ARP_sendRequest@request+2)& (0+255),b
  4858                           
  4859                           ; BSR set to: 1
  4860                           ;arp.c: 200: request.operation = ARP_REQUEST;
  4861  0037F2  0E00               	movlw	0
  4862  0037F4  6F1B               	movwf	(ARP_sendRequest@request+7)& (0+255),b
  4863  0037F6  0E01               	movlw	1
  4864  0037F8  6F1A               	movwf	(ARP_sendRequest@request+6)& (0+255),b
  4865                           
  4866                           ; BSR set to: 1
  4867                           ;arp.c: 201: request.senderIPAddress = ipSender;
  4868  0037FA  C100  F122         	movff	ARP_sendRequest@ipSender,ARP_sendRequest@request+14
  4869  0037FE  C101  F123         	movff	ARP_sendRequest@ipSender+1,ARP_sendRequest@request+15
  4870  003802  C102  F124         	movff	ARP_sendRequest@ipSender+2,ARP_sendRequest@request+16
  4871  003806  C103  F125         	movff	ARP_sendRequest@ipSender+3,ARP_sendRequest@request+17
  4872                           
  4873                           ; BSR set to: 1
  4874                           ;arp.c: 202: request.senderMACAddress = senderMAC;
  4875  00380A  EE21  F008         	lfsr	2,ARP_sendRequest@senderMAC
  4876  00380E  EE11  F01C         	lfsr	1,ARP_sendRequest@request+8
  4877  003812  0E05               	movlw	5
  4878  003814                     u10331:
  4879  003814  CFDB FFE3          	movff	plusw2,plusw1
  4880  003818  06E8               	decf	wreg,f,c
  4881  00381A  E2FC               	bc	u10331
  4882                           
  4883                           ; BSR set to: 1
  4884                           ;arp.c: 203: request.targetIPAddress = ipTarget;
  4885  00381C  C104  F12C         	movff	ARP_sendRequest@ipTarget,ARP_sendRequest@request+24
  4886  003820  C105  F12D         	movff	ARP_sendRequest@ipTarget+1,ARP_sendRequest@request+25
  4887  003824  C106  F12E         	movff	ARP_sendRequest@ipTarget+2,ARP_sendRequest@request+26
  4888  003828  C107  F12F         	movff	ARP_sendRequest@ipTarget+3,ARP_sendRequest@request+27
  4889                           
  4890                           ; BSR set to: 1
  4891                           ;arp.c: 204: request.targetMACAddress = targetMAC;
  4892  00382C  EE21  F00E         	lfsr	2,ARP_sendRequest@targetMAC
  4893  003830  EE11  F026         	lfsr	1,ARP_sendRequest@request+18
  4894  003834  0E05               	movlw	5
  4895  003836                     u10341:
  4896  003836  CFDB FFE3          	movff	plusw2,plusw1
  4897  00383A  06E8               	decf	wreg,f,c
  4898  00383C  E2FC               	bc	u10341
  4899                           
  4900                           ; BSR set to: 1
  4901                           ;arp.c: 206: ARP_send(request);
  4902  00383E  EE21  F014         	lfsr	2,ARP_sendRequest@request
  4903  003842  EE00  F0A7         	lfsr	0,ARP_send@arp
  4904  003846  0E1F               	movlw	31
  4905  003848                     u10351:
  4906  003848  CFDB FFEB          	movff	plusw2,plusw0
  4907  00384C  06E8               	decf	wreg,f,c
  4908  00384E  E2FC               	bc	u10351
  4909  003850  EC4C  F00D         	call	_ARP_send	;wreg free
  4910  003854  0012               	return		;funcret
  4911  003856                     __end_of_ARP_sendRequest:
  4912                           	opt stack 0
  4913                           tblptru	equ	0xFF8
  4914                           tblptrh	equ	0xFF7
  4915                           tblptrl	equ	0xFF6
  4916                           tablat	equ	0xFF5
  4917                           intcon	equ	0xFF2
  4918                           intcon3	equ	0xFF0
  4919                           indf0	equ	0xFEF
  4920                           postinc0	equ	0xFEE
  4921                           plusw0	equ	0xFEB
  4922                           fsr0h	equ	0xFEA
  4923                           fsr0l	equ	0xFE9
  4924                           wreg	equ	0xFE8
  4925                           postdec1	equ	0xFE5
  4926                           plusw1	equ	0xFE3
  4927                           fsr1l	equ	0xFE1
  4928                           indf2	equ	0xFDF
  4929                           postinc2	equ	0xFDE
  4930                           postdec2	equ	0xFDD
  4931                           plusw2	equ	0xFDB
  4932                           fsr2h	equ	0xFDA
  4933                           fsr2l	equ	0xFD9
  4934                           status	equ	0xFD8
  4935                           
  4936 ;; *************** function _ipv4_sendFrame *****************
  4937 ;; Defined at:
  4938 ;;		line 40 in file "src/stack/protocols/ipv4.c"
  4939 ;; Parameters:    Size  Location     Type
  4940 ;;  ipPacket       66    0[BANK0 ] struct ipv4_packet
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  err             3   66[BANK0 ] struct error
  4943 ;;  index           1    0        unsigned char 
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  3    0[BANK0 ] struct error
  4946 ;; Registers used:
  4947 ;;		wreg, status,2
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4953 ;;      Params:         0      66       0       0       0       0       0       0       0
  4954 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4955 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4956 ;;      Totals:         0      69       0       0       0       0       0       0       0
  4957 ;;Total ram usage:       69 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    4
  4960 ;; This function calls:
  4961 ;;		Nothing
  4962 ;; This function is called by:
  4963 ;;		_handleStackBackgroundTasks
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           	psect	text11
  4968  004BF0                     __ptext11:
  4969                           	opt stack 0
  4970  004BF0                     _ipv4_sendFrame:
  4971                           	opt stack 25
  4972                           
  4973                           ;ipv4.c: 41: error_t err;
  4974                           ;ipv4.c: 42: err.module = ERROR_MODULE_ARP;
  4975                           
  4976                           ;incstack = 0
  4977  004BF0  0E03               	movlw	3
  4978  004BF2  0100               	movlb	0	; () banked
  4979  004BF4  6FA2               	movwf	ipv4_sendFrame@err& (0+255),b
  4980                           
  4981                           ;ipv4.c: 43: uint8_t index;
  4982                           ;ipv4.c: 44: uint8_t static requestCounter = 0;
  4983                           ;ipv4.c: 45: time_t static oldTime = 0;
  4984                           ;ipv4.c: 74: err.code = ERROR_ARP_WAITING_FOR_REPLY;
  4985  004BF6  0E01               	movlw	1
  4986  004BF8  6FA4               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  4987  004BFA  0E91               	movlw	145
  4988  004BFC  6FA3               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;ipv4.c: 75: return err;
  4992  004BFE  C0A2  F060         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  4993  004C02  C0A3  F061         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  4994  004C06  C0A4  F062         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  4995  004C0A  0012               	return	
  4996  004C0C                     __end_of_ipv4_sendFrame:
  4997                           	opt stack 0
  4998                           tblptru	equ	0xFF8
  4999                           tblptrh	equ	0xFF7
  5000                           tblptrl	equ	0xFF6
  5001                           tablat	equ	0xFF5
  5002                           intcon	equ	0xFF2
  5003                           intcon3	equ	0xFF0
  5004                           indf0	equ	0xFEF
  5005                           postinc0	equ	0xFEE
  5006                           plusw0	equ	0xFEB
  5007                           fsr0h	equ	0xFEA
  5008                           fsr0l	equ	0xFE9
  5009                           wreg	equ	0xFE8
  5010                           postdec1	equ	0xFE5
  5011                           plusw1	equ	0xFE3
  5012                           fsr1l	equ	0xFE1
  5013                           indf2	equ	0xFDF
  5014                           postinc2	equ	0xFDE
  5015                           postdec2	equ	0xFDD
  5016                           plusw2	equ	0xFDB
  5017                           fsr2h	equ	0xFDA
  5018                           fsr2l	equ	0xFD9
  5019                           status	equ	0xFD8
  5020                           
  5021 ;; *************** function _ethernet_rxGetNewFrame *****************
  5022 ;; Defined at:
  5023 ;;		line 54 in file "src/eth/ethernet.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;  frame           2  120[BANK1 ] PTR struct ethernetFrame
  5026 ;;		 -> stack.ethernet(15), stack(122), 
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;  err             3  131[BANK1 ] struct error
  5029 ;; Return value:  Size  Location     Type
  5030 ;;                  3  120[BANK1 ] struct error
  5031 ;; Registers used:
  5032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5033 ;; Tracked objects:
  5034 ;;		On entry : 0/0
  5035 ;;		On exit  : 0/0
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5038 ;;      Params:         0       0       3       0       0       0       0       0       0
  5039 ;;      Locals:         0       0       3       0       0       0       0       0       0
  5040 ;;      Temps:          0       0       8       0       0       0       0       0       0
  5041 ;;      Totals:         0       0      14       0       0       0       0       0       0
  5042 ;;Total ram usage:       14 bytes
  5043 ;; Hardware stack levels used:    1
  5044 ;; Hardware stack levels required when called:   12
  5045 ;; This function calls:
  5046 ;;		_ARP_handleNewPacket
  5047 ;;		_UARTTransmitInt
  5048 ;;		_UARTTransmitText
  5049 ;;		_etherTypeToString
  5050 ;;		_ethernetController_dropPacket
  5051 ;;		_ethernetController_getEtherTypeField
  5052 ;;		_ethernetController_getNextPacketPointer
  5053 ;;		_ethernetController_getRSV
  5054 ;;		_ethernetController_updateNextPacketPointer
  5055 ;;		_getMillis
  5056 ;;		_intToString
  5057 ;;		_ipv4_handleNewPacket
  5058 ;;		_macToString
  5059 ;; This function is called by:
  5060 ;;		_handleStackBackgroundTasks
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           	psect	text12
  5065  00067E                     __ptext12:
  5066                           	opt stack 0
  5067  00067E                     _ethernet_rxGetNewFrame:
  5068                           	opt stack 17
  5069                           
  5070                           ;ethernet.c: 55: uint32_t static counter = 0;
  5071                           ;ethernet.c: 56: error_t err;
  5072                           ;ethernet.c: 57: err.module = ERROR_MODULE_ETHERNET;
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;incstack = 0
  5076  00067E  0E02               	movlw	2
  5077  000680  0101               	movlb	1	; () banked
  5078  000682  6F83               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  5079                           
  5080                           ;ethernet.c: 58: err.code = (uint16_t)0;
  5081  000684  0E00               	movlw	0
  5082  000686  6F85               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  5083  000688  0E00               	movlw	0
  5084  00068A  6F84               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  5085                           
  5086                           ; BSR set to: 1
  5087                           ;ethernet.c: 60: frame->tReceived = getMillis();
  5088  00068C  EC3A  F026         	call	_getMillis	;wreg free
  5089  000690  0101               	movlb	1	; () banked
  5090  000692  EE20 F01E          	lfsr	2,30
  5091  000696  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5092  000698  26D9               	addwf	fsr2l,f,c
  5093  00069A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5094  00069C  22DA               	addwfc	fsr2h,f,c
  5095  00069E  0100               	movlb	0	; () banked
  5096  0006A0  C060  FFDE         	movff	?_getMillis,postinc2
  5097  0006A4  C061  FFDE         	movff	?_getMillis+1,postinc2
  5098  0006A8  C062  FFDE         	movff	?_getMillis+2,postinc2
  5099  0006AC  C063  FFDE         	movff	?_getMillis+3,postinc2
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;ethernet.c: 61: frame->memory.start = ethernetController_getNextPacketPointer();
  5103  0006B0  EC64  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
  5104  0006B4  0101               	movlb	1	; () banked
  5105  0006B6  EE20 F010          	lfsr	2,16
  5106  0006BA  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5107  0006BC  26D9               	addwf	fsr2l,f,c
  5108  0006BE  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5109  0006C0  22DA               	addwfc	fsr2h,f,c
  5110  0006C2  0100               	movlb	0	; () banked
  5111  0006C4  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  5112  0006C8  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;ethernet.c: 63: ethernetController_updateNextPacketPointer();
  5116  0006CC  EC40  F01F         	call	_ethernetController_updateNextPacketPointer	;wreg free
  5117                           
  5118                           ;ethernet.c: 66: frame->memory.fIsAssigned = 1;
  5119  0006D0  0101               	movlb	1	; () banked
  5120  0006D2  EE20 F016          	lfsr	2,22
  5121  0006D6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5122  0006D8  26D9               	addwf	fsr2l,f,c
  5123  0006DA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5124  0006DC  22DA               	addwfc	fsr2h,f,c
  5125  0006DE  0E01               	movlw	1
  5126  0006E0  6EDF               	movwf	indf2,c
  5127                           
  5128                           ; BSR set to: 1
  5129                           ;ethernet.c: 67: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  5130  0006E2  EE20 F010          	lfsr	2,16
  5131  0006E6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5132  0006E8  26D9               	addwf	fsr2l,f,c
  5133  0006EA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5134  0006EC  22DA               	addwfc	fsr2h,f,c
  5135  0006EE  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  5136  0006F2  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  5137  0006F6  ECB9  F01F         	call	_ethernetController_getRSV	;wreg free
  5138  0006FA  0101               	movlb	1	; () banked
  5139  0006FC  EE20 F019          	lfsr	2,25
  5140  000700  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5141  000702  26D9               	addwf	fsr2l,f,c
  5142  000704  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5143  000706  22DA               	addwfc	fsr2h,f,c
  5144  000708  0E04               	movlw	4
  5145  00070A                     u11071:
  5146  00070A  CFEB FFDB          	movff	plusw0,plusw2
  5147  00070E  06E8               	decf	wreg,f,c
  5148  000710  E2FC               	bc	u11071
  5149                           
  5150                           ; BSR set to: 1
  5151                           ;ethernet.c: 68: frame->memory.length = frame->receiveStatusVector.length;
  5152  000712  EE20 F019          	lfsr	2,25
  5153  000716  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5154  000718  26D9               	addwf	fsr2l,f,c
  5155  00071A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5156  00071C  22DA               	addwfc	fsr2h,f,c
  5157  00071E  EE10 F014          	lfsr	1,20
  5158  000722  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5159  000724  26E1               	addwf	fsr1l,f,c
  5160  000726  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5161  000728  22E2               	addwfc	fsr1h,f,c
  5162  00072A  CFDE FFE6          	movff	postinc2,postinc1
  5163  00072E  CFDD FFE5          	movff	postdec2,postdec1
  5164                           
  5165                           ; BSR set to: 1
  5166                           ;ethernet.c: 71: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  5167  000732  EE20 F014          	lfsr	2,20
  5168  000736  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5169  000738  26D9               	addwf	fsr2l,f,c
  5170  00073A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5171  00073C  22DA               	addwfc	fsr2h,f,c
  5172  00073E  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5173  000742  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5174  000746  EE20 F010          	lfsr	2,16
  5175  00074A  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5176  00074C  26D9               	addwf	fsr2l,f,c
  5177  00074E  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5178  000750  22DA               	addwfc	fsr2h,f,c
  5179  000752  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5180  000756  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5181  00075A  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5182  00075C  277D               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  5183  00075E  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5184  000760  237E               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  5185  000762  0E60               	movlw	96
  5186  000764  5D7E               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  5187  000766  A0D8               	btfss	status,0,c
  5188  000768  D03B               	goto	l366
  5189                           
  5190                           ; BSR set to: 1
  5191                           ;ethernet.c: 73: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  5192  00076A  0E00               	movlw	0
  5193  00076C  6F7B               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  5194  00076E  0E30               	movlw	48
  5195  000770  6F7C               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  5196  000772  EE20 F014          	lfsr	2,20
  5197  000776  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5198  000778  26D9               	addwf	fsr2l,f,c
  5199  00077A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5200  00077C  22DA               	addwfc	fsr2h,f,c
  5201  00077E  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5202  000782  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5203  000786  0EFF               	movlw	255
  5204  000788  6F7F               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  5205  00078A  0E2F               	movlw	47
  5206  00078C  6F80               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  5207  00078E  EE20 F010          	lfsr	2,16
  5208  000792  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5209  000794  26D9               	addwf	fsr2l,f,c
  5210  000796  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5211  000798  22DA               	addwfc	fsr2h,f,c
  5212  00079A  CFDE F181          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  5213  00079E  CFDD F182          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  5214  0007A2  1F81               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5215  0007A4  1F82               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5216  0007A6  4B81               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5217  0007A8  2B82               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5218  0007AA  517F               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  5219  0007AC  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5220  0007AE  5180               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  5221  0007B0  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5222  0007B2  1F81               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5223  0007B4  1F82               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5224  0007B6  4B81               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5225  0007B8  2B82               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5226  0007BA  517D               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  5227  0007BC  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5228  0007BE  517E               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  5229  0007C0  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5230  0007C2  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5231  0007C4  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5232  0007C6  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5233  0007C8  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5234  0007CA  EE20 F012          	lfsr	2,18
  5235  0007CE  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5236  0007D0  26D9               	addwf	fsr2l,f,c
  5237  0007D2  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5238  0007D4  22DA               	addwfc	fsr2h,f,c
  5239  0007D6  C181  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  5240  0007DA  C182  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  5241                           
  5242                           ;ethernet.c: 74: } else {
  5243  0007DE  D022               	goto	l367
  5244  0007E0                     l366:
  5245                           
  5246                           ; BSR set to: 1
  5247                           ;ethernet.c: 75: frame->memory.end = frame->memory.start + frame->memory.length;
  5248                           
  5249                           ; BSR set to: 1
  5250  0007E0  EE20 F014          	lfsr	2,20
  5251  0007E4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5252  0007E6  26D9               	addwf	fsr2l,f,c
  5253  0007E8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5254  0007EA  22DA               	addwfc	fsr2h,f,c
  5255  0007EC  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5256  0007F0  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5257  0007F4  EE20 F010          	lfsr	2,16
  5258  0007F8  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5259  0007FA  26D9               	addwf	fsr2l,f,c
  5260  0007FC  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5261  0007FE  22DA               	addwfc	fsr2h,f,c
  5262  000800  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5263  000804  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5264  000808  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5265  00080A  277D               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  5266  00080C  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5267  00080E  237E               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  5268  000810  EE20 F012          	lfsr	2,18
  5269  000814  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5270  000816  26D9               	addwf	fsr2l,f,c
  5271  000818  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5272  00081A  22DA               	addwfc	fsr2h,f,c
  5273  00081C  C17D  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  5274  000820  C17E  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  5275  000824                     l367:
  5276                           
  5277                           ; BSR set to: 1
  5278                           ;ethernet.c: 76: }
  5279                           ;ethernet.c: 77: frame->ethertype = ethernetController_getEtherTypeField(frame->memory);
  5280                           
  5281                           ; BSR set to: 1
  5282  000824  EE20 F010          	lfsr	2,16
  5283  000828  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5284  00082A  26D9               	addwf	fsr2l,f,c
  5285  00082C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5286  00082E  22DA               	addwfc	fsr2h,f,c
  5287  000830  EE00  F06F         	lfsr	0,ethernetController_getEtherTypeField@field
  5288  000834  0E08               	movlw	8
  5289  000836                     u11091:
  5290  000836  CFDB FFEB          	movff	plusw2,plusw0
  5291  00083A  06E8               	decf	wreg,f,c
  5292  00083C  E2FC               	bc	u11091
  5293  00083E  EC9F  F020         	call	_ethernetController_getEtherTypeField	;wreg free
  5294  000842  0101               	movlb	1	; () banked
  5295  000844  EE20 F00E          	lfsr	2,14
  5296  000848  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5297  00084A  26D9               	addwf	fsr2l,f,c
  5298  00084C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5299  00084E  22DA               	addwfc	fsr2h,f,c
  5300  000850  0100               	movlb	0	; () banked
  5301  000852  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  5302  000856  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;ethernet.c: 79: UARTTransmitText("[");
  5306  00085A  0ECE               	movlw	low (STR_65+3)
  5307  00085C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5308  00085E  0E7F               	movlw	high (STR_65+3)
  5309  000860  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5310  000862  EC34  F022         	call	_UARTTransmitText	;wreg free
  5311                           
  5312                           ;ethernet.c: 80: UARTTransmitText(intToString(counter++));
  5313  000866  C039  F079         	movff	ethernet_rxGetNewFrame@counter,intToString@val
  5314  00086A  C03A  F07A         	movff	ethernet_rxGetNewFrame@counter+1,intToString@val+1
  5315  00086E  C03B  F07B         	movff	ethernet_rxGetNewFrame@counter+2,intToString@val+2
  5316  000872  C03C  F07C         	movff	ethernet_rxGetNewFrame@counter+3,intToString@val+3
  5317  000876  EC76  F000         	call	_intToString	;wreg free
  5318  00087A  C079  F098         	movff	?_intToString,UARTTransmitText@str
  5319  00087E  C07A  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5320  000882  EC34  F022         	call	_UARTTransmitText	;wreg free
  5321  000886  0E01               	movlw	1
  5322  000888  2639               	addwf	ethernet_rxGetNewFrame@counter,f,c
  5323  00088A  0E00               	movlw	0
  5324  00088C  223A               	addwfc	ethernet_rxGetNewFrame@counter+1,f,c
  5325  00088E  223B               	addwfc	ethernet_rxGetNewFrame@counter+2,f,c
  5326  000890  223C               	addwfc	ethernet_rxGetNewFrame@counter+3,f,c
  5327                           
  5328                           ;ethernet.c: 81: UARTTransmitText("]");
  5329  000892  0EFA               	movlw	low (STR_18+1)
  5330  000894  0100               	movlb	0	; () banked
  5331  000896  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5332  000898  0E7F               	movlw	high (STR_18+1)
  5333  00089A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5334  00089C  EC34  F022         	call	_UARTTransmitText	;wreg free
  5335                           
  5336                           ;ethernet.c: 83: if (frame->receiveStatusVector.broadcast)
  5337  0008A0  0101               	movlb	1	; () banked
  5338  0008A2  EE20 F01B          	lfsr	2,27
  5339  0008A6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5340  0008A8  26D9               	addwf	fsr2l,f,c
  5341  0008AA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5342  0008AC  22DA               	addwfc	fsr2h,f,c
  5343  0008AE  AEDF               	btfss	indf2,7,c
  5344  0008B0  D007               	goto	l368
  5345                           
  5346                           ; BSR set to: 1
  5347                           ;ethernet.c: 84: UARTTransmitText("[Broadcast]");
  5348  0008B2  0E5E               	movlw	low STR_3
  5349  0008B4  0100               	movlb	0	; () banked
  5350  0008B6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5351  0008B8  0E7F               	movlw	high STR_3
  5352  0008BA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5353  0008BC  EC34  F022         	call	_UARTTransmitText	;wreg free
  5354  0008C0                     l368:
  5355                           
  5356                           ;ethernet.c: 85: if (frame->receiveStatusVector.unicast)
  5357  0008C0  0101               	movlb	1	; () banked
  5358  0008C2  EE20 F01D          	lfsr	2,29
  5359  0008C6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5360  0008C8  26D9               	addwf	fsr2l,f,c
  5361  0008CA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5362  0008CC  22DA               	addwfc	fsr2h,f,c
  5363  0008CE  A4DF               	btfss	indf2,2,c
  5364  0008D0  D007               	goto	l369
  5365                           
  5366                           ; BSR set to: 1
  5367                           ;ethernet.c: 86: UARTTransmitText("[Unicast]");
  5368  0008D2  0E7F               	movlw	low STR_4
  5369  0008D4  0100               	movlb	0	; () banked
  5370  0008D6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5371  0008D8  0E7F               	movlw	high STR_4
  5372  0008DA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5373  0008DC  EC34  F022         	call	_UARTTransmitText	;wreg free
  5374  0008E0                     l369:
  5375                           
  5376                           ;ethernet.c: 87: if (!frame->receiveStatusVector.receivedOk)
  5377  0008E0  0101               	movlb	1	; () banked
  5378  0008E2  EE20 F01B          	lfsr	2,27
  5379  0008E6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5380  0008E8  26D9               	addwf	fsr2l,f,c
  5381  0008EA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5382  0008EC  22DA               	addwfc	fsr2h,f,c
  5383  0008EE  BADF               	btfsc	indf2,5,c
  5384  0008F0  D007               	goto	l370
  5385                           
  5386                           ; BSR set to: 1
  5387                           ;ethernet.c: 88: UARTTransmitText("[Symbol Errors]");
  5388  0008F2  0EFD               	movlw	low STR_5
  5389  0008F4  0100               	movlb	0	; () banked
  5390  0008F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5391  0008F8  0E7E               	movlw	high STR_5
  5392  0008FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5393  0008FC  EC34  F022         	call	_UARTTransmitText	;wreg free
  5394  000900                     l370:
  5395                           
  5396                           ;ethernet.c: 90: UARTTransmitText("[");
  5397  000900  0ECE               	movlw	low (STR_65+3)
  5398  000902  0100               	movlb	0	; () banked
  5399  000904  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5400  000906  0E7F               	movlw	high (STR_65+3)
  5401  000908  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5402  00090A  EC34  F022         	call	_UARTTransmitText	;wreg free
  5403                           
  5404                           ;ethernet.c: 91: UARTTransmitText(intToString(frame->tReceived));
  5405  00090E  0101               	movlb	1	; () banked
  5406  000910  EE20 F01E          	lfsr	2,30
  5407  000914  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5408  000916  26D9               	addwf	fsr2l,f,c
  5409  000918  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5410  00091A  22DA               	addwfc	fsr2h,f,c
  5411  00091C  CFDE F079          	movff	postinc2,intToString@val
  5412  000920  CFDE F07A          	movff	postinc2,intToString@val+1
  5413  000924  CFDE F07B          	movff	postinc2,intToString@val+2
  5414  000928  CFDE F07C          	movff	postinc2,intToString@val+3
  5415  00092C  EC76  F000         	call	_intToString	;wreg free
  5416  000930  C079  F098         	movff	?_intToString,UARTTransmitText@str
  5417  000934  C07A  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5418  000938  EC34  F022         	call	_UARTTransmitText	;wreg free
  5419                           
  5420                           ;ethernet.c: 92: UARTTransmitText("]");
  5421  00093C  0EFA               	movlw	low (STR_18+1)
  5422  00093E  0100               	movlb	0	; () banked
  5423  000940  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5424  000942  0E7F               	movlw	high (STR_18+1)
  5425  000944  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5426  000946  EC34  F022         	call	_UARTTransmitText	;wreg free
  5427                           
  5428                           ;ethernet.c: 94: switch (frame->ethertype) {
  5429  00094A  D096               	goto	l371
  5430  00094C                     
  5431                           ;ethernet.c: 96: UARTTransmitText("[ARP]");
  5432  00094C  0EC0               	movlw	low STR_8
  5433  00094E  0100               	movlb	0	; () banked
  5434  000950  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5435  000952  0E7F               	movlw	high STR_8
  5436  000954  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5437  000956  EC34  F022         	call	_UARTTransmitText	;wreg free
  5438                           
  5439                           ;ethernet.c: 97: ARP_handleNewPacket(frame);
  5440  00095A  C178  F0FC         	movff	ethernet_rxGetNewFrame@frame,ARP_handleNewPacket@frame
  5441  00095E  C179  F0FD         	movff	ethernet_rxGetNewFrame@frame+1,ARP_handleNewPacket@frame+1
  5442  000962  EC28  F014         	call	_ARP_handleNewPacket	;wreg free
  5443                           
  5444                           ;ethernet.c: 100: break;
  5445                           
  5446                           ;ethernet.c: 99: case ETHERTYPE_FLOW_CONTROL:
  5447                           
  5448                           ;ethernet.c: 98: break;
  5449  000966  D0AA               	goto	l373
  5450  000968                     
  5451                           ;ethernet.c: 102: UARTTransmitText("[IPv4]");
  5452  000968  0EB9               	movlw	low STR_9
  5453  00096A  0100               	movlb	0	; () banked
  5454  00096C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5455  00096E  0E7F               	movlw	high STR_9
  5456  000970  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5457  000972  EC34  F022         	call	_UARTTransmitText	;wreg free
  5458                           
  5459                           ;ethernet.c: 103: ipv4_handleNewPacket(frame);
  5460  000976  C178  F0B5         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  5461  00097A  C179  F0B6         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  5462  00097E  EC4C  F013         	call	_ipv4_handleNewPacket	;wreg free
  5463                           
  5464                           ;ethernet.c: 106: break;
  5465                           
  5466                           ;ethernet.c: 105: case ETHERTYPE_WOL:
  5467                           
  5468                           ;ethernet.c: 104: break;
  5469  000982  D09C               	goto	l373
  5470  000984                     
  5471                           ;ethernet.c: 108: UARTTransmitText("[");
  5472  000984  0ECE               	movlw	low (STR_65+3)
  5473  000986  0100               	movlb	0	; () banked
  5474  000988  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5475  00098A  0E7F               	movlw	high (STR_65+3)
  5476  00098C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5477  00098E  EC34  F022         	call	_UARTTransmitText	;wreg free
  5478                           
  5479                           ;ethernet.c: 109: UARTTransmitText(macToString(frame->source));
  5480  000992  0101               	movlb	1	; () banked
  5481  000994  EE20 F002          	lfsr	2,2
  5482  000998  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5483  00099A  26D9               	addwf	fsr2l,f,c
  5484  00099C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5485  00099E  22DA               	addwfc	fsr2h,f,c
  5486  0009A0  EE00  F07A         	lfsr	0,macToString@addr
  5487  0009A4  0E05               	movlw	5
  5488  0009A6                     u11131:
  5489  0009A6  CFDB FFEB          	movff	plusw2,plusw0
  5490  0009AA  06E8               	decf	wreg,f,c
  5491  0009AC  E2FC               	bc	u11131
  5492  0009AE  ECA5  F018         	call	_macToString	;wreg free
  5493  0009B2  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  5494  0009B6  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  5495  0009BA  EC34  F022         	call	_UARTTransmitText	;wreg free
  5496                           
  5497                           ;ethernet.c: 110: UARTTransmitText("->");
  5498  0009BE  0EF3               	movlw	low STR_11
  5499  0009C0  0100               	movlb	0	; () banked
  5500  0009C2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5501  0009C4  0E7F               	movlw	high STR_11
  5502  0009C6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5503  0009C8  EC34  F022         	call	_UARTTransmitText	;wreg free
  5504                           
  5505                           ;ethernet.c: 111: UARTTransmitText(macToString(frame->destination));
  5506  0009CC  0101               	movlb	1	; () banked
  5507  0009CE  EE20 F008          	lfsr	2,8
  5508  0009D2  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5509  0009D4  26D9               	addwf	fsr2l,f,c
  5510  0009D6  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5511  0009D8  22DA               	addwfc	fsr2h,f,c
  5512  0009DA  EE00  F07A         	lfsr	0,macToString@addr
  5513  0009DE  0E05               	movlw	5
  5514  0009E0                     u11141:
  5515  0009E0  CFDB FFEB          	movff	plusw2,plusw0
  5516  0009E4  06E8               	decf	wreg,f,c
  5517  0009E6  E2FC               	bc	u11141
  5518  0009E8  ECA5  F018         	call	_macToString	;wreg free
  5519  0009EC  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  5520  0009F0  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  5521  0009F4  EC34  F022         	call	_UARTTransmitText	;wreg free
  5522                           
  5523                           ;ethernet.c: 112: UARTTransmitText("][");
  5524  0009F8  0EF6               	movlw	low STR_12
  5525  0009FA  0100               	movlb	0	; () banked
  5526  0009FC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5527  0009FE  0E7F               	movlw	high STR_12
  5528  000A00  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5529  000A02  EC34  F022         	call	_UARTTransmitText	;wreg free
  5530                           
  5531                           ;ethernet.c: 113: UARTTransmitText(etherTypeToString(frame->ethertype));
  5532  000A06  0101               	movlb	1	; () banked
  5533  000A08  EE20 F00E          	lfsr	2,14
  5534  000A0C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5535  000A0E  26D9               	addwf	fsr2l,f,c
  5536  000A10  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5537  000A12  22DA               	addwfc	fsr2h,f,c
  5538  000A14  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  5539  000A18  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  5540  000A1C  EC4A  F023         	call	_etherTypeToString	;wreg free
  5541  000A20  C060  F098         	movff	?_etherTypeToString,UARTTransmitText@str
  5542  000A24  C061  F099         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  5543  000A28  EC34  F022         	call	_UARTTransmitText	;wreg free
  5544                           
  5545                           ;ethernet.c: 114: UARTTransmitText("][L=");
  5546  000A2C  0EDF               	movlw	low STR_13
  5547  000A2E  0100               	movlb	0	; () banked
  5548  000A30  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5549  000A32  0E7F               	movlw	high STR_13
  5550  000A34  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5551  000A36  EC34  F022         	call	_UARTTransmitText	;wreg free
  5552                           
  5553                           ;ethernet.c: 115: UARTTransmitInt(frame->length);
  5554  000A3A  C178  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  5555  000A3E  C179  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  5556  000A42  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5557  000A46  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5558  000A4A  C17B  F09A         	movff	??_ethernet_rxGetNewFrame,UARTTransmitInt@val
  5559  000A4E  C17C  F09B         	movff	??_ethernet_rxGetNewFrame+1,UARTTransmitInt@val+1
  5560  000A52  0100               	movlb	0	; () banked
  5561  000A54  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  5562  000A56  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  5563  000A58  ECB9  F025         	call	_UARTTransmitInt	;wreg free
  5564                           
  5565                           ;ethernet.c: 116: UARTTransmitText("]");
  5566  000A5C  0EFA               	movlw	low (STR_18+1)
  5567  000A5E  0100               	movlb	0	; () banked
  5568  000A60  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5569  000A62  0E7F               	movlw	high (STR_18+1)
  5570  000A64  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5571  000A66  EC34  F022         	call	_UARTTransmitText	;wreg free
  5572                           
  5573                           ;ethernet.c: 117: ethernetController_dropPacket(frame);
  5574  000A6A  C178  F072         	movff	ethernet_rxGetNewFrame@frame,ethernetController_dropPacket@frame
  5575  000A6E  C179  F073         	movff	ethernet_rxGetNewFrame@frame+1,ethernetController_dropPacket@frame+1
  5576  000A72  ECD0  F023         	call	_ethernetController_dropPacket	;wreg free
  5577                           
  5578                           ;ethernet.c: 118: break;
  5579  000A76  D022               	goto	l373
  5580  000A78                     l371:
  5581  000A78  0101               	movlb	1	; () banked
  5582  000A7A  EE20 F00E          	lfsr	2,14
  5583  000A7E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5584  000A80  26D9               	addwf	fsr2l,f,c
  5585  000A82  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5586  000A84  22DA               	addwfc	fsr2h,f,c
  5587  000A86  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5588  000A8A  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5589                           
  5590                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5591                           ; Switch size 1, requested type "space"
  5592                           ; Number of cases is 2, Range of values is 8 to 136
  5593                           ; switch strategies available:
  5594                           ; Name         Instructions Cycles
  5595                           ; simple_byte            7     4 (average)
  5596                           ;	Chosen strategy is simple_byte
  5597  000A8E  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5598  000A90  0A08               	xorlw	8	; case 8
  5599  000A92  B4D8               	btfsc	status,2,c
  5600  000A94  D004               	goto	l9547
  5601  000A96  0A80               	xorlw	128	; case 136
  5602  000A98  B4D8               	btfsc	status,2,c
  5603  000A9A  D00C               	goto	l9549
  5604  000A9C  D773               	goto	l377
  5605  000A9E                     l9547:
  5606                           
  5607                           ; BSR set to: 1
  5608                           ; Switch size 1, requested type "space"
  5609                           ; Number of cases is 3, Range of values is 0 to 66
  5610                           ; switch strategies available:
  5611                           ; Name         Instructions Cycles
  5612                           ; simple_byte           10     6 (average)
  5613                           ;	Chosen strategy is simple_byte
  5614  000A9E  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5615  000AA0  0A00               	xorlw	0	; case 0
  5616  000AA2  B4D8               	btfsc	status,2,c
  5617  000AA4  D761               	goto	l375
  5618  000AA6  0A06               	xorlw	6	; case 6
  5619  000AA8  B4D8               	btfsc	status,2,c
  5620  000AAA  D750               	goto	l372
  5621  000AAC  0A44               	xorlw	68	; case 66
  5622  000AAE  B4D8               	btfsc	status,2,c
  5623  000AB0  D005               	goto	l373
  5624  000AB2  D768               	goto	l377
  5625  000AB4                     l9549:
  5626                           
  5627                           ; BSR set to: 1
  5628                           ; Switch size 1, requested type "space"
  5629                           ; Number of cases is 1, Range of values is 8 to 8
  5630                           ; switch strategies available:
  5631                           ; Name         Instructions Cycles
  5632                           ; simple_byte            4     3 (average)
  5633                           ;	Chosen strategy is simple_byte
  5634  000AB4  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5635  000AB6  0A08               	xorlw	8	; case 8
  5636  000AB8  A4D8               	btfss	status,2,c
  5637  000ABA  D764               	goto	l377
  5638  000ABC                     l373:
  5639                           
  5640                           ;ethernet.c: 122: UARTTransmitText("[");
  5641                           
  5642                           ; BSR set to: 1
  5643  000ABC  0ECE               	movlw	low (STR_65+3)
  5644  000ABE  0100               	movlb	0	; () banked
  5645  000AC0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5646  000AC2  0E7F               	movlw	high (STR_65+3)
  5647  000AC4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5648  000AC6  EC34  F022         	call	_UARTTransmitText	;wreg free
  5649                           
  5650                           ;ethernet.c: 123: UARTTransmitText(intToString(frame->memory.start));
  5651  000ACA  0101               	movlb	1	; () banked
  5652  000ACC  EE20 F010          	lfsr	2,16
  5653  000AD0  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5654  000AD2  26D9               	addwf	fsr2l,f,c
  5655  000AD4  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5656  000AD6  22DA               	addwfc	fsr2h,f,c
  5657  000AD8  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5658  000ADC  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5659  000AE0  C17B  F079         	movff	??_ethernet_rxGetNewFrame,intToString@val
  5660  000AE4  C17C  F07A         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  5661  000AE8  0100               	movlb	0	; () banked
  5662  000AEA  6B7B               	clrf	(intToString@val+2)& (0+255),b
  5663  000AEC  6B7C               	clrf	(intToString@val+3)& (0+255),b
  5664  000AEE  EC76  F000         	call	_intToString	;wreg free
  5665  000AF2  C079  F098         	movff	?_intToString,UARTTransmitText@str
  5666  000AF6  C07A  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5667  000AFA  EC34  F022         	call	_UARTTransmitText	;wreg free
  5668                           
  5669                           ;ethernet.c: 124: UARTTransmitText(" to ");
  5670  000AFE  0EF8               	movlw	low (STR_72+11)
  5671  000B00  0100               	movlb	0	; () banked
  5672  000B02  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5673  000B04  0E7E               	movlw	high (STR_72+11)
  5674  000B06  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5675  000B08  EC34  F022         	call	_UARTTransmitText	;wreg free
  5676                           
  5677                           ;ethernet.c: 125: UARTTransmitText(intToString(frame->memory.end));
  5678  000B0C  0101               	movlb	1	; () banked
  5679  000B0E  EE20 F012          	lfsr	2,18
  5680  000B12  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5681  000B14  26D9               	addwf	fsr2l,f,c
  5682  000B16  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5683  000B18  22DA               	addwfc	fsr2h,f,c
  5684  000B1A  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5685  000B1E  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5686  000B22  C17B  F079         	movff	??_ethernet_rxGetNewFrame,intToString@val
  5687  000B26  C17C  F07A         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  5688  000B2A  0100               	movlb	0	; () banked
  5689  000B2C  6B7B               	clrf	(intToString@val+2)& (0+255),b
  5690  000B2E  6B7C               	clrf	(intToString@val+3)& (0+255),b
  5691  000B30  EC76  F000         	call	_intToString	;wreg free
  5692  000B34  C079  F098         	movff	?_intToString,UARTTransmitText@str
  5693  000B38  C07A  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5694  000B3C  EC34  F022         	call	_UARTTransmitText	;wreg free
  5695                           
  5696                           ;ethernet.c: 126: UARTTransmitText(" (");
  5697  000B40  0EF0               	movlw	low STR_17
  5698  000B42  0100               	movlb	0	; () banked
  5699  000B44  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5700  000B46  0E7F               	movlw	high STR_17
  5701  000B48  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5702  000B4A  EC34  F022         	call	_UARTTransmitText	;wreg free
  5703                           
  5704                           ;ethernet.c: 127: UARTTransmitText(intToString(frame->memory.length));
  5705  000B4E  0101               	movlb	1	; () banked
  5706  000B50  EE20 F014          	lfsr	2,20
  5707  000B54  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5708  000B56  26D9               	addwf	fsr2l,f,c
  5709  000B58  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5710  000B5A  22DA               	addwfc	fsr2h,f,c
  5711  000B5C  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5712  000B60  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5713  000B64  C17B  F079         	movff	??_ethernet_rxGetNewFrame,intToString@val
  5714  000B68  C17C  F07A         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  5715  000B6C  0100               	movlb	0	; () banked
  5716  000B6E  6B7B               	clrf	(intToString@val+2)& (0+255),b
  5717  000B70  6B7C               	clrf	(intToString@val+3)& (0+255),b
  5718  000B72  EC76  F000         	call	_intToString	;wreg free
  5719  000B76  C079  F098         	movff	?_intToString,UARTTransmitText@str
  5720  000B7A  C07A  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5721  000B7E  EC34  F022         	call	_UARTTransmitText	;wreg free
  5722                           
  5723                           ;ethernet.c: 128: UARTTransmitText(")]");
  5724  000B82  0EF9               	movlw	low STR_18
  5725  000B84  0100               	movlb	0	; () banked
  5726  000B86  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5727  000B88  0E7F               	movlw	high STR_18
  5728  000B8A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5729  000B8C  EC34  F022         	call	_UARTTransmitText	;wreg free
  5730                           
  5731                           ;ethernet.c: 131: UARTTransmitText("\n\r");
  5732  000B90  0E04               	movlw	low (STR_25+46)
  5733  000B92  0100               	movlb	0	; () banked
  5734  000B94  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5735  000B96  0E7D               	movlw	high (STR_25+46)
  5736  000B98  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5737  000B9A  EC34  F022         	call	_UARTTransmitText	;wreg free
  5738  000B9E  0012               	return		;funcret
  5739  000BA0                     __end_of_ethernet_rxGetNewFrame:
  5740                           	opt stack 0
  5741                           tblptru	equ	0xFF8
  5742                           tblptrh	equ	0xFF7
  5743                           tblptrl	equ	0xFF6
  5744                           tablat	equ	0xFF5
  5745                           intcon	equ	0xFF2
  5746                           intcon3	equ	0xFF0
  5747                           indf0	equ	0xFEF
  5748                           postinc0	equ	0xFEE
  5749                           plusw0	equ	0xFEB
  5750                           fsr0h	equ	0xFEA
  5751                           fsr0l	equ	0xFE9
  5752                           wreg	equ	0xFE8
  5753                           postinc1	equ	0xFE6
  5754                           postdec1	equ	0xFE5
  5755                           plusw1	equ	0xFE3
  5756                           fsr1h	equ	0xFE2
  5757                           fsr1l	equ	0xFE1
  5758                           indf2	equ	0xFDF
  5759                           postinc2	equ	0xFDE
  5760                           postdec2	equ	0xFDD
  5761                           plusw2	equ	0xFDB
  5762                           fsr2h	equ	0xFDA
  5763                           fsr2l	equ	0xFD9
  5764                           status	equ	0xFD8
  5765                           
  5766 ;; *************** function _ipv4_handleNewPacket *****************
  5767 ;; Defined at:
  5768 ;;		line 130 in file "src/stack/protocols/ipv4.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;  frame           2   85[BANK0 ] PTR struct ethernetFrame
  5771 ;;		 -> stack.ethernet(15), stack(122), 
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  ip             23   98[BANK0 ] struct ipv4_header
  5774 ;;  headerField     9   89[BANK0 ] struct memoryField
  5775 ;; Return value:  Size  Location     Type
  5776 ;;                  1    wreg      void 
  5777 ;; Registers used:
  5778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5784 ;;      Params:         0       2       0       0       0       0       0       0       0
  5785 ;;      Locals:         0      32       0       0       0       0       0       0       0
  5786 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5787 ;;      Totals:         0      36       0       0       0       0       0       0       0
  5788 ;;Total ram usage:       36 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; Hardware stack levels required when called:   10
  5791 ;; This function calls:
  5792 ;;		_UARTTransmitText
  5793 ;;		_ethernetController_dropPacket
  5794 ;;		_intToString
  5795 ;;		_ipAdressToString
  5796 ;;		_ipProtocolToString
  5797 ;;		_ipv4_checkHeaderChecksum
  5798 ;;		_ipv4_parseHeader
  5799 ;; This function is called by:
  5800 ;;		_ethernet_rxGetNewFrame
  5801 ;; This function uses a non-reentrant model
  5802 ;;
  5803                           
  5804                           	psect	text13
  5805  002698                     __ptext13:
  5806                           	opt stack 0
  5807  002698                     _ipv4_handleNewPacket:
  5808                           	opt stack 18
  5809                           
  5810                           ;ipv4.c: 131: ipv4_header_t ip;
  5811                           ;ipv4.c: 132: memoryField_t headerField;
  5812                           ;ipv4.c: 133: if (frame->ethertype != ETHERTYPE_IPv4) {
  5813                           
  5814                           ;incstack = 0
  5815  002698  0100               	movlb	0	; () banked
  5816  00269A  EE20 F00E          	lfsr	2,14
  5817  00269E  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  5818  0026A0  26D9               	addwf	fsr2l,f,c
  5819  0026A2  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  5820  0026A4  22DA               	addwfc	fsr2h,f,c
  5821  0026A6  50DE               	movf	postinc2,w,c
  5822  0026A8  E104               	bnz	u10690
  5823  0026AA  0E08               	movlw	8
  5824  0026AC  18DE               	xorwf	postinc2,w,c
  5825  0026AE  B4D8               	btfsc	status,2,c
  5826  0026B0  D007               	goto	l1040
  5827  0026B2                     u10690:
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;ipv4.c: 134: ethernetController_dropPacket(frame);
  5831  0026B2  C0B5  F072         	movff	ipv4_handleNewPacket@frame,ethernetController_dropPacket@frame
  5832  0026B6  C0B6  F073         	movff	ipv4_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  5833  0026BA  ECD0  F023         	call	_ethernetController_dropPacket	;wreg free
  5834                           
  5835                           ;ipv4.c: 135: return;
  5836  0026BE  0012               	return	
  5837  0026C0                     l1040:
  5838                           
  5839                           ;ipv4.c: 136: }
  5840                           ;ipv4.c: 137: headerField = frame->memory;
  5841  0026C0  0100               	movlb	0	; () banked
  5842  0026C2  EE20 F010          	lfsr	2,16
  5843  0026C6  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  5844  0026C8  26D9               	addwf	fsr2l,f,c
  5845  0026CA  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  5846  0026CC  22DA               	addwfc	fsr2h,f,c
  5847  0026CE  EE10  F0B9         	lfsr	1,ipv4_handleNewPacket@headerField
  5848  0026D2  0E08               	movlw	8
  5849  0026D4                     u10701:
  5850  0026D4  CFDB FFE3          	movff	plusw2,plusw1
  5851  0026D8  06E8               	decf	wreg,f,c
  5852  0026DA  E2FC               	bc	u10701
  5853                           
  5854                           ; BSR set to: 0
  5855                           ;ipv4.c: 138: headerField.start = frame->memory.start + 22;
  5856  0026DC  EE20 F010          	lfsr	2,16
  5857  0026E0  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  5858  0026E2  26D9               	addwf	fsr2l,f,c
  5859  0026E4  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  5860  0026E6  22DA               	addwfc	fsr2h,f,c
  5861  0026E8  CFDE F0B7          	movff	postinc2,??_ipv4_handleNewPacket
  5862  0026EC  CFDD F0B8          	movff	postdec2,??_ipv4_handleNewPacket+1
  5863  0026F0  0E16               	movlw	22
  5864  0026F2  25B7               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  5865  0026F4  6FB9               	movwf	ipv4_handleNewPacket@headerField& (0+255),b
  5866  0026F6  0E00               	movlw	0
  5867  0026F8  21B8               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  5868  0026FA  6FBA               	movwf	(ipv4_handleNewPacket@headerField+1)& (0+255),b
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;ipv4.c: 140: ip = ipv4_parseHeader(&headerField);
  5872  0026FC  0EB9               	movlw	low ipv4_handleNewPacket@headerField
  5873  0026FE  6F77               	movwf	ipv4_parseHeader@field& (0+255),b
  5874  002700  0E00               	movlw	high ipv4_handleNewPacket@headerField
  5875  002702  6F78               	movwf	(ipv4_parseHeader@field+1)& (0+255),b
  5876  002704  EC12  F010         	call	_ipv4_parseHeader	;wreg free
  5877  002708  EE20  F0C2         	lfsr	2,ipv4_handleNewPacket@ip
  5878  00270C  0E16               	movlw	22
  5879  00270E                     u10711:
  5880  00270E  CFEB FFDB          	movff	plusw0,plusw2
  5881  002712  06E8               	decf	wreg,f,c
  5882  002714  E2FC               	bc	u10711
  5883                           
  5884                           ;ipv4.c: 141: UARTTransmitText("[");
  5885  002716  0ECE               	movlw	low (STR_65+3)
  5886  002718  0100               	movlb	0	; () banked
  5887  00271A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5888  00271C  0E7F               	movlw	high (STR_65+3)
  5889  00271E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5890  002720  EC34  F022         	call	_UARTTransmitText	;wreg free
  5891                           
  5892                           ;ipv4.c: 142: UARTTransmitText(ipAdressToString(ip.source));
  5893  002724  C0D1  F067         	movff	ipv4_handleNewPacket@ip+15,ipAdressToString@ip
  5894  002728  C0D2  F068         	movff	ipv4_handleNewPacket@ip+16,ipAdressToString@ip+1
  5895  00272C  C0D3  F069         	movff	ipv4_handleNewPacket@ip+17,ipAdressToString@ip+2
  5896  002730  C0D4  F06A         	movff	ipv4_handleNewPacket@ip+18,ipAdressToString@ip+3
  5897  002734  EC55  F012         	call	_ipAdressToString	;wreg free
  5898  002738  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5899  00273C  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5900  002740  EC34  F022         	call	_UARTTransmitText	;wreg free
  5901                           
  5902                           ;ipv4.c: 143: UARTTransmitText(" -> ");
  5903  002744  0EC6               	movlw	low STR_79
  5904  002746  0100               	movlb	0	; () banked
  5905  002748  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5906  00274A  0E7F               	movlw	high STR_79
  5907  00274C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5908  00274E  EC34  F022         	call	_UARTTransmitText	;wreg free
  5909                           
  5910                           ;ipv4.c: 144: UARTTransmitText(ipAdressToString(ip.destination));
  5911  002752  C0D5  F067         	movff	ipv4_handleNewPacket@ip+19,ipAdressToString@ip
  5912  002756  C0D6  F068         	movff	ipv4_handleNewPacket@ip+20,ipAdressToString@ip+1
  5913  00275A  C0D7  F069         	movff	ipv4_handleNewPacket@ip+21,ipAdressToString@ip+2
  5914  00275E  C0D8  F06A         	movff	ipv4_handleNewPacket@ip+22,ipAdressToString@ip+3
  5915  002762  EC55  F012         	call	_ipAdressToString	;wreg free
  5916  002766  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5917  00276A  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5918  00276E  EC34  F022         	call	_UARTTransmitText	;wreg free
  5919                           
  5920                           ;ipv4.c: 145: UARTTransmitText("][");
  5921  002772  0EF6               	movlw	low STR_12
  5922  002774  0100               	movlb	0	; () banked
  5923  002776  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5924  002778  0E7F               	movlw	high STR_12
  5925  00277A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5926  00277C  EC34  F022         	call	_UARTTransmitText	;wreg free
  5927                           
  5928                           ;ipv4.c: 146: UARTTransmitText((ipProtocolToString(ip.protocol)));
  5929  002780  0100               	movlb	0	; () banked
  5930  002782  51CE               	movf	(ipv4_handleNewPacket@ip+12)& (0+255),w,b
  5931  002784  EC26  F023         	call	_ipProtocolToString
  5932  002788  C060  F098         	movff	?_ipProtocolToString,UARTTransmitText@str
  5933  00278C  C061  F099         	movff	?_ipProtocolToString+1,UARTTransmitText@str+1
  5934  002790  EC34  F022         	call	_UARTTransmitText	;wreg free
  5935                           
  5936                           ;ipv4.c: 147: UARTTransmitText("][");
  5937  002794  0EF6               	movlw	low STR_12
  5938  002796  0100               	movlb	0	; () banked
  5939  002798  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5940  00279A  0E7F               	movlw	high STR_12
  5941  00279C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5942  00279E  EC34  F022         	call	_UARTTransmitText	;wreg free
  5943                           
  5944                           ;ipv4.c: 148: UARTTransmitText(intToString(ip.totalLength));
  5945  0027A2  C0C6  F079         	movff	ipv4_handleNewPacket@ip+4,intToString@val
  5946  0027A6  C0C7  F07A         	movff	ipv4_handleNewPacket@ip+5,intToString@val+1
  5947  0027AA  0100               	movlb	0	; () banked
  5948  0027AC  6B7B               	clrf	(intToString@val+2)& (0+255),b
  5949  0027AE  6B7C               	clrf	(intToString@val+3)& (0+255),b
  5950  0027B0  EC76  F000         	call	_intToString	;wreg free
  5951  0027B4  C079  F098         	movff	?_intToString,UARTTransmitText@str
  5952  0027B8  C07A  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5953  0027BC  EC34  F022         	call	_UARTTransmitText	;wreg free
  5954                           
  5955                           ;ipv4.c: 149: UARTTransmitText("][");
  5956  0027C0  0EF6               	movlw	low STR_12
  5957  0027C2  0100               	movlb	0	; () banked
  5958  0027C4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5959  0027C6  0E7F               	movlw	high STR_12
  5960  0027C8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5961  0027CA  EC34  F022         	call	_UARTTransmitText	;wreg free
  5962                           
  5963                           ;ipv4.c: 150: UARTTransmitText(intToString(ip.version));
  5964  0027CE  0100               	movlb	0	; () banked
  5965  0027D0  51C2               	movf	ipv4_handleNewPacket@ip& (0+255),w,b
  5966  0027D2  6F79               	movwf	intToString@val& (0+255),b
  5967  0027D4  6B7A               	clrf	(intToString@val+1)& (0+255),b
  5968  0027D6  6B7B               	clrf	(intToString@val+2)& (0+255),b
  5969  0027D8  6B7C               	clrf	(intToString@val+3)& (0+255),b
  5970  0027DA  EC76  F000         	call	_intToString	;wreg free
  5971  0027DE  C079  F098         	movff	?_intToString,UARTTransmitText@str
  5972  0027E2  C07A  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5973  0027E6  EC34  F022         	call	_UARTTransmitText	;wreg free
  5974                           
  5975                           ;ipv4.c: 151: UARTTransmitText(", ");
  5976  0027EA  0E45               	movlw	low (STR_40+17)
  5977  0027EC  0100               	movlb	0	; () banked
  5978  0027EE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5979  0027F0  0E7E               	movlw	high (STR_40+17)
  5980  0027F2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5981  0027F4  EC34  F022         	call	_UARTTransmitText	;wreg free
  5982                           
  5983                           ;ipv4.c: 152: UARTTransmitText(intToString(ip.headerLength));
  5984  0027F8  0100               	movlb	0	; () banked
  5985  0027FA  51C3               	movf	(ipv4_handleNewPacket@ip+1)& (0+255),w,b
  5986  0027FC  6F79               	movwf	intToString@val& (0+255),b
  5987  0027FE  6B7A               	clrf	(intToString@val+1)& (0+255),b
  5988  002800  6B7B               	clrf	(intToString@val+2)& (0+255),b
  5989  002802  6B7C               	clrf	(intToString@val+3)& (0+255),b
  5990  002804  EC76  F000         	call	_intToString	;wreg free
  5991  002808  C079  F098         	movff	?_intToString,UARTTransmitText@str
  5992  00280C  C07A  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5993  002810  EC34  F022         	call	_UARTTransmitText	;wreg free
  5994                           
  5995                           ;ipv4.c: 153: UARTTransmitText("]");
  5996  002814  0EFA               	movlw	low (STR_18+1)
  5997  002816  0100               	movlb	0	; () banked
  5998  002818  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5999  00281A  0E7F               	movlw	high (STR_18+1)
  6000  00281C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6001  00281E  EC34  F022         	call	_UARTTransmitText	;wreg free
  6002                           
  6003                           ;ipv4.c: 154: if (!ipv4_checkHeaderChecksum(&ip))
  6004  002822  0EC2               	movlw	low ipv4_handleNewPacket@ip
  6005  002824  0100               	movlb	0	; () banked
  6006  002826  6F9A               	movwf	ipv4_checkHeaderChecksum@header& (0+255),b
  6007  002828  0E00               	movlw	high ipv4_handleNewPacket@ip
  6008  00282A  6F9B               	movwf	(ipv4_checkHeaderChecksum@header+1)& (0+255),b
  6009  00282C  EC0F  F01B         	call	_ipv4_checkHeaderChecksum	;wreg free
  6010  002830  0100               	movlb	0	; () banked
  6011  002832  B0D8               	btfsc	status,0,c
  6012  002834  D006               	goto	l1042
  6013                           
  6014                           ; BSR set to: 0
  6015                           ;ipv4.c: 155: UARTTransmitText("[INVALID CHECKSUM]");
  6016  002836  0E48               	movlw	low STR_85
  6017  002838  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6018  00283A  0E7E               	movlw	high STR_85
  6019  00283C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6020  00283E  EC34  F022         	call	_UARTTransmitText	;wreg free
  6021  002842                     l1042:
  6022                           
  6023                           ;ipv4.c: 158: ethernetController_dropPacket(frame);
  6024  002842  C0B5  F072         	movff	ipv4_handleNewPacket@frame,ethernetController_dropPacket@frame
  6025  002846  C0B6  F073         	movff	ipv4_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  6026  00284A  ECD0  F023         	call	_ethernetController_dropPacket	;wreg free
  6027  00284E  0012               	return		;funcret
  6028  002850                     __end_of_ipv4_handleNewPacket:
  6029                           	opt stack 0
  6030                           tblptru	equ	0xFF8
  6031                           tblptrh	equ	0xFF7
  6032                           tblptrl	equ	0xFF6
  6033                           tablat	equ	0xFF5
  6034                           intcon	equ	0xFF2
  6035                           intcon3	equ	0xFF0
  6036                           indf0	equ	0xFEF
  6037                           postinc0	equ	0xFEE
  6038                           plusw0	equ	0xFEB
  6039                           fsr0h	equ	0xFEA
  6040                           fsr0l	equ	0xFE9
  6041                           wreg	equ	0xFE8
  6042                           postinc1	equ	0xFE6
  6043                           postdec1	equ	0xFE5
  6044                           plusw1	equ	0xFE3
  6045                           fsr1h	equ	0xFE2
  6046                           fsr1l	equ	0xFE1
  6047                           indf2	equ	0xFDF
  6048                           postinc2	equ	0xFDE
  6049                           postdec2	equ	0xFDD
  6050                           plusw2	equ	0xFDB
  6051                           fsr2h	equ	0xFDA
  6052                           fsr2l	equ	0xFD9
  6053                           status	equ	0xFD8
  6054                           
  6055 ;; *************** function _ipv4_parseHeader *****************
  6056 ;; Defined at:
  6057 ;;		line 161 in file "src/stack/protocols/ipv4.c"
  6058 ;; Parameters:    Size  Location     Type
  6059 ;;  field           2   23[BANK0 ] PTR struct memoryField
  6060 ;;		 -> ipv4_handleNewPacket@headerField(9), 
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  i               1   48[BANK0 ] unsigned char 
  6063 ;;  i               1   47[BANK0 ] unsigned char 
  6064 ;;  ip             23   50[BANK0 ] struct ipv4_header
  6065 ;;  temp            1   49[BANK0 ] unsigned char 
  6066 ;; Return value:  Size  Location     Type
  6067 ;;                  23   23[BANK0 ] struct ipv4_header
  6068 ;; Registers used:
  6069 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6070 ;; Tracked objects:
  6071 ;;		On entry : 0/0
  6072 ;;		On exit  : 0/0
  6073 ;;		Unchanged: 0/0
  6074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6075 ;;      Params:         0      23       0       0       0       0       0       0       0
  6076 ;;      Locals:         0      26       0       0       0       0       0       0       0
  6077 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6078 ;;      Totals:         0      50       0       0       0       0       0       0       0
  6079 ;;Total ram usage:       50 bytes
  6080 ;; Hardware stack levels used:    1
  6081 ;; Hardware stack levels required when called:    9
  6082 ;; This function calls:
  6083 ;;		_ethernetController_streamFromRXBuffer
  6084 ;; This function is called by:
  6085 ;;		_ipv4_handleNewPacket
  6086 ;; This function uses a non-reentrant model
  6087 ;;
  6088                           
  6089                           	psect	text14
  6090  002024                     __ptext14:
  6091                           	opt stack 0
  6092  002024                     _ipv4_parseHeader:
  6093                           	opt stack 18
  6094                           
  6095                           ;ipv4.c: 162: ipv4_header_t ip;
  6096                           ;ipv4.c: 163: uint8_t temp;
  6097                           ;ipv4.c: 165: ethernetController_streamFromRXBuffer(0, field->start);
  6098                           
  6099                           ;incstack = 0
  6100  002024  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6101  002028  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6102  00202C  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6103  002030  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6104  002034  0E00               	movlw	0
  6105  002036  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6106                           
  6107                           ;ipv4.c: 167: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6108  00203A  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6109  00203E  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6110  002042  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6111  002046  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6112  00204A  0E01               	movlw	1
  6113  00204C  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6114  002050  0100               	movlb	0	; () banked
  6115  002052  6F91               	movwf	ipv4_parseHeader@temp& (0+255),b
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;ipv4.c: 168: ip.version = (temp & 0xf0) >> 4;
  6119  002054  3991               	swapf	ipv4_parseHeader@temp& (0+255),w,b
  6120  002056  0B0F               	andlw	15
  6121  002058  0B0F               	andlw	15
  6122  00205A  6F92               	movwf	ipv4_parseHeader@ip& (0+255),b
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;ipv4.c: 169: ip.headerLength = temp & 0x0f;
  6126  00205C  5191               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6127  00205E  0B0F               	andlw	15
  6128  002060  6F93               	movwf	(ipv4_parseHeader@ip+1)& (0+255),b
  6129                           
  6130                           ;ipv4.c: 171: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6131  002062  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6132  002066  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6133  00206A  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6134  00206E  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6135  002072  0E01               	movlw	1
  6136  002074  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6137  002078  0100               	movlb	0	; () banked
  6138  00207A  6F91               	movwf	ipv4_parseHeader@temp& (0+255),b
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;ipv4.c: 172: ip.dscp = (temp & 0x1f);
  6142  00207C  5191               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6143  00207E  0B1F               	andlw	31
  6144  002080  6F94               	movwf	(ipv4_parseHeader@ip+2)& (0+255),b
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;ipv4.c: 173: ip.ecn = (temp & 0xC0) >> 6;
  6148  002082  4591               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  6149  002084  46E8               	rlncf	wreg,f,c
  6150  002086  0B03               	andlw	3
  6151  002088  0B03               	andlw	3
  6152  00208A  6F95               	movwf	(ipv4_parseHeader@ip+3)& (0+255),b
  6153                           
  6154                           ;ipv4.c: 175: ip.totalLength = (ethernetController_streamFromRXBuffer(1, field->start) <
      +                          < 8);
  6155  00208C  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6156  002090  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6157  002094  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6158  002098  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6159  00209C  0E01               	movlw	1
  6160  00209E  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6161  0020A2  0100               	movlb	0	; () banked
  6162  0020A4  6F97               	movwf	(ipv4_parseHeader@ip+5)& (0+255),b
  6163  0020A6  6B96               	clrf	(ipv4_parseHeader@ip+4)& (0+255),b
  6164                           
  6165                           ;ipv4.c: 176: ip.totalLength |= ethernetController_streamFromRXBuffer(1, field->start);
  6166  0020A8  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6167  0020AC  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6168  0020B0  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6169  0020B4  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6170  0020B8  0E01               	movlw	1
  6171  0020BA  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6172  0020BE  0100               	movlb	0	; () banked
  6173  0020C0  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  6174  0020C2  518E               	movf	??_ipv4_parseHeader& (0+255),w,b
  6175  0020C4  1396               	iorwf	(ipv4_parseHeader@ip+4)& (0+255),f,b
  6176                           
  6177                           ;ipv4.c: 178: ip.identification = (ethernetController_streamFromRXBuffer(1, field->start
      +                          ) << 8);
  6178  0020C6  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6179  0020CA  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6180  0020CE  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6181  0020D2  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6182  0020D6  0E01               	movlw	1
  6183  0020D8  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6184  0020DC  0100               	movlb	0	; () banked
  6185  0020DE  6F99               	movwf	(ipv4_parseHeader@ip+7)& (0+255),b
  6186  0020E0  6B98               	clrf	(ipv4_parseHeader@ip+6)& (0+255),b
  6187                           
  6188                           ;ipv4.c: 179: ip.identification |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  6189  0020E2  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6190  0020E6  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6191  0020EA  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6192  0020EE  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6193  0020F2  0E01               	movlw	1
  6194  0020F4  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6195  0020F8  0100               	movlb	0	; () banked
  6196  0020FA  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  6197  0020FC  518E               	movf	??_ipv4_parseHeader& (0+255),w,b
  6198  0020FE  1398               	iorwf	(ipv4_parseHeader@ip+6)& (0+255),f,b
  6199                           
  6200                           ;ipv4.c: 181: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6201  002100  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6202  002104  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6203  002108  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6204  00210C  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6205  002110  0E01               	movlw	1
  6206  002112  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6207  002116  0100               	movlb	0	; () banked
  6208  002118  6F91               	movwf	ipv4_parseHeader@temp& (0+255),b
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;ipv4.c: 182: ip.flags = ((temp & 0xC0) >> 6);
  6212  00211A  4591               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  6213  00211C  46E8               	rlncf	wreg,f,c
  6214  00211E  0B03               	andlw	3
  6215  002120  0B03               	andlw	3
  6216  002122  6F9A               	movwf	(ipv4_parseHeader@ip+8)& (0+255),b
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;ipv4.c: 183: ip.fragmentOffset = ((temp & 0x1f) << 8);
  6220  002124  5191               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6221  002126  0B1F               	andlw	31
  6222  002128  6F9C               	movwf	(ipv4_parseHeader@ip+10)& (0+255),b
  6223  00212A  6B9B               	clrf	(ipv4_parseHeader@ip+9)& (0+255),b
  6224                           
  6225                           ;ipv4.c: 185: ip.fragmentOffset |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  6226  00212C  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6227  002130  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6228  002134  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6229  002138  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6230  00213C  0E01               	movlw	1
  6231  00213E  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6232  002142  0100               	movlb	0	; () banked
  6233  002144  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  6234  002146  518E               	movf	??_ipv4_parseHeader& (0+255),w,b
  6235  002148  139B               	iorwf	(ipv4_parseHeader@ip+9)& (0+255),f,b
  6236                           
  6237                           ;ipv4.c: 187: ip.timeToLive = ethernetController_streamFromRXBuffer(1, field->start);
  6238  00214A  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6239  00214E  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6240  002152  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6241  002156  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6242  00215A  0E01               	movlw	1
  6243  00215C  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6244  002160  0100               	movlb	0	; () banked
  6245  002162  6F9D               	movwf	(ipv4_parseHeader@ip+11)& (0+255),b
  6246                           
  6247                           ;ipv4.c: 189: ip.protocol = ethernetController_streamFromRXBuffer(1, field->start);
  6248  002164  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6249  002168  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6250  00216C  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6251  002170  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6252  002174  0E01               	movlw	1
  6253  002176  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6254  00217A  0100               	movlb	0	; () banked
  6255  00217C  6F9E               	movwf	(ipv4_parseHeader@ip+12)& (0+255),b
  6256                           
  6257                           ;ipv4.c: 191: ip.checksum = (ethernetController_streamFromRXBuffer(1, field->start) << 8
      +                          );
  6258  00217E  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6259  002182  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6260  002186  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6261  00218A  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6262  00218E  0E01               	movlw	1
  6263  002190  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6264  002194  0100               	movlb	0	; () banked
  6265  002196  6FA0               	movwf	(ipv4_parseHeader@ip+14)& (0+255),b
  6266  002198  6B9F               	clrf	(ipv4_parseHeader@ip+13)& (0+255),b
  6267                           
  6268                           ;ipv4.c: 192: ip.checksum |= ethernetController_streamFromRXBuffer(1, field->start);
  6269  00219A  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6270  00219E  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6271  0021A2  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6272  0021A6  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6273  0021AA  0E01               	movlw	1
  6274  0021AC  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6275  0021B0  0100               	movlb	0	; () banked
  6276  0021B2  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  6277  0021B4  518E               	movf	??_ipv4_parseHeader& (0+255),w,b
  6278  0021B6  139F               	iorwf	(ipv4_parseHeader@ip+13)& (0+255),f,b
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;ipv4.c: 194: for (uint8_t i = 0; i < 4; i++)
  6282  0021B8  0E00               	movlw	0
  6283  0021BA  6F8F               	movwf	ipv4_parseHeader@i& (0+255),b
  6284  0021BC                     l8371:
  6285                           
  6286                           ; BSR set to: 0
  6287  0021BC  0E03               	movlw	3
  6288  0021BE  658F               	cpfsgt	ipv4_parseHeader@i& (0+255),b
  6289  0021C0  D001               	goto	l1045
  6290  0021C2  D01D               	goto	u10390
  6291  0021C4                     l1045:
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;ipv4.c: 195: ip.source.address[i] = ethernetController_streamFromRXBuffer(1, field->sta
      +                          rt);
  6295                           
  6296                           ; BSR set to: 0
  6297  0021C4  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6298  0021C8  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6299  0021CC  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6300  0021D0  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6301  0021D4  0E01               	movlw	1
  6302  0021D6  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6303  0021DA  0100               	movlb	0	; () banked
  6304  0021DC  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  6305  0021DE  518F               	movf	ipv4_parseHeader@i& (0+255),w,b
  6306  0021E0  0D01               	mullw	1
  6307  0021E2  0E0F               	movlw	15
  6308  0021E4  26F3               	addwf	prodl,f,c
  6309  0021E6  0E00               	movlw	0
  6310  0021E8  22F4               	addwfc	prodh,f,c
  6311  0021EA  0E92               	movlw	low ipv4_parseHeader@ip
  6312  0021EC  24F3               	addwf	prodl,w,c
  6313  0021EE  6ED9               	movwf	fsr2l,c
  6314  0021F0  0E00               	movlw	high ipv4_parseHeader@ip
  6315  0021F2  20F4               	addwfc	prodh,w,c
  6316  0021F4  6EDA               	movwf	fsr2h,c
  6317  0021F6  C08E  FFDF         	movff	??_ipv4_parseHeader,indf2
  6318                           
  6319                           ; BSR set to: 0
  6320  0021FA  2B8F               	incf	ipv4_parseHeader@i& (0+255),f,b
  6321  0021FC  D7DF               	goto	l8371
  6322  0021FE                     u10390:
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;ipv4.c: 197: for (uint8_t i = 0; i < 4; i++)
  6326                           
  6327                           ; BSR set to: 0
  6328  0021FE  0E00               	movlw	0
  6329  002200  6F90               	movwf	ipv4_parseHeader@i_3594& (0+255),b
  6330  002202                     l8383:
  6331                           
  6332                           ; BSR set to: 0
  6333  002202  0E03               	movlw	3
  6334  002204  6590               	cpfsgt	ipv4_parseHeader@i_3594& (0+255),b
  6335  002206  D001               	goto	l1047
  6336  002208  D01D               	goto	u10410
  6337  00220A                     l1047:
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;ipv4.c: 198: ip.destination.address[i] = ethernetController_streamFromRXBuffer(1, field
      +                          ->start);
  6341                           
  6342                           ; BSR set to: 0
  6343  00220A  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6344  00220E  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6345  002212  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6346  002216  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6347  00221A  0E01               	movlw	1
  6348  00221C  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6349  002220  0100               	movlb	0	; () banked
  6350  002222  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  6351  002224  5190               	movf	ipv4_parseHeader@i_3594& (0+255),w,b
  6352  002226  0D01               	mullw	1
  6353  002228  0E13               	movlw	19
  6354  00222A  26F3               	addwf	prodl,f,c
  6355  00222C  0E00               	movlw	0
  6356  00222E  22F4               	addwfc	prodh,f,c
  6357  002230  0E92               	movlw	low ipv4_parseHeader@ip
  6358  002232  24F3               	addwf	prodl,w,c
  6359  002234  6ED9               	movwf	fsr2l,c
  6360  002236  0E00               	movlw	high ipv4_parseHeader@ip
  6361  002238  20F4               	addwfc	prodh,w,c
  6362  00223A  6EDA               	movwf	fsr2h,c
  6363  00223C  C08E  FFDF         	movff	??_ipv4_parseHeader,indf2
  6364                           
  6365                           ; BSR set to: 0
  6366  002240  2B90               	incf	ipv4_parseHeader@i_3594& (0+255),f,b
  6367  002242  D7DF               	goto	l8383
  6368  002244                     u10410:
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;ipv4.c: 200: ethernetController_streamFromRXBuffer(2, field->start);
  6372                           
  6373                           ; BSR set to: 0
  6374  002244  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6375  002248  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6376  00224C  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6377  002250  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6378  002254  0E02               	movlw	2
  6379  002256  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
  6380                           
  6381                           ;ipv4.c: 202: return ip;
  6382  00225A  EE20  F092         	lfsr	2,ipv4_parseHeader@ip
  6383  00225E  EE00  F077         	lfsr	0,?_ipv4_parseHeader
  6384  002262  0E16               	movlw	22
  6385  002264                     u10421:
  6386  002264  CFDB FFEB          	movff	plusw2,plusw0
  6387  002268  06E8               	decf	wreg,f,c
  6388  00226A  E2FC               	bc	u10421
  6389  00226C  0012               	return	
  6390  00226E                     __end_of_ipv4_parseHeader:
  6391                           	opt stack 0
  6392                           tblptru	equ	0xFF8
  6393                           tblptrh	equ	0xFF7
  6394                           tblptrl	equ	0xFF6
  6395                           tablat	equ	0xFF5
  6396                           prodh	equ	0xFF4
  6397                           prodl	equ	0xFF3
  6398                           intcon	equ	0xFF2
  6399                           intcon3	equ	0xFF0
  6400                           indf0	equ	0xFEF
  6401                           postinc0	equ	0xFEE
  6402                           plusw0	equ	0xFEB
  6403                           fsr0h	equ	0xFEA
  6404                           fsr0l	equ	0xFE9
  6405                           wreg	equ	0xFE8
  6406                           postinc1	equ	0xFE6
  6407                           postdec1	equ	0xFE5
  6408                           plusw1	equ	0xFE3
  6409                           fsr1h	equ	0xFE2
  6410                           fsr1l	equ	0xFE1
  6411                           indf2	equ	0xFDF
  6412                           postinc2	equ	0xFDE
  6413                           postdec2	equ	0xFDD
  6414                           plusw2	equ	0xFDB
  6415                           fsr2h	equ	0xFDA
  6416                           fsr2l	equ	0xFD9
  6417                           status	equ	0xFD8
  6418                           
  6419 ;; *************** function _ipv4_checkHeaderChecksum *****************
  6420 ;; Defined at:
  6421 ;;		line 205 in file "src/stack/protocols/ipv4.c"
  6422 ;; Parameters:    Size  Location     Type
  6423 ;;  header          2   58[BANK0 ] PTR struct ipv4_header
  6424 ;;		 -> ipv4_handleNewPacket@ip(23), 
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;  testHeader     23   62[BANK0 ] struct ipv4_header
  6427 ;; Return value:  Size  Location     Type
  6428 ;;		None               void
  6429 ;; Registers used:
  6430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6431 ;; Tracked objects:
  6432 ;;		On entry : 0/0
  6433 ;;		On exit  : 0/0
  6434 ;;		Unchanged: 0/0
  6435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6436 ;;      Params:         0       2       0       0       0       0       0       0       0
  6437 ;;      Locals:         0      23       0       0       0       0       0       0       0
  6438 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6439 ;;      Totals:         0      27       0       0       0       0       0       0       0
  6440 ;;Total ram usage:       27 bytes
  6441 ;; Hardware stack levels used:    1
  6442 ;; Hardware stack levels required when called:    6
  6443 ;; This function calls:
  6444 ;;		_UARTTransmitText
  6445 ;;		_hexToString
  6446 ;;		_ipv4_calculateHeaderChecksum
  6447 ;; This function is called by:
  6448 ;;		_ipv4_handleNewPacket
  6449 ;; This function uses a non-reentrant model
  6450 ;;
  6451                           
  6452                           	psect	text15
  6453  00361E                     __ptext15:
  6454                           	opt stack 0
  6455  00361E                     _ipv4_checkHeaderChecksum:
  6456                           	opt stack 21
  6457                           
  6458                           ;ipv4.c: 206: ipv4_header_t testHeader;
  6459                           ;ipv4.c: 207: testHeader = *header;
  6460                           
  6461                           ;incstack = 0
  6462  00361E  C09A  FFD9         	movff	ipv4_checkHeaderChecksum@header,fsr2l
  6463  003622  C09B  FFDA         	movff	ipv4_checkHeaderChecksum@header+1,fsr2h
  6464  003626  EE10  F09E         	lfsr	1,ipv4_checkHeaderChecksum@testHeader
  6465  00362A  0E16               	movlw	22
  6466  00362C                     u10431:
  6467  00362C  CFDB FFE3          	movff	plusw2,plusw1
  6468  003630  06E8               	decf	wreg,f,c
  6469  003632  E2FC               	bc	u10431
  6470                           
  6471                           ;ipv4.c: 208: testHeader.checksum = 0x0000;
  6472  003634  0E00               	movlw	0
  6473  003636  0100               	movlb	0	; () banked
  6474  003638  6FAC               	movwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),b
  6475  00363A  0E00               	movlw	0
  6476  00363C  6FAB               	movwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),b
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;ipv4.c: 209: ipv4_calculateHeaderChecksum(&testHeader);
  6480  00363E  0E9E               	movlw	low ipv4_checkHeaderChecksum@testHeader
  6481  003640  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  6482  003642  0E00               	movlw	high ipv4_checkHeaderChecksum@testHeader
  6483  003644  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  6484  003646  ECC6  F00B         	call	_ipv4_calculateHeaderChecksum	;wreg free
  6485                           
  6486                           ;ipv4.c: 210: if (testHeader.checksum == header->checksum) {
  6487  00364A  0100               	movlb	0	; () banked
  6488  00364C  EE20 F00D          	lfsr	2,13
  6489  003650  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  6490  003652  26D9               	addwf	fsr2l,f,c
  6491  003654  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  6492  003656  22DA               	addwfc	fsr2h,f,c
  6493  003658  50DE               	movf	postinc2,w,c
  6494  00365A  19AB               	xorwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),w,b
  6495  00365C  E106               	bnz	l8411
  6496  00365E  50DE               	movf	postinc2,w,c
  6497  003660  19AC               	xorwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),w,b
  6498  003662  A4D8               	btfss	status,2,c
  6499  003664  D002               	goto	l1052
  6500                           
  6501                           ; BSR set to: 0
  6502                           ;ipv4.c: 211: return 1;
  6503  003666  80D8               	bsf	status,0,c
  6504                           
  6505                           ; BSR set to: 0
  6506  003668  0012               	return	
  6507  00366A                     l1052:
  6508  00366A                     l8411:
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;ipv4.c: 212: }
  6512                           ;ipv4.c: 213: UARTTransmitText("[Expected ");
  6513  00366A  0E6A               	movlw	low STR_86
  6514  00366C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6515  00366E  0E7F               	movlw	high STR_86
  6516  003670  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6517  003672  EC34  F022         	call	_UARTTransmitText	;wreg free
  6518                           
  6519                           ;ipv4.c: 214: UARTTransmitText(hexToString(testHeader.checksum));
  6520  003676  C0AB  F061         	movff	ipv4_checkHeaderChecksum@testHeader+13,hexToString@val
  6521  00367A  C0AC  F062         	movff	ipv4_checkHeaderChecksum@testHeader+14,hexToString@val+1
  6522  00367E  0100               	movlb	0	; () banked
  6523  003680  6B63               	clrf	(hexToString@val+2)& (0+255),b
  6524  003682  6B64               	clrf	(hexToString@val+3)& (0+255),b
  6525  003684  ECAD  F019         	call	_hexToString	;wreg free
  6526  003688  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  6527  00368C  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  6528  003690  EC34  F022         	call	_UARTTransmitText	;wreg free
  6529                           
  6530                           ;ipv4.c: 215: UARTTransmitText(", got ");
  6531  003694  0EAB               	movlw	low STR_87
  6532  003696  0100               	movlb	0	; () banked
  6533  003698  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6534  00369A  0E7F               	movlw	high STR_87
  6535  00369C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6536  00369E  EC34  F022         	call	_UARTTransmitText	;wreg free
  6537                           
  6538                           ;ipv4.c: 216: UARTTransmitText(hexToString(header->checksum));
  6539  0036A2  0100               	movlb	0	; () banked
  6540  0036A4  EE20 F00D          	lfsr	2,13
  6541  0036A8  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  6542  0036AA  26D9               	addwf	fsr2l,f,c
  6543  0036AC  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  6544  0036AE  22DA               	addwfc	fsr2h,f,c
  6545  0036B0  CFDE F09C          	movff	postinc2,??_ipv4_checkHeaderChecksum
  6546  0036B4  CFDD F09D          	movff	postdec2,??_ipv4_checkHeaderChecksum+1
  6547  0036B8  C09C  F061         	movff	??_ipv4_checkHeaderChecksum,hexToString@val
  6548  0036BC  C09D  F062         	movff	??_ipv4_checkHeaderChecksum+1,hexToString@val+1
  6549  0036C0  6B63               	clrf	(hexToString@val+2)& (0+255),b
  6550  0036C2  6B64               	clrf	(hexToString@val+3)& (0+255),b
  6551  0036C4  ECAD  F019         	call	_hexToString	;wreg free
  6552  0036C8  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  6553  0036CC  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  6554  0036D0  EC34  F022         	call	_UARTTransmitText	;wreg free
  6555                           
  6556                           ;ipv4.c: 217: UARTTransmitText("]");
  6557  0036D4  0EFA               	movlw	low (STR_18+1)
  6558  0036D6  0100               	movlb	0	; () banked
  6559  0036D8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6560  0036DA  0E7F               	movlw	high (STR_18+1)
  6561  0036DC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6562  0036DE  EC34  F022         	call	_UARTTransmitText	;wreg free
  6563                           
  6564                           ;ipv4.c: 218: return 0;
  6565  0036E2  90D8               	bcf	status,0,c
  6566  0036E4  0012               	return	
  6567  0036E6                     __end_of_ipv4_checkHeaderChecksum:
  6568                           	opt stack 0
  6569                           tblptru	equ	0xFF8
  6570                           tblptrh	equ	0xFF7
  6571                           tblptrl	equ	0xFF6
  6572                           tablat	equ	0xFF5
  6573                           prodh	equ	0xFF4
  6574                           prodl	equ	0xFF3
  6575                           intcon	equ	0xFF2
  6576                           intcon3	equ	0xFF0
  6577                           indf0	equ	0xFEF
  6578                           postinc0	equ	0xFEE
  6579                           plusw0	equ	0xFEB
  6580                           fsr0h	equ	0xFEA
  6581                           fsr0l	equ	0xFE9
  6582                           wreg	equ	0xFE8
  6583                           postinc1	equ	0xFE6
  6584                           postdec1	equ	0xFE5
  6585                           plusw1	equ	0xFE3
  6586                           fsr1h	equ	0xFE2
  6587                           fsr1l	equ	0xFE1
  6588                           indf2	equ	0xFDF
  6589                           postinc2	equ	0xFDE
  6590                           postdec2	equ	0xFDD
  6591                           plusw2	equ	0xFDB
  6592                           fsr2h	equ	0xFDA
  6593                           fsr2l	equ	0xFD9
  6594                           status	equ	0xFD8
  6595                           
  6596 ;; *************** function _ipv4_calculateHeaderChecksum *****************
  6597 ;; Defined at:
  6598 ;;		line 87 in file "src/stack/protocols/ipv4.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
  6601 ;;		 -> ipv4_checkHeaderChecksum@testHeader(23), 
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;  sum             4   14[BANK0 ] unsigned long 
  6604 ;; Return value:  Size  Location     Type
  6605 ;;                  1    wreg      void 
  6606 ;; Registers used:
  6607 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6608 ;; Tracked objects:
  6609 ;;		On entry : 0/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6613 ;;      Params:         0       2       0       0       0       0       0       0       0
  6614 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6615 ;;      Temps:          0      12       0       0       0       0       0       0       0
  6616 ;;      Totals:         0      18       0       0       0       0       0       0       0
  6617 ;;Total ram usage:       18 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    4
  6620 ;; This function calls:
  6621 ;;		Nothing
  6622 ;; This function is called by:
  6623 ;;		_ipv4_checkHeaderChecksum
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text16
  6628  00178C                     __ptext16:
  6629                           	opt stack 0
  6630  00178C                     _ipv4_calculateHeaderChecksum:
  6631                           	opt stack 22
  6632                           
  6633                           ;ipv4.c: 89: uint32_t sum = 0;
  6634                           
  6635                           ;incstack = 0
  6636  00178C  0E00               	movlw	0
  6637  00178E  0100               	movlb	0	; () banked
  6638  001790  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  6639  001792  0E00               	movlw	0
  6640  001794  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  6641  001796  0E00               	movlw	0
  6642  001798  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  6643  00179A  0E00               	movlw	0
  6644  00179C  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;ipv4.c: 90: sum = ((header->version << 12) | (header->headerLength << 8) | (header->dsc
      +                          p << 2) | (header->ecn))&0xffff;
  6648  00179E  EE20 F002          	lfsr	2,2
  6649  0017A2  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6650  0017A4  26D9               	addwf	fsr2l,f,c
  6651  0017A6  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6652  0017A8  22DA               	addwfc	fsr2h,f,c
  6653  0017AA  50DF               	movf	indf2,w,c
  6654  0017AC  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6655  0017AE  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6656  0017B0  90D8               	bcf	status,0,c
  6657  0017B2  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  6658  0017B4  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  6659  0017B6  90D8               	bcf	status,0,c
  6660  0017B8  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  6661  0017BA  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  6662  0017BC  EE20 F001          	lfsr	2,1
  6663  0017C0  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6664  0017C2  26D9               	addwf	fsr2l,f,c
  6665  0017C4  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6666  0017C6  22DA               	addwfc	fsr2h,f,c
  6667  0017C8  50DF               	movf	indf2,w,c
  6668  0017CA  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6669  0017CC  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6670  0017CE  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6671  0017D0  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6672  0017D2  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
  6673  0017D6  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
  6674  0017DA  50DF               	movf	indf2,w,c
  6675  0017DC  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  6676  0017DE  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  6677  0017E0  0E0C               	movlw	12
  6678  0017E2                     u9485:
  6679  0017E2  90D8               	bcf	status,0,c
  6680  0017E4  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6681  0017E6  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6682  0017E8  2EE8               	decfsz	wreg,f,c
  6683  0017EA  D7FB               	goto	u9485
  6684  0017EC  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6685  0017EE  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6686  0017F0  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6687  0017F2  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6688  0017F4  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6689  0017F6  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6690  0017F8  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6691  0017FA  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6692  0017FC  EE20 F003          	lfsr	2,3
  6693  001800  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6694  001802  26D9               	addwf	fsr2l,f,c
  6695  001804  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6696  001806  22DA               	addwfc	fsr2h,f,c
  6697  001808  50DF               	movf	indf2,w,c
  6698  00180A  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  6699  00180C  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  6700  00180E  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6701  001810  0E00               	movlw	0
  6702  001812  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6703  001814  C067  F06E         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
  6704  001818  C068  F06F         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
  6705  00181C  6B70               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  6706  00181E  6B71               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;ipv4.c: 91: sum += header->totalLength;
  6710  001820  EE20 F004          	lfsr	2,4
  6711  001824  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6712  001826  26D9               	addwf	fsr2l,f,c
  6713  001828  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6714  00182A  22DA               	addwfc	fsr2h,f,c
  6715  00182C  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  6716  001830  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  6717  001834  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6718  001836  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6719  001838  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6720  00183A  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6721  00183C  0E00               	movlw	0
  6722  00183E  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6723  001840  0E00               	movlw	0
  6724  001842  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;ipv4.c: 92: sum += header->identification;
  6728  001844  EE20 F006          	lfsr	2,6
  6729  001848  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6730  00184A  26D9               	addwf	fsr2l,f,c
  6731  00184C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6732  00184E  22DA               	addwfc	fsr2h,f,c
  6733  001850  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  6734  001854  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  6735  001858  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6736  00185A  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6737  00185C  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6738  00185E  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6739  001860  0E00               	movlw	0
  6740  001862  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6741  001864  0E00               	movlw	0
  6742  001866  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;ipv4.c: 93: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
  6746  001868  EE20 F009          	lfsr	2,9
  6747  00186C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6748  00186E  26D9               	addwf	fsr2l,f,c
  6749  001870  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6750  001872  22DA               	addwfc	fsr2h,f,c
  6751  001874  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  6752  001878  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  6753  00187C  EE20 F008          	lfsr	2,8
  6754  001880  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6755  001882  26D9               	addwf	fsr2l,f,c
  6756  001884  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6757  001886  22DA               	addwfc	fsr2h,f,c
  6758  001888  50DF               	movf	indf2,w,c
  6759  00188A  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6760  00188C  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6761  00188E  0E0D               	movlw	13
  6762  001890                     u9495:
  6763  001890  90D8               	bcf	status,0,c
  6764  001892  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  6765  001894  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6766  001896  2EE8               	decfsz	wreg,f,c
  6767  001898  D7FB               	goto	u9495
  6768  00189A  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6769  00189C  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  6770  00189E  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6771  0018A0  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6772  0018A2  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6773  0018A4  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6774  0018A6  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6775  0018A8  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6776  0018AA  0E00               	movlw	0
  6777  0018AC  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6778  0018AE  0E00               	movlw	0
  6779  0018B0  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;ipv4.c: 94: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
  6783  0018B2  EE20 F00B          	lfsr	2,11
  6784  0018B6  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6785  0018B8  26D9               	addwf	fsr2l,f,c
  6786  0018BA  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6787  0018BC  22DA               	addwfc	fsr2h,f,c
  6788  0018BE  50DF               	movf	indf2,w,c
  6789  0018C0  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6790  0018C2  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6791  0018C4  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6792  0018C6  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6793  0018C8  EE20 F00C          	lfsr	2,12
  6794  0018CC  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6795  0018CE  26D9               	addwf	fsr2l,f,c
  6796  0018D0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6797  0018D2  22DA               	addwfc	fsr2h,f,c
  6798  0018D4  50DF               	movf	indf2,w,c
  6799  0018D6  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6800  0018D8  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6801  0018DA  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  6802  0018DC  0E00               	movlw	0
  6803  0018DE  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  6804  0018E0  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6805  0018E2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6806  0018E4  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6807  0018E6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6808  0018E8  0E00               	movlw	0
  6809  0018EA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6810  0018EC  0E00               	movlw	0
  6811  0018EE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6812                           
  6813                           ; BSR set to: 0
  6814                           ;ipv4.c: 96: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0xf
      +                          fff;
  6815  0018F0  EE20 F00F          	lfsr	2,15
  6816  0018F4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6817  0018F6  26D9               	addwf	fsr2l,f,c
  6818  0018F8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6819  0018FA  22DA               	addwfc	fsr2h,f,c
  6820  0018FC  50DF               	movf	indf2,w,c
  6821  0018FE  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6822  001900  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6823  001902  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6824  001904  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6825  001906  EE20 F010          	lfsr	2,16
  6826  00190A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6827  00190C  26D9               	addwf	fsr2l,f,c
  6828  00190E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6829  001910  22DA               	addwfc	fsr2h,f,c
  6830  001912  50DF               	movf	indf2,w,c
  6831  001914  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6832  001916  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6833  001918  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6834  00191A  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6835  00191C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6836  00191E  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  6837  001920  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6838  001922  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6839  001924  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6840  001926  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6841  001928  0E00               	movlw	0
  6842  00192A  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6843  00192C  0E00               	movlw	0
  6844  00192E  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;ipv4.c: 97: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0xf
      +                          fff;
  6848  001930  EE20 F011          	lfsr	2,17
  6849  001934  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6850  001936  26D9               	addwf	fsr2l,f,c
  6851  001938  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6852  00193A  22DA               	addwfc	fsr2h,f,c
  6853  00193C  50DF               	movf	indf2,w,c
  6854  00193E  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6855  001940  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6856  001942  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6857  001944  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6858  001946  EE20 F012          	lfsr	2,18
  6859  00194A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6860  00194C  26D9               	addwf	fsr2l,f,c
  6861  00194E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6862  001950  22DA               	addwfc	fsr2h,f,c
  6863  001952  50DF               	movf	indf2,w,c
  6864  001954  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6865  001956  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6866  001958  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6867  00195A  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6868  00195C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6869  00195E  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  6870  001960  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6871  001962  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6872  001964  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6873  001966  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6874  001968  0E00               	movlw	0
  6875  00196A  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6876  00196C  0E00               	movlw	0
  6877  00196E  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;ipv4.c: 98: sum += ((header->destination.address[1] | (header->destination.address[0] <
      +                          < 8)))&0xffff;
  6881  001970  EE20 F013          	lfsr	2,19
  6882  001974  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6883  001976  26D9               	addwf	fsr2l,f,c
  6884  001978  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6885  00197A  22DA               	addwfc	fsr2h,f,c
  6886  00197C  50DF               	movf	indf2,w,c
  6887  00197E  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6888  001980  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6889  001982  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6890  001984  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6891  001986  EE20 F014          	lfsr	2,20
  6892  00198A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6893  00198C  26D9               	addwf	fsr2l,f,c
  6894  00198E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6895  001990  22DA               	addwfc	fsr2h,f,c
  6896  001992  50DF               	movf	indf2,w,c
  6897  001994  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6898  001996  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6899  001998  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6900  00199A  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6901  00199C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6902  00199E  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  6903  0019A0  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6904  0019A2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6905  0019A4  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6906  0019A6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6907  0019A8  0E00               	movlw	0
  6908  0019AA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6909  0019AC  0E00               	movlw	0
  6910  0019AE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;ipv4.c: 99: sum += ((header->destination.address[3] | (header->destination.address[2] <
      +                          < 8)))&0xffff;
  6914  0019B0  EE20 F015          	lfsr	2,21
  6915  0019B4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6916  0019B6  26D9               	addwf	fsr2l,f,c
  6917  0019B8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6918  0019BA  22DA               	addwfc	fsr2h,f,c
  6919  0019BC  50DF               	movf	indf2,w,c
  6920  0019BE  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6921  0019C0  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6922  0019C2  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6923  0019C4  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6924  0019C6  EE20 F016          	lfsr	2,22
  6925  0019CA  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6926  0019CC  26D9               	addwf	fsr2l,f,c
  6927  0019CE  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6928  0019D0  22DA               	addwfc	fsr2h,f,c
  6929  0019D2  50DF               	movf	indf2,w,c
  6930  0019D4  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6931  0019D6  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6932  0019D8  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6933  0019DA  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6934  0019DC  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6935  0019DE  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  6936  0019E0  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6937  0019E2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6938  0019E4  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6939  0019E6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6940  0019E8  0E00               	movlw	0
  6941  0019EA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6942  0019EC  0E00               	movlw	0
  6943  0019EE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;ipv4.c: 101: sum = (sum & 0x0ffff)+((sum & 0xf0000) >> 16);
  6947  0019F0  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  6948  0019F4  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  6949  0019F8  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  6950  0019FC  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  6951  001A00  0E11               	movlw	17
  6952  001A02  D005               	goto	u9500
  6953  001A04                     u9505:
  6954  001A04  90D8               	bcf	status,0,c
  6955  001A06  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6956  001A08  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  6957  001A0A  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  6958  001A0C  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  6959  001A0E                     u9500:
  6960  001A0E  2EE8               	decfsz	wreg,f,c
  6961  001A10  D7F9               	goto	u9505
  6962  001A12  0E0F               	movlw	15
  6963  001A14  1562               	andwf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6964  001A16  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6965  001A18  0E00               	movlw	0
  6966  001A1A  1563               	andwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6967  001A1C  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  6968  001A1E  0E00               	movlw	0
  6969  001A20  1564               	andwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6970  001A22  6F68               	movwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  6971  001A24  0E00               	movlw	0
  6972  001A26  1565               	andwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6973  001A28  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  6974  001A2A  0EFF               	movlw	255
  6975  001A2C  156E               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
  6976  001A2E  6F6A               	movwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),b
  6977  001A30  0EFF               	movlw	255
  6978  001A32  156F               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
  6979  001A34  6F6B               	movwf	(??_ipv4_calculateHeaderChecksum+9)& (0+255),b
  6980  001A36  0E00               	movlw	0
  6981  001A38  1570               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
  6982  001A3A  6F6C               	movwf	(??_ipv4_calculateHeaderChecksum+10)& (0+255),b
  6983  001A3C  0E00               	movlw	0
  6984  001A3E  1571               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
  6985  001A40  6F6D               	movwf	(??_ipv4_calculateHeaderChecksum+11)& (0+255),b
  6986  001A42  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6987  001A44  256A               	addwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),w,b
  6988  001A46  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  6989  001A48  5167               	movf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),w,b
  6990  001A4A  216B               	addwfc	(??_ipv4_calculateHeaderChecksum+9)& (0+255),w,b
  6991  001A4C  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  6992  001A4E  5168               	movf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),w,b
  6993  001A50  216C               	addwfc	(??_ipv4_calculateHeaderChecksum+10)& (0+255),w,b
  6994  001A52  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  6995  001A54  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  6996  001A56  216D               	addwfc	(??_ipv4_calculateHeaderChecksum+11)& (0+255),w,b
  6997  001A58  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;ipv4.c: 102: sum = ~sum;
  7001  001A5A  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  7002  001A5E  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  7003  001A62  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  7004  001A66  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  7005  001A6A  1F62               	comf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7006  001A6C  1F63               	comf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7007  001A6E  1F64               	comf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7008  001A70  1F65               	comf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7009  001A72  C062  F06E         	movff	??_ipv4_calculateHeaderChecksum,ipv4_calculateHeaderChecksum@sum
  7010  001A76  C063  F06F         	movff	??_ipv4_calculateHeaderChecksum+1,ipv4_calculateHeaderChecksum@sum+1
  7011  001A7A  C064  F070         	movff	??_ipv4_calculateHeaderChecksum+2,ipv4_calculateHeaderChecksum@sum+2
  7012  001A7E  C065  F071         	movff	??_ipv4_calculateHeaderChecksum+3,ipv4_calculateHeaderChecksum@sum+3
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;ipv4.c: 104: header->checksum = sum;
  7016  001A82  EE20 F00D          	lfsr	2,13
  7017  001A86  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7018  001A88  26D9               	addwf	fsr2l,f,c
  7019  001A8A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7020  001A8C  22DA               	addwfc	fsr2h,f,c
  7021  001A8E  C06E  FFDE         	movff	ipv4_calculateHeaderChecksum@sum,postinc2
  7022  001A92  C06F  FFDD         	movff	ipv4_calculateHeaderChecksum@sum+1,postdec2
  7023                           
  7024                           ; BSR set to: 0
  7025  001A96  0012               	return		;funcret
  7026  001A98                     __end_of_ipv4_calculateHeaderChecksum:
  7027                           	opt stack 0
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           prodh	equ	0xFF4
  7033                           prodl	equ	0xFF3
  7034                           intcon	equ	0xFF2
  7035                           intcon3	equ	0xFF0
  7036                           indf0	equ	0xFEF
  7037                           postinc0	equ	0xFEE
  7038                           plusw0	equ	0xFEB
  7039                           fsr0h	equ	0xFEA
  7040                           fsr0l	equ	0xFE9
  7041                           wreg	equ	0xFE8
  7042                           postinc1	equ	0xFE6
  7043                           postdec1	equ	0xFE5
  7044                           plusw1	equ	0xFE3
  7045                           fsr1h	equ	0xFE2
  7046                           fsr1l	equ	0xFE1
  7047                           indf2	equ	0xFDF
  7048                           postinc2	equ	0xFDE
  7049                           postdec2	equ	0xFDD
  7050                           plusw2	equ	0xFDB
  7051                           fsr2h	equ	0xFDA
  7052                           fsr2l	equ	0xFD9
  7053                           status	equ	0xFD8
  7054                           
  7055 ;; *************** function _ipProtocolToString *****************
  7056 ;; Defined at:
  7057 ;;		line 205 in file "src/system/uart.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;  protocol        1    wreg     enum E5507
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;  protocol        1    2[BANK0 ] enum E5507
  7062 ;; Return value:  Size  Location     Type
  7063 ;;                  2    0[BANK0 ] PTR unsigned char 
  7064 ;; Registers used:
  7065 ;;		wreg, status,2, status,0
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7071 ;;      Params:         0       2       0       0       0       0       0       0       0
  7072 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7073 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7074 ;;      Totals:         0       3       0       0       0       0       0       0       0
  7075 ;;Total ram usage:        3 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:    4
  7078 ;; This function calls:
  7079 ;;		Nothing
  7080 ;; This function is called by:
  7081 ;;		_ipv4_handleNewPacket
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           	psect	text17
  7086  00464C                     __ptext17:
  7087                           	opt stack 0
  7088  00464C                     _ipProtocolToString:
  7089                           	opt stack 23
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;incstack = 0
  7093                           ;ipProtocolToString@protocol stored from wreg
  7094  00464C  0100               	movlb	0	; () banked
  7095  00464E  6F62               	movwf	ipProtocolToString@protocol& (0+255),b
  7096                           
  7097                           ;uart.c: 206: switch (protocol) {
  7098  004650  D015               	goto	l811
  7099  004652                     
  7100                           ;uart.c: 208: return "ICMP";
  7101  004652  0ED5               	movlw	low STR_58
  7102  004654  0100               	movlb	0	; () banked
  7103  004656  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7104  004658  0E7F               	movlw	high STR_58
  7105  00465A  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7106                           
  7107                           ; BSR set to: 0
  7108  00465C  0012               	return	
  7109  00465E                     
  7110                           ; BSR set to: 0
  7111                           ;uart.c: 210: return "TCP";
  7112                           
  7113                           ; BSR set to: 0
  7114  00465E  0EE4               	movlw	low STR_59
  7115  004660  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7116  004662  0E7F               	movlw	high STR_59
  7117  004664  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7118                           
  7119                           ; BSR set to: 0
  7120  004666  0012               	return	
  7121  004668                     
  7122                           ; BSR set to: 0
  7123                           ;uart.c: 212: return "UDP";
  7124                           
  7125                           ; BSR set to: 0
  7126  004668  0EE8               	movlw	low STR_60
  7127  00466A  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7128  00466C  0E7F               	movlw	high STR_60
  7129  00466E  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7130                           
  7131                           ; BSR set to: 0
  7132  004670  0012               	return	
  7133  004672                     
  7134                           ; BSR set to: 0
  7135                           ;uart.c: 214: return "Unknown Protocol";
  7136                           
  7137                           ; BSR set to: 0
  7138  004672  0ECB               	movlw	low STR_61
  7139  004674  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7140  004676  0E7E               	movlw	high STR_61
  7141  004678  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;uart.c: 215: }
  7145                           
  7146                           ; BSR set to: 0
  7147  00467A  0012               	return	
  7148  00467C                     l811:
  7149                           
  7150                           ; BSR set to: 0
  7151  00467C  0100               	movlb	0	; () banked
  7152  00467E  5162               	movf	ipProtocolToString@protocol& (0+255),w,b
  7153                           
  7154                           ; Switch size 1, requested type "space"
  7155                           ; Number of cases is 3, Range of values is 1 to 17
  7156                           ; switch strategies available:
  7157                           ; Name         Instructions Cycles
  7158                           ; simple_byte           10     6 (average)
  7159                           ;	Chosen strategy is simple_byte
  7160  004680  0A01               	xorlw	1	; case 1
  7161  004682  B4D8               	btfsc	status,2,c
  7162  004684  D7E6               	goto	l812
  7163  004686  0A07               	xorlw	7	; case 6
  7164  004688  B4D8               	btfsc	status,2,c
  7165  00468A  D7E9               	goto	l814
  7166  00468C  0A17               	xorlw	23	; case 17
  7167  00468E  B4D8               	btfsc	status,2,c
  7168  004690  D7EB               	goto	l815
  7169  004692  D7EF               	goto	l816
  7170  004694                     __end_of_ipProtocolToString:
  7171                           	opt stack 0
  7172                           tblptru	equ	0xFF8
  7173                           tblptrh	equ	0xFF7
  7174                           tblptrl	equ	0xFF6
  7175                           tablat	equ	0xFF5
  7176                           prodh	equ	0xFF4
  7177                           prodl	equ	0xFF3
  7178                           intcon	equ	0xFF2
  7179                           intcon3	equ	0xFF0
  7180                           indf0	equ	0xFEF
  7181                           postinc0	equ	0xFEE
  7182                           plusw0	equ	0xFEB
  7183                           fsr0h	equ	0xFEA
  7184                           fsr0l	equ	0xFE9
  7185                           wreg	equ	0xFE8
  7186                           postinc1	equ	0xFE6
  7187                           postdec1	equ	0xFE5
  7188                           plusw1	equ	0xFE3
  7189                           fsr1h	equ	0xFE2
  7190                           fsr1l	equ	0xFE1
  7191                           indf2	equ	0xFDF
  7192                           postinc2	equ	0xFDE
  7193                           postdec2	equ	0xFDD
  7194                           plusw2	equ	0xFDB
  7195                           fsr2h	equ	0xFDA
  7196                           fsr2l	equ	0xFD9
  7197                           status	equ	0xFD8
  7198                           
  7199 ;; *************** function _ethernetController_updateNextPacketPointer *****************
  7200 ;; Defined at:
  7201 ;;		line 333 in file "src/enc424j600/ENC424J600.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;		None
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;  nextPktPoint    2   21[BANK0 ] unsigned int 
  7206 ;;  newPointerH     1   25[BANK0 ] unsigned char 
  7207 ;;  newPointerL     1   24[BANK0 ] unsigned char 
  7208 ;;  opcode          1   23[BANK0 ] unsigned char 
  7209 ;; Return value:  Size  Location     Type
  7210 ;;                  1    wreg      void 
  7211 ;; Registers used:
  7212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7218 ;;      Params:         0       0       0       0       0       0       0       0       0
  7219 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7220 ;;      Temps:          0       6       0       0       0       0       0       0       0
  7221 ;;      Totals:         0      11       0       0       0       0       0       0       0
  7222 ;;Total ram usage:       11 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; Hardware stack levels required when called:    7
  7225 ;; This function calls:
  7226 ;;		_ENC424J600_getNextPacketPointer
  7227 ;;		_ENC424J600_readSPI
  7228 ;;		_ENC424J600_setERXDATAReadPointer
  7229 ;;		_ENC424J600_setNextPacketPointer
  7230 ;;		_ENC424J600_writeSPI
  7231 ;; This function is called by:
  7232 ;;		_ethernet_rxGetNewFrame
  7233 ;; This function uses a non-reentrant model
  7234 ;;
  7235                           
  7236                           	psect	text18
  7237  003E80                     __ptext18:
  7238                           	opt stack 0
  7239  003E80                     _ethernetController_updateNextPacketPointer:
  7240                           	opt stack 21
  7241                           
  7242                           ;ENC424J600.c: 334: uint16_t nextPktPointer;
  7243                           ;ENC424J600.c: 335: uint8_t opcode;
  7244                           ;ENC424J600.c: 336: uint8_t newPointerL, newPointerH;
  7245                           ;ENC424J600.c: 337: nextPktPointer = ENC424J600_getNextPacketPointer();
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;incstack = 0
  7249  003E80  EC79  F026         	call	_ENC424J600_getNextPacketPointer	;wreg free
  7250  003E84  C060  F075         	movff	?_ENC424J600_getNextPacketPointer,ethernetController_updateNextPacketPointer@next
      +                          PktPointer
  7251  003E88  C061  F076         	movff	?_ENC424J600_getNextPacketPointer+1,ethernetController_updateNextPacketPointer@ne
      +                          xtPktPointer+1
  7252                           
  7253                           ;ENC424J600.c: 338: ENC424J600_setERXDATAReadPointer(nextPktPointer);
  7254  003E8C  C075  F06A         	movff	ethernetController_updateNextPacketPointer@nextPktPointer,ENC424J600_setERXDATARe
      +                          adPointer@addr
  7255  003E90  C076  F06B         	movff	ethernetController_updateNextPacketPointer@nextPktPointer+1,ENC424J600_setERXDATA
      +                          ReadPointer@addr+1
  7256  003E94  EC0C  F024         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  7257                           
  7258                           ;ENC424J600.c: 339: opcode = 0x2C;
  7259  003E98  0E2C               	movlw	44
  7260  003E9A  0100               	movlb	0	; () banked
  7261  003E9C  6F77               	movwf	ethernetController_updateNextPacketPointer@opcode& (0+255),b
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;ENC424J600.c: 340: PORTBbits.RB4=0;
  7265  003E9E  9881               	bcf	3969,4,c	;volatile
  7266                           
  7267                           ; BSR set to: 0
  7268                           ;ENC424J600.c: 341: ENC424J600_writeSPI(&opcode);
  7269  003EA0  0E77               	movlw	low ethernetController_updateNextPacketPointer@opcode
  7270  003EA2  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  7271  003EA4  0E00               	movlw	high ethernetController_updateNextPacketPointer@opcode
  7272  003EA6  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  7273  003EA8  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
  7274                           
  7275                           ;ENC424J600.c: 342: ENC424J600_readSPI(&newPointerL);
  7276  003EAC  0E78               	movlw	low ethernetController_updateNextPacketPointer@newPointerL
  7277  003EAE  0100               	movlb	0	; () banked
  7278  003EB0  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  7279  003EB2  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerL
  7280  003EB4  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  7281  003EB6  EC0F  F021         	call	_ENC424J600_readSPI	;wreg free
  7282                           
  7283                           ;ENC424J600.c: 343: ENC424J600_readSPI(&newPointerH);
  7284  003EBA  0E79               	movlw	low ethernetController_updateNextPacketPointer@newPointerH
  7285  003EBC  0100               	movlb	0	; () banked
  7286  003EBE  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  7287  003EC0  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerH
  7288  003EC2  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  7289  003EC4  EC0F  F021         	call	_ENC424J600_readSPI	;wreg free
  7290                           
  7291                           ;ENC424J600.c: 344: PORTBbits.RB4=1;
  7292  003EC8  8881               	bsf	3969,4,c	;volatile
  7293                           
  7294                           ;ENC424J600.c: 346: ENC424J600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
  7295  003ECA  0E00               	movlw	0
  7296  003ECC  0100               	movlb	0	; () banked
  7297  003ECE  6F6F               	movwf	??_ethernetController_updateNextPacketPointer& (0+255),b
  7298  003ED0  0EFF               	movlw	255
  7299  003ED2  6F70               	movwf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),b
  7300  003ED4  5179               	movf	ethernetController_updateNextPacketPointer@newPointerH& (0+255),w,b
  7301  003ED6  6F72               	movwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),b
  7302  003ED8  6B71               	clrf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),b
  7303  003EDA  516F               	movf	??_ethernetController_updateNextPacketPointer& (0+255),w,b
  7304  003EDC  1771               	andwf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),f,b
  7305  003EDE  5170               	movf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),w,b
  7306  003EE0  1772               	andwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),f,b
  7307  003EE2  5178               	movf	ethernetController_updateNextPacketPointer@newPointerL& (0+255),w,b
  7308  003EE4  6F73               	movwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),b
  7309  003EE6  6B74               	clrf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),b
  7310  003EE8  5171               	movf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),w,b
  7311  003EEA  1173               	iorwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),w,b
  7312  003EEC  6F60               	movwf	ENC424J600_setNextPacketPointer@ptr& (0+255),b
  7313  003EEE  5172               	movf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),w,b
  7314  003EF0  1174               	iorwf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),w,b
  7315  003EF2  6F61               	movwf	(ENC424J600_setNextPacketPointer@ptr+1)& (0+255),b
  7316  003EF4  EC7E  F026         	call	_ENC424J600_setNextPacketPointer	;wreg free
  7317  003EF8  0012               	return		;funcret
  7318  003EFA                     __end_of_ethernetController_updateNextPacketPointer:
  7319                           	opt stack 0
  7320                           tblptru	equ	0xFF8
  7321                           tblptrh	equ	0xFF7
  7322                           tblptrl	equ	0xFF6
  7323                           tablat	equ	0xFF5
  7324                           prodh	equ	0xFF4
  7325                           prodl	equ	0xFF3
  7326                           intcon	equ	0xFF2
  7327                           intcon3	equ	0xFF0
  7328                           indf0	equ	0xFEF
  7329                           postinc0	equ	0xFEE
  7330                           plusw0	equ	0xFEB
  7331                           fsr0h	equ	0xFEA
  7332                           fsr0l	equ	0xFE9
  7333                           wreg	equ	0xFE8
  7334                           postinc1	equ	0xFE6
  7335                           postdec1	equ	0xFE5
  7336                           plusw1	equ	0xFE3
  7337                           fsr1h	equ	0xFE2
  7338                           fsr1l	equ	0xFE1
  7339                           indf2	equ	0xFDF
  7340                           postinc2	equ	0xFDE
  7341                           postdec2	equ	0xFDD
  7342                           plusw2	equ	0xFDB
  7343                           fsr2h	equ	0xFDA
  7344                           fsr2l	equ	0xFD9
  7345                           status	equ	0xFD8
  7346                           
  7347 ;; *************** function _ethernetController_getRSV *****************
  7348 ;; Defined at:
  7349 ;;		line 298 in file "src/enc424j600/ENC424J600.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;  address         2   17[BANK0 ] unsigned int 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  i               1   23[BANK0 ] unsigned char 
  7354 ;;  opcode          1   22[BANK0 ] unsigned char 
  7355 ;; Return value:  Size  Location     Type
  7356 ;;                  5   17[BANK0 ] struct RSV
  7357 ;; Registers used:
  7358 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7359 ;; Tracked objects:
  7360 ;;		On entry : 0/0
  7361 ;;		On exit  : 0/0
  7362 ;;		Unchanged: 0/0
  7363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7364 ;;      Params:         0       5       0       0       0       0       0       0       0
  7365 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7366 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7367 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7368 ;;Total ram usage:        7 bytes
  7369 ;; Hardware stack levels used:    1
  7370 ;; Hardware stack levels required when called:    7
  7371 ;; This function calls:
  7372 ;;		_ENC424J600_readSPI
  7373 ;;		_ENC424J600_setERXDATAReadPointer
  7374 ;;		_ENC424J600_updateReceiveStatusVector
  7375 ;;		_ENC424J600_writeSPI
  7376 ;; This function is called by:
  7377 ;;		_ethernet_rxGetNewFrame
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           	psect	text19
  7382  003F72                     __ptext19:
  7383                           	opt stack 0
  7384  003F72                     _ethernetController_getRSV:
  7385                           	opt stack 21
  7386                           
  7387                           ;ENC424J600.c: 299: uint8_t static temp[6];
  7388                           ;ENC424J600.c: 300: ENC424J600_setERXDATAReadPointer(address + 2);
  7389                           
  7390                           ;incstack = 0
  7391  003F72  0E02               	movlw	2
  7392  003F74  0100               	movlb	0	; () banked
  7393  003F76  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
  7394  003F78  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
  7395  003F7A  0E00               	movlw	0
  7396  003F7C  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
  7397  003F7E  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
  7398  003F80  EC0C  F024         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  7399                           
  7400                           ;ENC424J600.c: 301: uint8_t opcode = 0x2C;
  7401  003F84  0E2C               	movlw	44
  7402  003F86  0100               	movlb	0	; () banked
  7403  003F88  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
  7404                           
  7405                           ; BSR set to: 0
  7406                           ;ENC424J600.c: 302: PORTBbits.RB4=0;
  7407  003F8A  9881               	bcf	3969,4,c	;volatile
  7408                           
  7409                           ; BSR set to: 0
  7410                           ;ENC424J600.c: 303: ENC424J600_writeSPI(&opcode);
  7411  003F8C  0E76               	movlw	low ethernetController_getRSV@opcode
  7412  003F8E  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  7413  003F90  0E00               	movlw	high ethernetController_getRSV@opcode
  7414  003F92  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  7415  003F94  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
  7416                           
  7417                           ;ENC424J600.c: 304: for (uint8_t i = 0; i < 6; i++) {
  7418  003F98  0E00               	movlw	0
  7419  003F9A  0100               	movlb	0	; () banked
  7420  003F9C  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
  7421  003F9E                     l8483:
  7422                           
  7423                           ; BSR set to: 0
  7424  003F9E  0E05               	movlw	5
  7425  003FA0  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
  7426  003FA2  D001               	goto	l163
  7427  003FA4  D00D               	goto	u10520
  7428  003FA6                     l163:
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;ENC424J600.c: 305: ENC424J600_readSPI(&temp[i]);
  7432                           
  7433                           ; BSR set to: 0
  7434  003FA6  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
  7435  003FA8  0D01               	mullw	1
  7436  003FAA  0EED               	movlw	low ethernetController_getRSV@temp
  7437  003FAC  24F3               	addwf	prodl,w,c
  7438  003FAE  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  7439  003FB0  0E01               	movlw	high ethernetController_getRSV@temp
  7440  003FB2  20F4               	addwfc	prodh,w,c
  7441  003FB4  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  7442  003FB6  EC0F  F021         	call	_ENC424J600_readSPI	;wreg free
  7443  003FBA  0100               	movlb	0	; () banked
  7444  003FBC  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
  7445  003FBE  D7EF               	goto	l8483
  7446  003FC0                     u10520:
  7447                           
  7448                           ; BSR set to: 0
  7449                           ;ENC424J600.c: 306: }
  7450                           ;ENC424J600.c: 307: PORTBbits.RB4=1;
  7451  003FC0  8881               	bsf	3969,4,c	;volatile
  7452                           
  7453                           ; BSR set to: 0
  7454                           ;ENC424J600.c: 308: return ENC424J600_updateReceiveStatusVector(&temp[0]);
  7455  003FC2  0EED               	movlw	low ethernetController_getRSV@temp
  7456  003FC4  6F60               	movwf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),b
  7457  003FC6  0E01               	movlw	high ethernetController_getRSV@temp
  7458  003FC8  6F61               	movwf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),b
  7459  003FCA  EC38  F00A         	call	_ENC424J600_updateReceiveStatusVector	;wreg free
  7460  003FCE  CFE9 FFD9          	movff	fsr0l,fsr2l
  7461  003FD2  CFEA FFDA          	movff	fsr0h,fsr2h
  7462  003FD6  EE00  F071         	lfsr	0,?_ethernetController_getRSV
  7463  003FDA  0E04               	movlw	4
  7464  003FDC                     u10531:
  7465  003FDC  CFDB FFEB          	movff	plusw2,plusw0
  7466  003FE0  06E8               	decf	wreg,f,c
  7467  003FE2  E2FC               	bc	u10531
  7468  003FE4  0012               	return	
  7469  003FE6                     __end_of_ethernetController_getRSV:
  7470                           	opt stack 0
  7471                           tblptru	equ	0xFF8
  7472                           tblptrh	equ	0xFF7
  7473                           tblptrl	equ	0xFF6
  7474                           tablat	equ	0xFF5
  7475                           prodh	equ	0xFF4
  7476                           prodl	equ	0xFF3
  7477                           intcon	equ	0xFF2
  7478                           intcon3	equ	0xFF0
  7479                           indf0	equ	0xFEF
  7480                           postinc0	equ	0xFEE
  7481                           plusw0	equ	0xFEB
  7482                           fsr0h	equ	0xFEA
  7483                           fsr0l	equ	0xFE9
  7484                           wreg	equ	0xFE8
  7485                           postinc1	equ	0xFE6
  7486                           postdec1	equ	0xFE5
  7487                           plusw1	equ	0xFE3
  7488                           fsr1h	equ	0xFE2
  7489                           fsr1l	equ	0xFE1
  7490                           indf2	equ	0xFDF
  7491                           postinc2	equ	0xFDE
  7492                           postdec2	equ	0xFDD
  7493                           plusw2	equ	0xFDB
  7494                           fsr2h	equ	0xFDA
  7495                           fsr2l	equ	0xFD9
  7496                           status	equ	0xFD8
  7497                           
  7498 ;; *************** function _ENC424J600_updateReceiveStatusVector *****************
  7499 ;; Defined at:
  7500 ;;		line 754 in file "src/enc424j600/ENC424J600.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
  7503 ;;		 -> ethernetController_getRSV@temp(6), 
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;  receiveStatu    5   12[BANK0 ] struct RSV
  7506 ;; Return value:  Size  Location     Type
  7507 ;;                  5    0[BANK0 ] struct RSV
  7508 ;; Registers used:
  7509 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7515 ;;      Params:         0       5       0       0       0       0       0       0       0
  7516 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7517 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7518 ;;      Totals:         0      17       0       0       0       0       0       0       0
  7519 ;;Total ram usage:       17 bytes
  7520 ;; Hardware stack levels used:    1
  7521 ;; Hardware stack levels required when called:    4
  7522 ;; This function calls:
  7523 ;;		Nothing
  7524 ;; This function is called by:
  7525 ;;		_ethernetController_getRSV
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           	psect	text20
  7530  001470                     __ptext20:
  7531                           	opt stack 0
  7532  001470                     _ENC424J600_updateReceiveStatusVector:
  7533                           	opt stack 23
  7534                           
  7535                           ;ENC424J600.c: 755: RSV_t receiveStatusVector;
  7536                           ;ENC424J600.c: 758: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
  7537                           
  7538                           ;incstack = 0
  7539  001470  0E00               	movlw	0
  7540  001472  0100               	movlb	0	; () banked
  7541  001474  6F65               	movwf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7542  001476  0EFF               	movlw	255
  7543  001478  6F66               	movwf	(??_ENC424J600_updateReceiveStatusVector+1)& (0+255),b
  7544  00147A  EE20 F001          	lfsr	2,1
  7545  00147E  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7546  001480  26D9               	addwf	fsr2l,f,c
  7547  001482  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7548  001484  22DA               	addwfc	fsr2h,f,c
  7549  001486  50DF               	movf	indf2,w,c
  7550  001488  6F67               	movwf	(??_ENC424J600_updateReceiveStatusVector+2)& (0+255),b
  7551  00148A  5167               	movf	(??_ENC424J600_updateReceiveStatusVector+2)& (0+255),w,b
  7552  00148C  6F69               	movwf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),b
  7553  00148E  6B68               	clrf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),b
  7554  001490  5165               	movf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7555  001492  1768               	andwf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),f,b
  7556  001494  5166               	movf	(??_ENC424J600_updateReceiveStatusVector+1)& (0+255),w,b
  7557  001496  1769               	andwf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),f,b
  7558  001498  C060  FFD9         	movff	ENC424J600_updateReceiveStatusVector@rsv,fsr2l
  7559  00149C  C061  FFDA         	movff	ENC424J600_updateReceiveStatusVector@rsv+1,fsr2h
  7560  0014A0  50DF               	movf	indf2,w,c
  7561  0014A2  6F6A               	movwf	(??_ENC424J600_updateReceiveStatusVector+5)& (0+255),b
  7562  0014A4  6B6B               	clrf	(??_ENC424J600_updateReceiveStatusVector+6)& (0+255),b
  7563  0014A6  5168               	movf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),w,b
  7564  0014A8  116A               	iorwf	(??_ENC424J600_updateReceiveStatusVector+5)& (0+255),w,b
  7565  0014AA  6F6C               	movwf	ENC424J600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
  7566  0014AC  5169               	movf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),w,b
  7567  0014AE  116B               	iorwf	(??_ENC424J600_updateReceiveStatusVector+6)& (0+255),w,b
  7568  0014B0  6F6D               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
  7569                           
  7570                           ;ENC424J600.c: 760: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1 : 0;
  7571  0014B2  EE20 F002          	lfsr	2,2
  7572  0014B6  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7573  0014B8  26D9               	addwf	fsr2l,f,c
  7574  0014BA  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7575  0014BC  22DA               	addwfc	fsr2h,f,c
  7576  0014BE  A0DF               	btfss	indf2,0,c
  7577  0014C0  D003               	goto	u9590
  7578  0014C2  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7579  0014C4  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7580  0014C6  D002               	goto	u9608
  7581  0014C8                     u9590:
  7582  0014C8  0100               	movlb	0	; () banked
  7583  0014CA  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7584  0014CC                     u9608:
  7585  0014CC  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7586  0014CE  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7587  0014D0  0BFE               	andlw	-2
  7588  0014D2  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7589  0014D4  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7590                           
  7591                           ;ENC424J600.c: 761: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1 : 0;
  7592  0014D6  EE20 F002          	lfsr	2,2
  7593  0014DA  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7594  0014DC  26D9               	addwf	fsr2l,f,c
  7595  0014DE  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7596  0014E0  22DA               	addwfc	fsr2h,f,c
  7597  0014E2  A4DF               	btfss	indf2,2,c
  7598  0014E4  D003               	goto	u9610
  7599  0014E6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7600  0014E8  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7601  0014EA  D002               	goto	u9628
  7602  0014EC                     u9610:
  7603  0014EC  0100               	movlb	0	; () banked
  7604  0014EE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7605  0014F0                     u9628:
  7606  0014F0  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7607  0014F2  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7608  0014F4  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7609  0014F6  0BFD               	andlw	-3
  7610  0014F8  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7611  0014FA  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7612                           
  7613                           ;ENC424J600.c: 762: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1 : 0;
  7614  0014FC  EE20 F002          	lfsr	2,2
  7615  001500  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7616  001502  26D9               	addwf	fsr2l,f,c
  7617  001504  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7618  001506  22DA               	addwfc	fsr2h,f,c
  7619  001508  A8DF               	btfss	indf2,4,c
  7620  00150A  D003               	goto	u9630
  7621  00150C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7622  00150E  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7623  001510  D002               	goto	u9648
  7624  001512                     u9630:
  7625  001512  0100               	movlb	0	; () banked
  7626  001514  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7627  001516                     u9648:
  7628  001516  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7629  001518  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7630  00151A  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7631  00151C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7632  00151E  0BFB               	andlw	-5
  7633  001520  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7634  001522  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7635                           
  7636                           ;ENC424J600.c: 763: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1 : 0;
  7637  001524  EE20 F002          	lfsr	2,2
  7638  001528  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7639  00152A  26D9               	addwf	fsr2l,f,c
  7640  00152C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7641  00152E  22DA               	addwfc	fsr2h,f,c
  7642  001530  AADF               	btfss	indf2,5,c
  7643  001532  D003               	goto	u9650
  7644  001534  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7645  001536  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7646  001538  D002               	goto	u9668
  7647  00153A                     u9650:
  7648  00153A  0100               	movlb	0	; () banked
  7649  00153C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7650  00153E                     u9668:
  7651  00153E  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7652  001540  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7653  001542  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7654  001544  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7655  001546  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7656  001548  0BF7               	andlw	-9
  7657  00154A  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7658  00154C  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7659                           
  7660                           ;ENC424J600.c: 764: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1 : 0;
  7661  00154E  EE20 F002          	lfsr	2,2
  7662  001552  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7663  001554  26D9               	addwf	fsr2l,f,c
  7664  001556  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7665  001558  22DA               	addwfc	fsr2h,f,c
  7666  00155A  ACDF               	btfss	indf2,6,c
  7667  00155C  D003               	goto	u9670
  7668  00155E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7669  001560  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7670  001562  D002               	goto	u9688
  7671  001564                     u9670:
  7672  001564  0100               	movlb	0	; () banked
  7673  001566  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7674  001568                     u9688:
  7675  001568  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7676  00156A  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7677  00156C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7678  00156E  0BEF               	andlw	-17
  7679  001570  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7680  001572  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7681                           
  7682                           ;ENC424J600.c: 765: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1 : 0;
  7683  001574  EE20 F002          	lfsr	2,2
  7684  001578  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7685  00157A  26D9               	addwf	fsr2l,f,c
  7686  00157C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7687  00157E  22DA               	addwfc	fsr2h,f,c
  7688  001580  AEDF               	btfss	indf2,7,c
  7689  001582  D003               	goto	u9690
  7690  001584  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7691  001586  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7692  001588  D002               	goto	u9708
  7693  00158A                     u9690:
  7694  00158A  0100               	movlb	0	; () banked
  7695  00158C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7696  00158E                     u9708:
  7697  00158E  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7698  001590  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7699  001592  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7700  001594  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7701  001596  0BDF               	andlw	-33
  7702  001598  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7703  00159A  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7704                           
  7705                           ;ENC424J600.c: 767: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1 : 0;
  7706  00159C  EE20 F003          	lfsr	2,3
  7707  0015A0  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7708  0015A2  26D9               	addwf	fsr2l,f,c
  7709  0015A4  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7710  0015A6  22DA               	addwfc	fsr2h,f,c
  7711  0015A8  A0DF               	btfss	indf2,0,c
  7712  0015AA  D003               	goto	u9710
  7713  0015AC  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7714  0015AE  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7715  0015B0  D002               	goto	u9728
  7716  0015B2                     u9710:
  7717  0015B2  0100               	movlb	0	; () banked
  7718  0015B4  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7719  0015B6                     u9728:
  7720  0015B6  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7721  0015B8  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7722  0015BA  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7723  0015BC  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7724  0015BE  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7725  0015C0  0BBF               	andlw	-65
  7726  0015C2  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7727  0015C4  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7728                           
  7729                           ;ENC424J600.c: 768: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1 : 0;
  7730  0015C6  EE20 F003          	lfsr	2,3
  7731  0015CA  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7732  0015CC  26D9               	addwf	fsr2l,f,c
  7733  0015CE  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7734  0015D0  22DA               	addwfc	fsr2h,f,c
  7735  0015D2  A2DF               	btfss	indf2,1,c
  7736  0015D4  D003               	goto	u9730
  7737  0015D6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7738  0015D8  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7739  0015DA  D002               	goto	u9748
  7740  0015DC                     u9730:
  7741  0015DC  0100               	movlb	0	; () banked
  7742  0015DE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7743  0015E0                     u9748:
  7744  0015E0  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7745  0015E2  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7746  0015E4  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7747  0015E6  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7748  0015E8  0B7F               	andlw	-129
  7749  0015EA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7750  0015EC  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7751                           
  7752                           ;ENC424J600.c: 769: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  7753  0015EE  EE20 F003          	lfsr	2,3
  7754  0015F2  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7755  0015F4  26D9               	addwf	fsr2l,f,c
  7756  0015F6  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7757  0015F8  22DA               	addwfc	fsr2h,f,c
  7758  0015FA  A6DF               	btfss	indf2,3,c
  7759  0015FC  D003               	goto	u9750
  7760  0015FE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7761  001600  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7762  001602  D002               	goto	u9768
  7763  001604                     u9750:
  7764  001604  0100               	movlb	0	; () banked
  7765  001606  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7766  001608                     u9768:
  7767  001608  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7768  00160A  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7769  00160C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7770  00160E  0BFD               	andlw	-3
  7771  001610  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7772  001612  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7773                           
  7774                           ;ENC424J600.c: 770: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1 : 0;
  7775  001614  EE20 F003          	lfsr	2,3
  7776  001618  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7777  00161A  26D9               	addwf	fsr2l,f,c
  7778  00161C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7779  00161E  22DA               	addwfc	fsr2h,f,c
  7780  001620  A8DF               	btfss	indf2,4,c
  7781  001622  D003               	goto	u9770
  7782  001624  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7783  001626  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7784  001628  D002               	goto	u9788
  7785  00162A                     u9770:
  7786  00162A  0100               	movlb	0	; () banked
  7787  00162C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7788  00162E                     u9788:
  7789  00162E  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7790  001630  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7791  001632  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7792  001634  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7793  001636  0BFB               	andlw	-5
  7794  001638  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7795  00163A  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7796                           
  7797                           ;ENC424J600.c: 771: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1 : 0;
  7798  00163C  EE20 F003          	lfsr	2,3
  7799  001640  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7800  001642  26D9               	addwf	fsr2l,f,c
  7801  001644  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7802  001646  22DA               	addwfc	fsr2h,f,c
  7803  001648  AADF               	btfss	indf2,5,c
  7804  00164A  D003               	goto	u9790
  7805  00164C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7806  00164E  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7807  001650  D002               	goto	u9808
  7808  001652                     u9790:
  7809  001652  0100               	movlb	0	; () banked
  7810  001654  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7811  001656                     u9808:
  7812  001656  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7813  001658  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7814  00165A  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7815  00165C  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7816  00165E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7817  001660  0BF7               	andlw	-9
  7818  001662  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7819  001664  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7820                           
  7821                           ;ENC424J600.c: 772: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1 : 0;
  7822  001666  EE20 F003          	lfsr	2,3
  7823  00166A  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7824  00166C  26D9               	addwf	fsr2l,f,c
  7825  00166E  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7826  001670  22DA               	addwfc	fsr2h,f,c
  7827  001672  ACDF               	btfss	indf2,6,c
  7828  001674  D003               	goto	u9810
  7829  001676  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7830  001678  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7831  00167A  D002               	goto	u9828
  7832  00167C                     u9810:
  7833  00167C  0100               	movlb	0	; () banked
  7834  00167E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7835  001680                     u9828:
  7836  001680  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7837  001682  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7838  001684  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7839  001686  0BEF               	andlw	-17
  7840  001688  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7841  00168A  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7842                           
  7843                           ;ENC424J600.c: 773: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1 : 0;
  7844  00168C  EE20 F003          	lfsr	2,3
  7845  001690  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7846  001692  26D9               	addwf	fsr2l,f,c
  7847  001694  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7848  001696  22DA               	addwfc	fsr2h,f,c
  7849  001698  AEDF               	btfss	indf2,7,c
  7850  00169A  D003               	goto	u9830
  7851  00169C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7852  00169E  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7853  0016A0  D002               	goto	u9848
  7854  0016A2                     u9830:
  7855  0016A2  0100               	movlb	0	; () banked
  7856  0016A4  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7857  0016A6                     u9848:
  7858  0016A6  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7859  0016A8  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7860  0016AA  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7861  0016AC  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7862  0016AE  0BDF               	andlw	-33
  7863  0016B0  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7864  0016B2  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7865                           
  7866                           ;ENC424J600.c: 775: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1 : 0;
  7867  0016B4  EE20 F004          	lfsr	2,4
  7868  0016B8  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7869  0016BA  26D9               	addwf	fsr2l,f,c
  7870  0016BC  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7871  0016BE  22DA               	addwfc	fsr2h,f,c
  7872  0016C0  A0DF               	btfss	indf2,0,c
  7873  0016C2  D003               	goto	u9850
  7874  0016C4  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7875  0016C6  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7876  0016C8  D002               	goto	u9868
  7877  0016CA                     u9850:
  7878  0016CA  0100               	movlb	0	; () banked
  7879  0016CC  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7880  0016CE                     u9868:
  7881  0016CE  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7882  0016D0  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7883  0016D2  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7884  0016D4  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7885  0016D6  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7886  0016D8  0BBF               	andlw	-65
  7887  0016DA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7888  0016DC  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7889                           
  7890                           ;ENC424J600.c: 776: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1 : 0;
  7891  0016DE  EE20 F004          	lfsr	2,4
  7892  0016E2  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7893  0016E4  26D9               	addwf	fsr2l,f,c
  7894  0016E6  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7895  0016E8  22DA               	addwfc	fsr2h,f,c
  7896  0016EA  A2DF               	btfss	indf2,1,c
  7897  0016EC  D003               	goto	u9870
  7898  0016EE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7899  0016F0  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7900  0016F2  D002               	goto	u9888
  7901  0016F4                     u9870:
  7902  0016F4  0100               	movlb	0	; () banked
  7903  0016F6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7904  0016F8                     u9888:
  7905  0016F8  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7906  0016FA  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7907  0016FC  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7908  0016FE  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7909  001700  0B7F               	andlw	-129
  7910  001702  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7911  001704  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7912                           
  7913                           ;ENC424J600.c: 777: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1 : 0;
  7914  001706  EE20 F004          	lfsr	2,4
  7915  00170A  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7916  00170C  26D9               	addwf	fsr2l,f,c
  7917  00170E  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7918  001710  22DA               	addwfc	fsr2h,f,c
  7919  001712  A4DF               	btfss	indf2,2,c
  7920  001714  D003               	goto	u9890
  7921  001716  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7922  001718  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7923  00171A  D002               	goto	u9908
  7924  00171C                     u9890:
  7925  00171C  0100               	movlb	0	; () banked
  7926  00171E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7927  001720                     u9908:
  7928  001720  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  7929  001722  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7930  001724  0BFE               	andlw	-2
  7931  001726  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7932  001728  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  7933                           
  7934                           ;ENC424J600.c: 778: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  7935  00172A  EE20 F004          	lfsr	2,4
  7936  00172E  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7937  001730  26D9               	addwf	fsr2l,f,c
  7938  001732  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7939  001734  22DA               	addwfc	fsr2h,f,c
  7940  001736  A6DF               	btfss	indf2,3,c
  7941  001738  D003               	goto	u9910
  7942  00173A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7943  00173C  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7944  00173E  D002               	goto	u9928
  7945  001740                     u9910:
  7946  001740  0100               	movlb	0	; () banked
  7947  001742  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7948  001744                     u9928:
  7949  001744  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7950  001746  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  7951  001748  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7952  00174A  0BFD               	andlw	-3
  7953  00174C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7954  00174E  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  7955                           
  7956                           ;ENC424J600.c: 779: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1 : 0;
  7957  001750  EE20 F004          	lfsr	2,4
  7958  001754  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7959  001756  26D9               	addwf	fsr2l,f,c
  7960  001758  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7961  00175A  22DA               	addwfc	fsr2h,f,c
  7962  00175C  A8DF               	btfss	indf2,4,c
  7963  00175E  D003               	goto	u9930
  7964  001760  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7965  001762  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7966  001764  D002               	goto	u9948
  7967  001766                     u9930:
  7968  001766  0100               	movlb	0	; () banked
  7969  001768  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7970  00176A                     u9948:
  7971  00176A  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7972  00176C  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7973  00176E  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  7974  001770  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7975  001772  0BFB               	andlw	-5
  7976  001774  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7977  001776  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;ENC424J600.c: 781: return receiveStatusVector;
  7981  001778  EE20  F06C         	lfsr	2,ENC424J600_updateReceiveStatusVector@receiveStatusVector
  7982  00177C  EE00  F060         	lfsr	0,?_ENC424J600_updateReceiveStatusVector
  7983  001780  0E04               	movlw	4
  7984  001782                     u9951:
  7985  001782  CFDB FFEB          	movff	plusw2,plusw0
  7986  001786  06E8               	decf	wreg,f,c
  7987  001788  E2FC               	bc	u9951
  7988  00178A  0012               	return	
  7989  00178C                     __end_of_ENC424J600_updateReceiveStatusVector:
  7990                           	opt stack 0
  7991                           tblptru	equ	0xFF8
  7992                           tblptrh	equ	0xFF7
  7993                           tblptrl	equ	0xFF6
  7994                           tablat	equ	0xFF5
  7995                           prodh	equ	0xFF4
  7996                           prodl	equ	0xFF3
  7997                           intcon	equ	0xFF2
  7998                           intcon3	equ	0xFF0
  7999                           indf0	equ	0xFEF
  8000                           postinc0	equ	0xFEE
  8001                           plusw0	equ	0xFEB
  8002                           fsr0h	equ	0xFEA
  8003                           fsr0l	equ	0xFE9
  8004                           wreg	equ	0xFE8
  8005                           postinc1	equ	0xFE6
  8006                           postdec1	equ	0xFE5
  8007                           plusw1	equ	0xFE3
  8008                           fsr1h	equ	0xFE2
  8009                           fsr1l	equ	0xFE1
  8010                           indf2	equ	0xFDF
  8011                           postinc2	equ	0xFDE
  8012                           postdec2	equ	0xFDD
  8013                           plusw2	equ	0xFDB
  8014                           fsr2h	equ	0xFDA
  8015                           fsr2l	equ	0xFD9
  8016                           status	equ	0xFD8
  8017                           
  8018 ;; *************** function _ethernetController_getEtherTypeField *****************
  8019 ;; Defined at:
  8020 ;;		line 282 in file "src/enc424j600/ENC424J600.c"
  8021 ;; Parameters:    Size  Location     Type
  8022 ;;  field           9   15[BANK0 ] struct memoryField
  8023 ;; Auto vars:     Size  Location     Type
  8024 ;;  ethertype       2   28[BANK0 ] enum E5507
  8025 ;;  highByte        1   32[BANK0 ] unsigned char 
  8026 ;;  lowByte         1   31[BANK0 ] unsigned char 
  8027 ;;  opcode          1   30[BANK0 ] unsigned char 
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  2   15[BANK0 ] enum E5507
  8030 ;; Registers used:
  8031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8037 ;;      Params:         0       9       0       0       0       0       0       0       0
  8038 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8039 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8040 ;;      Totals:         0      18       0       0       0       0       0       0       0
  8041 ;;Total ram usage:       18 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    7
  8044 ;; This function calls:
  8045 ;;		_ENC424J600_readSPI
  8046 ;;		_ENC424J600_setERXDATAReadPointer
  8047 ;;		_ENC424J600_writeSPI
  8048 ;; This function is called by:
  8049 ;;		_ethernet_rxGetNewFrame
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           	psect	text21
  8054  00413E                     __ptext21:
  8055                           	opt stack 0
  8056  00413E                     _ethernetController_getEtherTypeField:
  8057                           	opt stack 21
  8058                           
  8059                           ;ENC424J600.c: 283: etherType_t ethertype = 0x0000;
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;incstack = 0
  8063  00413E  0E00               	movlw	0
  8064  004140  0100               	movlb	0	; () banked
  8065  004142  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  8066  004144  0E00               	movlw	0
  8067  004146  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;ENC424J600.c: 284: ENC424J600_setERXDATAReadPointer(field.start + 20);
  8071  004148  0E14               	movlw	20
  8072  00414A  256F               	addwf	ethernetController_getEtherTypeField@field& (0+255),w,b
  8073  00414C  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
  8074  00414E  0E00               	movlw	0
  8075  004150  2170               	addwfc	(ethernetController_getEtherTypeField@field+1)& (0+255),w,b
  8076  004152  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
  8077  004154  EC0C  F024         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  8078                           
  8079                           ;ENC424J600.c: 285: uint8_t opcode = 0x2C;
  8080  004158  0E2C               	movlw	44
  8081  00415A  0100               	movlb	0	; () banked
  8082  00415C  6F7E               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
  8083                           
  8084                           ; BSR set to: 0
  8085                           ;ENC424J600.c: 286: PORTBbits.RB4=0;
  8086  00415E  9881               	bcf	3969,4,c	;volatile
  8087                           
  8088                           ;ENC424J600.c: 287: ENC424J600_writeSPI(&opcode);
  8089  004160  0E7E               	movlw	low ethernetController_getEtherTypeField@opcode
  8090  004162  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  8091  004164  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
  8092  004166  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  8093  004168  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
  8094                           
  8095                           ;ENC424J600.c: 289: uint8_t lowByte;
  8096                           ;ENC424J600.c: 290: uint8_t highByte;
  8097                           ;ENC424J600.c: 291: ENC424J600_readSPI(&highByte);
  8098  00416C  0E80               	movlw	low ethernetController_getEtherTypeField@highByte
  8099  00416E  0100               	movlb	0	; () banked
  8100  004170  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  8101  004172  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
  8102  004174  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  8103  004176  EC0F  F021         	call	_ENC424J600_readSPI	;wreg free
  8104                           
  8105                           ;ENC424J600.c: 292: ENC424J600_readSPI(&lowByte);
  8106  00417A  0E7F               	movlw	low ethernetController_getEtherTypeField@lowByte
  8107  00417C  0100               	movlb	0	; () banked
  8108  00417E  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  8109  004180  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
  8110  004182  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  8111  004184  EC0F  F021         	call	_ENC424J600_readSPI	;wreg free
  8112                           
  8113                           ;ENC424J600.c: 293: ethertype = (uint16_t) (lowByte | (highByte << 8));
  8114  004188  0100               	movlb	0	; () banked
  8115  00418A  5180               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
  8116  00418C  6F79               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
  8117  00418E  6B78               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
  8118  004190  517F               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
  8119  004192  6F7A               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
  8120  004194  6B7B               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
  8121  004196  5178               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
  8122  004198  117A               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
  8123  00419A  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  8124  00419C  5179               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
  8125  00419E  117B               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
  8126  0041A0  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;ENC424J600.c: 294: PORTBbits.RB4=1;
  8130  0041A2  8881               	bsf	3969,4,c	;volatile
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;ENC424J600.c: 295: return ethertype;
  8134  0041A4  C07C  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
  8135  0041A8  C07D  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
  8136  0041AC  0012               	return	
  8137  0041AE                     __end_of_ethernetController_getEtherTypeField:
  8138                           	opt stack 0
  8139                           tblptru	equ	0xFF8
  8140                           tblptrh	equ	0xFF7
  8141                           tblptrl	equ	0xFF6
  8142                           tablat	equ	0xFF5
  8143                           prodh	equ	0xFF4
  8144                           prodl	equ	0xFF3
  8145                           intcon	equ	0xFF2
  8146                           intcon3	equ	0xFF0
  8147                           indf0	equ	0xFEF
  8148                           postinc0	equ	0xFEE
  8149                           plusw0	equ	0xFEB
  8150                           fsr0h	equ	0xFEA
  8151                           fsr0l	equ	0xFE9
  8152                           wreg	equ	0xFE8
  8153                           postinc1	equ	0xFE6
  8154                           postdec1	equ	0xFE5
  8155                           plusw1	equ	0xFE3
  8156                           fsr1h	equ	0xFE2
  8157                           fsr1l	equ	0xFE1
  8158                           indf2	equ	0xFDF
  8159                           postinc2	equ	0xFDE
  8160                           postdec2	equ	0xFDD
  8161                           plusw2	equ	0xFDB
  8162                           fsr2h	equ	0xFDA
  8163                           fsr2l	equ	0xFD9
  8164                           status	equ	0xFD8
  8165                           
  8166 ;; *************** function _etherTypeToString *****************
  8167 ;; Defined at:
  8168 ;;		line 194 in file "src/system/uart.c"
  8169 ;; Parameters:    Size  Location     Type
  8170 ;;  ethertype       2    0[BANK0 ] enum E5470
  8171 ;; Auto vars:     Size  Location     Type
  8172 ;;		None
  8173 ;; Return value:  Size  Location     Type
  8174 ;;                  2    0[BANK0 ] PTR unsigned char 
  8175 ;; Registers used:
  8176 ;;		wreg, status,2, status,0
  8177 ;; Tracked objects:
  8178 ;;		On entry : 0/0
  8179 ;;		On exit  : 0/0
  8180 ;;		Unchanged: 0/0
  8181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8182 ;;      Params:         0       2       0       0       0       0       0       0       0
  8183 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8184 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8185 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8186 ;;Total ram usage:        4 bytes
  8187 ;; Hardware stack levels used:    1
  8188 ;; Hardware stack levels required when called:    4
  8189 ;; This function calls:
  8190 ;;		Nothing
  8191 ;; This function is called by:
  8192 ;;		_ethernet_rxGetNewFrame
  8193 ;; This function uses a non-reentrant model
  8194 ;;
  8195                           
  8196                           	psect	text22
  8197  004694                     __ptext22:
  8198                           	opt stack 0
  8199  004694                     _etherTypeToString:
  8200                           	opt stack 24
  8201                           
  8202                           ;uart.c: 195: switch (ethertype) {
  8203                           
  8204                           ; BSR set to: 0
  8205                           ;incstack = 0
  8206  004694  D010               	goto	l803
  8207  004696                     
  8208                           ;uart.c: 197: return "IPv4";
  8209  004696  0ED0               	movlw	low STR_55
  8210  004698  0100               	movlb	0	; () banked
  8211  00469A  6F60               	movwf	?_etherTypeToString& (0+255),b
  8212  00469C  0E7F               	movlw	high STR_55
  8213  00469E  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  8214                           
  8215                           ; BSR set to: 0
  8216  0046A0  0012               	return	
  8217  0046A2                     
  8218                           ; BSR set to: 0
  8219                           ;uart.c: 199: return "ARP";
  8220                           
  8221                           ; BSR set to: 0
  8222  0046A2  0EEC               	movlw	low STR_56
  8223  0046A4  6F60               	movwf	?_etherTypeToString& (0+255),b
  8224  0046A6  0E7F               	movlw	high STR_56
  8225  0046A8  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  8226                           
  8227                           ; BSR set to: 0
  8228  0046AA  0012               	return	
  8229  0046AC                     
  8230                           ; BSR set to: 0
  8231                           ;uart.c: 201: return "Unknown EtherType";
  8232                           
  8233                           ; BSR set to: 0
  8234  0046AC  0EA7               	movlw	low STR_57
  8235  0046AE  6F60               	movwf	?_etherTypeToString& (0+255),b
  8236  0046B0  0E7E               	movlw	high STR_57
  8237  0046B2  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;uart.c: 202: }
  8241                           
  8242                           ; BSR set to: 0
  8243  0046B4  0012               	return	
  8244  0046B6                     l803:
  8245                           
  8246                           ; BSR set to: 0
  8247  0046B6  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
  8248  0046BA  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
  8249                           
  8250                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8251                           ; Switch size 1, requested type "space"
  8252                           ; Number of cases is 1, Range of values is 8 to 8
  8253                           ; switch strategies available:
  8254                           ; Name         Instructions Cycles
  8255                           ; simple_byte            4     3 (average)
  8256                           ;	Chosen strategy is simple_byte
  8257  0046BE  0100               	movlb	0	; () banked
  8258  0046C0  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
  8259  0046C2  0A08               	xorlw	8	; case 8
  8260  0046C4  A4D8               	btfss	status,2,c
  8261  0046C6  D7F2               	goto	l807
  8262                           
  8263                           ; BSR set to: 0
  8264                           ; Switch size 1, requested type "space"
  8265                           ; Number of cases is 2, Range of values is 0 to 6
  8266                           ; switch strategies available:
  8267                           ; Name         Instructions Cycles
  8268                           ; simple_byte            7     4 (average)
  8269                           ;	Chosen strategy is simple_byte
  8270  0046C8  5162               	movf	??_etherTypeToString& (0+255),w,b
  8271  0046CA  0A00               	xorlw	0	; case 0
  8272  0046CC  B4D8               	btfsc	status,2,c
  8273  0046CE  D7E3               	goto	l804
  8274  0046D0  0A06               	xorlw	6	; case 6
  8275  0046D2  B4D8               	btfsc	status,2,c
  8276  0046D4  D7E6               	goto	l806
  8277  0046D6  D7EA               	goto	l807
  8278  0046D8                     __end_of_etherTypeToString:
  8279                           	opt stack 0
  8280                           tblptru	equ	0xFF8
  8281                           tblptrh	equ	0xFF7
  8282                           tblptrl	equ	0xFF6
  8283                           tablat	equ	0xFF5
  8284                           prodh	equ	0xFF4
  8285                           prodl	equ	0xFF3
  8286                           intcon	equ	0xFF2
  8287                           intcon3	equ	0xFF0
  8288                           indf0	equ	0xFEF
  8289                           postinc0	equ	0xFEE
  8290                           plusw0	equ	0xFEB
  8291                           fsr0h	equ	0xFEA
  8292                           fsr0l	equ	0xFE9
  8293                           wreg	equ	0xFE8
  8294                           postinc1	equ	0xFE6
  8295                           postdec1	equ	0xFE5
  8296                           plusw1	equ	0xFE3
  8297                           fsr1h	equ	0xFE2
  8298                           fsr1l	equ	0xFE1
  8299                           indf2	equ	0xFDF
  8300                           postinc2	equ	0xFDE
  8301                           postdec2	equ	0xFDD
  8302                           plusw2	equ	0xFDB
  8303                           fsr2h	equ	0xFDA
  8304                           fsr2l	equ	0xFD9
  8305                           status	equ	0xFD8
  8306                           
  8307 ;; *************** function _UARTTransmitInt *****************
  8308 ;; Defined at:
  8309 ;;		line 60 in file "src/system/uart.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;  val             4   58[BANK0 ] unsigned long 
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;		None
  8314 ;; Return value:  Size  Location     Type
  8315 ;;                  1    wreg      void 
  8316 ;; Registers used:
  8317 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8323 ;;      Params:         0       4       0       0       0       0       0       0       0
  8324 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8325 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8326 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8327 ;;Total ram usage:        4 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    6
  8330 ;; This function calls:
  8331 ;;		_UARTTransmitText
  8332 ;;		_intToString
  8333 ;; This function is called by:
  8334 ;;		_ethernet_rxGetNewFrame
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           	psect	text23
  8339  004B72                     __ptext23:
  8340                           	opt stack 0
  8341  004B72                     _UARTTransmitInt:
  8342                           	opt stack 22
  8343                           
  8344                           ;uart.c: 61: UARTTransmitText(intToString(val));
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;incstack = 0
  8348  004B72  C09A  F079         	movff	UARTTransmitInt@val,intToString@val
  8349  004B76  C09B  F07A         	movff	UARTTransmitInt@val+1,intToString@val+1
  8350  004B7A  C09C  F07B         	movff	UARTTransmitInt@val+2,intToString@val+2
  8351  004B7E  C09D  F07C         	movff	UARTTransmitInt@val+3,intToString@val+3
  8352  004B82  EC76  F000         	call	_intToString	;wreg free
  8353  004B86  C079  F098         	movff	?_intToString,UARTTransmitText@str
  8354  004B8A  C07A  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  8355  004B8E  EC34  F022         	call	_UARTTransmitText	;wreg free
  8356  004B92  0012               	return		;funcret
  8357  004B94                     __end_of_UARTTransmitInt:
  8358                           	opt stack 0
  8359                           tblptru	equ	0xFF8
  8360                           tblptrh	equ	0xFF7
  8361                           tblptrl	equ	0xFF6
  8362                           tablat	equ	0xFF5
  8363                           prodh	equ	0xFF4
  8364                           prodl	equ	0xFF3
  8365                           intcon	equ	0xFF2
  8366                           intcon3	equ	0xFF0
  8367                           indf0	equ	0xFEF
  8368                           postinc0	equ	0xFEE
  8369                           plusw0	equ	0xFEB
  8370                           fsr0h	equ	0xFEA
  8371                           fsr0l	equ	0xFE9
  8372                           wreg	equ	0xFE8
  8373                           postinc1	equ	0xFE6
  8374                           postdec1	equ	0xFE5
  8375                           plusw1	equ	0xFE3
  8376                           fsr1h	equ	0xFE2
  8377                           fsr1l	equ	0xFE1
  8378                           indf2	equ	0xFDF
  8379                           postinc2	equ	0xFDE
  8380                           postdec2	equ	0xFDD
  8381                           plusw2	equ	0xFDB
  8382                           fsr2h	equ	0xFDA
  8383                           fsr2l	equ	0xFD9
  8384                           status	equ	0xFD8
  8385                           
  8386 ;; *************** function _intToString *****************
  8387 ;; Defined at:
  8388 ;;		line 92 in file "src/system/uart.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;  val             4   25[BANK0 ] unsigned long 
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;  pointer         1   54[BANK0 ] unsigned char 
  8393 ;;  millions        1   53[BANK0 ] unsigned char 
  8394 ;;  hundredthds     1   52[BANK0 ] unsigned char 
  8395 ;;  tenthousands    1   51[BANK0 ] unsigned char 
  8396 ;;  thousands       1   50[BANK0 ] unsigned char 
  8397 ;;  hundreds        1   49[BANK0 ] unsigned char 
  8398 ;;  tens            1   48[BANK0 ] unsigned char 
  8399 ;;  ones            1   47[BANK0 ] unsigned char 
  8400 ;; Return value:  Size  Location     Type
  8401 ;;                  2   25[BANK0 ] PTR unsigned char 
  8402 ;; Registers used:
  8403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8404 ;; Tracked objects:
  8405 ;;		On entry : 0/0
  8406 ;;		On exit  : 0/0
  8407 ;;		Unchanged: 0/0
  8408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8409 ;;      Params:         0       4       0       0       0       0       0       0       0
  8410 ;;      Locals:         0       8       0       0       0       0       0       0       0
  8411 ;;      Temps:          0      18       0       0       0       0       0       0       0
  8412 ;;      Totals:         0      30       0       0       0       0       0       0       0
  8413 ;;Total ram usage:       30 bytes
  8414 ;; Hardware stack levels used:    1
  8415 ;; Hardware stack levels required when called:    5
  8416 ;; This function calls:
  8417 ;;		___lldiv
  8418 ;;		___llmod
  8419 ;;		___lmul
  8420 ;;		___wmul
  8421 ;; This function is called by:
  8422 ;;		_ethernet_rxGetNewFrame
  8423 ;;		_printErrorMessage
  8424 ;;		_UARTTransmitInt
  8425 ;;		_ARP_probe
  8426 ;;		_ipv4_handleNewPacket
  8427 ;;		_arpEntryToString
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           	psect	text24
  8432  0000EC                     __ptext24:
  8433                           	opt stack 0
  8434  0000EC                     _intToString:
  8435                           	opt stack 24
  8436                           
  8437                           ;uart.c: 93: char static number [10];
  8438                           ;uart.c: 94: uint8_t pointer = 0;
  8439                           
  8440                           ;incstack = 0
  8441  0000EC  0E00               	movlw	0
  8442  0000EE  0100               	movlb	0	; () banked
  8443  0000F0  6F96               	movwf	intToString@pointer& (0+255),b
  8444                           
  8445                           ;uart.c: 96: uint8_t millions = 0;
  8446  0000F2  0E00               	movlw	0
  8447  0000F4  6F95               	movwf	intToString@millions& (0+255),b
  8448                           
  8449                           ;uart.c: 97: uint8_t hundredthds = 0;
  8450  0000F6  0E00               	movlw	0
  8451  0000F8  6F94               	movwf	intToString@hundredthds& (0+255),b
  8452                           
  8453                           ;uart.c: 98: uint8_t tenthousands = 0;
  8454  0000FA  0E00               	movlw	0
  8455  0000FC  6F93               	movwf	intToString@tenthousands& (0+255),b
  8456                           
  8457                           ;uart.c: 99: uint8_t thousands = 0;
  8458  0000FE  0E00               	movlw	0
  8459  000100  6F92               	movwf	intToString@thousands& (0+255),b
  8460                           
  8461                           ;uart.c: 100: uint8_t hundreds = 0;
  8462  000102  0E00               	movlw	0
  8463  000104  6F91               	movwf	intToString@hundreds& (0+255),b
  8464                           
  8465                           ;uart.c: 101: uint8_t tens = 0;
  8466  000106  0E00               	movlw	0
  8467  000108  6F90               	movwf	intToString@tens& (0+255),b
  8468                           
  8469                           ; BSR set to: 0
  8470                           ;uart.c: 102: uint8_t ones = val % 10u;
  8471  00010A  C079  F060         	movff	intToString@val,___llmod@dividend
  8472  00010E  C07A  F061         	movff	intToString@val+1,___llmod@dividend+1
  8473  000112  C07B  F062         	movff	intToString@val+2,___llmod@dividend+2
  8474  000116  C07C  F063         	movff	intToString@val+3,___llmod@dividend+3
  8475  00011A  0E0A               	movlw	10
  8476  00011C  6F64               	movwf	___llmod@divisor& (0+255),b
  8477  00011E  0E00               	movlw	0
  8478  000120  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  8479  000122  0E00               	movlw	0
  8480  000124  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  8481  000126  0E00               	movlw	0
  8482  000128  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  8483  00012A  EC44  F021         	call	___llmod	;wreg free
  8484  00012E  0100               	movlb	0	; () banked
  8485  000130  5160               	movf	?___llmod& (0+255),w,b
  8486  000132  6F8F               	movwf	intToString@ones& (0+255),b
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;uart.c: 104: if (val > 999999) {
  8490  000134  517C               	movf	(intToString@val+3)& (0+255),w,b
  8491  000136  E108               	bnz	u9970
  8492  000138  0E40               	movlw	64
  8493  00013A  5D79               	subwf	intToString@val& (0+255),w,b
  8494  00013C  0E42               	movlw	66
  8495  00013E  597A               	subwfb	(intToString@val+1)& (0+255),w,b
  8496  000140  0E0F               	movlw	15
  8497  000142  597B               	subwfb	(intToString@val+2)& (0+255),w,b
  8498  000144  A0D8               	btfss	status,0,c
  8499  000146  D021               	goto	l770
  8500  000148                     u9970:
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;uart.c: 105: millions = val / 1000000u;
  8504  000148  C079  F06C         	movff	intToString@val,___lldiv@dividend
  8505  00014C  C07A  F06D         	movff	intToString@val+1,___lldiv@dividend+1
  8506  000150  C07B  F06E         	movff	intToString@val+2,___lldiv@dividend+2
  8507  000154  C07C  F06F         	movff	intToString@val+3,___lldiv@dividend+3
  8508  000158  0E40               	movlw	64
  8509  00015A  6F70               	movwf	___lldiv@divisor& (0+255),b
  8510  00015C  0E42               	movlw	66
  8511  00015E  6F71               	movwf	(___lldiv@divisor+1)& (0+255),b
  8512  000160  0E0F               	movlw	15
  8513  000162  6F72               	movwf	(___lldiv@divisor+2)& (0+255),b
  8514  000164  0E00               	movlw	0
  8515  000166  6F73               	movwf	(___lldiv@divisor+3)& (0+255),b
  8516  000168  EC40  F01E         	call	___lldiv	;wreg free
  8517  00016C  0100               	movlb	0	; () banked
  8518  00016E  516C               	movf	?___lldiv& (0+255),w,b
  8519  000170  6F95               	movwf	intToString@millions& (0+255),b
  8520                           
  8521                           ; BSR set to: 0
  8522                           ;uart.c: 106: number[pointer++] = millions + 0x30u;
  8523  000172  5196               	movf	intToString@pointer& (0+255),w,b
  8524  000174  0D01               	mullw	1
  8525  000176  0EE3               	movlw	low intToString@number
  8526  000178  24F3               	addwf	prodl,w,c
  8527  00017A  6ED9               	movwf	fsr2l,c
  8528  00017C  0E01               	movlw	high intToString@number
  8529  00017E  20F4               	addwfc	prodh,w,c
  8530  000180  6EDA               	movwf	fsr2h,c
  8531  000182  5195               	movf	intToString@millions& (0+255),w,b
  8532  000184  0F30               	addlw	48
  8533  000186  6EDF               	movwf	indf2,c
  8534                           
  8535                           ; BSR set to: 0
  8536  000188  2B96               	incf	intToString@pointer& (0+255),f,b
  8537  00018A                     l770:
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;uart.c: 107: }
  8541                           ;uart.c: 109: if (val > 99999) {
  8542                           
  8543                           ; BSR set to: 0
  8544  00018A  517C               	movf	(intToString@val+3)& (0+255),w,b
  8545  00018C  E108               	bnz	u9980
  8546  00018E  0EA0               	movlw	160
  8547  000190  5D79               	subwf	intToString@val& (0+255),w,b
  8548  000192  0E86               	movlw	134
  8549  000194  597A               	subwfb	(intToString@val+1)& (0+255),w,b
  8550  000196  0E01               	movlw	1
  8551  000198  597B               	subwfb	(intToString@val+2)& (0+255),w,b
  8552  00019A  A0D8               	btfss	status,0,c
  8553  00019C  D03E               	goto	l771
  8554  00019E                     u9980:
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;uart.c: 110: hundredthds = (val - millions * 1000000u) / 100000u;
  8558  00019E  5195               	movf	intToString@millions& (0+255),w,b
  8559  0001A0  6F60               	movwf	___lmul@multiplier& (0+255),b
  8560  0001A2  6B61               	clrf	(___lmul@multiplier+1)& (0+255),b
  8561  0001A4  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  8562  0001A6  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  8563  0001A8  0E40               	movlw	64
  8564  0001AA  6F64               	movwf	___lmul@multiplicand& (0+255),b
  8565  0001AC  0E42               	movlw	66
  8566  0001AE  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8567  0001B0  0E0F               	movlw	15
  8568  0001B2  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8569  0001B4  0E00               	movlw	0
  8570  0001B6  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8571  0001B8  ECDD  F021         	call	___lmul	;wreg free
  8572  0001BC  0100               	movlb	0	; () banked
  8573  0001BE  1F60               	comf	?___lmul& (0+255),f,b
  8574  0001C0  1F61               	comf	(?___lmul+1)& (0+255),f,b
  8575  0001C2  1F62               	comf	(?___lmul+2)& (0+255),f,b
  8576  0001C4  1F63               	comf	(?___lmul+3)& (0+255),f,b
  8577  0001C6  2B60               	incf	?___lmul& (0+255),f,b
  8578  0001C8  0E00               	movlw	0
  8579  0001CA  2361               	addwfc	(?___lmul+1)& (0+255),f,b
  8580  0001CC  2362               	addwfc	(?___lmul+2)& (0+255),f,b
  8581  0001CE  2363               	addwfc	(?___lmul+3)& (0+255),f,b
  8582  0001D0  5179               	movf	intToString@val& (0+255),w,b
  8583  0001D2  2560               	addwf	?___lmul& (0+255),w,b
  8584  0001D4  6F6C               	movwf	___lldiv@dividend& (0+255),b
  8585  0001D6  517A               	movf	(intToString@val+1)& (0+255),w,b
  8586  0001D8  2161               	addwfc	(?___lmul+1)& (0+255),w,b
  8587  0001DA  6F6D               	movwf	(___lldiv@dividend+1)& (0+255),b
  8588  0001DC  517B               	movf	(intToString@val+2)& (0+255),w,b
  8589  0001DE  2162               	addwfc	(?___lmul+2)& (0+255),w,b
  8590  0001E0  6F6E               	movwf	(___lldiv@dividend+2)& (0+255),b
  8591  0001E2  517C               	movf	(intToString@val+3)& (0+255),w,b
  8592  0001E4  2163               	addwfc	(?___lmul+3)& (0+255),w,b
  8593  0001E6  6F6F               	movwf	(___lldiv@dividend+3)& (0+255),b
  8594  0001E8  0EA0               	movlw	160
  8595  0001EA  6F70               	movwf	___lldiv@divisor& (0+255),b
  8596  0001EC  0E86               	movlw	134
  8597  0001EE  6F71               	movwf	(___lldiv@divisor+1)& (0+255),b
  8598  0001F0  0E01               	movlw	1
  8599  0001F2  6F72               	movwf	(___lldiv@divisor+2)& (0+255),b
  8600  0001F4  0E00               	movlw	0
  8601  0001F6  6F73               	movwf	(___lldiv@divisor+3)& (0+255),b
  8602  0001F8  EC40  F01E         	call	___lldiv	;wreg free
  8603  0001FC  0100               	movlb	0	; () banked
  8604  0001FE  516C               	movf	?___lldiv& (0+255),w,b
  8605  000200  6F94               	movwf	intToString@hundredthds& (0+255),b
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;uart.c: 111: number[pointer++] = hundredthds + 0x30u;
  8609  000202  5196               	movf	intToString@pointer& (0+255),w,b
  8610  000204  0D01               	mullw	1
  8611  000206  0EE3               	movlw	low intToString@number
  8612  000208  24F3               	addwf	prodl,w,c
  8613  00020A  6ED9               	movwf	fsr2l,c
  8614  00020C  0E01               	movlw	high intToString@number
  8615  00020E  20F4               	addwfc	prodh,w,c
  8616  000210  6EDA               	movwf	fsr2h,c
  8617  000212  5194               	movf	intToString@hundredthds& (0+255),w,b
  8618  000214  0F30               	addlw	48
  8619  000216  6EDF               	movwf	indf2,c
  8620                           
  8621                           ; BSR set to: 0
  8622  000218  2B96               	incf	intToString@pointer& (0+255),f,b
  8623  00021A                     l771:
  8624                           
  8625                           ; BSR set to: 0
  8626                           ;uart.c: 112: }
  8627                           ;uart.c: 114: if (val > 9999) {
  8628                           
  8629                           ; BSR set to: 0
  8630  00021A  517C               	movf	(intToString@val+3)& (0+255),w,b
  8631  00021C  117B               	iorwf	(intToString@val+2)& (0+255),w,b
  8632  00021E  E106               	bnz	u9990
  8633  000220  0E10               	movlw	16
  8634  000222  5D79               	subwf	intToString@val& (0+255),w,b
  8635  000224  0E27               	movlw	39
  8636  000226  597A               	subwfb	(intToString@val+1)& (0+255),w,b
  8637  000228  A0D8               	btfss	status,0,c
  8638  00022A  D062               	goto	l772
  8639  00022C                     u9990:
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;uart.c: 115: tenthousands = (val - hundredthds * 100000u - millions * 1000000u) / 10000
      +                          u;
  8643  00022C  5194               	movf	intToString@hundredthds& (0+255),w,b
  8644  00022E  6F60               	movwf	___lmul@multiplier& (0+255),b
  8645  000230  6B61               	clrf	(___lmul@multiplier+1)& (0+255),b
  8646  000232  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  8647  000234  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  8648  000236  0EA0               	movlw	160
  8649  000238  6F64               	movwf	___lmul@multiplicand& (0+255),b
  8650  00023A  0E86               	movlw	134
  8651  00023C  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8652  00023E  0E01               	movlw	1
  8653  000240  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8654  000242  0E00               	movlw	0
  8655  000244  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8656  000246  ECDD  F021         	call	___lmul	;wreg free
  8657  00024A  C060  F07D         	movff	?___lmul,??_intToString
  8658  00024E  C061  F07E         	movff	?___lmul+1,??_intToString+1
  8659  000252  C062  F07F         	movff	?___lmul+2,??_intToString+2
  8660  000256  C063  F080         	movff	?___lmul+3,??_intToString+3
  8661  00025A  0100               	movlb	0	; () banked
  8662  00025C  5195               	movf	intToString@millions& (0+255),w,b
  8663  00025E  6F60               	movwf	___lmul@multiplier& (0+255),b
  8664  000260  6B61               	clrf	(___lmul@multiplier+1)& (0+255),b
  8665  000262  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  8666  000264  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  8667  000266  0E40               	movlw	64
  8668  000268  6F64               	movwf	___lmul@multiplicand& (0+255),b
  8669  00026A  0E42               	movlw	66
  8670  00026C  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8671  00026E  0E0F               	movlw	15
  8672  000270  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8673  000272  0E00               	movlw	0
  8674  000274  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8675  000276  ECDD  F021         	call	___lmul	;wreg free
  8676  00027A  0100               	movlb	0	; () banked
  8677  00027C  5160               	movf	?___lmul& (0+255),w,b
  8678  00027E  257D               	addwf	??_intToString& (0+255),w,b
  8679  000280  6F81               	movwf	(??_intToString+4)& (0+255),b
  8680  000282  5161               	movf	(?___lmul+1)& (0+255),w,b
  8681  000284  217E               	addwfc	(??_intToString+1)& (0+255),w,b
  8682  000286  6F82               	movwf	(??_intToString+5)& (0+255),b
  8683  000288  5162               	movf	(?___lmul+2)& (0+255),w,b
  8684  00028A  217F               	addwfc	(??_intToString+2)& (0+255),w,b
  8685  00028C  6F83               	movwf	(??_intToString+6)& (0+255),b
  8686  00028E  5163               	movf	(?___lmul+3)& (0+255),w,b
  8687  000290  2180               	addwfc	(??_intToString+3)& (0+255),w,b
  8688  000292  6F84               	movwf	(??_intToString+7)& (0+255),b
  8689  000294  1F81               	comf	(??_intToString+4)& (0+255),f,b
  8690  000296  1F82               	comf	(??_intToString+5)& (0+255),f,b
  8691  000298  1F83               	comf	(??_intToString+6)& (0+255),f,b
  8692  00029A  1F84               	comf	(??_intToString+7)& (0+255),f,b
  8693  00029C  2B81               	incf	(??_intToString+4)& (0+255),f,b
  8694  00029E  0E00               	movlw	0
  8695  0002A0  2382               	addwfc	(??_intToString+5)& (0+255),f,b
  8696  0002A2  2383               	addwfc	(??_intToString+6)& (0+255),f,b
  8697  0002A4  2384               	addwfc	(??_intToString+7)& (0+255),f,b
  8698  0002A6  5179               	movf	intToString@val& (0+255),w,b
  8699  0002A8  2581               	addwf	(??_intToString+4)& (0+255),w,b
  8700  0002AA  6F6C               	movwf	___lldiv@dividend& (0+255),b
  8701  0002AC  517A               	movf	(intToString@val+1)& (0+255),w,b
  8702  0002AE  2182               	addwfc	(??_intToString+5)& (0+255),w,b
  8703  0002B0  6F6D               	movwf	(___lldiv@dividend+1)& (0+255),b
  8704  0002B2  517B               	movf	(intToString@val+2)& (0+255),w,b
  8705  0002B4  2183               	addwfc	(??_intToString+6)& (0+255),w,b
  8706  0002B6  6F6E               	movwf	(___lldiv@dividend+2)& (0+255),b
  8707  0002B8  517C               	movf	(intToString@val+3)& (0+255),w,b
  8708  0002BA  2184               	addwfc	(??_intToString+7)& (0+255),w,b
  8709  0002BC  6F6F               	movwf	(___lldiv@dividend+3)& (0+255),b
  8710  0002BE  0E10               	movlw	16
  8711  0002C0  6F70               	movwf	___lldiv@divisor& (0+255),b
  8712  0002C2  0E27               	movlw	39
  8713  0002C4  6F71               	movwf	(___lldiv@divisor+1)& (0+255),b
  8714  0002C6  0E00               	movlw	0
  8715  0002C8  6F72               	movwf	(___lldiv@divisor+2)& (0+255),b
  8716  0002CA  0E00               	movlw	0
  8717  0002CC  6F73               	movwf	(___lldiv@divisor+3)& (0+255),b
  8718  0002CE  EC40  F01E         	call	___lldiv	;wreg free
  8719  0002D2  0100               	movlb	0	; () banked
  8720  0002D4  516C               	movf	?___lldiv& (0+255),w,b
  8721  0002D6  6F93               	movwf	intToString@tenthousands& (0+255),b
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;uart.c: 116: number[pointer++] = tenthousands + 0x30u;
  8725  0002D8  5196               	movf	intToString@pointer& (0+255),w,b
  8726  0002DA  0D01               	mullw	1
  8727  0002DC  0EE3               	movlw	low intToString@number
  8728  0002DE  24F3               	addwf	prodl,w,c
  8729  0002E0  6ED9               	movwf	fsr2l,c
  8730  0002E2  0E01               	movlw	high intToString@number
  8731  0002E4  20F4               	addwfc	prodh,w,c
  8732  0002E6  6EDA               	movwf	fsr2h,c
  8733  0002E8  5193               	movf	intToString@tenthousands& (0+255),w,b
  8734  0002EA  0F30               	addlw	48
  8735  0002EC  6EDF               	movwf	indf2,c
  8736                           
  8737                           ; BSR set to: 0
  8738  0002EE  2B96               	incf	intToString@pointer& (0+255),f,b
  8739  0002F0                     l772:
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;uart.c: 117: }
  8743                           ;uart.c: 119: if (val > 999) {
  8744                           
  8745                           ; BSR set to: 0
  8746  0002F0  517C               	movf	(intToString@val+3)& (0+255),w,b
  8747  0002F2  117B               	iorwf	(intToString@val+2)& (0+255),w,b
  8748  0002F4  E106               	bnz	u10000
  8749  0002F6  0EE8               	movlw	232
  8750  0002F8  5D79               	subwf	intToString@val& (0+255),w,b
  8751  0002FA  0E03               	movlw	3
  8752  0002FC  597A               	subwfb	(intToString@val+1)& (0+255),w,b
  8753  0002FE  A0D8               	btfss	status,0,c
  8754  000300  D074               	goto	l773
  8755  000302                     u10000:
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;uart.c: 120: thousands = (val - tenthousands * 10000u - hundredthds * 100000u - million
      +                          s * 1000000u) / 1000u;
  8759  000302  C093  F060         	movff	intToString@tenthousands,___wmul@multiplier
  8760  000306  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8761  000308  0E27               	movlw	39
  8762  00030A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8763  00030C  0E10               	movlw	16
  8764  00030E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8765  000310  EC33  F025         	call	___wmul	;wreg free
  8766  000314  C060  F07D         	movff	?___wmul,??_intToString
  8767  000318  C061  F07E         	movff	?___wmul+1,??_intToString+1
  8768  00031C  0100               	movlb	0	; () banked
  8769  00031E  5194               	movf	intToString@hundredthds& (0+255),w,b
  8770  000320  6F60               	movwf	___lmul@multiplier& (0+255),b
  8771  000322  6B61               	clrf	(___lmul@multiplier+1)& (0+255),b
  8772  000324  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  8773  000326  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  8774  000328  0EA0               	movlw	160
  8775  00032A  6F64               	movwf	___lmul@multiplicand& (0+255),b
  8776  00032C  0E86               	movlw	134
  8777  00032E  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8778  000330  0E01               	movlw	1
  8779  000332  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8780  000334  0E00               	movlw	0
  8781  000336  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8782  000338  ECDD  F021         	call	___lmul	;wreg free
  8783  00033C  0100               	movlb	0	; () banked
  8784  00033E  517D               	movf	??_intToString& (0+255),w,b
  8785  000340  2560               	addwf	?___lmul& (0+255),w,b
  8786  000342  6F7F               	movwf	(??_intToString+2)& (0+255),b
  8787  000344  517E               	movf	(??_intToString+1)& (0+255),w,b
  8788  000346  2161               	addwfc	(?___lmul+1)& (0+255),w,b
  8789  000348  6F80               	movwf	(??_intToString+3)& (0+255),b
  8790  00034A  0E00               	movlw	0
  8791  00034C  2162               	addwfc	(?___lmul+2)& (0+255),w,b
  8792  00034E  6F81               	movwf	(??_intToString+4)& (0+255),b
  8793  000350  0E00               	movlw	0
  8794  000352  2163               	addwfc	(?___lmul+3)& (0+255),w,b
  8795  000354  6F82               	movwf	(??_intToString+5)& (0+255),b
  8796  000356  5195               	movf	intToString@millions& (0+255),w,b
  8797  000358  6F60               	movwf	___lmul@multiplier& (0+255),b
  8798  00035A  6B61               	clrf	(___lmul@multiplier+1)& (0+255),b
  8799  00035C  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  8800  00035E  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  8801  000360  0E40               	movlw	64
  8802  000362  6F64               	movwf	___lmul@multiplicand& (0+255),b
  8803  000364  0E42               	movlw	66
  8804  000366  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8805  000368  0E0F               	movlw	15
  8806  00036A  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8807  00036C  0E00               	movlw	0
  8808  00036E  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8809  000370  ECDD  F021         	call	___lmul	;wreg free
  8810  000374  0100               	movlb	0	; () banked
  8811  000376  5160               	movf	?___lmul& (0+255),w,b
  8812  000378  257F               	addwf	(??_intToString+2)& (0+255),w,b
  8813  00037A  6F83               	movwf	(??_intToString+6)& (0+255),b
  8814  00037C  5161               	movf	(?___lmul+1)& (0+255),w,b
  8815  00037E  2180               	addwfc	(??_intToString+3)& (0+255),w,b
  8816  000380  6F84               	movwf	(??_intToString+7)& (0+255),b
  8817  000382  5162               	movf	(?___lmul+2)& (0+255),w,b
  8818  000384  2181               	addwfc	(??_intToString+4)& (0+255),w,b
  8819  000386  6F85               	movwf	(??_intToString+8)& (0+255),b
  8820  000388  5163               	movf	(?___lmul+3)& (0+255),w,b
  8821  00038A  2182               	addwfc	(??_intToString+5)& (0+255),w,b
  8822  00038C  6F86               	movwf	(??_intToString+9)& (0+255),b
  8823  00038E  1F83               	comf	(??_intToString+6)& (0+255),f,b
  8824  000390  1F84               	comf	(??_intToString+7)& (0+255),f,b
  8825  000392  1F85               	comf	(??_intToString+8)& (0+255),f,b
  8826  000394  1F86               	comf	(??_intToString+9)& (0+255),f,b
  8827  000396  2B83               	incf	(??_intToString+6)& (0+255),f,b
  8828  000398  0E00               	movlw	0
  8829  00039A  2384               	addwfc	(??_intToString+7)& (0+255),f,b
  8830  00039C  2385               	addwfc	(??_intToString+8)& (0+255),f,b
  8831  00039E  2386               	addwfc	(??_intToString+9)& (0+255),f,b
  8832  0003A0  5179               	movf	intToString@val& (0+255),w,b
  8833  0003A2  2583               	addwf	(??_intToString+6)& (0+255),w,b
  8834  0003A4  6F6C               	movwf	___lldiv@dividend& (0+255),b
  8835  0003A6  517A               	movf	(intToString@val+1)& (0+255),w,b
  8836  0003A8  2184               	addwfc	(??_intToString+7)& (0+255),w,b
  8837  0003AA  6F6D               	movwf	(___lldiv@dividend+1)& (0+255),b
  8838  0003AC  517B               	movf	(intToString@val+2)& (0+255),w,b
  8839  0003AE  2185               	addwfc	(??_intToString+8)& (0+255),w,b
  8840  0003B0  6F6E               	movwf	(___lldiv@dividend+2)& (0+255),b
  8841  0003B2  517C               	movf	(intToString@val+3)& (0+255),w,b
  8842  0003B4  2186               	addwfc	(??_intToString+9)& (0+255),w,b
  8843  0003B6  6F6F               	movwf	(___lldiv@dividend+3)& (0+255),b
  8844  0003B8  0EE8               	movlw	232
  8845  0003BA  6F70               	movwf	___lldiv@divisor& (0+255),b
  8846  0003BC  0E03               	movlw	3
  8847  0003BE  6F71               	movwf	(___lldiv@divisor+1)& (0+255),b
  8848  0003C0  0E00               	movlw	0
  8849  0003C2  6F72               	movwf	(___lldiv@divisor+2)& (0+255),b
  8850  0003C4  0E00               	movlw	0
  8851  0003C6  6F73               	movwf	(___lldiv@divisor+3)& (0+255),b
  8852  0003C8  EC40  F01E         	call	___lldiv	;wreg free
  8853  0003CC  0100               	movlb	0	; () banked
  8854  0003CE  516C               	movf	?___lldiv& (0+255),w,b
  8855  0003D0  6F92               	movwf	intToString@thousands& (0+255),b
  8856                           
  8857                           ; BSR set to: 0
  8858                           ;uart.c: 121: number[pointer++] = thousands + 0x30u;
  8859  0003D2  5196               	movf	intToString@pointer& (0+255),w,b
  8860  0003D4  0D01               	mullw	1
  8861  0003D6  0EE3               	movlw	low intToString@number
  8862  0003D8  24F3               	addwf	prodl,w,c
  8863  0003DA  6ED9               	movwf	fsr2l,c
  8864  0003DC  0E01               	movlw	high intToString@number
  8865  0003DE  20F4               	addwfc	prodh,w,c
  8866  0003E0  6EDA               	movwf	fsr2h,c
  8867  0003E2  5192               	movf	intToString@thousands& (0+255),w,b
  8868  0003E4  0F30               	addlw	48
  8869  0003E6  6EDF               	movwf	indf2,c
  8870                           
  8871                           ; BSR set to: 0
  8872  0003E8  2B96               	incf	intToString@pointer& (0+255),f,b
  8873  0003EA                     l773:
  8874                           
  8875                           ; BSR set to: 0
  8876                           ;uart.c: 122: }
  8877                           ;uart.c: 124: if (val > 99) {
  8878                           
  8879                           ; BSR set to: 0
  8880  0003EA  517C               	movf	(intToString@val+3)& (0+255),w,b
  8881  0003EC  117B               	iorwf	(intToString@val+2)& (0+255),w,b
  8882  0003EE  117A               	iorwf	(intToString@val+1)& (0+255),w,b
  8883  0003F0  E104               	bnz	u10010
  8884  0003F2  0E64               	movlw	100
  8885  0003F4  5D79               	subwf	intToString@val& (0+255),w,b
  8886  0003F6  A0D8               	btfss	status,0,c
  8887  0003F8  D088               	goto	l774
  8888  0003FA                     u10010:
  8889                           
  8890                           ; BSR set to: 0
  8891                           ;uart.c: 125: hundreds = (val - tenthousands * 10000u - thousands * 1000u - hundredthds 
      +                          * 100000u - millions * 1000000u) / 100u;
  8892  0003FA  C093  F060         	movff	intToString@tenthousands,___wmul@multiplier
  8893  0003FE  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8894  000400  0E27               	movlw	39
  8895  000402  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8896  000404  0E10               	movlw	16
  8897  000406  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8898  000408  EC33  F025         	call	___wmul	;wreg free
  8899  00040C  C060  F07D         	movff	?___wmul,??_intToString
  8900  000410  C061  F07E         	movff	?___wmul+1,??_intToString+1
  8901  000414  C092  F060         	movff	intToString@thousands,___wmul@multiplier
  8902  000418  0100               	movlb	0	; () banked
  8903  00041A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8904  00041C  0E03               	movlw	3
  8905  00041E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8906  000420  0EE8               	movlw	232
  8907  000422  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8908  000424  EC33  F025         	call	___wmul	;wreg free
  8909  000428  0100               	movlb	0	; () banked
  8910  00042A  517D               	movf	??_intToString& (0+255),w,b
  8911  00042C  2560               	addwf	?___wmul& (0+255),w,b
  8912  00042E  6F7F               	movwf	(??_intToString+2)& (0+255),b
  8913  000430  517E               	movf	(??_intToString+1)& (0+255),w,b
  8914  000432  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8915  000434  6F80               	movwf	(??_intToString+3)& (0+255),b
  8916  000436  6B81               	clrf	(??_intToString+4)& (0+255),b
  8917  000438  B0D8               	btfsc	status,0,c
  8918  00043A  2B81               	incf	(??_intToString+4)& (0+255),f,b
  8919  00043C  6B82               	clrf	(??_intToString+5)& (0+255),b
  8920  00043E  5194               	movf	intToString@hundredthds& (0+255),w,b
  8921  000440  6F60               	movwf	___lmul@multiplier& (0+255),b
  8922  000442  6B61               	clrf	(___lmul@multiplier+1)& (0+255),b
  8923  000444  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  8924  000446  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  8925  000448  0EA0               	movlw	160
  8926  00044A  6F64               	movwf	___lmul@multiplicand& (0+255),b
  8927  00044C  0E86               	movlw	134
  8928  00044E  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8929  000450  0E01               	movlw	1
  8930  000452  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8931  000454  0E00               	movlw	0
  8932  000456  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8933  000458  ECDD  F021         	call	___lmul	;wreg free
  8934  00045C  0100               	movlb	0	; () banked
  8935  00045E  5160               	movf	?___lmul& (0+255),w,b
  8936  000460  257F               	addwf	(??_intToString+2)& (0+255),w,b
  8937  000462  6F83               	movwf	(??_intToString+6)& (0+255),b
  8938  000464  5161               	movf	(?___lmul+1)& (0+255),w,b
  8939  000466  2180               	addwfc	(??_intToString+3)& (0+255),w,b
  8940  000468  6F84               	movwf	(??_intToString+7)& (0+255),b
  8941  00046A  5162               	movf	(?___lmul+2)& (0+255),w,b
  8942  00046C  2181               	addwfc	(??_intToString+4)& (0+255),w,b
  8943  00046E  6F85               	movwf	(??_intToString+8)& (0+255),b
  8944  000470  5163               	movf	(?___lmul+3)& (0+255),w,b
  8945  000472  2182               	addwfc	(??_intToString+5)& (0+255),w,b
  8946  000474  6F86               	movwf	(??_intToString+9)& (0+255),b
  8947  000476  5195               	movf	intToString@millions& (0+255),w,b
  8948  000478  6F60               	movwf	___lmul@multiplier& (0+255),b
  8949  00047A  6B61               	clrf	(___lmul@multiplier+1)& (0+255),b
  8950  00047C  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  8951  00047E  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  8952  000480  0E40               	movlw	64
  8953  000482  6F64               	movwf	___lmul@multiplicand& (0+255),b
  8954  000484  0E42               	movlw	66
  8955  000486  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8956  000488  0E0F               	movlw	15
  8957  00048A  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8958  00048C  0E00               	movlw	0
  8959  00048E  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8960  000490  ECDD  F021         	call	___lmul	;wreg free
  8961  000494  0100               	movlb	0	; () banked
  8962  000496  5160               	movf	?___lmul& (0+255),w,b
  8963  000498  2583               	addwf	(??_intToString+6)& (0+255),w,b
  8964  00049A  6F87               	movwf	(??_intToString+10)& (0+255),b
  8965  00049C  5161               	movf	(?___lmul+1)& (0+255),w,b
  8966  00049E  2184               	addwfc	(??_intToString+7)& (0+255),w,b
  8967  0004A0  6F88               	movwf	(??_intToString+11)& (0+255),b
  8968  0004A2  5162               	movf	(?___lmul+2)& (0+255),w,b
  8969  0004A4  2185               	addwfc	(??_intToString+8)& (0+255),w,b
  8970  0004A6  6F89               	movwf	(??_intToString+12)& (0+255),b
  8971  0004A8  5163               	movf	(?___lmul+3)& (0+255),w,b
  8972  0004AA  2186               	addwfc	(??_intToString+9)& (0+255),w,b
  8973  0004AC  6F8A               	movwf	(??_intToString+13)& (0+255),b
  8974  0004AE  1F87               	comf	(??_intToString+10)& (0+255),f,b
  8975  0004B0  1F88               	comf	(??_intToString+11)& (0+255),f,b
  8976  0004B2  1F89               	comf	(??_intToString+12)& (0+255),f,b
  8977  0004B4  1F8A               	comf	(??_intToString+13)& (0+255),f,b
  8978  0004B6  2B87               	incf	(??_intToString+10)& (0+255),f,b
  8979  0004B8  0E00               	movlw	0
  8980  0004BA  2388               	addwfc	(??_intToString+11)& (0+255),f,b
  8981  0004BC  2389               	addwfc	(??_intToString+12)& (0+255),f,b
  8982  0004BE  238A               	addwfc	(??_intToString+13)& (0+255),f,b
  8983  0004C0  5179               	movf	intToString@val& (0+255),w,b
  8984  0004C2  2587               	addwf	(??_intToString+10)& (0+255),w,b
  8985  0004C4  6F6C               	movwf	___lldiv@dividend& (0+255),b
  8986  0004C6  517A               	movf	(intToString@val+1)& (0+255),w,b
  8987  0004C8  2188               	addwfc	(??_intToString+11)& (0+255),w,b
  8988  0004CA  6F6D               	movwf	(___lldiv@dividend+1)& (0+255),b
  8989  0004CC  517B               	movf	(intToString@val+2)& (0+255),w,b
  8990  0004CE  2189               	addwfc	(??_intToString+12)& (0+255),w,b
  8991  0004D0  6F6E               	movwf	(___lldiv@dividend+2)& (0+255),b
  8992  0004D2  517C               	movf	(intToString@val+3)& (0+255),w,b
  8993  0004D4  218A               	addwfc	(??_intToString+13)& (0+255),w,b
  8994  0004D6  6F6F               	movwf	(___lldiv@dividend+3)& (0+255),b
  8995  0004D8  0E64               	movlw	100
  8996  0004DA  6F70               	movwf	___lldiv@divisor& (0+255),b
  8997  0004DC  0E00               	movlw	0
  8998  0004DE  6F71               	movwf	(___lldiv@divisor+1)& (0+255),b
  8999  0004E0  0E00               	movlw	0
  9000  0004E2  6F72               	movwf	(___lldiv@divisor+2)& (0+255),b
  9001  0004E4  0E00               	movlw	0
  9002  0004E6  6F73               	movwf	(___lldiv@divisor+3)& (0+255),b
  9003  0004E8  EC40  F01E         	call	___lldiv	;wreg free
  9004  0004EC  0100               	movlb	0	; () banked
  9005  0004EE  516C               	movf	?___lldiv& (0+255),w,b
  9006  0004F0  6F91               	movwf	intToString@hundreds& (0+255),b
  9007                           
  9008                           ; BSR set to: 0
  9009                           ;uart.c: 126: number[pointer++] = hundreds + 0x30u;
  9010  0004F2  5196               	movf	intToString@pointer& (0+255),w,b
  9011  0004F4  0D01               	mullw	1
  9012  0004F6  0EE3               	movlw	low intToString@number
  9013  0004F8  24F3               	addwf	prodl,w,c
  9014  0004FA  6ED9               	movwf	fsr2l,c
  9015  0004FC  0E01               	movlw	high intToString@number
  9016  0004FE  20F4               	addwfc	prodh,w,c
  9017  000500  6EDA               	movwf	fsr2h,c
  9018  000502  5191               	movf	intToString@hundreds& (0+255),w,b
  9019  000504  0F30               	addlw	48
  9020  000506  6EDF               	movwf	indf2,c
  9021                           
  9022                           ; BSR set to: 0
  9023  000508  2B96               	incf	intToString@pointer& (0+255),f,b
  9024  00050A                     l774:
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;uart.c: 127: }
  9028                           ;uart.c: 129: if (val > 9) {
  9029                           
  9030                           ; BSR set to: 0
  9031  00050A  517C               	movf	(intToString@val+3)& (0+255),w,b
  9032  00050C  117B               	iorwf	(intToString@val+2)& (0+255),w,b
  9033  00050E  117A               	iorwf	(intToString@val+1)& (0+255),w,b
  9034  000510  E104               	bnz	u10020
  9035  000512  0E0A               	movlw	10
  9036  000514  5D79               	subwf	intToString@val& (0+255),w,b
  9037  000516  A0D8               	btfss	status,0,c
  9038  000518  D096               	goto	l775
  9039  00051A                     u10020:
  9040                           
  9041                           ; BSR set to: 0
  9042                           ;uart.c: 130: tens = (val - tenthousands * 10000u - thousands * 1000u - hundreds * 100u 
      +                          - hundredthds * 100000u - millions * 1000000u) / 10u;
  9043  00051A  C093  F060         	movff	intToString@tenthousands,___wmul@multiplier
  9044  00051E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9045  000520  0E27               	movlw	39
  9046  000522  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9047  000524  0E10               	movlw	16
  9048  000526  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9049  000528  EC33  F025         	call	___wmul	;wreg free
  9050  00052C  C060  F07D         	movff	?___wmul,??_intToString
  9051  000530  C061  F07E         	movff	?___wmul+1,??_intToString+1
  9052  000534  C092  F060         	movff	intToString@thousands,___wmul@multiplier
  9053  000538  0100               	movlb	0	; () banked
  9054  00053A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9055  00053C  0E03               	movlw	3
  9056  00053E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9057  000540  0EE8               	movlw	232
  9058  000542  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9059  000544  EC33  F025         	call	___wmul	;wreg free
  9060  000548  0100               	movlb	0	; () banked
  9061  00054A  517D               	movf	??_intToString& (0+255),w,b
  9062  00054C  2560               	addwf	?___wmul& (0+255),w,b
  9063  00054E  6F7F               	movwf	(??_intToString+2)& (0+255),b
  9064  000550  517E               	movf	(??_intToString+1)& (0+255),w,b
  9065  000552  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9066  000554  6F80               	movwf	(??_intToString+3)& (0+255),b
  9067  000556  6B81               	clrf	(??_intToString+4)& (0+255),b
  9068  000558  B0D8               	btfsc	status,0,c
  9069  00055A  2B81               	incf	(??_intToString+4)& (0+255),f,b
  9070  00055C  6B82               	clrf	(??_intToString+5)& (0+255),b
  9071  00055E  5191               	movf	intToString@hundreds& (0+255),w,b
  9072  000560  0D64               	mullw	100
  9073  000562  50F3               	movf	prodl,w,c
  9074  000564  257F               	addwf	(??_intToString+2)& (0+255),w,b
  9075  000566  6F83               	movwf	(??_intToString+6)& (0+255),b
  9076  000568  50F4               	movf	prodh,w,c
  9077  00056A  2180               	addwfc	(??_intToString+3)& (0+255),w,b
  9078  00056C  6F84               	movwf	(??_intToString+7)& (0+255),b
  9079  00056E  0E00               	movlw	0
  9080  000570  2181               	addwfc	(??_intToString+4)& (0+255),w,b
  9081  000572  6F85               	movwf	(??_intToString+8)& (0+255),b
  9082  000574  0E00               	movlw	0
  9083  000576  2182               	addwfc	(??_intToString+5)& (0+255),w,b
  9084  000578  6F86               	movwf	(??_intToString+9)& (0+255),b
  9085  00057A  5194               	movf	intToString@hundredthds& (0+255),w,b
  9086  00057C  6F60               	movwf	___lmul@multiplier& (0+255),b
  9087  00057E  6B61               	clrf	(___lmul@multiplier+1)& (0+255),b
  9088  000580  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  9089  000582  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  9090  000584  0EA0               	movlw	160
  9091  000586  6F64               	movwf	___lmul@multiplicand& (0+255),b
  9092  000588  0E86               	movlw	134
  9093  00058A  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  9094  00058C  0E01               	movlw	1
  9095  00058E  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  9096  000590  0E00               	movlw	0
  9097  000592  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  9098  000594  ECDD  F021         	call	___lmul	;wreg free
  9099  000598  0100               	movlb	0	; () banked
  9100  00059A  5160               	movf	?___lmul& (0+255),w,b
  9101  00059C  2583               	addwf	(??_intToString+6)& (0+255),w,b
  9102  00059E  6F87               	movwf	(??_intToString+10)& (0+255),b
  9103  0005A0  5161               	movf	(?___lmul+1)& (0+255),w,b
  9104  0005A2  2184               	addwfc	(??_intToString+7)& (0+255),w,b
  9105  0005A4  6F88               	movwf	(??_intToString+11)& (0+255),b
  9106  0005A6  5162               	movf	(?___lmul+2)& (0+255),w,b
  9107  0005A8  2185               	addwfc	(??_intToString+8)& (0+255),w,b
  9108  0005AA  6F89               	movwf	(??_intToString+12)& (0+255),b
  9109  0005AC  5163               	movf	(?___lmul+3)& (0+255),w,b
  9110  0005AE  2186               	addwfc	(??_intToString+9)& (0+255),w,b
  9111  0005B0  6F8A               	movwf	(??_intToString+13)& (0+255),b
  9112  0005B2  5195               	movf	intToString@millions& (0+255),w,b
  9113  0005B4  6F60               	movwf	___lmul@multiplier& (0+255),b
  9114  0005B6  6B61               	clrf	(___lmul@multiplier+1)& (0+255),b
  9115  0005B8  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  9116  0005BA  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  9117  0005BC  0E40               	movlw	64
  9118  0005BE  6F64               	movwf	___lmul@multiplicand& (0+255),b
  9119  0005C0  0E42               	movlw	66
  9120  0005C2  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  9121  0005C4  0E0F               	movlw	15
  9122  0005C6  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  9123  0005C8  0E00               	movlw	0
  9124  0005CA  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  9125  0005CC  ECDD  F021         	call	___lmul	;wreg free
  9126  0005D0  0100               	movlb	0	; () banked
  9127  0005D2  5160               	movf	?___lmul& (0+255),w,b
  9128  0005D4  2587               	addwf	(??_intToString+10)& (0+255),w,b
  9129  0005D6  6F8B               	movwf	(??_intToString+14)& (0+255),b
  9130  0005D8  5161               	movf	(?___lmul+1)& (0+255),w,b
  9131  0005DA  2188               	addwfc	(??_intToString+11)& (0+255),w,b
  9132  0005DC  6F8C               	movwf	(??_intToString+15)& (0+255),b
  9133  0005DE  5162               	movf	(?___lmul+2)& (0+255),w,b
  9134  0005E0  2189               	addwfc	(??_intToString+12)& (0+255),w,b
  9135  0005E2  6F8D               	movwf	(??_intToString+16)& (0+255),b
  9136  0005E4  5163               	movf	(?___lmul+3)& (0+255),w,b
  9137  0005E6  218A               	addwfc	(??_intToString+13)& (0+255),w,b
  9138  0005E8  6F8E               	movwf	(??_intToString+17)& (0+255),b
  9139  0005EA  1F8B               	comf	(??_intToString+14)& (0+255),f,b
  9140  0005EC  1F8C               	comf	(??_intToString+15)& (0+255),f,b
  9141  0005EE  1F8D               	comf	(??_intToString+16)& (0+255),f,b
  9142  0005F0  1F8E               	comf	(??_intToString+17)& (0+255),f,b
  9143  0005F2  2B8B               	incf	(??_intToString+14)& (0+255),f,b
  9144  0005F4  0E00               	movlw	0
  9145  0005F6  238C               	addwfc	(??_intToString+15)& (0+255),f,b
  9146  0005F8  238D               	addwfc	(??_intToString+16)& (0+255),f,b
  9147  0005FA  238E               	addwfc	(??_intToString+17)& (0+255),f,b
  9148  0005FC  5179               	movf	intToString@val& (0+255),w,b
  9149  0005FE  258B               	addwf	(??_intToString+14)& (0+255),w,b
  9150  000600  6F6C               	movwf	___lldiv@dividend& (0+255),b
  9151  000602  517A               	movf	(intToString@val+1)& (0+255),w,b
  9152  000604  218C               	addwfc	(??_intToString+15)& (0+255),w,b
  9153  000606  6F6D               	movwf	(___lldiv@dividend+1)& (0+255),b
  9154  000608  517B               	movf	(intToString@val+2)& (0+255),w,b
  9155  00060A  218D               	addwfc	(??_intToString+16)& (0+255),w,b
  9156  00060C  6F6E               	movwf	(___lldiv@dividend+2)& (0+255),b
  9157  00060E  517C               	movf	(intToString@val+3)& (0+255),w,b
  9158  000610  218E               	addwfc	(??_intToString+17)& (0+255),w,b
  9159  000612  6F6F               	movwf	(___lldiv@dividend+3)& (0+255),b
  9160  000614  0E0A               	movlw	10
  9161  000616  6F70               	movwf	___lldiv@divisor& (0+255),b
  9162  000618  0E00               	movlw	0
  9163  00061A  6F71               	movwf	(___lldiv@divisor+1)& (0+255),b
  9164  00061C  0E00               	movlw	0
  9165  00061E  6F72               	movwf	(___lldiv@divisor+2)& (0+255),b
  9166  000620  0E00               	movlw	0
  9167  000622  6F73               	movwf	(___lldiv@divisor+3)& (0+255),b
  9168  000624  EC40  F01E         	call	___lldiv	;wreg free
  9169  000628  0100               	movlb	0	; () banked
  9170  00062A  516C               	movf	?___lldiv& (0+255),w,b
  9171  00062C  6F90               	movwf	intToString@tens& (0+255),b
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;uart.c: 131: number[pointer++] = tens + 0x30u;
  9175  00062E  5196               	movf	intToString@pointer& (0+255),w,b
  9176  000630  0D01               	mullw	1
  9177  000632  0EE3               	movlw	low intToString@number
  9178  000634  24F3               	addwf	prodl,w,c
  9179  000636  6ED9               	movwf	fsr2l,c
  9180  000638  0E01               	movlw	high intToString@number
  9181  00063A  20F4               	addwfc	prodh,w,c
  9182  00063C  6EDA               	movwf	fsr2h,c
  9183  00063E  5190               	movf	intToString@tens& (0+255),w,b
  9184  000640  0F30               	addlw	48
  9185  000642  6EDF               	movwf	indf2,c
  9186                           
  9187                           ; BSR set to: 0
  9188  000644  2B96               	incf	intToString@pointer& (0+255),f,b
  9189  000646                     l775:
  9190                           
  9191                           ; BSR set to: 0
  9192                           ;uart.c: 132: }
  9193                           ;uart.c: 134: number[pointer++] = ones + 0x30u;
  9194                           
  9195                           ; BSR set to: 0
  9196  000646  5196               	movf	intToString@pointer& (0+255),w,b
  9197  000648  0D01               	mullw	1
  9198  00064A  0EE3               	movlw	low intToString@number
  9199  00064C  24F3               	addwf	prodl,w,c
  9200  00064E  6ED9               	movwf	fsr2l,c
  9201  000650  0E01               	movlw	high intToString@number
  9202  000652  20F4               	addwfc	prodh,w,c
  9203  000654  6EDA               	movwf	fsr2h,c
  9204  000656  518F               	movf	intToString@ones& (0+255),w,b
  9205  000658  0F30               	addlw	48
  9206  00065A  6EDF               	movwf	indf2,c
  9207                           
  9208                           ; BSR set to: 0
  9209  00065C  2B96               	incf	intToString@pointer& (0+255),f,b
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;uart.c: 135: number[pointer++] = '\0';
  9213  00065E  5196               	movf	intToString@pointer& (0+255),w,b
  9214  000660  0D01               	mullw	1
  9215  000662  0EE3               	movlw	low intToString@number
  9216  000664  24F3               	addwf	prodl,w,c
  9217  000666  6ED9               	movwf	fsr2l,c
  9218  000668  0E01               	movlw	high intToString@number
  9219  00066A  20F4               	addwfc	prodh,w,c
  9220  00066C  6EDA               	movwf	fsr2h,c
  9221  00066E  0E00               	movlw	0
  9222  000670  6EDF               	movwf	indf2,c
  9223                           
  9224                           ; BSR set to: 0
  9225  000672  2B96               	incf	intToString@pointer& (0+255),f,b
  9226                           
  9227                           ; BSR set to: 0
  9228                           ;uart.c: 137: return number;
  9229  000674  0EE3               	movlw	low intToString@number
  9230  000676  6F79               	movwf	?_intToString& (0+255),b
  9231  000678  0E01               	movlw	high intToString@number
  9232  00067A  6F7A               	movwf	(?_intToString+1)& (0+255),b
  9233  00067C  0012               	return	
  9234  00067E                     __end_of_intToString:
  9235                           	opt stack 0
  9236                           tblptru	equ	0xFF8
  9237                           tblptrh	equ	0xFF7
  9238                           tblptrl	equ	0xFF6
  9239                           tablat	equ	0xFF5
  9240                           prodh	equ	0xFF4
  9241                           prodl	equ	0xFF3
  9242                           intcon	equ	0xFF2
  9243                           intcon3	equ	0xFF0
  9244                           indf0	equ	0xFEF
  9245                           postinc0	equ	0xFEE
  9246                           plusw0	equ	0xFEB
  9247                           fsr0h	equ	0xFEA
  9248                           fsr0l	equ	0xFE9
  9249                           wreg	equ	0xFE8
  9250                           postinc1	equ	0xFE6
  9251                           postdec1	equ	0xFE5
  9252                           plusw1	equ	0xFE3
  9253                           fsr1h	equ	0xFE2
  9254                           fsr1l	equ	0xFE1
  9255                           indf2	equ	0xFDF
  9256                           postinc2	equ	0xFDE
  9257                           postdec2	equ	0xFDD
  9258                           plusw2	equ	0xFDB
  9259                           fsr2h	equ	0xFDA
  9260                           fsr2l	equ	0xFD9
  9261                           status	equ	0xFD8
  9262                           
  9263 ;; *************** function ___lmul *****************
  9264 ;; Defined at:
  9265 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  9266 ;; Parameters:    Size  Location     Type
  9267 ;;  multiplier      4    0[BANK0 ] unsigned long 
  9268 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;  product         4    8[BANK0 ] unsigned long 
  9271 ;; Return value:  Size  Location     Type
  9272 ;;                  4    0[BANK0 ] unsigned long 
  9273 ;; Registers used:
  9274 ;;		wreg, status,2, status,0
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9280 ;;      Params:         0       8       0       0       0       0       0       0       0
  9281 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9282 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9283 ;;      Totals:         0      12       0       0       0       0       0       0       0
  9284 ;;Total ram usage:       12 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; Hardware stack levels required when called:    4
  9287 ;; This function calls:
  9288 ;;		Nothing
  9289 ;; This function is called by:
  9290 ;;		_intToString
  9291 ;;		_rand
  9292 ;; This function uses a non-reentrant model
  9293 ;;
  9294                           
  9295                           	psect	text25
  9296  0043BA                     __ptext25:
  9297                           	opt stack 0
  9298  0043BA                     ___lmul:
  9299                           	opt stack 24
  9300                           
  9301                           ; BSR set to: 0
  9302                           ;incstack = 0
  9303  0043BA  0E00               	movlw	0
  9304  0043BC  0100               	movlb	0	; () banked
  9305  0043BE  6F68               	movwf	___lmul@product& (0+255),b
  9306  0043C0  0E00               	movlw	0
  9307  0043C2  6F69               	movwf	(___lmul@product+1)& (0+255),b
  9308  0043C4  0E00               	movlw	0
  9309  0043C6  6F6A               	movwf	(___lmul@product+2)& (0+255),b
  9310  0043C8  0E00               	movlw	0
  9311  0043CA  6F6B               	movwf	(___lmul@product+3)& (0+255),b
  9312  0043CC                     
  9313                           ; BSR set to: 0
  9314                           
  9315                           ; BSR set to: 0
  9316  0043CC  A160               	btfss	___lmul@multiplier& (0+255),0,b
  9317  0043CE  D008               	goto	l1100
  9318                           
  9319                           ; BSR set to: 0
  9320  0043D0  5164               	movf	___lmul@multiplicand& (0+255),w,b
  9321  0043D2  2768               	addwf	___lmul@product& (0+255),f,b
  9322  0043D4  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  9323  0043D6  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
  9324  0043D8  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  9325  0043DA  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
  9326  0043DC  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  9327  0043DE  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
  9328  0043E0                     l1100:
  9329                           
  9330                           ; BSR set to: 0
  9331                           
  9332                           ; BSR set to: 0
  9333  0043E0  90D8               	bcf	status,0,c
  9334  0043E2  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
  9335  0043E4  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  9336  0043E6  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  9337  0043E8  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  9338                           
  9339                           ; BSR set to: 0
  9340  0043EA  90D8               	bcf	status,0,c
  9341  0043EC  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  9342  0043EE  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  9343  0043F0  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  9344  0043F2  3360               	rrcf	___lmul@multiplier& (0+255),f,b
  9345  0043F4  5160               	movf	___lmul@multiplier& (0+255),w,b
  9346  0043F6  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  9347  0043F8  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  9348  0043FA  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  9349  0043FC  A4D8               	btfss	status,2,c
  9350  0043FE  D7E6               	goto	l1099
  9351                           
  9352                           ; BSR set to: 0
  9353  004400  C068  F060         	movff	___lmul@product,?___lmul
  9354  004404  C069  F061         	movff	___lmul@product+1,?___lmul+1
  9355  004408  C06A  F062         	movff	___lmul@product+2,?___lmul+2
  9356  00440C  C06B  F063         	movff	___lmul@product+3,?___lmul+3
  9357                           
  9358                           ; BSR set to: 0
  9359  004410  0012               	return		;funcret
  9360  004412                     __end_of___lmul:
  9361                           	opt stack 0
  9362                           tblptru	equ	0xFF8
  9363                           tblptrh	equ	0xFF7
  9364                           tblptrl	equ	0xFF6
  9365                           tablat	equ	0xFF5
  9366                           prodh	equ	0xFF4
  9367                           prodl	equ	0xFF3
  9368                           intcon	equ	0xFF2
  9369                           intcon3	equ	0xFF0
  9370                           indf0	equ	0xFEF
  9371                           postinc0	equ	0xFEE
  9372                           plusw0	equ	0xFEB
  9373                           fsr0h	equ	0xFEA
  9374                           fsr0l	equ	0xFE9
  9375                           wreg	equ	0xFE8
  9376                           postinc1	equ	0xFE6
  9377                           postdec1	equ	0xFE5
  9378                           plusw1	equ	0xFE3
  9379                           fsr1h	equ	0xFE2
  9380                           fsr1l	equ	0xFE1
  9381                           indf2	equ	0xFDF
  9382                           postinc2	equ	0xFDE
  9383                           postdec2	equ	0xFDD
  9384                           plusw2	equ	0xFDB
  9385                           fsr2h	equ	0xFDA
  9386                           fsr2l	equ	0xFD9
  9387                           status	equ	0xFD8
  9388                           
  9389 ;; *************** function ___llmod *****************
  9390 ;; Defined at:
  9391 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9392 ;; Parameters:    Size  Location     Type
  9393 ;;  dividend        4    0[BANK0 ] unsigned long 
  9394 ;;  divisor         4    4[BANK0 ] unsigned long 
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;  counter         1    8[BANK0 ] unsigned char 
  9397 ;; Return value:  Size  Location     Type
  9398 ;;                  4    0[BANK0 ] unsigned long 
  9399 ;; Registers used:
  9400 ;;		wreg, status,2, status,0
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9406 ;;      Params:         0       8       0       0       0       0       0       0       0
  9407 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9408 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9409 ;;      Totals:         0       9       0       0       0       0       0       0       0
  9410 ;;Total ram usage:        9 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    4
  9413 ;; This function calls:
  9414 ;;		Nothing
  9415 ;; This function is called by:
  9416 ;;		_intToString
  9417 ;;		_arpEntryToString
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           	psect	text26
  9422  004288                     __ptext26:
  9423                           	opt stack 0
  9424  004288                     ___llmod:
  9425                           	opt stack 24
  9426                           
  9427                           ; BSR set to: 0
  9428                           ;incstack = 0
  9429  004288  0100               	movlb	0	; () banked
  9430  00428A  5164               	movf	___llmod@divisor& (0+255),w,b
  9431  00428C  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  9432  00428E  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  9433  004290  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  9434  004292  B4D8               	btfsc	status,2,c
  9435  004294  D024               	goto	l1453
  9436                           
  9437                           ; BSR set to: 0
  9438  004296  0E01               	movlw	1
  9439  004298  6F68               	movwf	___llmod@counter& (0+255),b
  9440  00429A  D006               	goto	l1448
  9441  00429C                     
  9442                           ; BSR set to: 0
  9443                           
  9444                           ; BSR set to: 0
  9445  00429C  90D8               	bcf	status,0,c
  9446  00429E  3764               	rlcf	___llmod@divisor& (0+255),f,b
  9447  0042A0  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  9448  0042A2  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  9449  0042A4  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  9450  0042A6  2B68               	incf	___llmod@counter& (0+255),f,b
  9451  0042A8                     l1448:
  9452                           
  9453                           ; BSR set to: 0
  9454                           
  9455                           ; BSR set to: 0
  9456  0042A8  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  9457  0042AA  D7F8               	goto	l1449
  9458  0042AC                     u9570:
  9459                           
  9460                           ; BSR set to: 0
  9461                           
  9462                           ; BSR set to: 0
  9463                           
  9464                           ; BSR set to: 0
  9465  0042AC  5164               	movf	___llmod@divisor& (0+255),w,b
  9466  0042AE  5D60               	subwf	___llmod@dividend& (0+255),w,b
  9467  0042B0  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  9468  0042B2  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  9469  0042B4  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  9470  0042B6  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  9471  0042B8  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  9472  0042BA  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  9473  0042BC  A0D8               	btfss	status,0,c
  9474  0042BE  D008               	goto	l1452
  9475                           
  9476                           ; BSR set to: 0
  9477  0042C0  5164               	movf	___llmod@divisor& (0+255),w,b
  9478  0042C2  5F60               	subwf	___llmod@dividend& (0+255),f,b
  9479  0042C4  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  9480  0042C6  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  9481  0042C8  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  9482  0042CA  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  9483  0042CC  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  9484  0042CE  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  9485  0042D0                     l1452:
  9486                           
  9487                           ; BSR set to: 0
  9488                           
  9489                           ; BSR set to: 0
  9490  0042D0  90D8               	bcf	status,0,c
  9491  0042D2  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  9492  0042D4  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  9493  0042D6  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  9494  0042D8  3364               	rrcf	___llmod@divisor& (0+255),f,b
  9495                           
  9496                           ; BSR set to: 0
  9497  0042DA  2F68               	decfsz	___llmod@counter& (0+255),f,b
  9498  0042DC  D7E7               	goto	u9570
  9499  0042DE                     l1453:
  9500                           
  9501                           ; BSR set to: 0
  9502                           
  9503                           ; BSR set to: 0
  9504  0042DE  C060  F060         	movff	___llmod@dividend,?___llmod
  9505  0042E2  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  9506  0042E6  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  9507  0042EA  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  9508                           
  9509                           ; BSR set to: 0
  9510  0042EE  0012               	return		;funcret
  9511  0042F0                     __end_of___llmod:
  9512                           	opt stack 0
  9513                           tblptru	equ	0xFF8
  9514                           tblptrh	equ	0xFF7
  9515                           tblptrl	equ	0xFF6
  9516                           tablat	equ	0xFF5
  9517                           prodh	equ	0xFF4
  9518                           prodl	equ	0xFF3
  9519                           intcon	equ	0xFF2
  9520                           intcon3	equ	0xFF0
  9521                           indf0	equ	0xFEF
  9522                           postinc0	equ	0xFEE
  9523                           plusw0	equ	0xFEB
  9524                           fsr0h	equ	0xFEA
  9525                           fsr0l	equ	0xFE9
  9526                           wreg	equ	0xFE8
  9527                           postinc1	equ	0xFE6
  9528                           postdec1	equ	0xFE5
  9529                           plusw1	equ	0xFE3
  9530                           fsr1h	equ	0xFE2
  9531                           fsr1l	equ	0xFE1
  9532                           indf2	equ	0xFDF
  9533                           postinc2	equ	0xFDE
  9534                           postdec2	equ	0xFDD
  9535                           plusw2	equ	0xFDB
  9536                           fsr2h	equ	0xFDA
  9537                           fsr2l	equ	0xFD9
  9538                           status	equ	0xFD8
  9539                           
  9540 ;; *************** function ___lldiv *****************
  9541 ;; Defined at:
  9542 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  9543 ;; Parameters:    Size  Location     Type
  9544 ;;  dividend        4   12[BANK0 ] unsigned long 
  9545 ;;  divisor         4   16[BANK0 ] unsigned long 
  9546 ;; Auto vars:     Size  Location     Type
  9547 ;;  quotient        4   20[BANK0 ] unsigned long 
  9548 ;;  counter         1   24[BANK0 ] unsigned char 
  9549 ;; Return value:  Size  Location     Type
  9550 ;;                  4   12[BANK0 ] unsigned long 
  9551 ;; Registers used:
  9552 ;;		wreg, status,2, status,0
  9553 ;; Tracked objects:
  9554 ;;		On entry : 0/0
  9555 ;;		On exit  : 0/0
  9556 ;;		Unchanged: 0/0
  9557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9558 ;;      Params:         0       8       0       0       0       0       0       0       0
  9559 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9560 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9561 ;;      Totals:         0      13       0       0       0       0       0       0       0
  9562 ;;Total ram usage:       13 bytes
  9563 ;; Hardware stack levels used:    1
  9564 ;; Hardware stack levels required when called:    4
  9565 ;; This function calls:
  9566 ;;		Nothing
  9567 ;; This function is called by:
  9568 ;;		_intToString
  9569 ;; This function uses a non-reentrant model
  9570 ;;
  9571                           
  9572                           	psect	text27
  9573  003C80                     __ptext27:
  9574                           	opt stack 0
  9575  003C80                     ___lldiv:
  9576                           	opt stack 24
  9577                           
  9578                           ; BSR set to: 0
  9579                           ;incstack = 0
  9580  003C80  0E00               	movlw	0
  9581  003C82  0100               	movlb	0	; () banked
  9582  003C84  6F74               	movwf	___lldiv@quotient& (0+255),b
  9583  003C86  0E00               	movlw	0
  9584  003C88  6F75               	movwf	(___lldiv@quotient+1)& (0+255),b
  9585  003C8A  0E00               	movlw	0
  9586  003C8C  6F76               	movwf	(___lldiv@quotient+2)& (0+255),b
  9587  003C8E  0E00               	movlw	0
  9588  003C90  6F77               	movwf	(___lldiv@quotient+3)& (0+255),b
  9589                           
  9590                           ; BSR set to: 0
  9591  003C92  5170               	movf	___lldiv@divisor& (0+255),w,b
  9592  003C94  1171               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  9593  003C96  1172               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  9594  003C98  1173               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  9595  003C9A  B4D8               	btfsc	status,2,c
  9596  003C9C  D02A               	goto	l1443
  9597                           
  9598                           ; BSR set to: 0
  9599  003C9E  0E01               	movlw	1
  9600  003CA0  6F78               	movwf	___lldiv@counter& (0+255),b
  9601  003CA2  D006               	goto	l1438
  9602  003CA4                     
  9603                           ; BSR set to: 0
  9604                           
  9605                           ; BSR set to: 0
  9606  003CA4  90D8               	bcf	status,0,c
  9607  003CA6  3770               	rlcf	___lldiv@divisor& (0+255),f,b
  9608  003CA8  3771               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  9609  003CAA  3772               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  9610  003CAC  3773               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  9611  003CAE  2B78               	incf	___lldiv@counter& (0+255),f,b
  9612  003CB0                     l1438:
  9613                           
  9614                           ; BSR set to: 0
  9615                           
  9616                           ; BSR set to: 0
  9617  003CB0  AF73               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  9618  003CB2  D7F8               	goto	l1439
  9619  003CB4                     u9540:
  9620                           
  9621                           ; BSR set to: 0
  9622                           
  9623                           ; BSR set to: 0
  9624                           
  9625                           ; BSR set to: 0
  9626  003CB4  90D8               	bcf	status,0,c
  9627  003CB6  3774               	rlcf	___lldiv@quotient& (0+255),f,b
  9628  003CB8  3775               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  9629  003CBA  3776               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  9630  003CBC  3777               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  9631                           
  9632                           ; BSR set to: 0
  9633  003CBE  5170               	movf	___lldiv@divisor& (0+255),w,b
  9634  003CC0  5D6C               	subwf	___lldiv@dividend& (0+255),w,b
  9635  003CC2  5171               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9636  003CC4  596D               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  9637  003CC6  5172               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9638  003CC8  596E               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  9639  003CCA  5173               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9640  003CCC  596F               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  9641  003CCE  A0D8               	btfss	status,0,c
  9642  003CD0  D009               	goto	l1442
  9643                           
  9644                           ; BSR set to: 0
  9645  003CD2  5170               	movf	___lldiv@divisor& (0+255),w,b
  9646  003CD4  5F6C               	subwf	___lldiv@dividend& (0+255),f,b
  9647  003CD6  5171               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9648  003CD8  5B6D               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  9649  003CDA  5172               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9650  003CDC  5B6E               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  9651  003CDE  5173               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9652  003CE0  5B6F               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  9653                           
  9654                           ; BSR set to: 0
  9655  003CE2  8174               	bsf	___lldiv@quotient& (0+255),0,b
  9656  003CE4                     l1442:
  9657                           
  9658                           ; BSR set to: 0
  9659                           
  9660                           ; BSR set to: 0
  9661  003CE4  90D8               	bcf	status,0,c
  9662  003CE6  3373               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  9663  003CE8  3372               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  9664  003CEA  3371               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  9665  003CEC  3370               	rrcf	___lldiv@divisor& (0+255),f,b
  9666                           
  9667                           ; BSR set to: 0
  9668  003CEE  2F78               	decfsz	___lldiv@counter& (0+255),f,b
  9669  003CF0  D7E1               	goto	u9540
  9670  003CF2                     l1443:
  9671                           
  9672                           ; BSR set to: 0
  9673                           
  9674                           ; BSR set to: 0
  9675  003CF2  C074  F06C         	movff	___lldiv@quotient,?___lldiv
  9676  003CF6  C075  F06D         	movff	___lldiv@quotient+1,?___lldiv+1
  9677  003CFA  C076  F06E         	movff	___lldiv@quotient+2,?___lldiv+2
  9678  003CFE  C077  F06F         	movff	___lldiv@quotient+3,?___lldiv+3
  9679                           
  9680                           ; BSR set to: 0
  9681  003D02  0012               	return		;funcret
  9682  003D04                     __end_of___lldiv:
  9683                           	opt stack 0
  9684                           tblptru	equ	0xFF8
  9685                           tblptrh	equ	0xFF7
  9686                           tblptrl	equ	0xFF6
  9687                           tablat	equ	0xFF5
  9688                           prodh	equ	0xFF4
  9689                           prodl	equ	0xFF3
  9690                           intcon	equ	0xFF2
  9691                           intcon3	equ	0xFF0
  9692                           indf0	equ	0xFEF
  9693                           postinc0	equ	0xFEE
  9694                           plusw0	equ	0xFEB
  9695                           fsr0h	equ	0xFEA
  9696                           fsr0l	equ	0xFE9
  9697                           wreg	equ	0xFE8
  9698                           postinc1	equ	0xFE6
  9699                           postdec1	equ	0xFE5
  9700                           plusw1	equ	0xFE3
  9701                           fsr1h	equ	0xFE2
  9702                           fsr1l	equ	0xFE1
  9703                           indf2	equ	0xFDF
  9704                           postinc2	equ	0xFDE
  9705                           postdec2	equ	0xFDD
  9706                           plusw2	equ	0xFDB
  9707                           fsr2h	equ	0xFDA
  9708                           fsr2l	equ	0xFD9
  9709                           status	equ	0xFD8
  9710                           
  9711 ;; *************** function _ARP_handleNewPacket *****************
  9712 ;; Defined at:
  9713 ;;		line 31 in file "src/stack/protocols/arp.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;  frame           2  156[BANK0 ] PTR struct ethernetFrame
  9716 ;;		 -> stack.ethernet(15), stack(122), 
  9717 ;; Auto vars:     Size  Location     Type
  9718 ;;  arp            32   88[BANK1 ] struct ARP_message
  9719 ;; Return value:  Size  Location     Type
  9720 ;;                  1    wreg      void 
  9721 ;; Registers used:
  9722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9723 ;; Tracked objects:
  9724 ;;		On entry : 0/0
  9725 ;;		On exit  : 0/0
  9726 ;;		Unchanged: 0/0
  9727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9728 ;;      Params:         0       2       0       0       0       0       0       0       0
  9729 ;;      Locals:         0       0      32       0       0       0       0       0       0
  9730 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9731 ;;      Totals:         0       4      32       0       0       0       0       0       0
  9732 ;;Total ram usage:       36 bytes
  9733 ;; Hardware stack levels used:    1
  9734 ;; Hardware stack levels required when called:   11
  9735 ;; This function calls:
  9736 ;;		_ARP_parseFromRXBuffer
  9737 ;;		_ARP_sendReply
  9738 ;;		_ARP_setNewEntry
  9739 ;;		_UARTTransmitText
  9740 ;;		_ethernetController_dropPacket
  9741 ;;		_getMillis
  9742 ;;		_ipAdressToString
  9743 ;;		_macToString
  9744 ;; This function is called by:
  9745 ;;		_ethernet_rxGetNewFrame
  9746 ;; This function uses a non-reentrant model
  9747 ;;
  9748                           
  9749                           	psect	text28
  9750  002850                     __ptext28:
  9751                           	opt stack 0
  9752  002850                     _ARP_handleNewPacket:
  9753                           	opt stack 17
  9754                           
  9755                           ;arp.c: 32: ARP_message_t arp;
  9756                           ;arp.c: 33: if (frame->ethertype != ETHERTYPE_ARP) {
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;incstack = 0
  9760  002850  0100               	movlb	0	; () banked
  9761  002852  EE20 F00E          	lfsr	2,14
  9762  002856  51FC               	movf	ARP_handleNewPacket@frame& (0+255),w,b
  9763  002858  26D9               	addwf	fsr2l,f,c
  9764  00285A  51FD               	movf	(ARP_handleNewPacket@frame+1)& (0+255),w,b
  9765  00285C  22DA               	addwfc	fsr2h,f,c
  9766  00285E  0E06               	movlw	6
  9767  002860  18DE               	xorwf	postinc2,w,c
  9768  002862  E104               	bnz	u10600
  9769  002864  0E08               	movlw	8
  9770  002866  18DE               	xorwf	postinc2,w,c
  9771  002868  B4D8               	btfsc	status,2,c
  9772  00286A  D007               	goto	l902
  9773  00286C                     u10600:
  9774                           
  9775                           ; BSR set to: 0
  9776                           ;arp.c: 34: ethernetController_dropPacket(frame);
  9777  00286C  C0FC  F072         	movff	ARP_handleNewPacket@frame,ethernetController_dropPacket@frame
  9778  002870  C0FD  F073         	movff	ARP_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  9779  002874  ECD0  F023         	call	_ethernetController_dropPacket	;wreg free
  9780                           
  9781                           ;arp.c: 35: return;
  9782  002878  0012               	return	
  9783  00287A                     l902:
  9784                           
  9785                           ;arp.c: 36: }
  9786                           ;arp.c: 38: arp = ARP_parseFromRXBuffer(frame);
  9787  00287A  C0FC  F077         	movff	ARP_handleNewPacket@frame,ARP_parseFromRXBuffer@frame
  9788  00287E  C0FD  F078         	movff	ARP_handleNewPacket@frame+1,ARP_parseFromRXBuffer@frame+1
  9789  002882  EC3B  F008         	call	_ARP_parseFromRXBuffer	;wreg free
  9790  002886  EE21  F058         	lfsr	2,ARP_handleNewPacket@arp
  9791  00288A  0E1F               	movlw	31
  9792  00288C                     u10611:
  9793  00288C  CFEB FFDB          	movff	plusw0,plusw2
  9794  002890  06E8               	decf	wreg,f,c
  9795  002892  E2FC               	bc	u10611
  9796                           
  9797                           ;arp.c: 39: if (arp.err.code != (uint16_t)0) {
  9798  002894  0101               	movlb	1	; () banked
  9799  002896  5176               	movf	(ARP_handleNewPacket@arp+30)& (0+255),w,b
  9800  002898  1177               	iorwf	(ARP_handleNewPacket@arp+31)& (0+255),w,b
  9801  00289A  B4D8               	btfsc	status,2,c
  9802  00289C  D00E               	goto	l904
  9803                           
  9804                           ; BSR set to: 1
  9805                           ;arp.c: 40: ethernetController_dropPacket(frame);
  9806  00289E  C0FC  F072         	movff	ARP_handleNewPacket@frame,ethernetController_dropPacket@frame
  9807  0028A2  C0FD  F073         	movff	ARP_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  9808  0028A6  ECD0  F023         	call	_ethernetController_dropPacket	;wreg free
  9809                           
  9810                           ;arp.c: 41: UARTTransmitText("[Invalid ARP Message was discarded.]\r\n");
  9811  0028AA  0E07               	movlw	low STR_62
  9812  0028AC  0100               	movlb	0	; () banked
  9813  0028AE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9814  0028B0  0E7D               	movlw	high STR_62
  9815  0028B2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9816  0028B4  EC34  F022         	call	_UARTTransmitText	;wreg free
  9817                           
  9818                           ;arp.c: 42: return;
  9819  0028B8  0012               	return	
  9820  0028BA                     l904:
  9821                           
  9822                           ;arp.c: 43: }
  9823                           ;arp.c: 44: UARTTransmitText("[");
  9824  0028BA  0ECE               	movlw	low (STR_65+3)
  9825  0028BC  0100               	movlb	0	; () banked
  9826  0028BE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9827  0028C0  0E7F               	movlw	high (STR_65+3)
  9828  0028C2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9829  0028C4  EC34  F022         	call	_UARTTransmitText	;wreg free
  9830                           
  9831                           ;arp.c: 45: UARTTransmitText(macToString(arp.senderMACAddress));
  9832  0028C8  EE21  F060         	lfsr	2,ARP_handleNewPacket@arp+8
  9833  0028CC  EE00  F07A         	lfsr	0,macToString@addr
  9834  0028D0  0E05               	movlw	5
  9835  0028D2                     u10631:
  9836  0028D2  CFDB FFEB          	movff	plusw2,plusw0
  9837  0028D6  06E8               	decf	wreg,f,c
  9838  0028D8  E2FC               	bc	u10631
  9839  0028DA  ECA5  F018         	call	_macToString	;wreg free
  9840  0028DE  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  9841  0028E2  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  9842  0028E6  EC34  F022         	call	_UARTTransmitText	;wreg free
  9843                           
  9844                           ;arp.c: 46: UARTTransmitText(", ");
  9845  0028EA  0E45               	movlw	low (STR_40+17)
  9846  0028EC  0100               	movlb	0	; () banked
  9847  0028EE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9848  0028F0  0E7E               	movlw	high (STR_40+17)
  9849  0028F2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9850  0028F4  EC34  F022         	call	_UARTTransmitText	;wreg free
  9851                           
  9852                           ;arp.c: 47: UARTTransmitText(ipAdressToString(arp.senderIPAddress));
  9853  0028F8  C166  F067         	movff	ARP_handleNewPacket@arp+14,ipAdressToString@ip
  9854  0028FC  C167  F068         	movff	ARP_handleNewPacket@arp+15,ipAdressToString@ip+1
  9855  002900  C168  F069         	movff	ARP_handleNewPacket@arp+16,ipAdressToString@ip+2
  9856  002904  C169  F06A         	movff	ARP_handleNewPacket@arp+17,ipAdressToString@ip+3
  9857  002908  EC55  F012         	call	_ipAdressToString	;wreg free
  9858  00290C  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  9859  002910  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  9860  002914  EC34  F022         	call	_UARTTransmitText	;wreg free
  9861                           
  9862                           ;arp.c: 48: UARTTransmitText("]->[");
  9863  002918  0ECB               	movlw	low STR_65
  9864  00291A  0100               	movlb	0	; () banked
  9865  00291C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9866  00291E  0E7F               	movlw	high STR_65
  9867  002920  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9868  002922  EC34  F022         	call	_UARTTransmitText	;wreg free
  9869                           
  9870                           ;arp.c: 49: UARTTransmitText(macToString(arp.targetMACAddress));
  9871  002926  EE21  F06A         	lfsr	2,ARP_handleNewPacket@arp+18
  9872  00292A  EE00  F07A         	lfsr	0,macToString@addr
  9873  00292E  0E05               	movlw	5
  9874  002930                     u10641:
  9875  002930  CFDB FFEB          	movff	plusw2,plusw0
  9876  002934  06E8               	decf	wreg,f,c
  9877  002936  E2FC               	bc	u10641
  9878  002938  ECA5  F018         	call	_macToString	;wreg free
  9879  00293C  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  9880  002940  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  9881  002944  EC34  F022         	call	_UARTTransmitText	;wreg free
  9882                           
  9883                           ;arp.c: 50: UARTTransmitText(", ");
  9884  002948  0E45               	movlw	low (STR_40+17)
  9885  00294A  0100               	movlb	0	; () banked
  9886  00294C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9887  00294E  0E7E               	movlw	high (STR_40+17)
  9888  002950  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9889  002952  EC34  F022         	call	_UARTTransmitText	;wreg free
  9890                           
  9891                           ;arp.c: 51: UARTTransmitText(ipAdressToString(arp.targetIPAddress));
  9892  002956  C170  F067         	movff	ARP_handleNewPacket@arp+24,ipAdressToString@ip
  9893  00295A  C171  F068         	movff	ARP_handleNewPacket@arp+25,ipAdressToString@ip+1
  9894  00295E  C172  F069         	movff	ARP_handleNewPacket@arp+26,ipAdressToString@ip+2
  9895  002962  C173  F06A         	movff	ARP_handleNewPacket@arp+27,ipAdressToString@ip+3
  9896  002966  EC55  F012         	call	_ipAdressToString	;wreg free
  9897  00296A  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  9898  00296E  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  9899  002972  EC34  F022         	call	_UARTTransmitText	;wreg free
  9900                           
  9901                           ;arp.c: 52: UARTTransmitText("]");
  9902  002976  0EFA               	movlw	low (STR_18+1)
  9903  002978  0100               	movlb	0	; () banked
  9904  00297A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9905  00297C  0E7F               	movlw	high (STR_18+1)
  9906  00297E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9907  002980  EC34  F022         	call	_UARTTransmitText	;wreg free
  9908                           
  9909                           ;arp.c: 53: if (arp.fIsProbe)
  9910  002984  0101               	movlb	1	; () banked
  9911  002986  A374               	btfss	(ARP_handleNewPacket@arp+28)& (0+255),1,b
  9912  002988  D007               	goto	l905
  9913                           
  9914                           ; BSR set to: 1
  9915                           ;arp.c: 54: UARTTransmitText("[IsProbe]");
  9916  00298A  0E75               	movlw	low STR_68
  9917  00298C  0100               	movlb	0	; () banked
  9918  00298E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9919  002990  0E7F               	movlw	high STR_68
  9920  002992  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9921  002994  EC34  F022         	call	_UARTTransmitText	;wreg free
  9922  002998                     l905:
  9923                           
  9924                           ;arp.c: 55: if (arp.fIsGratuitous)
  9925  002998  0101               	movlb	1	; () banked
  9926  00299A  A174               	btfss	(ARP_handleNewPacket@arp+28)& (0+255),0,b
  9927  00299C  D007               	goto	l906
  9928                           
  9929                           ; BSR set to: 1
  9930                           ;arp.c: 56: UARTTransmitText("[IsGratuitous]");
  9931  00299E  0E0D               	movlw	low STR_69
  9932  0029A0  0100               	movlb	0	; () banked
  9933  0029A2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9934  0029A4  0E7F               	movlw	high STR_69
  9935  0029A6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9936  0029A8  EC34  F022         	call	_UARTTransmitText	;wreg free
  9937  0029AC                     l906:
  9938                           
  9939                           ;arp.c: 58: ARP_sendReply(arp);
  9940  0029AC  EE21  F058         	lfsr	2,ARP_handleNewPacket@arp
  9941  0029B0  EE01  F000         	lfsr	0,ARP_sendReply@request
  9942  0029B4  0E1F               	movlw	31
  9943  0029B6                     u10671:
  9944  0029B6  CFDB FFEB          	movff	plusw2,plusw0
  9945  0029BA  06E8               	decf	wreg,f,c
  9946  0029BC  E2FC               	bc	u10671
  9947  0029BE  ECFF  F014         	call	_ARP_sendReply	;wreg free
  9948                           
  9949                           ;arp.c: 59: ARP_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getMillis());
  9950  0029C2  EE21  F060         	lfsr	2,ARP_handleNewPacket@arp+8
  9951  0029C6  EE00  F064         	lfsr	0,ARP_setNewEntry@mac
  9952  0029CA  0E05               	movlw	5
  9953  0029CC                     u10681:
  9954  0029CC  CFDB FFEB          	movff	plusw2,plusw0
  9955  0029D0  06E8               	decf	wreg,f,c
  9956  0029D2  E2FC               	bc	u10681
  9957  0029D4  C166  F06A         	movff	ARP_handleNewPacket@arp+14,ARP_setNewEntry@ip
  9958  0029D8  C167  F06B         	movff	ARP_handleNewPacket@arp+15,ARP_setNewEntry@ip+1
  9959  0029DC  C168  F06C         	movff	ARP_handleNewPacket@arp+16,ARP_setNewEntry@ip+2
  9960  0029E0  C169  F06D         	movff	ARP_handleNewPacket@arp+17,ARP_setNewEntry@ip+3
  9961  0029E4  EC3A  F026         	call	_getMillis	;wreg free
  9962  0029E8  C060  F06E         	movff	?_getMillis,ARP_setNewEntry@timestamp
  9963  0029EC  C061  F06F         	movff	?_getMillis+1,ARP_setNewEntry@timestamp+1
  9964  0029F0  C062  F070         	movff	?_getMillis+2,ARP_setNewEntry@timestamp+2
  9965  0029F4  C063  F071         	movff	?_getMillis+3,ARP_setNewEntry@timestamp+3
  9966  0029F8  EC24  F01A         	call	_ARP_setNewEntry	;wreg free
  9967  0029FC  0012               	return		;funcret
  9968  0029FE                     __end_of_ARP_handleNewPacket:
  9969                           	opt stack 0
  9970                           tblptru	equ	0xFF8
  9971                           tblptrh	equ	0xFF7
  9972                           tblptrl	equ	0xFF6
  9973                           tablat	equ	0xFF5
  9974                           prodh	equ	0xFF4
  9975                           prodl	equ	0xFF3
  9976                           intcon	equ	0xFF2
  9977                           intcon3	equ	0xFF0
  9978                           indf0	equ	0xFEF
  9979                           postinc0	equ	0xFEE
  9980                           plusw0	equ	0xFEB
  9981                           fsr0h	equ	0xFEA
  9982                           fsr0l	equ	0xFE9
  9983                           wreg	equ	0xFE8
  9984                           postinc1	equ	0xFE6
  9985                           postdec1	equ	0xFE5
  9986                           plusw1	equ	0xFE3
  9987                           fsr1h	equ	0xFE2
  9988                           fsr1l	equ	0xFE1
  9989                           indf2	equ	0xFDF
  9990                           postinc2	equ	0xFDE
  9991                           postdec2	equ	0xFDD
  9992                           plusw2	equ	0xFDB
  9993                           fsr2h	equ	0xFDA
  9994                           fsr2l	equ	0xFD9
  9995                           status	equ	0xFD8
  9996                           
  9997 ;; *************** function _getMillis *****************
  9998 ;; Defined at:
  9999 ;;		line 33 in file "src/stack/time.c"
 10000 ;; Parameters:    Size  Location     Type
 10001 ;;		None
 10002 ;; Auto vars:     Size  Location     Type
 10003 ;;		None
 10004 ;; Return value:  Size  Location     Type
 10005 ;;                  4    0[BANK0 ] unsigned long 
 10006 ;; Registers used:
 10007 ;;		None
 10008 ;; Tracked objects:
 10009 ;;		On entry : 0/0
 10010 ;;		On exit  : 0/0
 10011 ;;		Unchanged: 0/0
 10012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10013 ;;      Params:         0       4       0       0       0       0       0       0       0
 10014 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10015 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10016 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10017 ;;Total ram usage:        4 bytes
 10018 ;; Hardware stack levels used:    1
 10019 ;; Hardware stack levels required when called:    4
 10020 ;; This function calls:
 10021 ;;		Nothing
 10022 ;; This function is called by:
 10023 ;;		_ethernet_rxGetNewFrame
 10024 ;;		_ARP_handleNewPacket
 10025 ;;		_ARP_probe
 10026 ;;		_ARP_checkForEntry
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           	psect	text29
 10031  004C74                     __ptext29:
 10032                           	opt stack 0
 10033  004C74                     _getMillis:
 10034                           	opt stack 23
 10035                           
 10036                           ;time.c: 34: return time;
 10037                           
 10038                           ;incstack = 0
 10039  004C74  C029  F060         	movff	_time,?_getMillis	;volatile
 10040  004C78  C02A  F061         	movff	_time+1,?_getMillis+1	;volatile
 10041  004C7C  C02B  F062         	movff	_time+2,?_getMillis+2	;volatile
 10042  004C80  C02C  F063         	movff	_time+3,?_getMillis+3	;volatile
 10043  004C84  0012               	return		;funcret
 10044  004C86                     __end_of_getMillis:
 10045                           	opt stack 0
 10046                           tblptru	equ	0xFF8
 10047                           tblptrh	equ	0xFF7
 10048                           tblptrl	equ	0xFF6
 10049                           tablat	equ	0xFF5
 10050                           prodh	equ	0xFF4
 10051                           prodl	equ	0xFF3
 10052                           intcon	equ	0xFF2
 10053                           intcon3	equ	0xFF0
 10054                           indf0	equ	0xFEF
 10055                           postinc0	equ	0xFEE
 10056                           plusw0	equ	0xFEB
 10057                           fsr0h	equ	0xFEA
 10058                           fsr0l	equ	0xFE9
 10059                           wreg	equ	0xFE8
 10060                           postinc1	equ	0xFE6
 10061                           postdec1	equ	0xFE5
 10062                           plusw1	equ	0xFE3
 10063                           fsr1h	equ	0xFE2
 10064                           fsr1l	equ	0xFE1
 10065                           indf2	equ	0xFDF
 10066                           postinc2	equ	0xFDE
 10067                           postdec2	equ	0xFDD
 10068                           plusw2	equ	0xFDB
 10069                           fsr2h	equ	0xFDA
 10070                           fsr2l	equ	0xFD9
 10071                           status	equ	0xFD8
 10072                           
 10073 ;; *************** function _ethernetController_dropPacket *****************
 10074 ;; Defined at:
 10075 ;;		line 378 in file "src/enc424j600/ENC424J600.c"
 10076 ;; Parameters:    Size  Location     Type
 10077 ;;  frame           2   18[BANK0 ] PTR struct ethernetFrame
 10078 ;;		 -> stack.ethernet(15), stack(122), 
 10079 ;; Auto vars:     Size  Location     Type
 10080 ;;		None
 10081 ;; Return value:  Size  Location     Type
 10082 ;;                  1    wreg      void 
 10083 ;; Registers used:
 10084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10085 ;; Tracked objects:
 10086 ;;		On entry : 0/0
 10087 ;;		On exit  : 0/0
 10088 ;;		Unchanged: 0/0
 10089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10090 ;;      Params:         0       2       0       0       0       0       0       0       0
 10091 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10092 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10093 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10094 ;;Total ram usage:        2 bytes
 10095 ;; Hardware stack levels used:    1
 10096 ;; Hardware stack levels required when called:    8
 10097 ;; This function calls:
 10098 ;;		_ENC424J600_setRXTailPointer
 10099 ;;		_ENC424J600_writeSingleByte
 10100 ;;		_ethernetController_getNextPacketPointer
 10101 ;; This function is called by:
 10102 ;;		_ethernet_rxGetNewFrame
 10103 ;;		_ARP_handleNewPacket
 10104 ;;		_ipv4_handleNewPacket
 10105 ;; This function uses a non-reentrant model
 10106 ;;
 10107                           
 10108                           	psect	text30
 10109  0047A0                     __ptext30:
 10110                           	opt stack 0
 10111  0047A0                     _ethernetController_dropPacket:
 10112                           	opt stack 19
 10113                           
 10114                           ;ENC424J600.c: 393: if (ethernetController_getNextPacketPointer() == 0x3000) {
 10115                           
 10116                           ;incstack = 0
 10117  0047A0  EC64  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
 10118  0047A4  0E30               	movlw	48
 10119  0047A6  0100               	movlb	0	; () banked
 10120  0047A8  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 10121  0047AA  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 10122  0047AC  A4D8               	btfss	status,2,c
 10123  0047AE  D007               	goto	l187
 10124                           
 10125                           ; BSR set to: 0
 10126                           ;ENC424J600.c: 394: ENC424J600_setRXTailPointer(0x5FFF - 1);
 10127  0047B0  0E5F               	movlw	95
 10128  0047B2  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 10129  0047B4  0EFE               	movlw	254
 10130  0047B6  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 10131  0047B8  EC09  F025         	call	_ENC424J600_setRXTailPointer	;wreg free
 10132                           
 10133                           ;ENC424J600.c: 395: } else {
 10134  0047BC  D00B               	goto	l188
 10135  0047BE                     l187:
 10136                           
 10137                           ;ENC424J600.c: 396: ENC424J600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
 10138  0047BE  EC64  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
 10139  0047C2  0EFE               	movlw	254
 10140  0047C4  0100               	movlb	0	; () banked
 10141  0047C6  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 10142  0047C8  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 10143  0047CA  0EFF               	movlw	255
 10144  0047CC  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 10145  0047CE  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 10146  0047D0  EC09  F025         	call	_ENC424J600_setRXTailPointer	;wreg free
 10147  0047D4                     l188:
 10148                           
 10149                           ;ENC424J600.c: 397: }
 10150                           ;ENC424J600.c: 399: ENC424J600_writeSingleByte(0b11001100);
 10151  0047D4  0ECC               	movlw	204
 10152  0047D6  EC2E  F026         	call	_ENC424J600_writeSingleByte
 10153  0047DA  0012               	return		;funcret
 10154  0047DC                     __end_of_ethernetController_dropPacket:
 10155                           	opt stack 0
 10156                           tblptru	equ	0xFF8
 10157                           tblptrh	equ	0xFF7
 10158                           tblptrl	equ	0xFF6
 10159                           tablat	equ	0xFF5
 10160                           prodh	equ	0xFF4
 10161                           prodl	equ	0xFF3
 10162                           intcon	equ	0xFF2
 10163                           intcon3	equ	0xFF0
 10164                           indf0	equ	0xFEF
 10165                           postinc0	equ	0xFEE
 10166                           plusw0	equ	0xFEB
 10167                           fsr0h	equ	0xFEA
 10168                           fsr0l	equ	0xFE9
 10169                           wreg	equ	0xFE8
 10170                           postinc1	equ	0xFE6
 10171                           postdec1	equ	0xFE5
 10172                           plusw1	equ	0xFE3
 10173                           fsr1h	equ	0xFE2
 10174                           fsr1l	equ	0xFE1
 10175                           indf2	equ	0xFDF
 10176                           postinc2	equ	0xFDE
 10177                           postdec2	equ	0xFDD
 10178                           plusw2	equ	0xFDB
 10179                           fsr2h	equ	0xFDA
 10180                           fsr2l	equ	0xFD9
 10181                           status	equ	0xFD8
 10182                           
 10183 ;; *************** function _ARP_sendReply *****************
 10184 ;; Defined at:
 10185 ;;		line 209 in file "src/stack/protocols/arp.c"
 10186 ;; Parameters:    Size  Location     Type
 10187 ;;  request        32    0[BANK1 ] struct ARP_message
 10188 ;; Auto vars:     Size  Location     Type
 10189 ;;  reply          32   56[BANK1 ] struct ARP_message
 10190 ;;  targetMAC       6   38[BANK1 ] struct macaddress
 10191 ;;  senderMAC       6   32[BANK1 ] struct macaddress
 10192 ;;  myIP            4   52[BANK1 ] struct ipv4_address
 10193 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
 10194 ;;  senderIP        4   44[BANK1 ] struct ipv4_address
 10195 ;; Return value:  Size  Location     Type
 10196 ;;                  1    wreg      void 
 10197 ;; Registers used:
 10198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10204 ;;      Params:         0       0      32       0       0       0       0       0       0
 10205 ;;      Locals:         0       0      56       0       0       0       0       0       0
 10206 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10207 ;;      Totals:         0       0      88       0       0       0       0       0       0
 10208 ;;Total ram usage:       88 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; Hardware stack levels required when called:   10
 10211 ;; This function calls:
 10212 ;;		_ARP_send
 10213 ;;		_UARTTransmitText
 10214 ;;		_ethernetController_getMacAddress
 10215 ;;		_ipAdressToString
 10216 ;;		_ipv4_cmp
 10217 ;;		_ipv4_getIPSourceAddress
 10218 ;;		_macToString
 10219 ;; This function is called by:
 10220 ;;		_ARP_handleNewPacket
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224                           	psect	text31
 10225  0029FE                     __ptext31:
 10226                           	opt stack 0
 10227  0029FE                     _ARP_sendReply:
 10228                           	opt stack 17
 10229                           
 10230                           ;arp.c: 210: if (request.operation != ARP_REQUEST)
 10231                           
 10232                           ;incstack = 0
 10233  0029FE  0101               	movlb	1	; () banked
 10234  002A00  0506               	decf	(ARP_sendReply@request+6)& (0+255),w,b
 10235  002A02  1107               	iorwf	(ARP_sendReply@request+7)& (0+255),w,b
 10236  002A04  A4D8               	btfss	status,2,c
 10237  002A06  0012               	return	
 10238                           
 10239                           ; BSR set to: 1
 10240                           ;arp.c: 213: ipv4_address_t myIP = ipv4_getIPSourceAddress();
 10241                           
 10242                           ; BSR set to: 1
 10243                           
 10244                           ; BSR set to: 1
 10245                           ;arp.c: 211: return;
 10246  002A08  EC43  F026         	call	_ipv4_getIPSourceAddress	;wreg free
 10247  002A0C  C060  F134         	movff	?_ipv4_getIPSourceAddress,ARP_sendReply@myIP
 10248  002A10  C061  F135         	movff	?_ipv4_getIPSourceAddress+1,ARP_sendReply@myIP+1
 10249  002A14  C062  F136         	movff	?_ipv4_getIPSourceAddress+2,ARP_sendReply@myIP+2
 10250  002A18  C063  F137         	movff	?_ipv4_getIPSourceAddress+3,ARP_sendReply@myIP+3
 10251                           
 10252                           ;arp.c: 214: if (!(ipv4_cmp(&request.targetIPAddress, &myIP)))
 10253  002A1C  0E18               	movlw	low (ARP_sendReply@request+24)
 10254  002A1E  0100               	movlb	0	; () banked
 10255  002A20  6F60               	movwf	ipv4_cmp@a& (0+255),b
 10256  002A22  0E01               	movlw	high (ARP_sendReply@request+24)
 10257  002A24  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 10258  002A26  0E34               	movlw	low ARP_sendReply@myIP
 10259  002A28  6F62               	movwf	ipv4_cmp@b& (0+255),b
 10260  002A2A  0E01               	movlw	high ARP_sendReply@myIP
 10261  002A2C  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 10262  002A2E  ECAF  F023         	call	_ipv4_cmp	;wreg free
 10263  002A32  0100               	movlb	0	; () banked
 10264  002A34  A0D8               	btfss	status,0,c
 10265  002A36  0012               	return	
 10266                           
 10267                           ; BSR set to: 0
 10268                           ;arp.c: 217: ARP_message_t reply;
 10269                           ;arp.c: 218: ipv4_address_t senderIP;
 10270                           ;arp.c: 219: ipv4_address_t targetIP;
 10271                           ;arp.c: 220: macaddress_t senderMAC;
 10272                           ;arp.c: 221: macaddress_t targetMAC;
 10273                           ;arp.c: 223: senderMAC = ethernetController_getMacAddress();
 10274                           
 10275                           ; BSR set to: 0
 10276                           
 10277                           ; BSR set to: 0
 10278                           ;arp.c: 215: return;
 10279  002A38  ECF3  F01F         	call	_ethernetController_getMacAddress	;wreg free
 10280  002A3C  EE21  F020         	lfsr	2,ARP_sendReply@senderMAC
 10281  002A40  0E05               	movlw	5
 10282  002A42                     u10221:
 10283  002A42  CFEB FFDB          	movff	plusw0,plusw2
 10284  002A46  06E8               	decf	wreg,f,c
 10285  002A48  E2FC               	bc	u10221
 10286                           
 10287                           ;arp.c: 224: targetMAC = request.senderMACAddress;
 10288  002A4A  EE21  F008         	lfsr	2,ARP_sendReply@request+8
 10289  002A4E  EE11  F026         	lfsr	1,ARP_sendReply@targetMAC
 10290  002A52  0E05               	movlw	5
 10291  002A54                     u10231:
 10292  002A54  CFDB FFE3          	movff	plusw2,plusw1
 10293  002A58  06E8               	decf	wreg,f,c
 10294  002A5A  E2FC               	bc	u10231
 10295                           
 10296                           ;arp.c: 225: senderIP = ipv4_getIPSourceAddress();
 10297  002A5C  EC43  F026         	call	_ipv4_getIPSourceAddress	;wreg free
 10298  002A60  C060  F12C         	movff	?_ipv4_getIPSourceAddress,ARP_sendReply@senderIP
 10299  002A64  C061  F12D         	movff	?_ipv4_getIPSourceAddress+1,ARP_sendReply@senderIP+1
 10300  002A68  C062  F12E         	movff	?_ipv4_getIPSourceAddress+2,ARP_sendReply@senderIP+2
 10301  002A6C  C063  F12F         	movff	?_ipv4_getIPSourceAddress+3,ARP_sendReply@senderIP+3
 10302                           
 10303                           ;arp.c: 226: targetIP = request.senderIPAddress;
 10304  002A70  C10E  F130         	movff	ARP_sendReply@request+14,ARP_sendReply@targetIP
 10305  002A74  C10F  F131         	movff	ARP_sendReply@request+15,ARP_sendReply@targetIP+1
 10306  002A78  C110  F132         	movff	ARP_sendReply@request+16,ARP_sendReply@targetIP+2
 10307  002A7C  C111  F133         	movff	ARP_sendReply@request+17,ARP_sendReply@targetIP+3
 10308                           
 10309                           ;arp.c: 228: reply.hlen = 6;
 10310  002A80  0E06               	movlw	6
 10311  002A82  0101               	movlb	1	; () banked
 10312  002A84  6F3C               	movwf	(ARP_sendReply@reply+4)& (0+255),b
 10313                           
 10314                           ; BSR set to: 1
 10315                           ;arp.c: 229: reply.plen = 4;
 10316  002A86  0E04               	movlw	4
 10317  002A88  6F3D               	movwf	(ARP_sendReply@reply+5)& (0+255),b
 10318                           
 10319                           ; BSR set to: 1
 10320                           ;arp.c: 230: reply.htype = ARP_HTYPE_ETHERNET;
 10321  002A8A  0E00               	movlw	0
 10322  002A8C  6F39               	movwf	(ARP_sendReply@reply+1)& (0+255),b
 10323  002A8E  0E01               	movlw	1
 10324  002A90  6F38               	movwf	ARP_sendReply@reply& (0+255),b
 10325                           
 10326                           ; BSR set to: 1
 10327                           ;arp.c: 231: reply.ptype = ARP_PTYPE_IPv4;
 10328  002A92  0E08               	movlw	8
 10329  002A94  6F3B               	movwf	(ARP_sendReply@reply+3)& (0+255),b
 10330  002A96  0E00               	movlw	0
 10331  002A98  6F3A               	movwf	(ARP_sendReply@reply+2)& (0+255),b
 10332                           
 10333                           ; BSR set to: 1
 10334                           ;arp.c: 232: reply.operation = ARP_REPLY;
 10335  002A9A  0E00               	movlw	0
 10336  002A9C  6F3F               	movwf	(ARP_sendReply@reply+7)& (0+255),b
 10337  002A9E  0E02               	movlw	2
 10338  002AA0  6F3E               	movwf	(ARP_sendReply@reply+6)& (0+255),b
 10339                           
 10340                           ; BSR set to: 1
 10341                           ;arp.c: 233: reply.senderIPAddress = senderIP;
 10342  002AA2  C12C  F146         	movff	ARP_sendReply@senderIP,ARP_sendReply@reply+14
 10343  002AA6  C12D  F147         	movff	ARP_sendReply@senderIP+1,ARP_sendReply@reply+15
 10344  002AAA  C12E  F148         	movff	ARP_sendReply@senderIP+2,ARP_sendReply@reply+16
 10345  002AAE  C12F  F149         	movff	ARP_sendReply@senderIP+3,ARP_sendReply@reply+17
 10346                           
 10347                           ; BSR set to: 1
 10348                           ;arp.c: 234: reply.senderMACAddress = senderMAC;
 10349  002AB2  EE21  F020         	lfsr	2,ARP_sendReply@senderMAC
 10350  002AB6  EE11  F040         	lfsr	1,ARP_sendReply@reply+8
 10351  002ABA  0E05               	movlw	5
 10352  002ABC                     u10241:
 10353  002ABC  CFDB FFE3          	movff	plusw2,plusw1
 10354  002AC0  06E8               	decf	wreg,f,c
 10355  002AC2  E2FC               	bc	u10241
 10356                           
 10357                           ; BSR set to: 1
 10358                           ;arp.c: 235: reply.targetIPAddress = targetIP;
 10359  002AC4  C130  F150         	movff	ARP_sendReply@targetIP,ARP_sendReply@reply+24
 10360  002AC8  C131  F151         	movff	ARP_sendReply@targetIP+1,ARP_sendReply@reply+25
 10361  002ACC  C132  F152         	movff	ARP_sendReply@targetIP+2,ARP_sendReply@reply+26
 10362  002AD0  C133  F153         	movff	ARP_sendReply@targetIP+3,ARP_sendReply@reply+27
 10363                           
 10364                           ; BSR set to: 1
 10365                           ;arp.c: 236: reply.targetMACAddress = targetMAC;
 10366  002AD4  EE21  F026         	lfsr	2,ARP_sendReply@targetMAC
 10367  002AD8  EE11  F04A         	lfsr	1,ARP_sendReply@reply+18
 10368  002ADC  0E05               	movlw	5
 10369  002ADE                     u10251:
 10370  002ADE  CFDB FFE3          	movff	plusw2,plusw1
 10371  002AE2  06E8               	decf	wreg,f,c
 10372  002AE4  E2FC               	bc	u10251
 10373                           
 10374                           ; BSR set to: 1
 10375                           ;arp.c: 238: ARP_send(reply);
 10376  002AE6  EE21  F038         	lfsr	2,ARP_sendReply@reply
 10377  002AEA  EE00  F0A7         	lfsr	0,ARP_send@arp
 10378  002AEE  0E1F               	movlw	31
 10379  002AF0                     u10261:
 10380  002AF0  CFDB FFEB          	movff	plusw2,plusw0
 10381  002AF4  06E8               	decf	wreg,f,c
 10382  002AF6  E2FC               	bc	u10261
 10383  002AF8  EC4C  F00D         	call	_ARP_send	;wreg free
 10384                           
 10385                           ;arp.c: 240: UARTTransmitText("[Reply sent to ");
 10386  002AFC  0EED               	movlw	low STR_72
 10387  002AFE  0100               	movlb	0	; () banked
 10388  002B00  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10389  002B02  0E7E               	movlw	high STR_72
 10390  002B04  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10391  002B06  EC34  F022         	call	_UARTTransmitText	;wreg free
 10392                           
 10393                           ;arp.c: 241: UARTTransmitText(macToString(reply.targetMACAddress));
 10394  002B0A  EE21  F04A         	lfsr	2,ARP_sendReply@reply+18
 10395  002B0E  EE00  F07A         	lfsr	0,macToString@addr
 10396  002B12  0E05               	movlw	5
 10397  002B14                     u10271:
 10398  002B14  CFDB FFEB          	movff	plusw2,plusw0
 10399  002B18  06E8               	decf	wreg,f,c
 10400  002B1A  E2FC               	bc	u10271
 10401  002B1C  ECA5  F018         	call	_macToString	;wreg free
 10402  002B20  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 10403  002B24  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 10404  002B28  EC34  F022         	call	_UARTTransmitText	;wreg free
 10405                           
 10406                           ;arp.c: 242: UARTTransmitText(", ");
 10407  002B2C  0E45               	movlw	low (STR_40+17)
 10408  002B2E  0100               	movlb	0	; () banked
 10409  002B30  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10410  002B32  0E7E               	movlw	high (STR_40+17)
 10411  002B34  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10412  002B36  EC34  F022         	call	_UARTTransmitText	;wreg free
 10413                           
 10414                           ;arp.c: 243: UARTTransmitText(ipAdressToString(reply.targetIPAddress));
 10415  002B3A  C150  F067         	movff	ARP_sendReply@reply+24,ipAdressToString@ip
 10416  002B3E  C151  F068         	movff	ARP_sendReply@reply+25,ipAdressToString@ip+1
 10417  002B42  C152  F069         	movff	ARP_sendReply@reply+26,ipAdressToString@ip+2
 10418  002B46  C153  F06A         	movff	ARP_sendReply@reply+27,ipAdressToString@ip+3
 10419  002B4A  EC55  F012         	call	_ipAdressToString	;wreg free
 10420  002B4E  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 10421  002B52  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 10422  002B56  EC34  F022         	call	_UARTTransmitText	;wreg free
 10423                           
 10424                           ;arp.c: 244: UARTTransmitText("]");
 10425  002B5A  0EFA               	movlw	low (STR_18+1)
 10426  002B5C  0100               	movlb	0	; () banked
 10427  002B5E  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10428  002B60  0E7F               	movlw	high (STR_18+1)
 10429  002B62  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10430  002B64  EC34  F022         	call	_UARTTransmitText	;wreg free
 10431  002B68  0012               	return		;funcret
 10432  002B6A                     __end_of_ARP_sendReply:
 10433                           	opt stack 0
 10434                           tblptru	equ	0xFF8
 10435                           tblptrh	equ	0xFF7
 10436                           tblptrl	equ	0xFF6
 10437                           tablat	equ	0xFF5
 10438                           prodh	equ	0xFF4
 10439                           prodl	equ	0xFF3
 10440                           intcon	equ	0xFF2
 10441                           intcon3	equ	0xFF0
 10442                           indf0	equ	0xFEF
 10443                           postinc0	equ	0xFEE
 10444                           plusw0	equ	0xFEB
 10445                           fsr0h	equ	0xFEA
 10446                           fsr0l	equ	0xFE9
 10447                           wreg	equ	0xFE8
 10448                           postinc1	equ	0xFE6
 10449                           postdec1	equ	0xFE5
 10450                           plusw1	equ	0xFE3
 10451                           fsr1h	equ	0xFE2
 10452                           fsr1l	equ	0xFE1
 10453                           indf2	equ	0xFDF
 10454                           postinc2	equ	0xFDE
 10455                           postdec2	equ	0xFDD
 10456                           plusw2	equ	0xFDB
 10457                           fsr2h	equ	0xFDA
 10458                           fsr2l	equ	0xFD9
 10459                           status	equ	0xFD8
 10460                           
 10461 ;; *************** function _macToString *****************
 10462 ;; Defined at:
 10463 ;;		line 163 in file "src/system/uart.c"
 10464 ;; Parameters:    Size  Location     Type
 10465 ;;  addr            6   26[BANK0 ] struct macaddress
 10466 ;; Auto vars:     Size  Location     Type
 10467 ;;  i               2   53[BANK0 ] int 
 10468 ;;  address        18   33[BANK0 ] unsigned char [18]
 10469 ;;  j               1   55[BANK0 ] unsigned char 
 10470 ;;  secondDigit     1   52[BANK0 ] unsigned char 
 10471 ;;  firstDigit      1   51[BANK0 ] unsigned char 
 10472 ;; Return value:  Size  Location     Type
 10473 ;;                  2   26[BANK0 ] PTR unsigned char 
 10474 ;; Registers used:
 10475 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10481 ;;      Params:         0       6       0       0       0       0       0       0       0
 10482 ;;      Locals:         0      23       0       0       0       0       0       0       0
 10483 ;;      Temps:          0       1       0       0       0       0       0       0       0
 10484 ;;      Totals:         0      30       0       0       0       0       0       0       0
 10485 ;;Total ram usage:       30 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; Hardware stack levels required when called:    4
 10488 ;; This function calls:
 10489 ;;		Nothing
 10490 ;; This function is called by:
 10491 ;;		_ethernet_rxGetNewFrame
 10492 ;;		_main
 10493 ;;		_ARP_handleNewPacket
 10494 ;;		_ARP_sendReply
 10495 ;;		_arpEntryToString
 10496 ;; This function uses a non-reentrant model
 10497 ;;
 10498                           
 10499                           	psect	text32
 10500  00314A                     __ptext32:
 10501                           	opt stack 0
 10502  00314A                     _macToString:
 10503                           	opt stack 26
 10504                           
 10505                           ;uart.c: 164: char address[] = "??:??:??:??:??:??";
 10506                           
 10507                           ;incstack = 0
 10508  00314A  EE22  F0B1         	lfsr	2,macToString@F5817
 10509  00314E  EE10  F081         	lfsr	1,macToString@address
 10510  003152  0E11               	movlw	17
 10511  003154                     u9011:
 10512  003154  CFDB FFE3          	movff	plusw2,plusw1
 10513  003158  06E8               	decf	wreg,f,c
 10514  00315A  E2FC               	bc	u9011
 10515                           
 10516                           ;uart.c: 165: uint8_t j = 0;
 10517  00315C  0E00               	movlw	0
 10518  00315E  0100               	movlb	0	; () banked
 10519  003160  6F97               	movwf	macToString@j& (0+255),b
 10520                           
 10521                           ; BSR set to: 0
 10522                           ;uart.c: 166: uint8_t firstDigit;
 10523                           ;uart.c: 167: uint8_t secondDigit;
 10524                           ;uart.c: 169: for (int i = 0; i < 6; i++) {
 10525  003162  0E00               	movlw	0
 10526  003164  6F96               	movwf	(macToString@i+1)& (0+255),b
 10527  003166  0E00               	movlw	0
 10528  003168  6F95               	movwf	macToString@i& (0+255),b
 10529                           
 10530                           ; BSR set to: 0
 10531  00316A  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 10532  00316C  D006               	goto	l793
 10533  00316E  5196               	movf	(macToString@i+1)& (0+255),w,b
 10534  003170  E16B               	bnz	l794
 10535  003172  0E06               	movlw	6
 10536  003174  5D95               	subwf	macToString@i& (0+255),w,b
 10537  003176  B0D8               	btfsc	status,0,c
 10538  003178  D067               	goto	u9060
 10539  00317A                     l793:
 10540                           
 10541                           ; BSR set to: 0
 10542                           ;uart.c: 170: firstDigit = ((addr.address[i] & 0xF0) >> 4)&0x0F;
 10543                           
 10544                           ; BSR set to: 0
 10545  00317A  0E7A               	movlw	low macToString@addr
 10546  00317C  2595               	addwf	macToString@i& (0+255),w,b
 10547  00317E  6ED9               	movwf	fsr2l,c
 10548  003180  0E00               	movlw	high macToString@addr
 10549  003182  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 10550  003184  6EDA               	movwf	fsr2h,c
 10551  003186  50DF               	movf	indf2,w,c
 10552  003188  6F80               	movwf	??_macToString& (0+255),b
 10553  00318A  3980               	swapf	??_macToString& (0+255),w,b
 10554  00318C  0B0F               	andlw	15
 10555  00318E  0B0F               	andlw	15
 10556  003190  6F93               	movwf	macToString@firstDigit& (0+255),b
 10557                           
 10558                           ;uart.c: 171: secondDigit = addr.address[i] & 0x0F;
 10559  003192  0E7A               	movlw	low macToString@addr
 10560  003194  2595               	addwf	macToString@i& (0+255),w,b
 10561  003196  6ED9               	movwf	fsr2l,c
 10562  003198  0E00               	movlw	high macToString@addr
 10563  00319A  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 10564  00319C  6EDA               	movwf	fsr2h,c
 10565  00319E  50DF               	movf	indf2,w,c
 10566  0031A0  0B0F               	andlw	15
 10567  0031A2  6F94               	movwf	macToString@secondDigit& (0+255),b
 10568                           
 10569                           ; BSR set to: 0
 10570                           ;uart.c: 173: firstDigit += 0x30;
 10571  0031A4  0E30               	movlw	48
 10572  0031A6  2793               	addwf	macToString@firstDigit& (0+255),f,b
 10573                           
 10574                           ; BSR set to: 0
 10575                           ;uart.c: 174: secondDigit += 0x30;
 10576  0031A8  0E30               	movlw	48
 10577  0031AA  2794               	addwf	macToString@secondDigit& (0+255),f,b
 10578                           
 10579                           ; BSR set to: 0
 10580                           ;uart.c: 176: if (firstDigit > '9') {
 10581  0031AC  0E39               	movlw	57
 10582  0031AE  6593               	cpfsgt	macToString@firstDigit& (0+255),b
 10583  0031B0  D00C               	goto	l795
 10584                           
 10585                           ; BSR set to: 0
 10586                           ;uart.c: 177: address[j++] = firstDigit + 7;
 10587  0031B2  5197               	movf	macToString@j& (0+255),w,b
 10588  0031B4  0D01               	mullw	1
 10589  0031B6  0E81               	movlw	low macToString@address
 10590  0031B8  24F3               	addwf	prodl,w,c
 10591  0031BA  6ED9               	movwf	fsr2l,c
 10592  0031BC  0E00               	movlw	high macToString@address
 10593  0031BE  20F4               	addwfc	prodh,w,c
 10594  0031C0  6EDA               	movwf	fsr2h,c
 10595  0031C2  5193               	movf	macToString@firstDigit& (0+255),w,b
 10596  0031C4  0F07               	addlw	7
 10597  0031C6  6EDF               	movwf	indf2,c
 10598  0031C8  D00A               	goto	l7731
 10599  0031CA                     l795:
 10600                           
 10601                           ; BSR set to: 0
 10602                           ;uart.c: 179: address[j++] = firstDigit;
 10603                           
 10604                           ; BSR set to: 0
 10605  0031CA  5197               	movf	macToString@j& (0+255),w,b
 10606  0031CC  0D01               	mullw	1
 10607  0031CE  0E81               	movlw	low macToString@address
 10608  0031D0  24F3               	addwf	prodl,w,c
 10609  0031D2  6ED9               	movwf	fsr2l,c
 10610  0031D4  0E00               	movlw	high macToString@address
 10611  0031D6  20F4               	addwfc	prodh,w,c
 10612  0031D8  6EDA               	movwf	fsr2h,c
 10613  0031DA  C093  FFDF         	movff	macToString@firstDigit,indf2
 10614  0031DE                     l7731:
 10615                           
 10616                           ; BSR set to: 0
 10617  0031DE  2B97               	incf	macToString@j& (0+255),f,b
 10618                           
 10619                           ; BSR set to: 0
 10620                           ;uart.c: 180: }
 10621                           ;uart.c: 181: if (secondDigit > '9') {
 10622                           
 10623                           ; BSR set to: 0
 10624  0031E0  0E39               	movlw	57
 10625  0031E2  6594               	cpfsgt	macToString@secondDigit& (0+255),b
 10626  0031E4  D00C               	goto	l797
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;uart.c: 182: address[j++] = secondDigit + 7;
 10630  0031E6  5197               	movf	macToString@j& (0+255),w,b
 10631  0031E8  0D01               	mullw	1
 10632  0031EA  0E81               	movlw	low macToString@address
 10633  0031EC  24F3               	addwf	prodl,w,c
 10634  0031EE  6ED9               	movwf	fsr2l,c
 10635  0031F0  0E00               	movlw	high macToString@address
 10636  0031F2  20F4               	addwfc	prodh,w,c
 10637  0031F4  6EDA               	movwf	fsr2h,c
 10638  0031F6  5194               	movf	macToString@secondDigit& (0+255),w,b
 10639  0031F8  0F07               	addlw	7
 10640  0031FA  6EDF               	movwf	indf2,c
 10641  0031FC  D00A               	goto	l7741
 10642  0031FE                     l797:
 10643                           
 10644                           ; BSR set to: 0
 10645                           ;uart.c: 184: address[j++] = secondDigit;
 10646                           
 10647                           ; BSR set to: 0
 10648  0031FE  5197               	movf	macToString@j& (0+255),w,b
 10649  003200  0D01               	mullw	1
 10650  003202  0E81               	movlw	low macToString@address
 10651  003204  24F3               	addwf	prodl,w,c
 10652  003206  6ED9               	movwf	fsr2l,c
 10653  003208  0E00               	movlw	high macToString@address
 10654  00320A  20F4               	addwfc	prodh,w,c
 10655  00320C  6EDA               	movwf	fsr2h,c
 10656  00320E  C094  FFDF         	movff	macToString@secondDigit,indf2
 10657  003212                     l7741:
 10658                           
 10659                           ; BSR set to: 0
 10660  003212  2B97               	incf	macToString@j& (0+255),f,b
 10661                           
 10662                           ; BSR set to: 0
 10663                           ;uart.c: 185: }
 10664                           ;uart.c: 187: if (i < 5) {
 10665                           
 10666                           ; BSR set to: 0
 10667  003214  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 10668  003216  D006               	goto	u9050
 10669  003218  5196               	movf	(macToString@i+1)& (0+255),w,b
 10670  00321A  E10F               	bnz	l7749
 10671  00321C  0E05               	movlw	5
 10672  00321E  5D95               	subwf	macToString@i& (0+255),w,b
 10673  003220  B0D8               	btfsc	status,0,c
 10674  003222  D00B               	goto	l799
 10675  003224                     u9050:
 10676                           
 10677                           ; BSR set to: 0
 10678                           ;uart.c: 188: address[j++] = ':';
 10679  003224  5197               	movf	macToString@j& (0+255),w,b
 10680  003226  0D01               	mullw	1
 10681  003228  0E81               	movlw	low macToString@address
 10682  00322A  24F3               	addwf	prodl,w,c
 10683  00322C  6ED9               	movwf	fsr2l,c
 10684  00322E  0E00               	movlw	high macToString@address
 10685  003230  20F4               	addwfc	prodh,w,c
 10686  003232  6EDA               	movwf	fsr2h,c
 10687  003234  0E3A               	movlw	58
 10688  003236  6EDF               	movwf	indf2,c
 10689                           
 10690                           ; BSR set to: 0
 10691  003238  2B97               	incf	macToString@j& (0+255),f,b
 10692  00323A                     l799:
 10693  00323A                     l7749:
 10694                           
 10695                           ; BSR set to: 0
 10696  00323A  4B95               	infsnz	macToString@i& (0+255),f,b
 10697  00323C  2B96               	incf	(macToString@i+1)& (0+255),f,b
 10698                           
 10699                           ; BSR set to: 0
 10700  00323E  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 10701  003240  D79C               	goto	l793
 10702  003242  5196               	movf	(macToString@i+1)& (0+255),w,b
 10703  003244  E101               	bnz	l7753
 10704  003246  D795               	goto	L1
 10705  003248                     u9060:
 10706  003248                     l794:
 10707  003248                     l7753:
 10708                           
 10709                           ; BSR set to: 0
 10710                           ;uart.c: 189: }
 10711                           ;uart.c: 190: }
 10712                           ;uart.c: 191: return &address;
 10713  003248  0E81               	movlw	low macToString@address
 10714  00324A  6F7A               	movwf	?_macToString& (0+255),b
 10715  00324C  0E00               	movlw	high macToString@address
 10716  00324E  6F7B               	movwf	(?_macToString+1)& (0+255),b
 10717  003250  0012               	return	
 10718  003252                     __end_of_macToString:
 10719                           	opt stack 0
 10720                           tblptru	equ	0xFF8
 10721                           tblptrh	equ	0xFF7
 10722                           tblptrl	equ	0xFF6
 10723                           tablat	equ	0xFF5
 10724                           prodh	equ	0xFF4
 10725                           prodl	equ	0xFF3
 10726                           intcon	equ	0xFF2
 10727                           intcon3	equ	0xFF0
 10728                           indf0	equ	0xFEF
 10729                           postinc0	equ	0xFEE
 10730                           plusw0	equ	0xFEB
 10731                           fsr0h	equ	0xFEA
 10732                           fsr0l	equ	0xFE9
 10733                           wreg	equ	0xFE8
 10734                           postinc1	equ	0xFE6
 10735                           postdec1	equ	0xFE5
 10736                           plusw1	equ	0xFE3
 10737                           fsr1h	equ	0xFE2
 10738                           fsr1l	equ	0xFE1
 10739                           indf2	equ	0xFDF
 10740                           postinc2	equ	0xFDE
 10741                           postdec2	equ	0xFDD
 10742                           plusw2	equ	0xFDB
 10743                           fsr2h	equ	0xFDA
 10744                           fsr2l	equ	0xFD9
 10745                           status	equ	0xFD8
 10746                           
 10747 ;; *************** function _ipv4_getIPSourceAddress *****************
 10748 ;; Defined at:
 10749 ;;		line 221 in file "src/stack/protocols/ipv4.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;		None
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;		None
 10754 ;; Return value:  Size  Location     Type
 10755 ;;                  4    0[BANK0 ] struct ipv4_address
 10756 ;; Registers used:
 10757 ;;		None
 10758 ;; Tracked objects:
 10759 ;;		On entry : 0/0
 10760 ;;		On exit  : 0/0
 10761 ;;		Unchanged: 0/0
 10762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10763 ;;      Params:         0       4       0       0       0       0       0       0       0
 10764 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10765 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10766 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10767 ;;Total ram usage:        4 bytes
 10768 ;; Hardware stack levels used:    1
 10769 ;; Hardware stack levels required when called:    4
 10770 ;; This function calls:
 10771 ;;		Nothing
 10772 ;; This function is called by:
 10773 ;;		_ARP_sendRequest
 10774 ;;		_ARP_sendReply
 10775 ;; This function uses a non-reentrant model
 10776 ;;
 10777                           
 10778                           	psect	text33
 10779  004C86                     __ptext33:
 10780                           	opt stack 0
 10781  004C86                     _ipv4_getIPSourceAddress:
 10782                           	opt stack 22
 10783                           
 10784                           ;ipv4.c: 222: return ipSource;
 10785                           
 10786                           ; BSR set to: 0
 10787                           ;incstack = 0
 10788  004C86  C1D4  F060         	movff	_ipSource,?_ipv4_getIPSourceAddress
 10789  004C8A  C1D5  F061         	movff	_ipSource+1,?_ipv4_getIPSourceAddress+1
 10790  004C8E  C1D6  F062         	movff	_ipSource+2,?_ipv4_getIPSourceAddress+2
 10791  004C92  C1D7  F063         	movff	_ipSource+3,?_ipv4_getIPSourceAddress+3
 10792  004C96  0012               	return		;funcret
 10793  004C98                     __end_of_ipv4_getIPSourceAddress:
 10794                           	opt stack 0
 10795                           tblptru	equ	0xFF8
 10796                           tblptrh	equ	0xFF7
 10797                           tblptrl	equ	0xFF6
 10798                           tablat	equ	0xFF5
 10799                           prodh	equ	0xFF4
 10800                           prodl	equ	0xFF3
 10801                           intcon	equ	0xFF2
 10802                           intcon3	equ	0xFF0
 10803                           indf0	equ	0xFEF
 10804                           postinc0	equ	0xFEE
 10805                           plusw0	equ	0xFEB
 10806                           fsr0h	equ	0xFEA
 10807                           fsr0l	equ	0xFE9
 10808                           wreg	equ	0xFE8
 10809                           postinc1	equ	0xFE6
 10810                           postdec1	equ	0xFE5
 10811                           plusw1	equ	0xFE3
 10812                           fsr1h	equ	0xFE2
 10813                           fsr1l	equ	0xFE1
 10814                           indf2	equ	0xFDF
 10815                           postinc2	equ	0xFDE
 10816                           postdec2	equ	0xFDD
 10817                           plusw2	equ	0xFDB
 10818                           fsr2h	equ	0xFDA
 10819                           fsr2l	equ	0xFD9
 10820                           status	equ	0xFD8
 10821                           
 10822 ;; *************** function _ipAdressToString *****************
 10823 ;; Defined at:
 10824 ;;		line 218 in file "src/system/uart.c"
 10825 ;; Parameters:    Size  Location     Type
 10826 ;;  ip              4    7[BANK0 ] struct ipv4_address
 10827 ;; Auto vars:     Size  Location     Type
 10828 ;;  i               1   28[BANK0 ] unsigned char 
 10829 ;;  hundreds        4   23[BANK0 ] unsigned char [4]
 10830 ;;  tens            4   19[BANK0 ] unsigned char [4]
 10831 ;;  ones            4   15[BANK0 ] unsigned char [4]
 10832 ;;  pointer         1   27[BANK0 ] unsigned char 
 10833 ;; Return value:  Size  Location     Type
 10834 ;;                  2    7[BANK0 ] PTR unsigned char 
 10835 ;; Registers used:
 10836 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10842 ;;      Params:         0       4       0       0       0       0       0       0       0
 10843 ;;      Locals:         0      14       0       0       0       0       0       0       0
 10844 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10845 ;;      Totals:         0      22       0       0       0       0       0       0       0
 10846 ;;Total ram usage:       22 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; Hardware stack levels required when called:    5
 10849 ;; This function calls:
 10850 ;;		___lwdiv
 10851 ;;		___lwmod
 10852 ;; This function is called by:
 10853 ;;		_handleStackBackgroundTasks
 10854 ;;		_ARP_handleNewPacket
 10855 ;;		_ARP_sendReply
 10856 ;;		_ipv4_handleNewPacket
 10857 ;;		_arpEntryToString
 10858 ;; This function uses a non-reentrant model
 10859 ;;
 10860                           
 10861                           	psect	text34
 10862  0024AA                     __ptext34:
 10863                           	opt stack 0
 10864  0024AA                     _ipAdressToString:
 10865                           	opt stack 24
 10866                           
 10867                           ;uart.c: 219: char static address [] = "???.???.???.???";
 10868                           ;uart.c: 220: uint8_t hundreds[4];
 10869                           ;uart.c: 221: uint8_t tens[4];
 10870                           ;uart.c: 222: uint8_t ones[4];
 10871                           ;uart.c: 223: uint8_t pointer = 0;
 10872                           
 10873                           ;incstack = 0
 10874  0024AA  0E00               	movlw	0
 10875  0024AC  0100               	movlb	0	; () banked
 10876  0024AE  6F7B               	movwf	ipAdressToString@pointer& (0+255),b
 10877                           
 10878                           ;uart.c: 225: for (uint8_t i = 0; i < 4; i++) {
 10879  0024B0  0E00               	movlw	0
 10880  0024B2  6F7C               	movwf	ipAdressToString@i& (0+255),b
 10881  0024B4                     l7811:
 10882                           
 10883                           ; BSR set to: 0
 10884  0024B4  0E03               	movlw	3
 10885  0024B6  657C               	cpfsgt	ipAdressToString@i& (0+255),b
 10886  0024B8  D001               	goto	l822
 10887  0024BA  D0DF               	goto	u9200
 10888  0024BC                     l822:
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;uart.c: 227: hundreds[i] = ip.address[i] / 100u;
 10892                           
 10893                           ; BSR set to: 0
 10894  0024BC  517C               	movf	ipAdressToString@i& (0+255),w,b
 10895  0024BE  0D01               	mullw	1
 10896  0024C0  0E77               	movlw	low ipAdressToString@hundreds
 10897  0024C2  24F3               	addwf	prodl,w,c
 10898  0024C4  6ED9               	movwf	fsr2l,c
 10899  0024C6  0E00               	movlw	high ipAdressToString@hundreds
 10900  0024C8  20F4               	addwfc	prodh,w,c
 10901  0024CA  6EDA               	movwf	fsr2h,c
 10902  0024CC  517C               	movf	ipAdressToString@i& (0+255),w,b
 10903  0024CE  0D01               	mullw	1
 10904  0024D0  0E67               	movlw	low ipAdressToString@ip
 10905  0024D2  24F3               	addwf	prodl,w,c
 10906  0024D4  6EE1               	movwf	fsr1l,c
 10907  0024D6  0E00               	movlw	high ipAdressToString@ip
 10908  0024D8  20F4               	addwfc	prodh,w,c
 10909  0024DA  6EE2               	movwf	fsr1h,c
 10910  0024DC  50E7               	movf	indf1,w,c
 10911  0024DE  6F6B               	movwf	??_ipAdressToString& (0+255),b
 10912  0024E0  516B               	movf	??_ipAdressToString& (0+255),w,b
 10913  0024E2  6F60               	movwf	___lwdiv@dividend& (0+255),b
 10914  0024E4  6B61               	clrf	(___lwdiv@dividend+1)& (0+255),b
 10915  0024E6  0E00               	movlw	0
 10916  0024E8  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 10917  0024EA  0E64               	movlw	100
 10918  0024EC  6F62               	movwf	___lwdiv@divisor& (0+255),b
 10919  0024EE  EC5F  F022         	call	___lwdiv	;wreg free
 10920  0024F2  0100               	movlb	0	; () banked
 10921  0024F4  5160               	movf	?___lwdiv& (0+255),w,b
 10922  0024F6  6EDF               	movwf	indf2,c
 10923                           
 10924                           ;uart.c: 228: tens[i] = (ip.address[i] - hundreds[i]*100u) / 10u;
 10925  0024F8  517C               	movf	ipAdressToString@i& (0+255),w,b
 10926  0024FA  0D01               	mullw	1
 10927  0024FC  0E73               	movlw	low ipAdressToString@tens
 10928  0024FE  24F3               	addwf	prodl,w,c
 10929  002500  6ED9               	movwf	fsr2l,c
 10930  002502  0E00               	movlw	high ipAdressToString@tens
 10931  002504  20F4               	addwfc	prodh,w,c
 10932  002506  6EDA               	movwf	fsr2h,c
 10933  002508  517C               	movf	ipAdressToString@i& (0+255),w,b
 10934  00250A  0D01               	mullw	1
 10935  00250C  0E77               	movlw	low ipAdressToString@hundreds
 10936  00250E  24F3               	addwf	prodl,w,c
 10937  002510  6EE1               	movwf	fsr1l,c
 10938  002512  0E00               	movlw	high ipAdressToString@hundreds
 10939  002514  20F4               	addwfc	prodh,w,c
 10940  002516  6EE2               	movwf	fsr1h,c
 10941  002518  50E7               	movf	indf1,w,c
 10942  00251A  6F6B               	movwf	??_ipAdressToString& (0+255),b
 10943  00251C  516B               	movf	??_ipAdressToString& (0+255),w,b
 10944  00251E  0D64               	mullw	100
 10945  002520  CFF3 F06C          	movff	prodl,??_ipAdressToString+1
 10946  002524  CFF4 F06D          	movff	prodh,??_ipAdressToString+2
 10947  002528  1F6C               	comf	(??_ipAdressToString+1)& (0+255),f,b
 10948  00252A  1F6D               	comf	(??_ipAdressToString+2)& (0+255),f,b
 10949  00252C  4B6C               	infsnz	(??_ipAdressToString+1)& (0+255),f,b
 10950  00252E  2B6D               	incf	(??_ipAdressToString+2)& (0+255),f,b
 10951  002530  517C               	movf	ipAdressToString@i& (0+255),w,b
 10952  002532  0D01               	mullw	1
 10953  002534  0E67               	movlw	low ipAdressToString@ip
 10954  002536  24F3               	addwf	prodl,w,c
 10955  002538  6EE1               	movwf	fsr1l,c
 10956  00253A  0E00               	movlw	high ipAdressToString@ip
 10957  00253C  20F4               	addwfc	prodh,w,c
 10958  00253E  6EE2               	movwf	fsr1h,c
 10959  002540  50E7               	movf	indf1,w,c
 10960  002542  6F6E               	movwf	(??_ipAdressToString+3)& (0+255),b
 10961  002544  516E               	movf	(??_ipAdressToString+3)& (0+255),w,b
 10962  002546  256C               	addwf	(??_ipAdressToString+1)& (0+255),w,b
 10963  002548  6F60               	movwf	___lwdiv@dividend& (0+255),b
 10964  00254A  0E00               	movlw	0
 10965  00254C  216D               	addwfc	(??_ipAdressToString+2)& (0+255),w,b
 10966  00254E  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
 10967  002550  0E00               	movlw	0
 10968  002552  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 10969  002554  0E0A               	movlw	10
 10970  002556  6F62               	movwf	___lwdiv@divisor& (0+255),b
 10971  002558  EC5F  F022         	call	___lwdiv	;wreg free
 10972  00255C  0100               	movlb	0	; () banked
 10973  00255E  5160               	movf	?___lwdiv& (0+255),w,b
 10974  002560  6EDF               	movwf	indf2,c
 10975                           
 10976                           ;uart.c: 229: ones[i] = ip.address[i] % 10u;
 10977  002562  517C               	movf	ipAdressToString@i& (0+255),w,b
 10978  002564  0D01               	mullw	1
 10979  002566  0E6F               	movlw	low ipAdressToString@ones
 10980  002568  24F3               	addwf	prodl,w,c
 10981  00256A  6ED9               	movwf	fsr2l,c
 10982  00256C  0E00               	movlw	high ipAdressToString@ones
 10983  00256E  20F4               	addwfc	prodh,w,c
 10984  002570  6EDA               	movwf	fsr2h,c
 10985  002572  517C               	movf	ipAdressToString@i& (0+255),w,b
 10986  002574  0D01               	mullw	1
 10987  002576  0E67               	movlw	low ipAdressToString@ip
 10988  002578  24F3               	addwf	prodl,w,c
 10989  00257A  6EE1               	movwf	fsr1l,c
 10990  00257C  0E00               	movlw	high ipAdressToString@ip
 10991  00257E  20F4               	addwfc	prodh,w,c
 10992  002580  6EE2               	movwf	fsr1h,c
 10993  002582  50E7               	movf	indf1,w,c
 10994  002584  6F6B               	movwf	??_ipAdressToString& (0+255),b
 10995  002586  516B               	movf	??_ipAdressToString& (0+255),w,b
 10996  002588  6F60               	movwf	___lwmod@dividend& (0+255),b
 10997  00258A  6B61               	clrf	(___lwmod@dividend+1)& (0+255),b
 10998  00258C  0E00               	movlw	0
 10999  00258E  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
 11000  002590  0E0A               	movlw	10
 11001  002592  6F62               	movwf	___lwmod@divisor& (0+255),b
 11002  002594  EC6C  F023         	call	___lwmod	;wreg free
 11003  002598  0100               	movlb	0	; () banked
 11004  00259A  5160               	movf	?___lwmod& (0+255),w,b
 11005  00259C  6EDF               	movwf	indf2,c
 11006                           
 11007                           ; BSR set to: 0
 11008                           ;uart.c: 231: if (hundreds[i] > 0)
 11009  00259E  517C               	movf	ipAdressToString@i& (0+255),w,b
 11010  0025A0  0D01               	mullw	1
 11011  0025A2  0E77               	movlw	low ipAdressToString@hundreds
 11012  0025A4  24F3               	addwf	prodl,w,c
 11013  0025A6  6ED9               	movwf	fsr2l,c
 11014  0025A8  0E00               	movlw	high ipAdressToString@hundreds
 11015  0025AA  20F4               	addwfc	prodh,w,c
 11016  0025AC  6EDA               	movwf	fsr2h,c
 11017  0025AE  50DF               	movf	indf2,w,c
 11018  0025B0  B4D8               	btfsc	status,2,c
 11019  0025B2  D014               	goto	l824
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;uart.c: 232: address[pointer++] = hundreds[i] + 0x30;
 11023  0025B4  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11024  0025B6  0D01               	mullw	1
 11025  0025B8  0ECF               	movlw	low ipAdressToString@address
 11026  0025BA  24F3               	addwf	prodl,w,c
 11027  0025BC  6ED9               	movwf	fsr2l,c
 11028  0025BE  0E02               	movlw	high ipAdressToString@address
 11029  0025C0  20F4               	addwfc	prodh,w,c
 11030  0025C2  6EDA               	movwf	fsr2h,c
 11031  0025C4  517C               	movf	ipAdressToString@i& (0+255),w,b
 11032  0025C6  0D01               	mullw	1
 11033  0025C8  0E77               	movlw	low ipAdressToString@hundreds
 11034  0025CA  24F3               	addwf	prodl,w,c
 11035  0025CC  6EE1               	movwf	fsr1l,c
 11036  0025CE  0E00               	movlw	high ipAdressToString@hundreds
 11037  0025D0  20F4               	addwfc	prodh,w,c
 11038  0025D2  6EE2               	movwf	fsr1h,c
 11039  0025D4  50E7               	movf	indf1,w,c
 11040  0025D6  0F30               	addlw	48
 11041  0025D8  6EDF               	movwf	indf2,c
 11042                           
 11043                           ; BSR set to: 0
 11044  0025DA  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 11045  0025DC                     l824:
 11046                           
 11047                           ; BSR set to: 0
 11048                           ;uart.c: 233: if ((tens[i] > 0) || hundreds[i] > 0)
 11049                           
 11050                           ; BSR set to: 0
 11051  0025DC  517C               	movf	ipAdressToString@i& (0+255),w,b
 11052  0025DE  0D01               	mullw	1
 11053  0025E0  0E73               	movlw	low ipAdressToString@tens
 11054  0025E2  24F3               	addwf	prodl,w,c
 11055  0025E4  6ED9               	movwf	fsr2l,c
 11056  0025E6  0E00               	movlw	high ipAdressToString@tens
 11057  0025E8  20F4               	addwfc	prodh,w,c
 11058  0025EA  6EDA               	movwf	fsr2h,c
 11059  0025EC  50DF               	movf	indf2,w,c
 11060  0025EE  A4D8               	btfss	status,2,c
 11061  0025F0  D00B               	goto	u9180
 11062                           
 11063                           ; BSR set to: 0
 11064  0025F2  517C               	movf	ipAdressToString@i& (0+255),w,b
 11065  0025F4  0D01               	mullw	1
 11066  0025F6  0E77               	movlw	low ipAdressToString@hundreds
 11067  0025F8  24F3               	addwf	prodl,w,c
 11068  0025FA  6ED9               	movwf	fsr2l,c
 11069  0025FC  0E00               	movlw	high ipAdressToString@hundreds
 11070  0025FE  20F4               	addwfc	prodh,w,c
 11071  002600  6EDA               	movwf	fsr2h,c
 11072  002602  50DF               	movf	indf2,w,c
 11073  002604  B4D8               	btfsc	status,2,c
 11074  002606  D014               	goto	l825
 11075  002608                     u9180:
 11076                           
 11077                           ; BSR set to: 0
 11078                           ;uart.c: 234: address[pointer++] = tens[i] + 0x30;
 11079                           
 11080                           ; BSR set to: 0
 11081  002608  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11082  00260A  0D01               	mullw	1
 11083  00260C  0ECF               	movlw	low ipAdressToString@address
 11084  00260E  24F3               	addwf	prodl,w,c
 11085  002610  6ED9               	movwf	fsr2l,c
 11086  002612  0E02               	movlw	high ipAdressToString@address
 11087  002614  20F4               	addwfc	prodh,w,c
 11088  002616  6EDA               	movwf	fsr2h,c
 11089  002618  517C               	movf	ipAdressToString@i& (0+255),w,b
 11090  00261A  0D01               	mullw	1
 11091  00261C  0E73               	movlw	low ipAdressToString@tens
 11092  00261E  24F3               	addwf	prodl,w,c
 11093  002620  6EE1               	movwf	fsr1l,c
 11094  002622  0E00               	movlw	high ipAdressToString@tens
 11095  002624  20F4               	addwfc	prodh,w,c
 11096  002626  6EE2               	movwf	fsr1h,c
 11097  002628  50E7               	movf	indf1,w,c
 11098  00262A  0F30               	addlw	48
 11099  00262C  6EDF               	movwf	indf2,c
 11100                           
 11101                           ; BSR set to: 0
 11102  00262E  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 11103  002630                     l825:
 11104                           
 11105                           ; BSR set to: 0
 11106                           ;uart.c: 235: address[pointer++] = ones[i] + 0x30;
 11107                           
 11108                           ; BSR set to: 0
 11109  002630  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11110  002632  0D01               	mullw	1
 11111  002634  0ECF               	movlw	low ipAdressToString@address
 11112  002636  24F3               	addwf	prodl,w,c
 11113  002638  6ED9               	movwf	fsr2l,c
 11114  00263A  0E02               	movlw	high ipAdressToString@address
 11115  00263C  20F4               	addwfc	prodh,w,c
 11116  00263E  6EDA               	movwf	fsr2h,c
 11117  002640  517C               	movf	ipAdressToString@i& (0+255),w,b
 11118  002642  0D01               	mullw	1
 11119  002644  0E6F               	movlw	low ipAdressToString@ones
 11120  002646  24F3               	addwf	prodl,w,c
 11121  002648  6EE1               	movwf	fsr1l,c
 11122  00264A  0E00               	movlw	high ipAdressToString@ones
 11123  00264C  20F4               	addwfc	prodh,w,c
 11124  00264E  6EE2               	movwf	fsr1h,c
 11125  002650  50E7               	movf	indf1,w,c
 11126  002652  0F30               	addlw	48
 11127  002654  6EDF               	movwf	indf2,c
 11128  002656  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;uart.c: 236: if (i != 3)
 11132  002658  0E03               	movlw	3
 11133  00265A  197C               	xorwf	ipAdressToString@i& (0+255),w,b
 11134  00265C  B4D8               	btfsc	status,2,c
 11135  00265E  D00B               	goto	l828
 11136                           
 11137                           ; BSR set to: 0
 11138                           ;uart.c: 237: address[pointer++] = '.';
 11139  002660  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11140  002662  0D01               	mullw	1
 11141  002664  0ECF               	movlw	low ipAdressToString@address
 11142  002666  24F3               	addwf	prodl,w,c
 11143  002668  6ED9               	movwf	fsr2l,c
 11144  00266A  0E02               	movlw	high ipAdressToString@address
 11145  00266C  20F4               	addwfc	prodh,w,c
 11146  00266E  6EDA               	movwf	fsr2h,c
 11147  002670  0E2E               	movlw	46
 11148  002672  6EDF               	movwf	indf2,c
 11149                           
 11150                           ; BSR set to: 0
 11151  002674  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 11152  002676                     l828:
 11153                           
 11154                           ; BSR set to: 0
 11155                           
 11156                           ; BSR set to: 0
 11157  002676  2B7C               	incf	ipAdressToString@i& (0+255),f,b
 11158  002678  D71D               	goto	l7811
 11159  00267A                     u9200:
 11160                           
 11161                           ; BSR set to: 0
 11162                           ;uart.c: 238: }
 11163                           ;uart.c: 239: address[pointer] = '\0';
 11164                           
 11165                           ; BSR set to: 0
 11166  00267A  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11167  00267C  0D01               	mullw	1
 11168  00267E  0ECF               	movlw	low ipAdressToString@address
 11169  002680  24F3               	addwf	prodl,w,c
 11170  002682  6ED9               	movwf	fsr2l,c
 11171  002684  0E02               	movlw	high ipAdressToString@address
 11172  002686  20F4               	addwfc	prodh,w,c
 11173  002688  6EDA               	movwf	fsr2h,c
 11174  00268A  0E00               	movlw	0
 11175  00268C  6EDF               	movwf	indf2,c
 11176                           
 11177                           ; BSR set to: 0
 11178                           ;uart.c: 240: return address;
 11179  00268E  0ECF               	movlw	low ipAdressToString@address
 11180  002690  6F67               	movwf	?_ipAdressToString& (0+255),b
 11181  002692  0E02               	movlw	high ipAdressToString@address
 11182  002694  6F68               	movwf	(?_ipAdressToString+1)& (0+255),b
 11183  002696  0012               	return	
 11184  002698                     __end_of_ipAdressToString:
 11185                           	opt stack 0
 11186                           tblptru	equ	0xFF8
 11187                           tblptrh	equ	0xFF7
 11188                           tblptrl	equ	0xFF6
 11189                           tablat	equ	0xFF5
 11190                           prodh	equ	0xFF4
 11191                           prodl	equ	0xFF3
 11192                           intcon	equ	0xFF2
 11193                           intcon3	equ	0xFF0
 11194                           indf0	equ	0xFEF
 11195                           postinc0	equ	0xFEE
 11196                           plusw0	equ	0xFEB
 11197                           fsr0h	equ	0xFEA
 11198                           fsr0l	equ	0xFE9
 11199                           wreg	equ	0xFE8
 11200                           indf1	equ	0xFE7
 11201                           postinc1	equ	0xFE6
 11202                           postdec1	equ	0xFE5
 11203                           plusw1	equ	0xFE3
 11204                           fsr1h	equ	0xFE2
 11205                           fsr1l	equ	0xFE1
 11206                           indf2	equ	0xFDF
 11207                           postinc2	equ	0xFDE
 11208                           postdec2	equ	0xFDD
 11209                           plusw2	equ	0xFDB
 11210                           fsr2h	equ	0xFDA
 11211                           fsr2l	equ	0xFD9
 11212                           status	equ	0xFD8
 11213                           
 11214 ;; *************** function ___lwmod *****************
 11215 ;; Defined at:
 11216 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 11217 ;; Parameters:    Size  Location     Type
 11218 ;;  dividend        2    0[BANK0 ] unsigned int 
 11219 ;;  divisor         2    2[BANK0 ] unsigned int 
 11220 ;; Auto vars:     Size  Location     Type
 11221 ;;  counter         1    4[BANK0 ] unsigned char 
 11222 ;; Return value:  Size  Location     Type
 11223 ;;                  2    0[BANK0 ] unsigned int 
 11224 ;; Registers used:
 11225 ;;		wreg, status,2, status,0
 11226 ;; Tracked objects:
 11227 ;;		On entry : 0/0
 11228 ;;		On exit  : 0/0
 11229 ;;		Unchanged: 0/0
 11230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11231 ;;      Params:         0       4       0       0       0       0       0       0       0
 11232 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11233 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11234 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11235 ;;Total ram usage:        5 bytes
 11236 ;; Hardware stack levels used:    1
 11237 ;; Hardware stack levels required when called:    4
 11238 ;; This function calls:
 11239 ;;		Nothing
 11240 ;; This function is called by:
 11241 ;;		_ipAdressToString
 11242 ;; This function uses a non-reentrant model
 11243 ;;
 11244                           
 11245                           	psect	text35
 11246  0046D8                     __ptext35:
 11247                           	opt stack 0
 11248  0046D8                     ___lwmod:
 11249                           	opt stack 24
 11250                           
 11251                           ; BSR set to: 0
 11252                           ;incstack = 0
 11253  0046D8  0100               	movlb	0	; () banked
 11254  0046DA  5162               	movf	___lwmod@divisor& (0+255),w,b
 11255  0046DC  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 11256  0046DE  B4D8               	btfsc	status,2,c
 11257  0046E0  D018               	goto	l1506
 11258                           
 11259                           ; BSR set to: 0
 11260  0046E2  0E01               	movlw	1
 11261  0046E4  6F64               	movwf	___lwmod@counter& (0+255),b
 11262  0046E6  D004               	goto	l1501
 11263  0046E8                     
 11264                           ; BSR set to: 0
 11265                           
 11266                           ; BSR set to: 0
 11267  0046E8  90D8               	bcf	status,0,c
 11268  0046EA  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 11269  0046EC  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 11270  0046EE  2B64               	incf	___lwmod@counter& (0+255),f,b
 11271  0046F0                     l1501:
 11272                           
 11273                           ; BSR set to: 0
 11274                           
 11275                           ; BSR set to: 0
 11276  0046F0  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 11277  0046F2  D7FA               	goto	l1502
 11278  0046F4                     u8970:
 11279                           
 11280                           ; BSR set to: 0
 11281                           
 11282                           ; BSR set to: 0
 11283                           
 11284                           ; BSR set to: 0
 11285  0046F4  5162               	movf	___lwmod@divisor& (0+255),w,b
 11286  0046F6  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 11287  0046F8  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 11288  0046FA  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 11289  0046FC  A0D8               	btfss	status,0,c
 11290  0046FE  D004               	goto	l1505
 11291                           
 11292                           ; BSR set to: 0
 11293  004700  5162               	movf	___lwmod@divisor& (0+255),w,b
 11294  004702  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 11295  004704  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 11296  004706  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 11297  004708                     l1505:
 11298                           
 11299                           ; BSR set to: 0
 11300                           
 11301                           ; BSR set to: 0
 11302  004708  90D8               	bcf	status,0,c
 11303  00470A  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 11304  00470C  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 11305                           
 11306                           ; BSR set to: 0
 11307  00470E  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 11308  004710  D7F1               	goto	u8970
 11309  004712                     l1506:
 11310                           
 11311                           ; BSR set to: 0
 11312                           
 11313                           ; BSR set to: 0
 11314  004712  C060  F060         	movff	___lwmod@dividend,?___lwmod
 11315  004716  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 11316                           
 11317                           ; BSR set to: 0
 11318  00471A  0012               	return		;funcret
 11319  00471C                     __end_of___lwmod:
 11320                           	opt stack 0
 11321                           tblptru	equ	0xFF8
 11322                           tblptrh	equ	0xFF7
 11323                           tblptrl	equ	0xFF6
 11324                           tablat	equ	0xFF5
 11325                           prodh	equ	0xFF4
 11326                           prodl	equ	0xFF3
 11327                           intcon	equ	0xFF2
 11328                           intcon3	equ	0xFF0
 11329                           indf0	equ	0xFEF
 11330                           postinc0	equ	0xFEE
 11331                           plusw0	equ	0xFEB
 11332                           fsr0h	equ	0xFEA
 11333                           fsr0l	equ	0xFE9
 11334                           wreg	equ	0xFE8
 11335                           indf1	equ	0xFE7
 11336                           postinc1	equ	0xFE6
 11337                           postdec1	equ	0xFE5
 11338                           plusw1	equ	0xFE3
 11339                           fsr1h	equ	0xFE2
 11340                           fsr1l	equ	0xFE1
 11341                           indf2	equ	0xFDF
 11342                           postinc2	equ	0xFDE
 11343                           postdec2	equ	0xFDD
 11344                           plusw2	equ	0xFDB
 11345                           fsr2h	equ	0xFDA
 11346                           fsr2l	equ	0xFD9
 11347                           status	equ	0xFD8
 11348                           
 11349 ;; *************** function ___lwdiv *****************
 11350 ;; Defined at:
 11351 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 11352 ;; Parameters:    Size  Location     Type
 11353 ;;  dividend        2    0[BANK0 ] unsigned int 
 11354 ;;  divisor         2    2[BANK0 ] unsigned int 
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;  quotient        2    5[BANK0 ] unsigned int 
 11357 ;;  counter         1    4[BANK0 ] unsigned char 
 11358 ;; Return value:  Size  Location     Type
 11359 ;;                  2    0[BANK0 ] unsigned int 
 11360 ;; Registers used:
 11361 ;;		wreg, status,2, status,0
 11362 ;; Tracked objects:
 11363 ;;		On entry : 0/0
 11364 ;;		On exit  : 0/0
 11365 ;;		Unchanged: 0/0
 11366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11367 ;;      Params:         0       4       0       0       0       0       0       0       0
 11368 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11369 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11370 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11371 ;;Total ram usage:        7 bytes
 11372 ;; Hardware stack levels used:    1
 11373 ;; Hardware stack levels required when called:    4
 11374 ;; This function calls:
 11375 ;;		Nothing
 11376 ;; This function is called by:
 11377 ;;		_ipAdressToString
 11378 ;; This function uses a non-reentrant model
 11379 ;;
 11380                           
 11381                           	psect	text36
 11382  0044BE                     __ptext36:
 11383                           	opt stack 0
 11384  0044BE                     ___lwdiv:
 11385                           	opt stack 24
 11386                           
 11387                           ; BSR set to: 0
 11388                           ;incstack = 0
 11389  0044BE  0E00               	movlw	0
 11390  0044C0  0100               	movlb	0	; () banked
 11391  0044C2  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 11392  0044C4  0E00               	movlw	0
 11393  0044C6  6F65               	movwf	___lwdiv@quotient& (0+255),b
 11394                           
 11395                           ; BSR set to: 0
 11396  0044C8  5162               	movf	___lwdiv@divisor& (0+255),w,b
 11397  0044CA  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 11398  0044CC  B4D8               	btfsc	status,2,c
 11399  0044CE  D01C               	goto	l1496
 11400                           
 11401                           ; BSR set to: 0
 11402  0044D0  0E01               	movlw	1
 11403  0044D2  6F64               	movwf	___lwdiv@counter& (0+255),b
 11404  0044D4  D004               	goto	l1491
 11405  0044D6                     
 11406                           ; BSR set to: 0
 11407                           
 11408                           ; BSR set to: 0
 11409  0044D6  90D8               	bcf	status,0,c
 11410  0044D8  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 11411  0044DA  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 11412  0044DC  2B64               	incf	___lwdiv@counter& (0+255),f,b
 11413  0044DE                     l1491:
 11414                           
 11415                           ; BSR set to: 0
 11416                           
 11417                           ; BSR set to: 0
 11418  0044DE  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 11419  0044E0  D7FA               	goto	l1492
 11420  0044E2                     u8940:
 11421                           
 11422                           ; BSR set to: 0
 11423                           
 11424                           ; BSR set to: 0
 11425                           
 11426                           ; BSR set to: 0
 11427  0044E2  90D8               	bcf	status,0,c
 11428  0044E4  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 11429  0044E6  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 11430                           
 11431                           ; BSR set to: 0
 11432  0044E8  5162               	movf	___lwdiv@divisor& (0+255),w,b
 11433  0044EA  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 11434  0044EC  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11435  0044EE  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 11436  0044F0  A0D8               	btfss	status,0,c
 11437  0044F2  D005               	goto	l1495
 11438                           
 11439                           ; BSR set to: 0
 11440  0044F4  5162               	movf	___lwdiv@divisor& (0+255),w,b
 11441  0044F6  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 11442  0044F8  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11443  0044FA  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 11444                           
 11445                           ; BSR set to: 0
 11446  0044FC  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 11447  0044FE                     l1495:
 11448                           
 11449                           ; BSR set to: 0
 11450                           
 11451                           ; BSR set to: 0
 11452  0044FE  90D8               	bcf	status,0,c
 11453  004500  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 11454  004502  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 11455                           
 11456                           ; BSR set to: 0
 11457  004504  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 11458  004506  D7ED               	goto	u8940
 11459  004508                     l1496:
 11460                           
 11461                           ; BSR set to: 0
 11462                           
 11463                           ; BSR set to: 0
 11464  004508  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 11465  00450C  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11466                           
 11467                           ; BSR set to: 0
 11468  004510  0012               	return		;funcret
 11469  004512                     __end_of___lwdiv:
 11470                           	opt stack 0
 11471                           tblptru	equ	0xFF8
 11472                           tblptrh	equ	0xFF7
 11473                           tblptrl	equ	0xFF6
 11474                           tablat	equ	0xFF5
 11475                           prodh	equ	0xFF4
 11476                           prodl	equ	0xFF3
 11477                           intcon	equ	0xFF2
 11478                           intcon3	equ	0xFF0
 11479                           indf0	equ	0xFEF
 11480                           postinc0	equ	0xFEE
 11481                           plusw0	equ	0xFEB
 11482                           fsr0h	equ	0xFEA
 11483                           fsr0l	equ	0xFE9
 11484                           wreg	equ	0xFE8
 11485                           indf1	equ	0xFE7
 11486                           postinc1	equ	0xFE6
 11487                           postdec1	equ	0xFE5
 11488                           plusw1	equ	0xFE3
 11489                           fsr1h	equ	0xFE2
 11490                           fsr1l	equ	0xFE1
 11491                           indf2	equ	0xFDF
 11492                           postinc2	equ	0xFDE
 11493                           postdec2	equ	0xFDD
 11494                           plusw2	equ	0xFDB
 11495                           fsr2h	equ	0xFDA
 11496                           fsr2l	equ	0xFD9
 11497                           status	equ	0xFD8
 11498                           
 11499 ;; *************** function _ethernetController_getMacAddress *****************
 11500 ;; Defined at:
 11501 ;;		line 156 in file "src/enc424j600/ENC424J600.c"
 11502 ;; Parameters:    Size  Location     Type
 11503 ;;		None
 11504 ;; Auto vars:     Size  Location     Type
 11505 ;;  mac             6   20[BANK0 ] struct macaddress
 11506 ;; Return value:  Size  Location     Type
 11507 ;;                  6   14[BANK0 ] struct macaddress
 11508 ;; Registers used:
 11509 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 11510 ;; Tracked objects:
 11511 ;;		On entry : 0/0
 11512 ;;		On exit  : 0/0
 11513 ;;		Unchanged: 0/0
 11514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11515 ;;      Params:         0       6       0       0       0       0       0       0       0
 11516 ;;      Locals:         0       6       0       0       0       0       0       0       0
 11517 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11518 ;;      Totals:         0      12       0       0       0       0       0       0       0
 11519 ;;Total ram usage:       12 bytes
 11520 ;; Hardware stack levels used:    1
 11521 ;; Hardware stack levels required when called:    7
 11522 ;; This function calls:
 11523 ;;		_ENC424J600_readControlRegisterUnbanked
 11524 ;; This function is called by:
 11525 ;;		_main
 11526 ;;		_ARP_sendRequest
 11527 ;;		_ARP_sendReply
 11528 ;; This function uses a non-reentrant model
 11529 ;;
 11530                           
 11531                           	psect	text37
 11532  003FE6                     __ptext37:
 11533                           	opt stack 0
 11534  003FE6                     _ethernetController_getMacAddress:
 11535                           	opt stack 19
 11536                           
 11537                           ;ENC424J600.c: 157: macaddress_t mac;
 11538                           ;ENC424J600.c: 158: ENC424J600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 11539                           
 11540                           ; BSR set to: 0
 11541                           ;incstack = 0
 11542  003FE6  0E74               	movlw	low ethernetController_getMacAddress@mac
 11543  003FE8  0100               	movlb	0	; () banked
 11544  003FEA  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 11545  003FEC  0E00               	movlw	high ethernetController_getMacAddress@mac
 11546  003FEE  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 11547  003FF0  0E64               	movlw	100
 11548  003FF2  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 11549                           
 11550                           ;ENC424J600.c: 159: ENC424J600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 11551  003FF6  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 11552  003FF8  0100               	movlb	0	; () banked
 11553  003FFA  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 11554  003FFC  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 11555  003FFE  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 11556  004000  0E65               	movlw	101
 11557  004002  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 11558                           
 11559                           ;ENC424J600.c: 160: ENC424J600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 11560  004006  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 11561  004008  0100               	movlb	0	; () banked
 11562  00400A  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 11563  00400C  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 11564  00400E  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 11565  004010  0E62               	movlw	98
 11566  004012  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 11567                           
 11568                           ;ENC424J600.c: 161: ENC424J600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 11569  004016  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 11570  004018  0100               	movlb	0	; () banked
 11571  00401A  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 11572  00401C  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 11573  00401E  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 11574  004020  0E63               	movlw	99
 11575  004022  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 11576                           
 11577                           ;ENC424J600.c: 162: ENC424J600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 11578  004026  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 11579  004028  0100               	movlb	0	; () banked
 11580  00402A  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 11581  00402C  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 11582  00402E  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 11583  004030  0E60               	movlw	96
 11584  004032  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 11585                           
 11586                           ;ENC424J600.c: 163: ENC424J600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 11587  004036  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 11588  004038  0100               	movlb	0	; () banked
 11589  00403A  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 11590  00403C  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 11591  00403E  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 11592  004040  0E61               	movlw	97
 11593  004042  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 11594                           
 11595                           ;ENC424J600.c: 164: return mac;
 11596  004046  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 11597  00404A  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 11598  00404E  0E05               	movlw	5
 11599  004050                     u8991:
 11600  004050  CFDB FFEB          	movff	plusw2,plusw0
 11601  004054  06E8               	decf	wreg,f,c
 11602  004056  E2FC               	bc	u8991
 11603  004058  0012               	return	
 11604  00405A                     __end_of_ethernetController_getMacAddress:
 11605                           	opt stack 0
 11606                           tblptru	equ	0xFF8
 11607                           tblptrh	equ	0xFF7
 11608                           tblptrl	equ	0xFF6
 11609                           tablat	equ	0xFF5
 11610                           prodh	equ	0xFF4
 11611                           prodl	equ	0xFF3
 11612                           intcon	equ	0xFF2
 11613                           intcon3	equ	0xFF0
 11614                           indf0	equ	0xFEF
 11615                           postinc0	equ	0xFEE
 11616                           plusw0	equ	0xFEB
 11617                           fsr0h	equ	0xFEA
 11618                           fsr0l	equ	0xFE9
 11619                           wreg	equ	0xFE8
 11620                           indf1	equ	0xFE7
 11621                           postinc1	equ	0xFE6
 11622                           postdec1	equ	0xFE5
 11623                           plusw1	equ	0xFE3
 11624                           fsr1h	equ	0xFE2
 11625                           fsr1l	equ	0xFE1
 11626                           indf2	equ	0xFDF
 11627                           postinc2	equ	0xFDE
 11628                           postdec2	equ	0xFDD
 11629                           plusw2	equ	0xFDB
 11630                           fsr2h	equ	0xFDA
 11631                           fsr2l	equ	0xFD9
 11632                           status	equ	0xFD8
 11633                           
 11634 ;; *************** function _ARP_send *****************
 11635 ;; Defined at:
 11636 ;;		line 137 in file "src/stack/protocols/arp.c"
 11637 ;; Parameters:    Size  Location     Type
 11638 ;;  arp            32   71[BANK0 ] struct ARP_message
 11639 ;; Auto vars:     Size  Location     Type
 11640 ;;  i               1  112[BANK0 ] unsigned char 
 11641 ;;  i               1  111[BANK0 ] unsigned char 
 11642 ;;  i               1  110[BANK0 ] unsigned char 
 11643 ;;  i               1  109[BANK0 ] unsigned char 
 11644 ;;  ethFrame       34  113[BANK0 ] struct ethernetFrame
 11645 ;;  field           9  147[BANK0 ] struct memoryField
 11646 ;;  destination     6  103[BANK0 ] struct macaddress
 11647 ;; Return value:  Size  Location     Type
 11648 ;;                  1    wreg      void 
 11649 ;; Registers used:
 11650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11651 ;; Tracked objects:
 11652 ;;		On entry : 0/0
 11653 ;;		On exit  : 0/0
 11654 ;;		Unchanged: 0/0
 11655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11656 ;;      Params:         0      32       0       0       0       0       0       0       0
 11657 ;;      Locals:         0      53       0       0       0       0       0       0       0
 11658 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11659 ;;      Totals:         0      85       0       0       0       0       0       0       0
 11660 ;;Total ram usage:       85 bytes
 11661 ;; Hardware stack levels used:    1
 11662 ;; Hardware stack levels required when called:    9
 11663 ;; This function calls:
 11664 ;;		_UARTTransmitText
 11665 ;;		_ethernetController_getSourceMACAddress
 11666 ;;		_ethernetController_sendPacket
 11667 ;;		_ethernetController_streamToTransmitBuffer
 11668 ;;		_ethernet_txFrameRequest
 11669 ;;		_hexToString
 11670 ;;		_mac_setToBroadcast
 11671 ;; This function is called by:
 11672 ;;		_ARP_sendRequest
 11673 ;;		_ARP_sendReply
 11674 ;; This function uses a non-reentrant model
 11675 ;;
 11676                           
 11677                           	psect	text38
 11678  001A98                     __ptext38:
 11679                           	opt stack 0
 11680  001A98                     _ARP_send:
 11681                           	opt stack 17
 11682                           
 11683                           ;arp.c: 138: memoryField_t field;
 11684                           ;arp.c: 139: macaddress_t destination;
 11685                           ;arp.c: 140: ethernetFrame_t ethFrame;
 11686                           ;arp.c: 141: mac_setToBroadcast(&destination);
 11687                           
 11688                           ;incstack = 0
 11689  001A98  0EC7               	movlw	low ARP_send@destination
 11690  001A9A  0100               	movlb	0	; () banked
 11691  001A9C  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 11692  001A9E  0E00               	movlw	high ARP_send@destination
 11693  001AA0  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 11694  001AA2  EC6F  F025         	call	_mac_setToBroadcast	;wreg free
 11695                           
 11696                           ;arp.c: 143: ethFrame.length = 36;
 11697  001AA6  0E00               	movlw	0
 11698  001AA8  0100               	movlb	0	; () banked
 11699  001AAA  6FD2               	movwf	(ARP_send@ethFrame+1)& (0+255),b
 11700  001AAC  0E24               	movlw	36
 11701  001AAE  6FD1               	movwf	ARP_send@ethFrame& (0+255),b
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;arp.c: 144: ethFrame.destination = arp.targetMACAddress;
 11705  001AB0  EE20  F0B9         	lfsr	2,ARP_send@arp+18
 11706  001AB4  EE10  F0D9         	lfsr	1,ARP_send@ethFrame+8
 11707  001AB8  0E05               	movlw	5
 11708  001ABA                     u9271:
 11709  001ABA  CFDB FFE3          	movff	plusw2,plusw1
 11710  001ABE  06E8               	decf	wreg,f,c
 11711  001AC0  E2FC               	bc	u9271
 11712                           
 11713                           ; BSR set to: 0
 11714                           ;arp.c: 145: ethFrame.source = ethernetController_getSourceMACAddress(field);
 11715  001AC2  EE20  F0F3         	lfsr	2,ARP_send@field
 11716  001AC6  EE00  F06F         	lfsr	0,ethernetController_getSourceMACAddress@field
 11717  001ACA  0E08               	movlw	8
 11718  001ACC                     u9281:
 11719  001ACC  CFDB FFEB          	movff	plusw2,plusw0
 11720  001AD0  06E8               	decf	wreg,f,c
 11721  001AD2  E2FC               	bc	u9281
 11722  001AD4  ECD7  F020         	call	_ethernetController_getSourceMACAddress	;wreg free
 11723  001AD8  EE20  F0D3         	lfsr	2,ARP_send@ethFrame+2
 11724  001ADC  0E05               	movlw	5
 11725  001ADE                     u9291:
 11726  001ADE  CFEB FFDB          	movff	plusw0,plusw2
 11727  001AE2  06E8               	decf	wreg,f,c
 11728  001AE4  E2FC               	bc	u9291
 11729                           
 11730                           ;arp.c: 146: ethFrame.ethertype = ETHERTYPE_ARP;
 11731  001AE6  0E08               	movlw	8
 11732  001AE8  0100               	movlb	0	; () banked
 11733  001AEA  6FE0               	movwf	(ARP_send@ethFrame+15)& (0+255),b
 11734  001AEC  0E06               	movlw	6
 11735  001AEE  6FDF               	movwf	(ARP_send@ethFrame+14)& (0+255),b
 11736                           
 11737                           ; BSR set to: 0
 11738                           ;arp.c: 148: ethernet_txFrameRequest(&ethFrame);
 11739  001AF0  0ED1               	movlw	low ARP_send@ethFrame
 11740  001AF2  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 11741  001AF4  0E00               	movlw	high ARP_send@ethFrame
 11742  001AF6  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 11743  001AF8  EC9B  F01A         	call	_ethernet_txFrameRequest	;wreg free
 11744                           
 11745                           ;arp.c: 150: if (ethFrame.memory.fOutOfMemory) {
 11746  001AFC  0100               	movlb	0	; () banked
 11747  001AFE  51E8               	movf	(ARP_send@ethFrame+23)& (0+255),w,b
 11748  001B00  A4D8               	btfss	status,2,c
 11749  001B02  0012               	return	
 11750                           
 11751                           ; BSR set to: 0
 11752                           ;arp.c: 152: }
 11753                           ;arp.c: 154: field.start = ethFrame.memory.start + 8;
 11754                           
 11755                           ; BSR set to: 0
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;arp.c: 151: return;
 11759  001B04  0E08               	movlw	8
 11760  001B06  25E1               	addwf	(ARP_send@ethFrame+16)& (0+255),w,b
 11761  001B08  6FF3               	movwf	ARP_send@field& (0+255),b
 11762  001B0A  0E00               	movlw	0
 11763  001B0C  21E2               	addwfc	(ARP_send@ethFrame+17)& (0+255),w,b
 11764  001B0E  6FF4               	movwf	(ARP_send@field+1)& (0+255),b
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;arp.c: 155: field.end = ethFrame.memory.end;
 11768  001B10  C0E3  F0F5         	movff	ARP_send@ethFrame+18,ARP_send@field+2
 11769  001B14  C0E4  F0F6         	movff	ARP_send@ethFrame+19,ARP_send@field+3
 11770                           
 11771                           ; BSR set to: 0
 11772                           ;arp.c: 156: field.length = 28;
 11773  001B18  0E00               	movlw	0
 11774  001B1A  6FF8               	movwf	(ARP_send@field+5)& (0+255),b
 11775  001B1C  0E1C               	movlw	28
 11776  001B1E  6FF7               	movwf	(ARP_send@field+4)& (0+255),b
 11777                           
 11778                           ; BSR set to: 0
 11779                           ;arp.c: 158: UARTTransmitText(hexToString(field.start));
 11780  001B20  C0F3  F061         	movff	ARP_send@field,hexToString@val
 11781  001B24  C0F4  F062         	movff	ARP_send@field+1,hexToString@val+1
 11782  001B28  6B63               	clrf	(hexToString@val+2)& (0+255),b
 11783  001B2A  6B64               	clrf	(hexToString@val+3)& (0+255),b
 11784  001B2C  ECAD  F019         	call	_hexToString	;wreg free
 11785  001B30  C061  F098         	movff	?_hexToString,UARTTransmitText@str
 11786  001B34  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
 11787  001B38  EC34  F022         	call	_UARTTransmitText	;wreg free
 11788                           
 11789                           ;arp.c: 159: UARTTransmitText(", ");
 11790  001B3C  0E45               	movlw	low (STR_40+17)
 11791  001B3E  0100               	movlb	0	; () banked
 11792  001B40  6F98               	movwf	UARTTransmitText@str& (0+255),b
 11793  001B42  0E7E               	movlw	high (STR_40+17)
 11794  001B44  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 11795  001B46  EC34  F022         	call	_UARTTransmitText	;wreg free
 11796                           
 11797                           ;arp.c: 160: UARTTransmitText(hexToString(field.end));
 11798  001B4A  C0F5  F061         	movff	ARP_send@field+2,hexToString@val
 11799  001B4E  C0F6  F062         	movff	ARP_send@field+3,hexToString@val+1
 11800  001B52  0100               	movlb	0	; () banked
 11801  001B54  6B63               	clrf	(hexToString@val+2)& (0+255),b
 11802  001B56  6B64               	clrf	(hexToString@val+3)& (0+255),b
 11803  001B58  ECAD  F019         	call	_hexToString	;wreg free
 11804  001B5C  C061  F098         	movff	?_hexToString,UARTTransmitText@str
 11805  001B60  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
 11806  001B64  EC34  F022         	call	_UARTTransmitText	;wreg free
 11807                           
 11808                           ;arp.c: 161: UARTTransmitText("\n\r");
 11809  001B68  0E04               	movlw	low (STR_25+46)
 11810  001B6A  0100               	movlb	0	; () banked
 11811  001B6C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 11812  001B6E  0E7D               	movlw	high (STR_25+46)
 11813  001B70  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 11814  001B72  EC34  F022         	call	_UARTTransmitText	;wreg free
 11815                           
 11816                           ;arp.c: 164: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field)
      +                          ;
 11817  001B76  EE20  F0F3         	lfsr	2,ARP_send@field
 11818  001B7A  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 11819  001B7E  0E08               	movlw	8
 11820  001B80                     u9311:
 11821  001B80  CFDB FFEB          	movff	plusw2,plusw0
 11822  001B84  06E8               	decf	wreg,f,c
 11823  001B86  E2FC               	bc	u9311
 11824  001B88  0100               	movlb	0	; () banked
 11825  001B8A  51A8               	movf	(ARP_send@arp+1)& (0+255),w,b
 11826  001B8C  EC7D  F01F         	call	_ethernetController_streamToTransmitBuffer
 11827                           
 11828                           ;arp.c: 165: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field);
 11829  001B90  EE20  F0F3         	lfsr	2,ARP_send@field
 11830  001B94  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 11831  001B98  0E08               	movlw	8
 11832  001B9A                     u9321:
 11833  001B9A  CFDB FFEB          	movff	plusw2,plusw0
 11834  001B9E  06E8               	decf	wreg,f,c
 11835  001BA0  E2FC               	bc	u9321
 11836  001BA2  0100               	movlb	0	; () banked
 11837  001BA4  51A7               	movf	ARP_send@arp& (0+255),w,b
 11838  001BA6  EC7D  F01F         	call	_ethernetController_streamToTransmitBuffer
 11839                           
 11840                           ;arp.c: 166: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field)
      +                          ;
 11841  001BAA  EE20  F0F3         	lfsr	2,ARP_send@field
 11842  001BAE  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 11843  001BB2  0E08               	movlw	8
 11844  001BB4                     u9331:
 11845  001BB4  CFDB FFEB          	movff	plusw2,plusw0
 11846  001BB8  06E8               	decf	wreg,f,c
 11847  001BBA  E2FC               	bc	u9331
 11848  001BBC  0100               	movlb	0	; () banked
 11849  001BBE  51AA               	movf	(ARP_send@arp+3)& (0+255),w,b
 11850  001BC0  EC7D  F01F         	call	_ethernetController_streamToTransmitBuffer
 11851                           
 11852                           ;arp.c: 167: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field);
 11853  001BC4  EE20  F0F3         	lfsr	2,ARP_send@field
 11854  001BC8  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 11855  001BCC  0E08               	movlw	8
 11856  001BCE                     u9341:
 11857  001BCE  CFDB FFEB          	movff	plusw2,plusw0
 11858  001BD2  06E8               	decf	wreg,f,c
 11859  001BD4  E2FC               	bc	u9341
 11860  001BD6  0100               	movlb	0	; () banked
 11861  001BD8  51A9               	movf	(ARP_send@arp+2)& (0+255),w,b
 11862  001BDA  EC7D  F01F         	call	_ethernetController_streamToTransmitBuffer
 11863                           
 11864                           ;arp.c: 168: ethernetController_streamToTransmitBuffer(arp.hlen, field);
 11865  001BDE  EE20  F0F3         	lfsr	2,ARP_send@field
 11866  001BE2  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 11867  001BE6  0E08               	movlw	8
 11868  001BE8                     u9351:
 11869  001BE8  CFDB FFEB          	movff	plusw2,plusw0
 11870  001BEC  06E8               	decf	wreg,f,c
 11871  001BEE  E2FC               	bc	u9351
 11872  001BF0  0100               	movlb	0	; () banked
 11873  001BF2  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 11874  001BF4  EC7D  F01F         	call	_ethernetController_streamToTransmitBuffer
 11875                           
 11876                           ;arp.c: 169: ethernetController_streamToTransmitBuffer(arp.plen, field);
 11877  001BF8  EE20  F0F3         	lfsr	2,ARP_send@field
 11878  001BFC  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 11879  001C00  0E08               	movlw	8
 11880  001C02                     u9361:
 11881  001C02  CFDB FFEB          	movff	plusw2,plusw0
 11882  001C06  06E8               	decf	wreg,f,c
 11883  001C08  E2FC               	bc	u9361
 11884  001C0A  0100               	movlb	0	; () banked
 11885  001C0C  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 11886  001C0E  EC7D  F01F         	call	_ethernetController_streamToTransmitBuffer
 11887                           
 11888                           ;arp.c: 170: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld);
 11889  001C12  EE20  F0F3         	lfsr	2,ARP_send@field
 11890  001C16  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 11891  001C1A  0E08               	movlw	8
 11892  001C1C                     u9371:
 11893  001C1C  CFDB FFEB          	movff	plusw2,plusw0
 11894  001C20  06E8               	decf	wreg,f,c
 11895  001C22  E2FC               	bc	u9371
 11896  001C24  0100               	movlb	0	; () banked
 11897  001C26  51AE               	movf	(ARP_send@arp+7)& (0+255),w,b
 11898  001C28  EC7D  F01F         	call	_ethernetController_streamToTransmitBuffer
 11899                           
 11900                           ;arp.c: 171: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field);
 11901  001C2C  EE20  F0F3         	lfsr	2,ARP_send@field
 11902  001C30  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 11903  001C34  0E08               	movlw	8
 11904  001C36                     u9381:
 11905  001C36  CFDB FFEB          	movff	plusw2,plusw0
 11906  001C3A  06E8               	decf	wreg,f,c
 11907  001C3C  E2FC               	bc	u9381
 11908  001C3E  0100               	movlb	0	; () banked
 11909  001C40  51AD               	movf	(ARP_send@arp+6)& (0+255),w,b
 11910  001C42  EC7D  F01F         	call	_ethernetController_streamToTransmitBuffer
 11911                           
 11912                           ;arp.c: 172: for (uint8_t i = 0; i < arp.hlen; i++)
 11913  001C46  0E00               	movlw	0
 11914  001C48  0100               	movlb	0	; () banked
 11915  001C4A  6FCD               	movwf	ARP_send@i& (0+255),b
 11916  001C4C  D01A               	goto	l936
 11917  001C4E                     
 11918                           ; BSR set to: 0
 11919                           ;arp.c: 173: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field);
 11920                           
 11921                           ; BSR set to: 0
 11922  001C4E  EE20  F0F3         	lfsr	2,ARP_send@field
 11923  001C52  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 11924  001C56  0E08               	movlw	8
 11925  001C58                     u9391:
 11926  001C58  CFDB FFEB          	movff	plusw2,plusw0
 11927  001C5C  06E8               	decf	wreg,f,c
 11928  001C5E  E2FC               	bc	u9391
 11929  001C60  51CD               	movf	ARP_send@i& (0+255),w,b
 11930  001C62  0D01               	mullw	1
 11931  001C64  0E08               	movlw	8
 11932  001C66  26F3               	addwf	prodl,f,c
 11933  001C68  0E00               	movlw	0
 11934  001C6A  22F4               	addwfc	prodh,f,c
 11935  001C6C  0EA7               	movlw	low ARP_send@arp
 11936  001C6E  24F3               	addwf	prodl,w,c
 11937  001C70  6ED9               	movwf	fsr2l,c
 11938  001C72  0E00               	movlw	high ARP_send@arp
 11939  001C74  20F4               	addwfc	prodh,w,c
 11940  001C76  6EDA               	movwf	fsr2h,c
 11941  001C78  50DF               	movf	indf2,w,c
 11942  001C7A  EC7D  F01F         	call	_ethernetController_streamToTransmitBuffer
 11943  001C7E  0100               	movlb	0	; () banked
 11944  001C80  2BCD               	incf	ARP_send@i& (0+255),f,b
 11945  001C82                     l936:
 11946                           
 11947                           ; BSR set to: 0
 11948                           
 11949                           ; BSR set to: 0
 11950  001C82  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 11951  001C84  5DCD               	subwf	ARP_send@i& (0+255),w,b
 11952  001C86  A0D8               	btfss	status,0,c
 11953  001C88  D7E2               	goto	l937
 11954                           
 11955                           ; BSR set to: 0
 11956                           ;arp.c: 174: for (uint8_t i = 0; i < arp.plen; i++)
 11957                           
 11958                           ; BSR set to: 0
 11959  001C8A  0E00               	movlw	0
 11960  001C8C  6FCE               	movwf	ARP_send@i_3039& (0+255),b
 11961  001C8E  D01A               	goto	l939
 11962  001C90                     
 11963                           ; BSR set to: 0
 11964                           ;arp.c: 175: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield);
 11965                           
 11966                           ; BSR set to: 0
 11967  001C90  EE20  F0F3         	lfsr	2,ARP_send@field
 11968  001C94  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 11969  001C98  0E08               	movlw	8
 11970  001C9A                     u9411:
 11971  001C9A  CFDB FFEB          	movff	plusw2,plusw0
 11972  001C9E  06E8               	decf	wreg,f,c
 11973  001CA0  E2FC               	bc	u9411
 11974  001CA2  51CE               	movf	ARP_send@i_3039& (0+255),w,b
 11975  001CA4  0D01               	mullw	1
 11976  001CA6  0E0E               	movlw	14
 11977  001CA8  26F3               	addwf	prodl,f,c
 11978  001CAA  0E00               	movlw	0
 11979  001CAC  22F4               	addwfc	prodh,f,c
 11980  001CAE  0EA7               	movlw	low ARP_send@arp
 11981  001CB0  24F3               	addwf	prodl,w,c
 11982  001CB2  6ED9               	movwf	fsr2l,c
 11983  001CB4  0E00               	movlw	high ARP_send@arp
 11984  001CB6  20F4               	addwfc	prodh,w,c
 11985  001CB8  6EDA               	movwf	fsr2h,c
 11986  001CBA  50DF               	movf	indf2,w,c
 11987  001CBC  EC7D  F01F         	call	_ethernetController_streamToTransmitBuffer
 11988  001CC0  0100               	movlb	0	; () banked
 11989  001CC2  2BCE               	incf	ARP_send@i_3039& (0+255),f,b
 11990  001CC4                     l939:
 11991                           
 11992                           ; BSR set to: 0
 11993                           
 11994                           ; BSR set to: 0
 11995  001CC4  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 11996  001CC6  5DCE               	subwf	ARP_send@i_3039& (0+255),w,b
 11997  001CC8  A0D8               	btfss	status,0,c
 11998  001CCA  D7E2               	goto	l940
 11999                           
 12000                           ; BSR set to: 0
 12001                           ;arp.c: 176: for (uint8_t i = 0; i < arp.hlen; i++)
 12002                           
 12003                           ; BSR set to: 0
 12004  001CCC  0E00               	movlw	0
 12005  001CCE  6FCF               	movwf	ARP_send@i_3040& (0+255),b
 12006  001CD0  D01A               	goto	l942
 12007  001CD2                     
 12008                           ; BSR set to: 0
 12009                           ;arp.c: 177: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field);
 12010                           
 12011                           ; BSR set to: 0
 12012  001CD2  EE20  F0F3         	lfsr	2,ARP_send@field
 12013  001CD6  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12014  001CDA  0E08               	movlw	8
 12015  001CDC                     u9431:
 12016  001CDC  CFDB FFEB          	movff	plusw2,plusw0
 12017  001CE0  06E8               	decf	wreg,f,c
 12018  001CE2  E2FC               	bc	u9431
 12019  001CE4  51CF               	movf	ARP_send@i_3040& (0+255),w,b
 12020  001CE6  0D01               	mullw	1
 12021  001CE8  0E12               	movlw	18
 12022  001CEA  26F3               	addwf	prodl,f,c
 12023  001CEC  0E00               	movlw	0
 12024  001CEE  22F4               	addwfc	prodh,f,c
 12025  001CF0  0EA7               	movlw	low ARP_send@arp
 12026  001CF2  24F3               	addwf	prodl,w,c
 12027  001CF4  6ED9               	movwf	fsr2l,c
 12028  001CF6  0E00               	movlw	high ARP_send@arp
 12029  001CF8  20F4               	addwfc	prodh,w,c
 12030  001CFA  6EDA               	movwf	fsr2h,c
 12031  001CFC  50DF               	movf	indf2,w,c
 12032  001CFE  EC7D  F01F         	call	_ethernetController_streamToTransmitBuffer
 12033  001D02  0100               	movlb	0	; () banked
 12034  001D04  2BCF               	incf	ARP_send@i_3040& (0+255),f,b
 12035  001D06                     l942:
 12036                           
 12037                           ; BSR set to: 0
 12038                           
 12039                           ; BSR set to: 0
 12040  001D06  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 12041  001D08  5DCF               	subwf	ARP_send@i_3040& (0+255),w,b
 12042  001D0A  A0D8               	btfss	status,0,c
 12043  001D0C  D7E2               	goto	l943
 12044                           
 12045                           ; BSR set to: 0
 12046                           ;arp.c: 179: for (uint8_t i = 0; i < arp.plen; i++)
 12047                           
 12048                           ; BSR set to: 0
 12049  001D0E  0E00               	movlw	0
 12050  001D10  6FD0               	movwf	ARP_send@i_3041& (0+255),b
 12051  001D12  D01A               	goto	l945
 12052  001D14                     
 12053                           ; BSR set to: 0
 12054                           ;arp.c: 180: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield);
 12055                           
 12056                           ; BSR set to: 0
 12057  001D14  EE20  F0F3         	lfsr	2,ARP_send@field
 12058  001D18  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12059  001D1C  0E08               	movlw	8
 12060  001D1E                     u9451:
 12061  001D1E  CFDB FFEB          	movff	plusw2,plusw0
 12062  001D22  06E8               	decf	wreg,f,c
 12063  001D24  E2FC               	bc	u9451
 12064  001D26  51D0               	movf	ARP_send@i_3041& (0+255),w,b
 12065  001D28  0D01               	mullw	1
 12066  001D2A  0E18               	movlw	24
 12067  001D2C  26F3               	addwf	prodl,f,c
 12068  001D2E  0E00               	movlw	0
 12069  001D30  22F4               	addwfc	prodh,f,c
 12070  001D32  0EA7               	movlw	low ARP_send@arp
 12071  001D34  24F3               	addwf	prodl,w,c
 12072  001D36  6ED9               	movwf	fsr2l,c
 12073  001D38  0E00               	movlw	high ARP_send@arp
 12074  001D3A  20F4               	addwfc	prodh,w,c
 12075  001D3C  6EDA               	movwf	fsr2h,c
 12076  001D3E  50DF               	movf	indf2,w,c
 12077  001D40  EC7D  F01F         	call	_ethernetController_streamToTransmitBuffer
 12078  001D44  0100               	movlb	0	; () banked
 12079  001D46  2BD0               	incf	ARP_send@i_3041& (0+255),f,b
 12080  001D48                     l945:
 12081                           
 12082                           ; BSR set to: 0
 12083                           
 12084                           ; BSR set to: 0
 12085  001D48  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 12086  001D4A  5DD0               	subwf	ARP_send@i_3041& (0+255),w,b
 12087  001D4C  A0D8               	btfss	status,0,c
 12088  001D4E  D7E2               	goto	l946
 12089                           
 12090                           ; BSR set to: 0
 12091                           ;arp.c: 182: ethernetController_sendPacket(ethFrame.memory);
 12092                           
 12093                           ; BSR set to: 0
 12094  001D50  EE20  F0E1         	lfsr	2,ARP_send@ethFrame+16
 12095  001D54  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 12096  001D58  0E08               	movlw	8
 12097  001D5A                     u9471:
 12098  001D5A  CFDB FFEB          	movff	plusw2,plusw0
 12099  001D5E  06E8               	decf	wreg,f,c
 12100  001D60  E2FC               	bc	u9471
 12101  001D62  EC47  F025         	call	_ethernetController_sendPacket	;wreg free
 12102  001D66  0012               	return		;funcret
 12103  001D68                     __end_of_ARP_send:
 12104                           	opt stack 0
 12105                           tblptru	equ	0xFF8
 12106                           tblptrh	equ	0xFF7
 12107                           tblptrl	equ	0xFF6
 12108                           tablat	equ	0xFF5
 12109                           prodh	equ	0xFF4
 12110                           prodl	equ	0xFF3
 12111                           intcon	equ	0xFF2
 12112                           intcon3	equ	0xFF0
 12113                           indf0	equ	0xFEF
 12114                           postinc0	equ	0xFEE
 12115                           plusw0	equ	0xFEB
 12116                           fsr0h	equ	0xFEA
 12117                           fsr0l	equ	0xFE9
 12118                           wreg	equ	0xFE8
 12119                           indf1	equ	0xFE7
 12120                           postinc1	equ	0xFE6
 12121                           postdec1	equ	0xFE5
 12122                           plusw1	equ	0xFE3
 12123                           fsr1h	equ	0xFE2
 12124                           fsr1l	equ	0xFE1
 12125                           indf2	equ	0xFDF
 12126                           postinc2	equ	0xFDE
 12127                           postdec2	equ	0xFDD
 12128                           plusw2	equ	0xFDB
 12129                           fsr2h	equ	0xFDA
 12130                           fsr2l	equ	0xFD9
 12131                           status	equ	0xFD8
 12132                           
 12133 ;; *************** function _mac_setToBroadcast *****************
 12134 ;; Defined at:
 12135 ;;		line 26 in file "src/eth/mac.c"
 12136 ;; Parameters:    Size  Location     Type
 12137 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 12138 ;;		 -> ARP_send@destination(6), 
 12139 ;; Auto vars:     Size  Location     Type
 12140 ;;  i               1    2[BANK0 ] unsigned char 
 12141 ;; Return value:  Size  Location     Type
 12142 ;;                  1    wreg      void 
 12143 ;; Registers used:
 12144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12145 ;; Tracked objects:
 12146 ;;		On entry : 0/0
 12147 ;;		On exit  : 0/0
 12148 ;;		Unchanged: 0/0
 12149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12150 ;;      Params:         0       2       0       0       0       0       0       0       0
 12151 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12152 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12153 ;;      Totals:         0       3       0       0       0       0       0       0       0
 12154 ;;Total ram usage:        3 bytes
 12155 ;; Hardware stack levels used:    1
 12156 ;; Hardware stack levels required when called:    4
 12157 ;; This function calls:
 12158 ;;		Nothing
 12159 ;; This function is called by:
 12160 ;;		_ARP_send
 12161 ;; This function uses a non-reentrant model
 12162 ;;
 12163                           
 12164                           	psect	text39
 12165  004ADE                     __ptext39:
 12166                           	opt stack 0
 12167  004ADE                     _mac_setToBroadcast:
 12168                           	opt stack 21
 12169                           
 12170                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 12171                           
 12172                           ;incstack = 0
 12173  004ADE  0E00               	movlw	0
 12174  004AE0  0100               	movlb	0	; () banked
 12175  004AE2  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 12176  004AE4                     l7591:
 12177                           
 12178                           ; BSR set to: 0
 12179  004AE4  0E05               	movlw	5
 12180  004AE6  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 12181  004AE8  D001               	goto	l381
 12182  004AEA  0012               	return	
 12183  004AEC                     l381:
 12184                           
 12185                           ; BSR set to: 0
 12186                           ;mac.c: 28: mac->address[i] = 0xff;
 12187                           
 12188                           ; BSR set to: 0
 12189  004AEC  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 12190  004AEE  0D01               	mullw	1
 12191  004AF0  50F3               	movf	prodl,w,c
 12192  004AF2  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 12193  004AF4  6ED9               	movwf	fsr2l,c
 12194  004AF6  50F4               	movf	prodh,w,c
 12195  004AF8  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 12196  004AFA  6EDA               	movwf	fsr2h,c
 12197  004AFC  0EFF               	movlw	255
 12198  004AFE  6EDF               	movwf	indf2,c
 12199                           
 12200                           ; BSR set to: 0
 12201  004B00  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 12202  004B02  D7F0               	goto	l7591
 12203  004B04                     __end_of_mac_setToBroadcast:
 12204                           	opt stack 0
 12205                           tblptru	equ	0xFF8
 12206                           tblptrh	equ	0xFF7
 12207                           tblptrl	equ	0xFF6
 12208                           tablat	equ	0xFF5
 12209                           prodh	equ	0xFF4
 12210                           prodl	equ	0xFF3
 12211                           intcon	equ	0xFF2
 12212                           intcon3	equ	0xFF0
 12213                           indf0	equ	0xFEF
 12214                           postinc0	equ	0xFEE
 12215                           plusw0	equ	0xFEB
 12216                           fsr0h	equ	0xFEA
 12217                           fsr0l	equ	0xFE9
 12218                           wreg	equ	0xFE8
 12219                           indf1	equ	0xFE7
 12220                           postinc1	equ	0xFE6
 12221                           postdec1	equ	0xFE5
 12222                           plusw1	equ	0xFE3
 12223                           fsr1h	equ	0xFE2
 12224                           fsr1l	equ	0xFE1
 12225                           indf2	equ	0xFDF
 12226                           postinc2	equ	0xFDE
 12227                           postdec2	equ	0xFDD
 12228                           plusw2	equ	0xFDB
 12229                           fsr2h	equ	0xFDA
 12230                           fsr2l	equ	0xFD9
 12231                           status	equ	0xFD8
 12232                           
 12233 ;; *************** function _hexToString *****************
 12234 ;; Defined at:
 12235 ;;		line 149 in file "src/system/uart.c"
 12236 ;; Parameters:    Size  Location     Type
 12237 ;;  val             4    1[BANK0 ] unsigned long 
 12238 ;; Auto vars:     Size  Location     Type
 12239 ;;  pointer         1    9[BANK0 ] unsigned char 
 12240 ;; Return value:  Size  Location     Type
 12241 ;;                  2    1[BANK0 ] PTR unsigned char 
 12242 ;; Registers used:
 12243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12244 ;; Tracked objects:
 12245 ;;		On entry : 0/0
 12246 ;;		On exit  : 0/0
 12247 ;;		Unchanged: 0/0
 12248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12249 ;;      Params:         0       4       0       0       0       0       0       0       0
 12250 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12251 ;;      Temps:          0       4       0       0       0       0       0       0       0
 12252 ;;      Totals:         0       9       0       0       0       0       0       0       0
 12253 ;;Total ram usage:        9 bytes
 12254 ;; Hardware stack levels used:    1
 12255 ;; Hardware stack levels required when called:    5
 12256 ;; This function calls:
 12257 ;;		_hexToChar
 12258 ;; This function is called by:
 12259 ;;		_ARP_send
 12260 ;;		_ipv4_checkHeaderChecksum
 12261 ;; This function uses a non-reentrant model
 12262 ;;
 12263                           
 12264                           	psect	text40
 12265  00335A                     __ptext40:
 12266                           	opt stack 0
 12267  00335A                     _hexToString:
 12268                           	opt stack 20
 12269                           
 12270                           ;uart.c: 150: char static number [10];
 12271                           ;uart.c: 151: uint8_t pointer = 0;
 12272                           
 12273                           ; BSR set to: 0
 12274                           ;incstack = 0
 12275  00335A  0E00               	movlw	0
 12276  00335C  0100               	movlb	0	; () banked
 12277  00335E  6F69               	movwf	hexToString@pointer& (0+255),b
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;uart.c: 152: if (val > 0xff) {
 12281  003360  5164               	movf	(hexToString@val+3)& (0+255),w,b
 12282  003362  1163               	iorwf	(hexToString@val+2)& (0+255),w,b
 12283  003364  E103               	bnz	u8900
 12284  003366  0562               	decf	(hexToString@val+1)& (0+255),w,b
 12285  003368  A0D8               	btfss	status,0,c
 12286  00336A  D02F               	goto	l787
 12287  00336C                     u8900:
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;uart.c: 153: number[pointer++] = hexToChar((val >> 12) & 0xf);
 12291  00336C  5169               	movf	hexToString@pointer& (0+255),w,b
 12292  00336E  0D01               	mullw	1
 12293  003370  0ED9               	movlw	low hexToString@number
 12294  003372  24F3               	addwf	prodl,w,c
 12295  003374  6ED9               	movwf	fsr2l,c
 12296  003376  0E01               	movlw	high hexToString@number
 12297  003378  20F4               	addwfc	prodh,w,c
 12298  00337A  6EDA               	movwf	fsr2h,c
 12299  00337C  C061  F065         	movff	hexToString@val,??_hexToString
 12300  003380  C062  F066         	movff	hexToString@val+1,??_hexToString+1
 12301  003384  C063  F067         	movff	hexToString@val+2,??_hexToString+2
 12302  003388  C064  F068         	movff	hexToString@val+3,??_hexToString+3
 12303  00338C  0E0D               	movlw	13
 12304  00338E  D005               	goto	u8910
 12305  003390                     u8915:
 12306  003390  90D8               	bcf	status,0,c
 12307  003392  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
 12308  003394  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
 12309  003396  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
 12310  003398  3365               	rrcf	??_hexToString& (0+255),f,b
 12311  00339A                     u8910:
 12312  00339A  2EE8               	decfsz	wreg,f,c
 12313  00339C  D7F9               	goto	u8915
 12314  00339E  5165               	movf	??_hexToString& (0+255),w,b
 12315  0033A0  0B0F               	andlw	15
 12316  0033A2  ECCA  F025         	call	_hexToChar
 12317  0033A6  6EDF               	movwf	indf2,c
 12318  0033A8  0100               	movlb	0	; () banked
 12319  0033AA  2B69               	incf	hexToString@pointer& (0+255),f,b
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;uart.c: 154: number[pointer++] = hexToChar((val >> 8) & 0xf);
 12323  0033AC  5169               	movf	hexToString@pointer& (0+255),w,b
 12324  0033AE  0D01               	mullw	1
 12325  0033B0  0ED9               	movlw	low hexToString@number
 12326  0033B2  24F3               	addwf	prodl,w,c
 12327  0033B4  6ED9               	movwf	fsr2l,c
 12328  0033B6  0E01               	movlw	high hexToString@number
 12329  0033B8  20F4               	addwfc	prodh,w,c
 12330  0033BA  6EDA               	movwf	fsr2h,c
 12331  0033BC  5162               	movf	(hexToString@val+1)& (0+255),w,b
 12332  0033BE  0B0F               	andlw	15
 12333  0033C0  ECCA  F025         	call	_hexToChar
 12334  0033C4  6EDF               	movwf	indf2,c
 12335  0033C6  0100               	movlb	0	; () banked
 12336  0033C8  2B69               	incf	hexToString@pointer& (0+255),f,b
 12337  0033CA                     l787:
 12338                           
 12339                           ; BSR set to: 0
 12340                           ;uart.c: 155: }
 12341                           ;uart.c: 156: number[pointer++] = hexToChar((val >> 4) & 0xf);
 12342                           
 12343                           ; BSR set to: 0
 12344  0033CA  5169               	movf	hexToString@pointer& (0+255),w,b
 12345  0033CC  0D01               	mullw	1
 12346  0033CE  0ED9               	movlw	low hexToString@number
 12347  0033D0  24F3               	addwf	prodl,w,c
 12348  0033D2  6ED9               	movwf	fsr2l,c
 12349  0033D4  0E01               	movlw	high hexToString@number
 12350  0033D6  20F4               	addwfc	prodh,w,c
 12351  0033D8  6EDA               	movwf	fsr2h,c
 12352  0033DA  C061  F065         	movff	hexToString@val,??_hexToString
 12353  0033DE  C062  F066         	movff	hexToString@val+1,??_hexToString+1
 12354  0033E2  C063  F067         	movff	hexToString@val+2,??_hexToString+2
 12355  0033E6  C064  F068         	movff	hexToString@val+3,??_hexToString+3
 12356  0033EA  0E05               	movlw	5
 12357  0033EC  D005               	goto	u8920
 12358  0033EE                     u8925:
 12359  0033EE  90D8               	bcf	status,0,c
 12360  0033F0  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
 12361  0033F2  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
 12362  0033F4  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
 12363  0033F6  3365               	rrcf	??_hexToString& (0+255),f,b
 12364  0033F8                     u8920:
 12365  0033F8  2EE8               	decfsz	wreg,f,c
 12366  0033FA  D7F9               	goto	u8925
 12367  0033FC  5165               	movf	??_hexToString& (0+255),w,b
 12368  0033FE  0B0F               	andlw	15
 12369  003400  ECCA  F025         	call	_hexToChar
 12370  003404  6EDF               	movwf	indf2,c
 12371  003406  0100               	movlb	0	; () banked
 12372  003408  2B69               	incf	hexToString@pointer& (0+255),f,b
 12373                           
 12374                           ;uart.c: 157: number[pointer++] = hexToChar(val & 0xf);
 12375  00340A  5169               	movf	hexToString@pointer& (0+255),w,b
 12376  00340C  0D01               	mullw	1
 12377  00340E  0ED9               	movlw	low hexToString@number
 12378  003410  24F3               	addwf	prodl,w,c
 12379  003412  6ED9               	movwf	fsr2l,c
 12380  003414  0E01               	movlw	high hexToString@number
 12381  003416  20F4               	addwfc	prodh,w,c
 12382  003418  6EDA               	movwf	fsr2h,c
 12383  00341A  5161               	movf	hexToString@val& (0+255),w,b
 12384  00341C  0B0F               	andlw	15
 12385  00341E  ECCA  F025         	call	_hexToChar
 12386  003422  6EDF               	movwf	indf2,c
 12387  003424  0100               	movlb	0	; () banked
 12388  003426  2B69               	incf	hexToString@pointer& (0+255),f,b
 12389                           
 12390                           ; BSR set to: 0
 12391                           ;uart.c: 159: number[pointer++] = '\0';
 12392  003428  5169               	movf	hexToString@pointer& (0+255),w,b
 12393  00342A  0D01               	mullw	1
 12394  00342C  0ED9               	movlw	low hexToString@number
 12395  00342E  24F3               	addwf	prodl,w,c
 12396  003430  6ED9               	movwf	fsr2l,c
 12397  003432  0E01               	movlw	high hexToString@number
 12398  003434  20F4               	addwfc	prodh,w,c
 12399  003436  6EDA               	movwf	fsr2h,c
 12400  003438  0E00               	movlw	0
 12401  00343A  6EDF               	movwf	indf2,c
 12402                           
 12403                           ; BSR set to: 0
 12404  00343C  2B69               	incf	hexToString@pointer& (0+255),f,b
 12405                           
 12406                           ; BSR set to: 0
 12407                           ;uart.c: 160: return number;
 12408  00343E  0ED9               	movlw	low hexToString@number
 12409  003440  6F61               	movwf	?_hexToString& (0+255),b
 12410  003442  0E01               	movlw	high hexToString@number
 12411  003444  6F62               	movwf	(?_hexToString+1)& (0+255),b
 12412  003446  0012               	return	
 12413  003448                     __end_of_hexToString:
 12414                           	opt stack 0
 12415                           tblptru	equ	0xFF8
 12416                           tblptrh	equ	0xFF7
 12417                           tblptrl	equ	0xFF6
 12418                           tablat	equ	0xFF5
 12419                           prodh	equ	0xFF4
 12420                           prodl	equ	0xFF3
 12421                           intcon	equ	0xFF2
 12422                           intcon3	equ	0xFF0
 12423                           indf0	equ	0xFEF
 12424                           postinc0	equ	0xFEE
 12425                           plusw0	equ	0xFEB
 12426                           fsr0h	equ	0xFEA
 12427                           fsr0l	equ	0xFE9
 12428                           wreg	equ	0xFE8
 12429                           indf1	equ	0xFE7
 12430                           postinc1	equ	0xFE6
 12431                           postdec1	equ	0xFE5
 12432                           plusw1	equ	0xFE3
 12433                           fsr1h	equ	0xFE2
 12434                           fsr1l	equ	0xFE1
 12435                           indf2	equ	0xFDF
 12436                           postinc2	equ	0xFDE
 12437                           postdec2	equ	0xFDD
 12438                           plusw2	equ	0xFDB
 12439                           fsr2h	equ	0xFDA
 12440                           fsr2l	equ	0xFD9
 12441                           status	equ	0xFD8
 12442                           
 12443 ;; *************** function _hexToChar *****************
 12444 ;; Defined at:
 12445 ;;		line 140 in file "src/system/uart.c"
 12446 ;; Parameters:    Size  Location     Type
 12447 ;;  val             1    wreg     unsigned char 
 12448 ;; Auto vars:     Size  Location     Type
 12449 ;;  val             1    0[BANK0 ] unsigned char 
 12450 ;; Return value:  Size  Location     Type
 12451 ;;                  1    wreg      unsigned char 
 12452 ;; Registers used:
 12453 ;;		wreg, status,2, status,0
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12459 ;;      Params:         0       0       0       0       0       0       0       0       0
 12460 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12461 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12462 ;;      Totals:         0       1       0       0       0       0       0       0       0
 12463 ;;Total ram usage:        1 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; Hardware stack levels required when called:    4
 12466 ;; This function calls:
 12467 ;;		Nothing
 12468 ;; This function is called by:
 12469 ;;		_hexToString
 12470 ;; This function uses a non-reentrant model
 12471 ;;
 12472                           
 12473                           	psect	text41
 12474  004B94                     __ptext41:
 12475                           	opt stack 0
 12476  004B94                     _hexToChar:
 12477                           	opt stack 20
 12478                           
 12479                           ; BSR set to: 0
 12480                           ;incstack = 0
 12481                           ;hexToChar@val stored from wreg
 12482  004B94  0100               	movlb	0	; () banked
 12483  004B96  6F60               	movwf	hexToChar@val& (0+255),b
 12484                           
 12485                           ;uart.c: 141: if (val < 10) {
 12486  004B98  0E0A               	movlw	10
 12487  004B9A  0100               	movlb	0	; () banked
 12488  004B9C  6160               	cpfslt	hexToChar@val& (0+255),b
 12489  004B9E  D003               	goto	l779
 12490                           
 12491                           ; BSR set to: 0
 12492                           ;uart.c: 142: return val + 0x30u;
 12493  004BA0  5160               	movf	hexToChar@val& (0+255),w,b
 12494  004BA2  0F30               	addlw	48
 12495                           
 12496                           ; BSR set to: 0
 12497  004BA4  0012               	return	
 12498  004BA6                     l779:
 12499                           
 12500                           ; BSR set to: 0
 12501                           
 12502                           ; BSR set to: 0
 12503  004BA6  0E10               	movlw	16
 12504  004BA8  6160               	cpfslt	hexToChar@val& (0+255),b
 12505  004BAA  D003               	goto	l782
 12506                           
 12507                           ; BSR set to: 0
 12508                           ;uart.c: 144: return val + 0x41u - 10;
 12509  004BAC  5160               	movf	hexToChar@val& (0+255),w,b
 12510  004BAE  0F37               	addlw	55
 12511                           
 12512                           ; BSR set to: 0
 12513  004BB0  0012               	return	
 12514  004BB2                     l782:
 12515                           
 12516                           ; BSR set to: 0
 12517                           ;uart.c: 145: }
 12518                           ;uart.c: 146: return 0;
 12519                           
 12520                           ; BSR set to: 0
 12521                           
 12522                           ; BSR set to: 0
 12523  004BB2  0E00               	movlw	0
 12524  004BB4  0012               	return	
 12525  004BB6                     __end_of_hexToChar:
 12526                           	opt stack 0
 12527                           tblptru	equ	0xFF8
 12528                           tblptrh	equ	0xFF7
 12529                           tblptrl	equ	0xFF6
 12530                           tablat	equ	0xFF5
 12531                           prodh	equ	0xFF4
 12532                           prodl	equ	0xFF3
 12533                           intcon	equ	0xFF2
 12534                           intcon3	equ	0xFF0
 12535                           indf0	equ	0xFEF
 12536                           postinc0	equ	0xFEE
 12537                           plusw0	equ	0xFEB
 12538                           fsr0h	equ	0xFEA
 12539                           fsr0l	equ	0xFE9
 12540                           wreg	equ	0xFE8
 12541                           indf1	equ	0xFE7
 12542                           postinc1	equ	0xFE6
 12543                           postdec1	equ	0xFE5
 12544                           plusw1	equ	0xFE3
 12545                           fsr1h	equ	0xFE2
 12546                           fsr1l	equ	0xFE1
 12547                           indf2	equ	0xFDF
 12548                           postinc2	equ	0xFDE
 12549                           postdec2	equ	0xFDD
 12550                           plusw2	equ	0xFDB
 12551                           fsr2h	equ	0xFDA
 12552                           fsr2l	equ	0xFD9
 12553                           status	equ	0xFD8
 12554                           
 12555 ;; *************** function _ethernet_txFrameRequest *****************
 12556 ;; Defined at:
 12557 ;;		line 29 in file "src/eth/ethernet.c"
 12558 ;; Parameters:    Size  Location     Type
 12559 ;;  frame           2   66[BANK0 ] PTR struct ethernetFrame
 12560 ;;		 -> ARP_send@ethFrame(34), 
 12561 ;; Auto vars:     Size  Location     Type
 12562 ;;  err             3   68[BANK0 ] struct error
 12563 ;; Return value:  Size  Location     Type
 12564 ;;                  3   66[BANK0 ] struct error
 12565 ;; Registers used:
 12566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12567 ;; Tracked objects:
 12568 ;;		On entry : 0/0
 12569 ;;		On exit  : 0/0
 12570 ;;		Unchanged: 0/0
 12571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12572 ;;      Params:         0       2       0       0       0       0       0       0       0
 12573 ;;      Locals:         0       3       0       0       0       0       0       0       0
 12574 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12575 ;;      Totals:         0       5       0       0       0       0       0       0       0
 12576 ;;Total ram usage:        5 bytes
 12577 ;; Hardware stack levels used:    1
 12578 ;; Hardware stack levels required when called:    8
 12579 ;; This function calls:
 12580 ;;		_ethernetController_writeDestinationMACAddress
 12581 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 12582 ;;		_memory_txFrameRequest
 12583 ;; This function is called by:
 12584 ;;		_ARP_send
 12585 ;;		_ipv4_txFrameRequest
 12586 ;; This function uses a non-reentrant model
 12587 ;;
 12588                           
 12589                           	psect	text42
 12590  003536                     __ptext42:
 12591                           	opt stack 0
 12592  003536                     _ethernet_txFrameRequest:
 12593                           	opt stack 17
 12594                           
 12595                           ;ethernet.c: 31: error_t err;
 12596                           ;ethernet.c: 32: err.module = ERROR_MODULE_ETHERNET;
 12597                           
 12598                           ; BSR set to: 0
 12599                           ;incstack = 0
 12600  003536  0E02               	movlw	2
 12601  003538  0100               	movlb	0	; () banked
 12602  00353A  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 12603                           
 12604                           ;ethernet.c: 33: err.code = (uint16_t)0;
 12605  00353C  0E00               	movlw	0
 12606  00353E  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 12607  003540  0E00               	movlw	0
 12608  003542  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 12609                           
 12610                           ; BSR set to: 0
 12611                           ;ethernet.c: 34: frame->memory = memory_txFrameRequest(frame->length);
 12612  003544  C0A2  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 12613  003548  C0A3  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 12614  00354C  CFDE F084          	movff	postinc2,memory_txFrameRequest@length
 12615  003550  CFDD F085          	movff	postdec2,memory_txFrameRequest@length+1
 12616  003554  ECD0  F005         	call	_memory_txFrameRequest	;wreg free
 12617  003558  0100               	movlb	0	; () banked
 12618  00355A  EE20 F010          	lfsr	2,16
 12619  00355E  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12620  003560  26D9               	addwf	fsr2l,f,c
 12621  003562  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12622  003564  22DA               	addwfc	fsr2h,f,c
 12623  003566  0E08               	movlw	8
 12624  003568                     u8781:
 12625  003568  CFEB FFDB          	movff	plusw0,plusw2
 12626  00356C  06E8               	decf	wreg,f,c
 12627  00356E  E2FC               	bc	u8781
 12628                           
 12629                           ; BSR set to: 0
 12630                           ;ethernet.c: 36: if (frame->memory.fOutOfMemory) {
 12631  003570  EE20 F017          	lfsr	2,23
 12632  003574  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12633  003576  26D9               	addwf	fsr2l,f,c
 12634  003578  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12635  00357A  22DA               	addwfc	fsr2h,f,c
 12636  00357C  50DF               	movf	indf2,w,c
 12637  00357E  B4D8               	btfsc	status,2,c
 12638  003580  D007               	goto	l359
 12639                           
 12640                           ; BSR set to: 0
 12641                           ;ethernet.c: 38: err.module = ERROR_MODULE_MEMORY;
 12642  003582  0E00               	movlw	0
 12643  003584  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 12644                           
 12645                           ;ethernet.c: 39: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 12646  003586  0E00               	movlw	0
 12647  003588  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 12648  00358A  0E65               	movlw	101
 12649  00358C  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 12650                           
 12651                           ; BSR set to: 0
 12652                           ;ethernet.c: 40: return err;
 12653                           ;	Return value of _ethernet_txFrameRequest is never used
 12654  00358E  0012               	return	
 12655  003590                     l359:
 12656                           
 12657                           ; BSR set to: 0
 12658                           ;ethernet.c: 41: }
 12659                           ;ethernet.c: 42: if (!frame->memory.fIsAssigned) {
 12660                           
 12661                           ; BSR set to: 0
 12662  003590  EE20 F016          	lfsr	2,22
 12663  003594  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12664  003596  26D9               	addwf	fsr2l,f,c
 12665  003598  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12666  00359A  22DA               	addwfc	fsr2h,f,c
 12667  00359C  50DF               	movf	indf2,w,c
 12668  00359E  A4D8               	btfss	status,2,c
 12669  0035A0  D007               	goto	l361
 12670                           
 12671                           ; BSR set to: 0
 12672                           ;ethernet.c: 44: err.module = ERROR_MODULE_MEMORY;
 12673  0035A2  0E00               	movlw	0
 12674  0035A4  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 12675                           
 12676                           ;ethernet.c: 45: err.code = ERROR_MEMORY_UNKNOWN;
 12677  0035A6  0E00               	movlw	0
 12678  0035A8  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 12679  0035AA  0EC7               	movlw	199
 12680  0035AC  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 12681                           
 12682                           ; BSR set to: 0
 12683                           ;ethernet.c: 46: return err;
 12684                           ;	Return value of _ethernet_txFrameRequest is never used
 12685  0035AE  0012               	return	
 12686  0035B0                     l361:
 12687                           
 12688                           ; BSR set to: 0
 12689                           ;ethernet.c: 47: }
 12690                           ;ethernet.c: 49: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 12691                           
 12692                           ; BSR set to: 0
 12693  0035B0  EE20 F008          	lfsr	2,8
 12694  0035B4  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12695  0035B6  26D9               	addwf	fsr2l,f,c
 12696  0035B8  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12697  0035BA  22DA               	addwfc	fsr2h,f,c
 12698  0035BC  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 12699  0035C0  0E05               	movlw	5
 12700  0035C2                     u8811:
 12701  0035C2  CFDB FFEB          	movff	plusw2,plusw0
 12702  0035C6  06E8               	decf	wreg,f,c
 12703  0035C8  E2FC               	bc	u8811
 12704  0035CA  EE20 F010          	lfsr	2,16
 12705  0035CE  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12706  0035D0  26D9               	addwf	fsr2l,f,c
 12707  0035D2  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12708  0035D4  22DA               	addwfc	fsr2h,f,c
 12709  0035D6  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 12710  0035DA  0E08               	movlw	8
 12711  0035DC                     u8821:
 12712  0035DC  CFDB FFEB          	movff	plusw2,plusw0
 12713  0035E0  06E8               	decf	wreg,f,c
 12714  0035E2  E2FC               	bc	u8821
 12715  0035E4  EC82  F01E         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 12716                           
 12717                           ;ethernet.c: 50: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 12718  0035E8  0100               	movlb	0	; () banked
 12719  0035EA  EE20 F00E          	lfsr	2,14
 12720  0035EE  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12721  0035F0  26D9               	addwf	fsr2l,f,c
 12722  0035F2  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12723  0035F4  22DA               	addwfc	fsr2h,f,c
 12724  0035F6  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 12725  0035FA  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 12726  0035FE  EE20 F010          	lfsr	2,16
 12727  003602  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12728  003604  26D9               	addwf	fsr2l,f,c
 12729  003606  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12730  003608  22DA               	addwfc	fsr2h,f,c
 12731  00360A  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 12732  00360E  0E08               	movlw	8
 12733  003610                     u8831:
 12734  003610  CFDB FFEB          	movff	plusw2,plusw0
 12735  003614  06E8               	decf	wreg,f,c
 12736  003616  E2FC               	bc	u8831
 12737  003618  ECB2  F022         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 12738  00361C  0012               	return	
 12739  00361E                     __end_of_ethernet_txFrameRequest:
 12740                           	opt stack 0
 12741                           tblptru	equ	0xFF8
 12742                           tblptrh	equ	0xFF7
 12743                           tblptrl	equ	0xFF6
 12744                           tablat	equ	0xFF5
 12745                           prodh	equ	0xFF4
 12746                           prodl	equ	0xFF3
 12747                           intcon	equ	0xFF2
 12748                           intcon3	equ	0xFF0
 12749                           indf0	equ	0xFEF
 12750                           postinc0	equ	0xFEE
 12751                           plusw0	equ	0xFEB
 12752                           fsr0h	equ	0xFEA
 12753                           fsr0l	equ	0xFE9
 12754                           wreg	equ	0xFE8
 12755                           indf1	equ	0xFE7
 12756                           postinc1	equ	0xFE6
 12757                           postdec1	equ	0xFE5
 12758                           plusw1	equ	0xFE3
 12759                           fsr1h	equ	0xFE2
 12760                           fsr1l	equ	0xFE1
 12761                           indf2	equ	0xFDF
 12762                           postinc2	equ	0xFDE
 12763                           postdec2	equ	0xFDD
 12764                           plusw2	equ	0xFDB
 12765                           fsr2h	equ	0xFDA
 12766                           fsr2l	equ	0xFD9
 12767                           status	equ	0xFD8
 12768                           
 12769 ;; *************** function _memory_txFrameRequest *****************
 12770 ;; Defined at:
 12771 ;;		line 136 in file "src/mem/memoryController.c"
 12772 ;; Parameters:    Size  Location     Type
 12773 ;;  length          2   36[BANK0 ] unsigned int 
 12774 ;; Auto vars:     Size  Location     Type
 12775 ;;  i               1   54[BANK0 ] unsigned char 
 12776 ;;  i               1   55[BANK0 ] unsigned char 
 12777 ;;  fNoOverlapMa    1   53[BANK0 ] unsigned char 
 12778 ;;  field           9   56[BANK0 ] struct memoryField
 12779 ;;  freeIndex       1   65[BANK0 ] unsigned char 
 12780 ;; Return value:  Size  Location     Type
 12781 ;;                  9   36[BANK0 ] struct memoryField
 12782 ;; Registers used:
 12783 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12784 ;; Tracked objects:
 12785 ;;		On entry : 0/0
 12786 ;;		On exit  : 0/0
 12787 ;;		Unchanged: 0/0
 12788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12789 ;;      Params:         0       9       0       0       0       0       0       0       0
 12790 ;;      Locals:         0      15       0       0       0       0       0       0       0
 12791 ;;      Temps:          0       6       0       0       0       0       0       0       0
 12792 ;;      Totals:         0      30       0       0       0       0       0       0       0
 12793 ;;Total ram usage:       30 bytes
 12794 ;; Hardware stack levels used:    1
 12795 ;; Hardware stack levels required when called:    6
 12796 ;; This function calls:
 12797 ;;		___wmul
 12798 ;;		_checkForOverlap
 12799 ;;		_entireMemoryEmpty
 12800 ;;		_entireMemoryFull
 12801 ;; This function is called by:
 12802 ;;		_ethernet_txFrameRequest
 12803 ;; This function uses a non-reentrant model
 12804 ;;
 12805                           
 12806                           	psect	text43
 12807  000BA0                     __ptext43:
 12808                           	opt stack 0
 12809  000BA0                     _memory_txFrameRequest:
 12810                           	opt stack 18
 12811                           
 12812                           ;memoryController.c: 137: memoryField_t field;
 12813                           ;memoryController.c: 138: uint8_t freeIndex = 0;
 12814                           
 12815                           ;incstack = 0
 12816  000BA0  0E00               	movlw	0
 12817  000BA2  0100               	movlb	0	; () banked
 12818  000BA4  6FA1               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 12819                           
 12820                           ; BSR set to: 0
 12821                           ;memoryController.c: 140: if (length == 0) {
 12822  000BA6  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 12823  000BA8  1185               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 12824  000BAA  A4D8               	btfss	status,2,c
 12825  000BAC  D00C               	goto	l464
 12826                           
 12827                           ; BSR set to: 0
 12828                           ;memoryController.c: 141: field.fOutOfMemory = 1;
 12829  000BAE  0E01               	movlw	1
 12830  000BB0  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 12831                           
 12832                           ; BSR set to: 0
 12833                           ;memoryController.c: 142: return field;
 12834  000BB2  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 12835  000BB6  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 12836  000BBA  0E08               	movlw	8
 12837  000BBC                     u8381:
 12838  000BBC  CFDB FFEB          	movff	plusw2,plusw0
 12839  000BC0  06E8               	decf	wreg,f,c
 12840  000BC2  E2FC               	bc	u8381
 12841                           
 12842                           ; BSR set to: 0
 12843  000BC4  0012               	return	
 12844  000BC6                     l464:
 12845                           
 12846                           ; BSR set to: 0
 12847                           ;memoryController.c: 143: }
 12848                           ;memoryController.c: 145: if (entireMemoryFull()) {
 12849                           
 12850                           ; BSR set to: 0
 12851  000BC6  EC2A  F024         	call	_entireMemoryFull	;wreg free
 12852  000BCA  0900               	iorlw	0
 12853  000BCC  B4D8               	btfsc	status,2,c
 12854  000BCE  D00D               	goto	l466
 12855                           
 12856                           ;memoryController.c: 146: field.fOutOfMemory = 1;
 12857  000BD0  0E01               	movlw	1
 12858  000BD2  0100               	movlb	0	; () banked
 12859  000BD4  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 12860                           
 12861                           ; BSR set to: 0
 12862                           ;memoryController.c: 147: return field;
 12863  000BD6  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 12864  000BDA  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 12865  000BDE  0E08               	movlw	8
 12866  000BE0                     u8401:
 12867  000BE0  CFDB FFEB          	movff	plusw2,plusw0
 12868  000BE4  06E8               	decf	wreg,f,c
 12869  000BE6  E2FC               	bc	u8401
 12870                           
 12871                           ; BSR set to: 0
 12872  000BE8  0012               	return	
 12873  000BEA                     l466:
 12874                           
 12875                           ;memoryController.c: 148: }
 12876                           ;memoryController.c: 149: if (entireMemoryEmpty()) {
 12877                           
 12878                           ; BSR set to: 0
 12879  000BEA  EC46  F024         	call	_entireMemoryEmpty	;wreg free
 12880  000BEE  0900               	iorlw	0
 12881  000BF0  B4D8               	btfsc	status,2,c
 12882  000BF2  D23C               	goto	l491
 12883                           
 12884                           ;memoryController.c: 151: if ((0x0000 + length) > 0x3000 - 1) {
 12885  000BF4  0E30               	movlw	48
 12886  000BF6  0100               	movlb	0	; () banked
 12887  000BF8  5D85               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 12888  000BFA  A0D8               	btfss	status,0,c
 12889  000BFC  D00C               	goto	l468
 12890                           
 12891                           ; BSR set to: 0
 12892                           ;memoryController.c: 152: field.fOutOfMemory = 1;
 12893  000BFE  0E01               	movlw	1
 12894  000C00  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 12895                           
 12896                           ; BSR set to: 0
 12897                           ;memoryController.c: 153: return field;
 12898  000C02  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 12899  000C06  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 12900  000C0A  0E08               	movlw	8
 12901  000C0C                     u8431:
 12902  000C0C  CFDB FFEB          	movff	plusw2,plusw0
 12903  000C10  06E8               	decf	wreg,f,c
 12904  000C12  E2FC               	bc	u8431
 12905                           
 12906                           ; BSR set to: 0
 12907  000C14  0012               	return	
 12908  000C16                     l468:
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;memoryController.c: 155: else {
 12912                           ;memoryController.c: 156: occupiedMemory[0].start = 0x0000;
 12913                           
 12914                           ; BSR set to: 0
 12915  000C16  0E00               	movlw	0
 12916  000C18  0101               	movlb	1	; () banked
 12917  000C1A  6F8D               	movwf	(_occupiedMemory+1)& (0+255),b
 12918  000C1C  0E00               	movlw	0
 12919  000C1E  6F8C               	movwf	_occupiedMemory& (0+255),b
 12920                           
 12921                           ; BSR set to: 1
 12922                           ;memoryController.c: 157: occupiedMemory[0].end = 0x0000 + length;
 12923  000C20  C084  F18E         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 12924  000C24  C085  F18F         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 12925                           
 12926                           ; BSR set to: 1
 12927                           ;memoryController.c: 158: occupiedMemory[0].length = length;
 12928  000C28  C084  F190         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 12929  000C2C  C085  F191         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 12930                           
 12931                           ;memoryController.c: 159: occupiedMemory[0].fIsAssigned = 1;
 12932  000C30  0E01               	movlw	1
 12933  000C32  6F92               	movwf	(_occupiedMemory+6)& (0+255),b
 12934                           
 12935                           ;memoryController.c: 160: occupiedMemory[0].index=0;
 12936  000C34  0E00               	movlw	0
 12937  000C36  6F94               	movwf	(_occupiedMemory+8)& (0+255),b
 12938                           
 12939                           ; BSR set to: 1
 12940                           ;memoryController.c: 161: return occupiedMemory[0];
 12941  000C38  EE21  F08C         	lfsr	2,_occupiedMemory
 12942  000C3C  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 12943  000C40  0E08               	movlw	8
 12944  000C42                     u8441:
 12945  000C42  CFDB FFEB          	movff	plusw2,plusw0
 12946  000C46  06E8               	decf	wreg,f,c
 12947  000C48  E2FC               	bc	u8441
 12948                           
 12949                           ; BSR set to: 1
 12950  000C4A  0012               	return	
 12951  000C4C                     
 12952                           ;memoryController.c: 167: if (!occupiedMemory[freeIndex].fIsAssigned) {
 12953                           
 12954                           ; BSR set to: 1
 12955  000C4C  0100               	movlb	0	; () banked
 12956  000C4E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12957  000C50  0D09               	mullw	9
 12958  000C52  0E06               	movlw	6
 12959  000C54  26F3               	addwf	prodl,f,c
 12960  000C56  0E00               	movlw	0
 12961  000C58  22F4               	addwfc	prodh,f,c
 12962  000C5A  0E8C               	movlw	low _occupiedMemory
 12963  000C5C  24F3               	addwf	prodl,w,c
 12964  000C5E  6ED9               	movwf	fsr2l,c
 12965  000C60  0E01               	movlw	high _occupiedMemory
 12966  000C62  20F4               	addwfc	prodh,w,c
 12967  000C64  6EDA               	movwf	fsr2h,c
 12968  000C66  50DF               	movf	indf2,w,c
 12969  000C68  A4D8               	btfss	status,2,c
 12970  000C6A  D1EF               	goto	l490
 12971                           
 12972                           ; BSR set to: 0
 12973                           ;memoryController.c: 171: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex ==
      +                           0) ? 8 - 1 : freeIndex - 1].end + 1;
 12974  000C6C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12975  000C6E  B4D8               	btfsc	status,2,c
 12976  000C70  D007               	goto	l474
 12977                           
 12978                           ; BSR set to: 0
 12979  000C72  0EFF               	movlw	255
 12980  000C74  25A1               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12981  000C76  6F93               	movwf	_memory_txFrameRequest$1170& (0+255),b
 12982  000C78  6B94               	clrf	(_memory_txFrameRequest$1170+1)& (0+255),b
 12983  000C7A  0EFF               	movlw	255
 12984  000C7C  2394               	addwfc	(_memory_txFrameRequest$1170+1)& (0+255),f,b
 12985  000C7E  D004               	goto	l476
 12986  000C80                     l474:
 12987                           
 12988                           ; BSR set to: 0
 12989                           
 12990                           ; BSR set to: 0
 12991  000C80  0E00               	movlw	0
 12992  000C82  6F94               	movwf	(_memory_txFrameRequest$1170+1)& (0+255),b
 12993  000C84  0E07               	movlw	7
 12994  000C86  6F93               	movwf	_memory_txFrameRequest$1170& (0+255),b
 12995  000C88                     l476:
 12996                           
 12997                           ; BSR set to: 0
 12998                           
 12999                           ; BSR set to: 0
 13000  000C88  C093  F060         	movff	_memory_txFrameRequest$1170,___wmul@multiplier
 13001  000C8C  C094  F061         	movff	_memory_txFrameRequest$1170+1,___wmul@multiplier+1
 13002  000C90  0E00               	movlw	0
 13003  000C92  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13004  000C94  0E09               	movlw	9
 13005  000C96  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13006  000C98  EC33  F025         	call	___wmul	;wreg free
 13007  000C9C  0E02               	movlw	2
 13008  000C9E  0100               	movlb	0	; () banked
 13009  000CA0  2760               	addwf	?___wmul& (0+255),f,b
 13010  000CA2  0E00               	movlw	0
 13011  000CA4  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 13012  000CA6  0E8C               	movlw	low _occupiedMemory
 13013  000CA8  2560               	addwf	?___wmul& (0+255),w,b
 13014  000CAA  6ED9               	movwf	fsr2l,c
 13015  000CAC  0E01               	movlw	high _occupiedMemory
 13016  000CAE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13017  000CB0  6EDA               	movwf	fsr2h,c
 13018  000CB2  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13019  000CB6  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13020  000CBA  0E01               	movlw	1
 13021  000CBC  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 13022  000CBE  0E00               	movlw	0
 13023  000CC0  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 13024  000CC2  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13025  000CC4  0D09               	mullw	9
 13026  000CC6  0E8C               	movlw	low _occupiedMemory
 13027  000CC8  24F3               	addwf	prodl,w,c
 13028  000CCA  6ED9               	movwf	fsr2l,c
 13029  000CCC  0E01               	movlw	high _occupiedMemory
 13030  000CCE  20F4               	addwfc	prodh,w,c
 13031  000CD0  6EDA               	movwf	fsr2h,c
 13032  000CD2  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 13033  000CD6  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 13034                           
 13035                           ; BSR set to: 0
 13036                           ;memoryController.c: 172: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 13037  000CDA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13038  000CDC  0D09               	mullw	9
 13039  000CDE  0E8C               	movlw	low _occupiedMemory
 13040  000CE0  24F3               	addwf	prodl,w,c
 13041  000CE2  6ED9               	movwf	fsr2l,c
 13042  000CE4  0E01               	movlw	high _occupiedMemory
 13043  000CE6  20F4               	addwfc	prodh,w,c
 13044  000CE8  6EDA               	movwf	fsr2h,c
 13045  000CEA  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13046  000CEE  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13047  000CF2  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 13048  000CF4  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 13049  000CF6  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 13050  000CF8  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 13051  000CFA  058D               	decf	??_memory_txFrameRequest& (0+255),w,b
 13052  000CFC  0E30               	movlw	48
 13053  000CFE  598E               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 13054  000D00  A0D8               	btfss	status,0,c
 13055  000D02  D0D1               	goto	l478
 13056                           
 13057                           ; BSR set to: 0
 13058                           ;memoryController.c: 173: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 13059  000D04  0E07               	movlw	7
 13060  000D06  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13061  000D08  A4D8               	btfss	status,2,c
 13062  000D0A  D0CD               	goto	l478
 13063                           
 13064                           ; BSR set to: 0
 13065  000D0C  0101               	movlb	1	; () banked
 13066  000D0E  5192               	movf	(_occupiedMemory+6)& (0+255),w,b
 13067  000D10  A4D8               	btfss	status,2,c
 13068  000D12  D0C9               	goto	l478
 13069                           
 13070                           ; BSR set to: 1
 13071                           ;memoryController.c: 174: occupiedMemory[freeIndex].length = length;
 13072  000D14  0100               	movlb	0	; () banked
 13073  000D16  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13074  000D18  0D09               	mullw	9
 13075  000D1A  0E04               	movlw	4
 13076  000D1C  26F3               	addwf	prodl,f,c
 13077  000D1E  0E00               	movlw	0
 13078  000D20  22F4               	addwfc	prodh,f,c
 13079  000D22  0E8C               	movlw	low _occupiedMemory
 13080  000D24  24F3               	addwf	prodl,w,c
 13081  000D26  6ED9               	movwf	fsr2l,c
 13082  000D28  0E01               	movlw	high _occupiedMemory
 13083  000D2A  20F4               	addwfc	prodh,w,c
 13084  000D2C  6EDA               	movwf	fsr2h,c
 13085  000D2E  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 13086  000D32  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 13087                           
 13088                           ;memoryController.c: 175: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 13089  000D36  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13090  000D38  0D09               	mullw	9
 13091  000D3A  0E04               	movlw	4
 13092  000D3C  26F3               	addwf	prodl,f,c
 13093  000D3E  0E00               	movlw	0
 13094  000D40  22F4               	addwfc	prodh,f,c
 13095  000D42  0E8C               	movlw	low _occupiedMemory
 13096  000D44  24F3               	addwf	prodl,w,c
 13097  000D46  6ED9               	movwf	fsr2l,c
 13098  000D48  0E01               	movlw	high _occupiedMemory
 13099  000D4A  20F4               	addwfc	prodh,w,c
 13100  000D4C  6EDA               	movwf	fsr2h,c
 13101  000D4E  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13102  000D52  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13103  000D56  0EFF               	movlw	255
 13104  000D58  6F8F               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 13105  000D5A  0E2F               	movlw	47
 13106  000D5C  6F90               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 13107  000D5E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13108  000D60  0D09               	mullw	9
 13109  000D62  0E8C               	movlw	low _occupiedMemory
 13110  000D64  24F3               	addwf	prodl,w,c
 13111  000D66  6ED9               	movwf	fsr2l,c
 13112  000D68  0E01               	movlw	high _occupiedMemory
 13113  000D6A  20F4               	addwfc	prodh,w,c
 13114  000D6C  6EDA               	movwf	fsr2h,c
 13115  000D6E  CFDE F091          	movff	postinc2,??_memory_txFrameRequest+4
 13116  000D72  CFDD F092          	movff	postdec2,??_memory_txFrameRequest+5
 13117  000D76  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 13118  000D78  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 13119  000D7A  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 13120  000D7C  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 13121  000D7E  518F               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 13122  000D80  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 13123  000D82  5190               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 13124  000D84  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 13125  000D86  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 13126  000D88  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 13127  000D8A  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 13128  000D8C  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 13129  000D8E  518D               	movf	??_memory_txFrameRequest& (0+255),w,b
 13130  000D90  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 13131  000D92  518E               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 13132  000D94  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 13133  000D96  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13134  000D98  0D09               	mullw	9
 13135  000D9A  0E02               	movlw	2
 13136  000D9C  26F3               	addwf	prodl,f,c
 13137  000D9E  0E00               	movlw	0
 13138  000DA0  22F4               	addwfc	prodh,f,c
 13139  000DA2  0E8C               	movlw	low _occupiedMemory
 13140  000DA4  24F3               	addwf	prodl,w,c
 13141  000DA6  6ED9               	movwf	fsr2l,c
 13142  000DA8  0E01               	movlw	high _occupiedMemory
 13143  000DAA  20F4               	addwfc	prodh,w,c
 13144  000DAC  6EDA               	movwf	fsr2h,c
 13145  000DAE  C091  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 13146  000DB2  C092  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 13147                           
 13148                           ; BSR set to: 0
 13149                           ;memoryController.c: 176: for (uint8_t i = 0; i < 8;i++) {
 13150  000DB6  0E00               	movlw	0
 13151  000DB8  6F96               	movwf	memory_txFrameRequest@i& (0+255),b
 13152  000DBA                     l7395:
 13153                           
 13154                           ; BSR set to: 0
 13155  000DBA  0E07               	movlw	7
 13156  000DBC  6596               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 13157  000DBE  D001               	goto	l479
 13158  000DC0  D046               	goto	u8570
 13159  000DC2                     l479:
 13160                           
 13161                           ; BSR set to: 0
 13162                           ;memoryController.c: 177: if (i == freeIndex)
 13163                           
 13164                           ; BSR set to: 0
 13165  000DC2  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13166  000DC4  1996               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 13167  000DC6  B4D8               	btfsc	status,2,c
 13168  000DC8  D03F               	goto	l483
 13169                           
 13170                           ; BSR set to: 0
 13171                           ;memoryController.c: 179: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 13172                           
 13173                           ; BSR set to: 0
 13174                           
 13175                           ; BSR set to: 0
 13176                           ;memoryController.c: 178: continue;
 13177  000DCA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13178  000DCC  0D09               	mullw	9
 13179  000DCE  0E8C               	movlw	low _occupiedMemory
 13180  000DD0  24F3               	addwf	prodl,w,c
 13181  000DD2  6ED9               	movwf	fsr2l,c
 13182  000DD4  0E01               	movlw	high _occupiedMemory
 13183  000DD6  20F4               	addwfc	prodh,w,c
 13184  000DD8  6EDA               	movwf	fsr2h,c
 13185  000DDA  EE00  F072         	lfsr	0,checkForOverlap@a
 13186  000DDE  0E08               	movlw	8
 13187  000DE0                     u8521:
 13188  000DE0  CFDB FFEB          	movff	plusw2,plusw0
 13189  000DE4  06E8               	decf	wreg,f,c
 13190  000DE6  E2FC               	bc	u8521
 13191  000DE8  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 13192  000DEA  0D09               	mullw	9
 13193  000DEC  0E8C               	movlw	low _occupiedMemory
 13194  000DEE  24F3               	addwf	prodl,w,c
 13195  000DF0  6ED9               	movwf	fsr2l,c
 13196  000DF2  0E01               	movlw	high _occupiedMemory
 13197  000DF4  20F4               	addwfc	prodh,w,c
 13198  000DF6  6EDA               	movwf	fsr2h,c
 13199  000DF8  EE00  F07B         	lfsr	0,checkForOverlap@b
 13200  000DFC  0E08               	movlw	8
 13201  000DFE                     u8531:
 13202  000DFE  CFDB FFEB          	movff	plusw2,plusw0
 13203  000E02  06E8               	decf	wreg,f,c
 13204  000E04  E2FC               	bc	u8531
 13205  000E06  EC29  F019         	call	_checkForOverlap	;wreg free
 13206  000E0A  0900               	iorlw	0
 13207  000E0C  B4D8               	btfsc	status,2,c
 13208  000E0E  D01C               	goto	l483
 13209  000E10  0100               	movlb	0	; () banked
 13210  000E12  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 13211  000E14  0D09               	mullw	9
 13212  000E16  0E06               	movlw	6
 13213  000E18  26F3               	addwf	prodl,f,c
 13214  000E1A  0E00               	movlw	0
 13215  000E1C  22F4               	addwfc	prodh,f,c
 13216  000E1E  0E8C               	movlw	low _occupiedMemory
 13217  000E20  24F3               	addwf	prodl,w,c
 13218  000E22  6ED9               	movwf	fsr2l,c
 13219  000E24  0E01               	movlw	high _occupiedMemory
 13220  000E26  20F4               	addwfc	prodh,w,c
 13221  000E28  6EDA               	movwf	fsr2h,c
 13222  000E2A  50DF               	movf	indf2,w,c
 13223  000E2C  B4D8               	btfsc	status,2,c
 13224  000E2E  D00C               	goto	l483
 13225                           
 13226                           ; BSR set to: 0
 13227                           ;memoryController.c: 181: field.fOutOfMemory = 1;
 13228  000E30  0E01               	movlw	1
 13229  000E32  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 13230                           
 13231                           ; BSR set to: 0
 13232                           ;memoryController.c: 182: return field;
 13233  000E34  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 13234  000E38  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13235  000E3C  0E08               	movlw	8
 13236  000E3E                     u8561:
 13237  000E3E  CFDB FFEB          	movff	plusw2,plusw0
 13238  000E42  06E8               	decf	wreg,f,c
 13239  000E44  E2FC               	bc	u8561
 13240                           
 13241                           ; BSR set to: 0
 13242  000E46  0012               	return	
 13243  000E48                     l483:
 13244                           
 13245                           ; BSR set to: 0
 13246                           
 13247                           ; BSR set to: 0
 13248  000E48  0100               	movlb	0	; () banked
 13249  000E4A  2B96               	incf	memory_txFrameRequest@i& (0+255),f,b
 13250  000E4C  D7B6               	goto	l7395
 13251  000E4E                     u8570:
 13252                           
 13253                           ; BSR set to: 0
 13254                           ;memoryController.c: 183: }
 13255                           ;memoryController.c: 184: }
 13256                           ;memoryController.c: 185: occupiedMemory[freeIndex].fIsAssigned = 1;
 13257                           
 13258                           ; BSR set to: 0
 13259  000E4E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13260  000E50  0D09               	mullw	9
 13261  000E52  0E06               	movlw	6
 13262  000E54  26F3               	addwf	prodl,f,c
 13263  000E56  0E00               	movlw	0
 13264  000E58  22F4               	addwfc	prodh,f,c
 13265  000E5A  0E8C               	movlw	low _occupiedMemory
 13266  000E5C  24F3               	addwf	prodl,w,c
 13267  000E5E  6ED9               	movwf	fsr2l,c
 13268  000E60  0E01               	movlw	high _occupiedMemory
 13269  000E62  20F4               	addwfc	prodh,w,c
 13270  000E64  6EDA               	movwf	fsr2h,c
 13271  000E66  0E01               	movlw	1
 13272  000E68  6EDF               	movwf	indf2,c
 13273                           
 13274                           ;memoryController.c: 186: occupiedMemory[freeIndex].index=freeIndex;
 13275  000E6A  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13276  000E6C  0D09               	mullw	9
 13277  000E6E  0E08               	movlw	8
 13278  000E70  26F3               	addwf	prodl,f,c
 13279  000E72  0E00               	movlw	0
 13280  000E74  22F4               	addwfc	prodh,f,c
 13281  000E76  0E8C               	movlw	low _occupiedMemory
 13282  000E78  24F3               	addwf	prodl,w,c
 13283  000E7A  6ED9               	movwf	fsr2l,c
 13284  000E7C  0E01               	movlw	high _occupiedMemory
 13285  000E7E  20F4               	addwfc	prodh,w,c
 13286  000E80  6EDA               	movwf	fsr2h,c
 13287  000E82  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 13288                           
 13289                           ; BSR set to: 0
 13290                           ;memoryController.c: 187: return occupiedMemory[freeIndex];
 13291  000E86  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13292  000E88  0D09               	mullw	9
 13293  000E8A  0E8C               	movlw	low _occupiedMemory
 13294  000E8C  24F3               	addwf	prodl,w,c
 13295  000E8E  6ED9               	movwf	fsr2l,c
 13296  000E90  0E01               	movlw	high _occupiedMemory
 13297  000E92  20F4               	addwfc	prodh,w,c
 13298  000E94  6EDA               	movwf	fsr2h,c
 13299  000E96  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13300  000E9A  0E08               	movlw	8
 13301  000E9C                     u8581:
 13302  000E9C  CFDB FFEB          	movff	plusw2,plusw0
 13303  000EA0  06E8               	decf	wreg,f,c
 13304  000EA2  E2FC               	bc	u8581
 13305                           
 13306                           ; BSR set to: 0
 13307  000EA4  0012               	return	
 13308  000EA6                     l478:
 13309                           
 13310                           ;memoryController.c: 188: }
 13311                           ;memoryController.c: 189: }
 13312                           ;memoryController.c: 191: uint8_t fNoOverlapMarker = 1;
 13313                           
 13314                           ; BSR set to: 0
 13315                           
 13316                           ; BSR set to: 0
 13317  000EA6  0E01               	movlw	1
 13318  000EA8  0100               	movlb	0	; () banked
 13319  000EAA  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 13320                           
 13321                           ; BSR set to: 0
 13322                           ;memoryController.c: 192: uint8_t i;
 13323                           ;memoryController.c: 193: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 13324  000EAC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13325  000EAE  0D09               	mullw	9
 13326  000EB0  0E8C               	movlw	low _occupiedMemory
 13327  000EB2  24F3               	addwf	prodl,w,c
 13328  000EB4  6ED9               	movwf	fsr2l,c
 13329  000EB6  0E01               	movlw	high _occupiedMemory
 13330  000EB8  20F4               	addwfc	prodh,w,c
 13331  000EBA  6EDA               	movwf	fsr2h,c
 13332  000EBC  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13333  000EC0  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13334  000EC4  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 13335  000EC6  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 13336  000EC8  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 13337  000ECA  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 13338  000ECC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13339  000ECE  0D09               	mullw	9
 13340  000ED0  0E02               	movlw	2
 13341  000ED2  26F3               	addwf	prodl,f,c
 13342  000ED4  0E00               	movlw	0
 13343  000ED6  22F4               	addwfc	prodh,f,c
 13344  000ED8  0E8C               	movlw	low _occupiedMemory
 13345  000EDA  24F3               	addwf	prodl,w,c
 13346  000EDC  6ED9               	movwf	fsr2l,c
 13347  000EDE  0E01               	movlw	high _occupiedMemory
 13348  000EE0  20F4               	addwfc	prodh,w,c
 13349  000EE2  6EDA               	movwf	fsr2h,c
 13350  000EE4  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 13351  000EE8  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 13352                           
 13353                           ; BSR set to: 0
 13354                           ;memoryController.c: 194: for (i = 0; i < 8; i++) {
 13355  000EEC  0E00               	movlw	0
 13356  000EEE  6F97               	movwf	memory_txFrameRequest@i_1174& (0+255),b
 13357  000EF0                     l7429:
 13358                           
 13359                           ; BSR set to: 0
 13360  000EF0  0E07               	movlw	7
 13361  000EF2  6597               	cpfsgt	memory_txFrameRequest@i_1174& (0+255),b
 13362  000EF4  D001               	goto	l484
 13363  000EF6  D03C               	goto	u8650
 13364  000EF8                     l484:
 13365                           
 13366                           ; BSR set to: 0
 13367                           ;memoryController.c: 195: if (i == freeIndex)
 13368                           
 13369                           ; BSR set to: 0
 13370  000EF8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13371  000EFA  1997               	xorwf	memory_txFrameRequest@i_1174& (0+255),w,b
 13372  000EFC  B4D8               	btfsc	status,2,c
 13373  000EFE  D035               	goto	l489
 13374                           
 13375                           ; BSR set to: 0
 13376                           ;memoryController.c: 197: if (!occupiedMemory[i].fIsAssigned) {
 13377                           
 13378                           ; BSR set to: 0
 13379                           
 13380                           ; BSR set to: 0
 13381                           ;memoryController.c: 196: continue;
 13382  000F00  5197               	movf	memory_txFrameRequest@i_1174& (0+255),w,b
 13383  000F02  0D09               	mullw	9
 13384  000F04  0E06               	movlw	6
 13385  000F06  26F3               	addwf	prodl,f,c
 13386  000F08  0E00               	movlw	0
 13387  000F0A  22F4               	addwfc	prodh,f,c
 13388  000F0C  0E8C               	movlw	low _occupiedMemory
 13389  000F0E  24F3               	addwf	prodl,w,c
 13390  000F10  6ED9               	movwf	fsr2l,c
 13391  000F12  0E01               	movlw	high _occupiedMemory
 13392  000F14  20F4               	addwfc	prodh,w,c
 13393  000F16  6EDA               	movwf	fsr2h,c
 13394  000F18  50DF               	movf	indf2,w,c
 13395  000F1A  B4D8               	btfsc	status,2,c
 13396  000F1C  D026               	goto	l489
 13397                           
 13398                           ; BSR set to: 0
 13399                           ;memoryController.c: 200: }
 13400                           ;memoryController.c: 202: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 13401                           
 13402                           ; BSR set to: 0
 13403                           
 13404                           ; BSR set to: 0
 13405                           ;memoryController.c: 198: continue;
 13406  000F1E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13407  000F20  0D09               	mullw	9
 13408  000F22  0E8C               	movlw	low _occupiedMemory
 13409  000F24  24F3               	addwf	prodl,w,c
 13410  000F26  6ED9               	movwf	fsr2l,c
 13411  000F28  0E01               	movlw	high _occupiedMemory
 13412  000F2A  20F4               	addwfc	prodh,w,c
 13413  000F2C  6EDA               	movwf	fsr2h,c
 13414  000F2E  EE00  F072         	lfsr	0,checkForOverlap@a
 13415  000F32  0E08               	movlw	8
 13416  000F34                     u8621:
 13417  000F34  CFDB FFEB          	movff	plusw2,plusw0
 13418  000F38  06E8               	decf	wreg,f,c
 13419  000F3A  E2FC               	bc	u8621
 13420  000F3C  5197               	movf	memory_txFrameRequest@i_1174& (0+255),w,b
 13421  000F3E  0D09               	mullw	9
 13422  000F40  0E8C               	movlw	low _occupiedMemory
 13423  000F42  24F3               	addwf	prodl,w,c
 13424  000F44  6ED9               	movwf	fsr2l,c
 13425  000F46  0E01               	movlw	high _occupiedMemory
 13426  000F48  20F4               	addwfc	prodh,w,c
 13427  000F4A  6EDA               	movwf	fsr2h,c
 13428  000F4C  EE00  F07B         	lfsr	0,checkForOverlap@b
 13429  000F50  0E08               	movlw	8
 13430  000F52                     u8631:
 13431  000F52  CFDB FFEB          	movff	plusw2,plusw0
 13432  000F56  06E8               	decf	wreg,f,c
 13433  000F58  E2FC               	bc	u8631
 13434  000F5A  EC29  F019         	call	_checkForOverlap	;wreg free
 13435  000F5E  0900               	iorlw	0
 13436  000F60  B4D8               	btfsc	status,2,c
 13437  000F62  D003               	goto	l489
 13438                           
 13439                           ;memoryController.c: 203: fNoOverlapMarker = 0;
 13440  000F64  0E00               	movlw	0
 13441  000F66  0100               	movlb	0	; () banked
 13442  000F68  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 13443  000F6A                     l489:
 13444                           
 13445                           ; BSR set to: 0
 13446                           
 13447                           ; BSR set to: 0
 13448  000F6A  0100               	movlb	0	; () banked
 13449  000F6C  2B97               	incf	memory_txFrameRequest@i_1174& (0+255),f,b
 13450  000F6E  D7C0               	goto	l7429
 13451  000F70                     u8650:
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;memoryController.c: 205: }
 13455                           ;memoryController.c: 206: if (fNoOverlapMarker) {
 13456                           
 13457                           ; BSR set to: 0
 13458  000F70  5195               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 13459  000F72  B4D8               	btfsc	status,2,c
 13460  000F74  D06A               	goto	l490
 13461                           
 13462                           ; BSR set to: 0
 13463                           ;memoryController.c: 207: occupiedMemory[freeIndex].fIsAssigned = 1;
 13464  000F76  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13465  000F78  0D09               	mullw	9
 13466  000F7A  0E06               	movlw	6
 13467  000F7C  26F3               	addwf	prodl,f,c
 13468  000F7E  0E00               	movlw	0
 13469  000F80  22F4               	addwfc	prodh,f,c
 13470  000F82  0E8C               	movlw	low _occupiedMemory
 13471  000F84  24F3               	addwf	prodl,w,c
 13472  000F86  6ED9               	movwf	fsr2l,c
 13473  000F88  0E01               	movlw	high _occupiedMemory
 13474  000F8A  20F4               	addwfc	prodh,w,c
 13475  000F8C  6EDA               	movwf	fsr2h,c
 13476  000F8E  0E01               	movlw	1
 13477  000F90  6EDF               	movwf	indf2,c
 13478                           
 13479                           ;memoryController.c: 208: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 13480  000F92  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13481  000F94  0D09               	mullw	9
 13482  000F96  0E8C               	movlw	low _occupiedMemory
 13483  000F98  24F3               	addwf	prodl,w,c
 13484  000F9A  6ED9               	movwf	fsr2l,c
 13485  000F9C  0E01               	movlw	high _occupiedMemory
 13486  000F9E  20F4               	addwfc	prodh,w,c
 13487  000FA0  6EDA               	movwf	fsr2h,c
 13488  000FA2  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13489  000FA6  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13490  000FAA  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 13491  000FAC  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 13492  000FAE  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 13493  000FB0  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 13494  000FB2  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13495  000FB4  0D09               	mullw	9
 13496  000FB6  0E02               	movlw	2
 13497  000FB8  26F3               	addwf	prodl,f,c
 13498  000FBA  0E00               	movlw	0
 13499  000FBC  22F4               	addwfc	prodh,f,c
 13500  000FBE  0E8C               	movlw	low _occupiedMemory
 13501  000FC0  24F3               	addwf	prodl,w,c
 13502  000FC2  6ED9               	movwf	fsr2l,c
 13503  000FC4  0E01               	movlw	high _occupiedMemory
 13504  000FC6  20F4               	addwfc	prodh,w,c
 13505  000FC8  6EDA               	movwf	fsr2h,c
 13506  000FCA  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 13507  000FCE  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 13508                           
 13509                           ;memoryController.c: 209: occupiedMemory[freeIndex].fOutOfMemory = 0;
 13510  000FD2  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13511  000FD4  0D09               	mullw	9
 13512  000FD6  0E07               	movlw	7
 13513  000FD8  26F3               	addwf	prodl,f,c
 13514  000FDA  0E00               	movlw	0
 13515  000FDC  22F4               	addwfc	prodh,f,c
 13516  000FDE  0E8C               	movlw	low _occupiedMemory
 13517  000FE0  24F3               	addwf	prodl,w,c
 13518  000FE2  6ED9               	movwf	fsr2l,c
 13519  000FE4  0E01               	movlw	high _occupiedMemory
 13520  000FE6  20F4               	addwfc	prodh,w,c
 13521  000FE8  6EDA               	movwf	fsr2h,c
 13522  000FEA  0E00               	movlw	0
 13523  000FEC  6EDF               	movwf	indf2,c
 13524                           
 13525                           ;memoryController.c: 210: occupiedMemory[freeIndex].length = length;
 13526  000FEE  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13527  000FF0  0D09               	mullw	9
 13528  000FF2  0E04               	movlw	4
 13529  000FF4  26F3               	addwf	prodl,f,c
 13530  000FF6  0E00               	movlw	0
 13531  000FF8  22F4               	addwfc	prodh,f,c
 13532  000FFA  0E8C               	movlw	low _occupiedMemory
 13533  000FFC  24F3               	addwf	prodl,w,c
 13534  000FFE  6ED9               	movwf	fsr2l,c
 13535  001000  0E01               	movlw	high _occupiedMemory
 13536  001002  20F4               	addwfc	prodh,w,c
 13537  001004  6EDA               	movwf	fsr2h,c
 13538  001006  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 13539  00100A  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 13540                           
 13541                           ;memoryController.c: 211: occupiedMemory[freeIndex].index=freeIndex;
 13542  00100E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13543  001010  0D09               	mullw	9
 13544  001012  0E08               	movlw	8
 13545  001014  26F3               	addwf	prodl,f,c
 13546  001016  0E00               	movlw	0
 13547  001018  22F4               	addwfc	prodh,f,c
 13548  00101A  0E8C               	movlw	low _occupiedMemory
 13549  00101C  24F3               	addwf	prodl,w,c
 13550  00101E  6ED9               	movwf	fsr2l,c
 13551  001020  0E01               	movlw	high _occupiedMemory
 13552  001022  20F4               	addwfc	prodh,w,c
 13553  001024  6EDA               	movwf	fsr2h,c
 13554  001026  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 13555                           
 13556                           ; BSR set to: 0
 13557                           ;memoryController.c: 212: return occupiedMemory[freeIndex];
 13558  00102A  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13559  00102C  0D09               	mullw	9
 13560  00102E  0E8C               	movlw	low _occupiedMemory
 13561  001030  24F3               	addwf	prodl,w,c
 13562  001032  6ED9               	movwf	fsr2l,c
 13563  001034  0E01               	movlw	high _occupiedMemory
 13564  001036  20F4               	addwfc	prodh,w,c
 13565  001038  6EDA               	movwf	fsr2h,c
 13566  00103A  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13567  00103E  0E08               	movlw	8
 13568  001040                     u8671:
 13569  001040  CFDB FFEB          	movff	plusw2,plusw0
 13570  001044  06E8               	decf	wreg,f,c
 13571  001046  E2FC               	bc	u8671
 13572                           
 13573                           ; BSR set to: 0
 13574  001048  0012               	return	
 13575  00104A                     l490:
 13576                           
 13577                           ; BSR set to: 0
 13578                           ;memoryController.c: 213: }
 13579                           ;memoryController.c: 214: }
 13580                           ;memoryController.c: 215: freeIndex++;
 13581                           
 13582                           ; BSR set to: 0
 13583                           
 13584                           ; BSR set to: 0
 13585  00104A  2BA1               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 13586                           
 13587                           ; BSR set to: 0
 13588                           ;memoryController.c: 216: if (freeIndex == 8) {
 13589  00104C  0E08               	movlw	8
 13590  00104E  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13591  001050  A4D8               	btfss	status,2,c
 13592  001052  D00C               	goto	l491
 13593                           
 13594                           ; BSR set to: 0
 13595                           ;memoryController.c: 218: field.fOutOfMemory = 1;
 13596  001054  0E01               	movlw	1
 13597  001056  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 13598                           
 13599                           ; BSR set to: 0
 13600                           ;memoryController.c: 219: return field;
 13601  001058  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 13602  00105C  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13603  001060  0E08               	movlw	8
 13604  001062                     u8691:
 13605  001062  CFDB FFEB          	movff	plusw2,plusw0
 13606  001066  06E8               	decf	wreg,f,c
 13607  001068  E2FC               	bc	u8691
 13608                           
 13609                           ; BSR set to: 0
 13610  00106A  0012               	return	
 13611  00106C                     l491:
 13612                           
 13613                           ; BSR set to: 0
 13614                           
 13615                           ; BSR set to: 0
 13616  00106C  0E08               	movlw	8
 13617  00106E  0100               	movlb	0	; () banked
 13618  001070  65A1               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 13619  001072  D5EC               	goto	l471
 13620  001074  0012               	return	
 13621  001076                     __end_of_memory_txFrameRequest:
 13622                           	opt stack 0
 13623                           tblptru	equ	0xFF8
 13624                           tblptrh	equ	0xFF7
 13625                           tblptrl	equ	0xFF6
 13626                           tablat	equ	0xFF5
 13627                           prodh	equ	0xFF4
 13628                           prodl	equ	0xFF3
 13629                           intcon	equ	0xFF2
 13630                           intcon3	equ	0xFF0
 13631                           indf0	equ	0xFEF
 13632                           postinc0	equ	0xFEE
 13633                           plusw0	equ	0xFEB
 13634                           fsr0h	equ	0xFEA
 13635                           fsr0l	equ	0xFE9
 13636                           wreg	equ	0xFE8
 13637                           indf1	equ	0xFE7
 13638                           postinc1	equ	0xFE6
 13639                           postdec1	equ	0xFE5
 13640                           plusw1	equ	0xFE3
 13641                           fsr1h	equ	0xFE2
 13642                           fsr1l	equ	0xFE1
 13643                           indf2	equ	0xFDF
 13644                           postinc2	equ	0xFDE
 13645                           postdec2	equ	0xFDD
 13646                           plusw2	equ	0xFDB
 13647                           fsr2h	equ	0xFDA
 13648                           fsr2l	equ	0xFD9
 13649                           status	equ	0xFD8
 13650                           
 13651 ;; *************** function _entireMemoryFull *****************
 13652 ;; Defined at:
 13653 ;;		line 44 in file "src/mem/memoryController.c"
 13654 ;; Parameters:    Size  Location     Type
 13655 ;;		None
 13656 ;; Auto vars:     Size  Location     Type
 13657 ;;  i               1    0[BANK0 ] unsigned char 
 13658 ;; Return value:  Size  Location     Type
 13659 ;;                  1    wreg      unsigned char 
 13660 ;; Registers used:
 13661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13662 ;; Tracked objects:
 13663 ;;		On entry : 0/0
 13664 ;;		On exit  : 0/0
 13665 ;;		Unchanged: 0/0
 13666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13667 ;;      Params:         0       0       0       0       0       0       0       0       0
 13668 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13669 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13670 ;;      Totals:         0       1       0       0       0       0       0       0       0
 13671 ;;Total ram usage:        1 bytes
 13672 ;; Hardware stack levels used:    1
 13673 ;; Hardware stack levels required when called:    4
 13674 ;; This function calls:
 13675 ;;		Nothing
 13676 ;; This function is called by:
 13677 ;;		_memory_txFrameRequest
 13678 ;; This function uses a non-reentrant model
 13679 ;;
 13680                           
 13681                           	psect	text44
 13682  004854                     __ptext44:
 13683                           	opt stack 0
 13684  004854                     _entireMemoryFull:
 13685                           	opt stack 19
 13686                           
 13687                           ;memoryController.c: 45: for (uint8_t i = 0; i < 8;i++) {
 13688                           
 13689                           ;incstack = 0
 13690  004854  0E00               	movlw	0
 13691  004856  0100               	movlb	0	; () banked
 13692  004858  6F60               	movwf	entireMemoryFull@i& (0+255),b
 13693  00485A                     l7155:
 13694                           
 13695                           ; BSR set to: 0
 13696  00485A  0E07               	movlw	7
 13697  00485C  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 13698  00485E  D001               	goto	l420
 13699  004860  D013               	goto	u8120
 13700  004862                     l420:
 13701                           
 13702                           ; BSR set to: 0
 13703                           ;memoryController.c: 46: if (!occupiedMemory[i].fIsAssigned)
 13704                           
 13705                           ; BSR set to: 0
 13706  004862  5160               	movf	entireMemoryFull@i& (0+255),w,b
 13707  004864  0D09               	mullw	9
 13708  004866  0E06               	movlw	6
 13709  004868  26F3               	addwf	prodl,f,c
 13710  00486A  0E00               	movlw	0
 13711  00486C  22F4               	addwfc	prodh,f,c
 13712  00486E  0E8C               	movlw	low _occupiedMemory
 13713  004870  24F3               	addwf	prodl,w,c
 13714  004872  6ED9               	movwf	fsr2l,c
 13715  004874  0E01               	movlw	high _occupiedMemory
 13716  004876  20F4               	addwfc	prodh,w,c
 13717  004878  6EDA               	movwf	fsr2h,c
 13718  00487A  50DF               	movf	indf2,w,c
 13719  00487C  A4D8               	btfss	status,2,c
 13720  00487E  D002               	goto	l422
 13721                           
 13722                           ; BSR set to: 0
 13723                           ;memoryController.c: 47: return 0;
 13724  004880  0E00               	movlw	0
 13725                           
 13726                           ; BSR set to: 0
 13727  004882  0012               	return	
 13728  004884                     l422:
 13729                           
 13730                           ; BSR set to: 0
 13731                           
 13732                           ; BSR set to: 0
 13733  004884  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 13734  004886  D7E9               	goto	l7155
 13735  004888                     u8120:
 13736                           
 13737                           ; BSR set to: 0
 13738                           ;memoryController.c: 48: }
 13739                           ;memoryController.c: 49: return 1;
 13740                           
 13741                           ; BSR set to: 0
 13742  004888  0E01               	movlw	1
 13743  00488A  0012               	return	
 13744  00488C                     __end_of_entireMemoryFull:
 13745                           	opt stack 0
 13746                           tblptru	equ	0xFF8
 13747                           tblptrh	equ	0xFF7
 13748                           tblptrl	equ	0xFF6
 13749                           tablat	equ	0xFF5
 13750                           prodh	equ	0xFF4
 13751                           prodl	equ	0xFF3
 13752                           intcon	equ	0xFF2
 13753                           intcon3	equ	0xFF0
 13754                           indf0	equ	0xFEF
 13755                           postinc0	equ	0xFEE
 13756                           plusw0	equ	0xFEB
 13757                           fsr0h	equ	0xFEA
 13758                           fsr0l	equ	0xFE9
 13759                           wreg	equ	0xFE8
 13760                           indf1	equ	0xFE7
 13761                           postinc1	equ	0xFE6
 13762                           postdec1	equ	0xFE5
 13763                           plusw1	equ	0xFE3
 13764                           fsr1h	equ	0xFE2
 13765                           fsr1l	equ	0xFE1
 13766                           indf2	equ	0xFDF
 13767                           postinc2	equ	0xFDE
 13768                           postdec2	equ	0xFDD
 13769                           plusw2	equ	0xFDB
 13770                           fsr2h	equ	0xFDA
 13771                           fsr2l	equ	0xFD9
 13772                           status	equ	0xFD8
 13773                           
 13774 ;; *************** function _entireMemoryEmpty *****************
 13775 ;; Defined at:
 13776 ;;		line 36 in file "src/mem/memoryController.c"
 13777 ;; Parameters:    Size  Location     Type
 13778 ;;		None
 13779 ;; Auto vars:     Size  Location     Type
 13780 ;;  i               1    0[BANK0 ] unsigned char 
 13781 ;; Return value:  Size  Location     Type
 13782 ;;                  1    wreg      unsigned char 
 13783 ;; Registers used:
 13784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13785 ;; Tracked objects:
 13786 ;;		On entry : 0/0
 13787 ;;		On exit  : 0/0
 13788 ;;		Unchanged: 0/0
 13789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13790 ;;      Params:         0       0       0       0       0       0       0       0       0
 13791 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13792 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13793 ;;      Totals:         0       1       0       0       0       0       0       0       0
 13794 ;;Total ram usage:        1 bytes
 13795 ;; Hardware stack levels used:    1
 13796 ;; Hardware stack levels required when called:    4
 13797 ;; This function calls:
 13798 ;;		Nothing
 13799 ;; This function is called by:
 13800 ;;		_memory_txFrameRequest
 13801 ;; This function uses a non-reentrant model
 13802 ;;
 13803                           
 13804                           	psect	text45
 13805  00488C                     __ptext45:
 13806                           	opt stack 0
 13807  00488C                     _entireMemoryEmpty:
 13808                           	opt stack 19
 13809                           
 13810                           ;memoryController.c: 37: for (uint8_t i = 0; i < 8;i++) {
 13811                           
 13812                           ; BSR set to: 0
 13813                           ;incstack = 0
 13814  00488C  0E00               	movlw	0
 13815  00488E  0100               	movlb	0	; () banked
 13816  004890  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 13817  004892                     l7135:
 13818                           
 13819                           ; BSR set to: 0
 13820  004892  0E07               	movlw	7
 13821  004894  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 13822  004896  D001               	goto	l414
 13823  004898  D013               	goto	u8090
 13824  00489A                     l414:
 13825                           
 13826                           ; BSR set to: 0
 13827                           ;memoryController.c: 38: if (occupiedMemory[i].fIsAssigned)
 13828                           
 13829                           ; BSR set to: 0
 13830  00489A  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 13831  00489C  0D09               	mullw	9
 13832  00489E  0E06               	movlw	6
 13833  0048A0  26F3               	addwf	prodl,f,c
 13834  0048A2  0E00               	movlw	0
 13835  0048A4  22F4               	addwfc	prodh,f,c
 13836  0048A6  0E8C               	movlw	low _occupiedMemory
 13837  0048A8  24F3               	addwf	prodl,w,c
 13838  0048AA  6ED9               	movwf	fsr2l,c
 13839  0048AC  0E01               	movlw	high _occupiedMemory
 13840  0048AE  20F4               	addwfc	prodh,w,c
 13841  0048B0  6EDA               	movwf	fsr2h,c
 13842  0048B2  50DF               	movf	indf2,w,c
 13843  0048B4  B4D8               	btfsc	status,2,c
 13844  0048B6  D002               	goto	l416
 13845                           
 13846                           ; BSR set to: 0
 13847                           ;memoryController.c: 39: return 0;
 13848  0048B8  0E00               	movlw	0
 13849                           
 13850                           ; BSR set to: 0
 13851  0048BA  0012               	return	
 13852  0048BC                     l416:
 13853                           
 13854                           ; BSR set to: 0
 13855                           
 13856                           ; BSR set to: 0
 13857  0048BC  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 13858  0048BE  D7E9               	goto	l7135
 13859  0048C0                     u8090:
 13860                           
 13861                           ; BSR set to: 0
 13862                           ;memoryController.c: 40: }
 13863                           ;memoryController.c: 41: return 1;
 13864                           
 13865                           ; BSR set to: 0
 13866  0048C0  0E01               	movlw	1
 13867  0048C2  0012               	return	
 13868  0048C4                     __end_of_entireMemoryEmpty:
 13869                           	opt stack 0
 13870                           tblptru	equ	0xFF8
 13871                           tblptrh	equ	0xFF7
 13872                           tblptrl	equ	0xFF6
 13873                           tablat	equ	0xFF5
 13874                           prodh	equ	0xFF4
 13875                           prodl	equ	0xFF3
 13876                           intcon	equ	0xFF2
 13877                           intcon3	equ	0xFF0
 13878                           indf0	equ	0xFEF
 13879                           postinc0	equ	0xFEE
 13880                           plusw0	equ	0xFEB
 13881                           fsr0h	equ	0xFEA
 13882                           fsr0l	equ	0xFE9
 13883                           wreg	equ	0xFE8
 13884                           indf1	equ	0xFE7
 13885                           postinc1	equ	0xFE6
 13886                           postdec1	equ	0xFE5
 13887                           plusw1	equ	0xFE3
 13888                           fsr1h	equ	0xFE2
 13889                           fsr1l	equ	0xFE1
 13890                           indf2	equ	0xFDF
 13891                           postinc2	equ	0xFDE
 13892                           postdec2	equ	0xFDD
 13893                           plusw2	equ	0xFDB
 13894                           fsr2h	equ	0xFDA
 13895                           fsr2l	equ	0xFD9
 13896                           status	equ	0xFD8
 13897                           
 13898 ;; *************** function _checkForOverlap *****************
 13899 ;; Defined at:
 13900 ;;		line 62 in file "src/mem/memoryController.c"
 13901 ;; Parameters:    Size  Location     Type
 13902 ;;  a               9   18[BANK0 ] struct memoryField
 13903 ;;  b               9   27[BANK0 ] struct memoryField
 13904 ;; Auto vars:     Size  Location     Type
 13905 ;;		None
 13906 ;; Return value:  Size  Location     Type
 13907 ;;                  1    wreg      unsigned char 
 13908 ;; Registers used:
 13909 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13910 ;; Tracked objects:
 13911 ;;		On entry : 0/0
 13912 ;;		On exit  : 0/0
 13913 ;;		Unchanged: 0/0
 13914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13915 ;;      Params:         0      18       0       0       0       0       0       0       0
 13916 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13917 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13918 ;;      Totals:         0      18       0       0       0       0       0       0       0
 13919 ;;Total ram usage:       18 bytes
 13920 ;; Hardware stack levels used:    1
 13921 ;; Hardware stack levels required when called:    5
 13922 ;; This function calls:
 13923 ;;		_checkForOverlapSwitched
 13924 ;; This function is called by:
 13925 ;;		_memory_txFrameRequest
 13926 ;; This function uses a non-reentrant model
 13927 ;;
 13928                           
 13929                           	psect	text46
 13930  003252                     __ptext46:
 13931                           	opt stack 0
 13932  003252                     _checkForOverlap:
 13933                           	opt stack 18
 13934                           
 13935                           ;memoryController.c: 63: if ((a.start == b.start) ||
 13936                           ;memoryController.c: 64: (a.end == b.end) ||
 13937                           ;memoryController.c: 65: (a.start == b.end) ||
 13938                           ;memoryController.c: 66: (a.end == b.start) ||
 13939                           ;memoryController.c: 67: (a.end > 0x3000) ||
 13940                           ;memoryController.c: 68: (a.start > 0x3000) ||
 13941                           ;memoryController.c: 69: (b.end > 0x3000) ||
 13942                           ;memoryController.c: 70: (b.start > 0x3000))
 13943                           
 13944                           ; BSR set to: 0
 13945                           ;incstack = 0
 13946  003252  0100               	movlb	0	; () banked
 13947  003254  517B               	movf	checkForOverlap@b& (0+255),w,b
 13948  003256  1972               	xorwf	checkForOverlap@a& (0+255),w,b
 13949  003258  E104               	bnz	u8130
 13950  00325A  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 13951  00325C  1973               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 13952  00325E  B4D8               	btfsc	status,2,c
 13953  003260  D029               	goto	u8200
 13954  003262                     u8130:
 13955                           
 13956                           ; BSR set to: 0
 13957  003262  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 13958  003264  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 13959  003266  E104               	bnz	u8140
 13960  003268  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 13961  00326A  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 13962  00326C  B4D8               	btfsc	status,2,c
 13963  00326E  D022               	goto	u8200
 13964  003270                     u8140:
 13965                           
 13966                           ; BSR set to: 0
 13967  003270  5172               	movf	checkForOverlap@a& (0+255),w,b
 13968  003272  197D               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 13969  003274  E104               	bnz	u8150
 13970  003276  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 13971  003278  197E               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 13972  00327A  B4D8               	btfsc	status,2,c
 13973  00327C  D01B               	goto	u8200
 13974  00327E                     u8150:
 13975                           
 13976                           ; BSR set to: 0
 13977  00327E  517B               	movf	checkForOverlap@b& (0+255),w,b
 13978  003280  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 13979  003282  E104               	bnz	u8160
 13980  003284  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 13981  003286  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 13982  003288  B4D8               	btfsc	status,2,c
 13983  00328A  D014               	goto	u8200
 13984  00328C                     u8160:
 13985                           
 13986                           ; BSR set to: 0
 13987  00328C  0574               	decf	(checkForOverlap@a+2)& (0+255),w,b
 13988  00328E  0E30               	movlw	48
 13989  003290  5975               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 13990  003292  B0D8               	btfsc	status,0,c
 13991  003294  D00F               	goto	u8200
 13992                           
 13993                           ; BSR set to: 0
 13994  003296  0572               	decf	checkForOverlap@a& (0+255),w,b
 13995  003298  0E30               	movlw	48
 13996  00329A  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 13997  00329C  B0D8               	btfsc	status,0,c
 13998  00329E  D00A               	goto	u8200
 13999                           
 14000                           ; BSR set to: 0
 14001  0032A0  057D               	decf	(checkForOverlap@b+2)& (0+255),w,b
 14002  0032A2  0E30               	movlw	48
 14003  0032A4  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 14004  0032A6  B0D8               	btfsc	status,0,c
 14005  0032A8  D005               	goto	u8200
 14006                           
 14007                           ; BSR set to: 0
 14008  0032AA  057B               	decf	checkForOverlap@b& (0+255),w,b
 14009  0032AC  0E30               	movlw	48
 14010  0032AE  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 14011  0032B0  A0D8               	btfss	status,0,c
 14012  0032B2  D002               	goto	l434
 14013  0032B4                     u8200:
 14014                           
 14015                           ; BSR set to: 0
 14016                           ;memoryController.c: 71: return 1;
 14017                           
 14018                           ; BSR set to: 0
 14019  0032B4  0E01               	movlw	1
 14020                           
 14021                           ; BSR set to: 0
 14022  0032B6  0012               	return	
 14023  0032B8                     l434:
 14024                           
 14025                           ; BSR set to: 0
 14026                           ;memoryController.c: 74: if (a.start < a.end) {
 14027                           
 14028                           ; BSR set to: 0
 14029  0032B8  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 14030  0032BA  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 14031  0032BC  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 14032  0032BE  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 14033  0032C0  B0D8               	btfsc	status,0,c
 14034  0032C2  D036               	goto	l438
 14035                           
 14036                           ; BSR set to: 0
 14037                           ;memoryController.c: 75: if (b.start < b.end) {
 14038  0032C4  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 14039  0032C6  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 14040  0032C8  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 14041  0032CA  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 14042  0032CC  B0D8               	btfsc	status,0,c
 14043  0032CE  D025               	goto	l439
 14044                           
 14045                           ; BSR set to: 0
 14046                           ;memoryController.c: 77: if (a.start < b.start) {
 14047  0032D0  517B               	movf	checkForOverlap@b& (0+255),w,b
 14048  0032D2  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 14049  0032D4  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 14050  0032D6  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 14051  0032D8  B0D8               	btfsc	status,0,c
 14052  0032DA  D00A               	goto	l440
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;memoryController.c: 78: if (a.end > b.start) {
 14056  0032DC  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 14057  0032DE  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 14058  0032E0  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 14059  0032E2  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 14060  0032E4  B0D8               	btfsc	status,0,c
 14061  0032E6  D002               	goto	l441
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;memoryController.c: 79: return 1;
 14065  0032E8  0E01               	movlw	1
 14066                           
 14067                           ; BSR set to: 0
 14068                           ;memoryController.c: 80: }
 14069                           
 14070                           ; BSR set to: 0
 14071  0032EA  0012               	return	
 14072  0032EC                     l441:
 14073                           
 14074                           ; BSR set to: 0
 14075                           ;memoryController.c: 81: else {
 14076                           ;memoryController.c: 82: return 0;
 14077                           
 14078                           ; BSR set to: 0
 14079  0032EC  0E00               	movlw	0
 14080                           
 14081                           ; BSR set to: 0
 14082                           ;memoryController.c: 83: }
 14083                           ;memoryController.c: 84: }
 14084                           
 14085                           ; BSR set to: 0
 14086  0032EE  0012               	return	
 14087  0032F0                     l440:
 14088                           
 14089                           ; BSR set to: 0
 14090                           ;memoryController.c: 85: else {
 14091                           ;memoryController.c: 86: return checkForOverlapSwitched(b, a);
 14092                           
 14093                           ; BSR set to: 0
 14094  0032F0  EE20  F07B         	lfsr	2,checkForOverlap@b
 14095  0032F4  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 14096  0032F8  0E08               	movlw	8
 14097  0032FA                     u8251:
 14098  0032FA  CFDB FFEB          	movff	plusw2,plusw0
 14099  0032FE  06E8               	decf	wreg,f,c
 14100  003300  E2FC               	bc	u8251
 14101  003302  EE20  F072         	lfsr	2,checkForOverlap@a
 14102  003306  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 14103  00330A  0E08               	movlw	8
 14104  00330C                     u8261:
 14105  00330C  CFDB FFEB          	movff	plusw2,plusw0
 14106  003310  06E8               	decf	wreg,f,c
 14107  003312  E2FC               	bc	u8261
 14108  003314  EC2B  F01C         	call	_checkForOverlapSwitched	;wreg free
 14109                           
 14110                           ;memoryController.c: 87: }
 14111                           ;memoryController.c: 88: }
 14112  003318  0012               	return	
 14113  00331A                     l439:
 14114                           
 14115                           ;memoryController.c: 89: else {
 14116                           ;memoryController.c: 90: if (b.end < a.start)
 14117  00331A  0100               	movlb	0	; () banked
 14118  00331C  5172               	movf	checkForOverlap@a& (0+255),w,b
 14119  00331E  5D7D               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 14120  003320  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 14121  003322  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 14122  003324  B0D8               	btfsc	status,0,c
 14123  003326  D002               	goto	l445
 14124                           
 14125                           ; BSR set to: 0
 14126                           ;memoryController.c: 91: return 0;
 14127  003328  0E00               	movlw	0
 14128                           
 14129                           ; BSR set to: 0
 14130                           
 14131                           ; BSR set to: 0
 14132  00332A  0012               	return	
 14133  00332C                     l445:
 14134                           
 14135                           ; BSR set to: 0
 14136                           ;memoryController.c: 92: else
 14137                           ;memoryController.c: 93: return 1;
 14138                           
 14139                           ; BSR set to: 0
 14140  00332C  0E01               	movlw	1
 14141                           
 14142                           ; BSR set to: 0
 14143                           ;memoryController.c: 94: }
 14144                           ;memoryController.c: 95: }
 14145                           
 14146                           ; BSR set to: 0
 14147                           
 14148                           ; BSR set to: 0
 14149  00332E  0012               	return	
 14150  003330                     l438:
 14151                           
 14152                           ; BSR set to: 0
 14153                           ;memoryController.c: 96: else {
 14154                           ;memoryController.c: 97: return checkForOverlapSwitched(b, a);
 14155                           
 14156                           ; BSR set to: 0
 14157  003330  EE20  F07B         	lfsr	2,checkForOverlap@b
 14158  003334  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 14159  003338  0E08               	movlw	8
 14160  00333A                     u8281:
 14161  00333A  CFDB FFEB          	movff	plusw2,plusw0
 14162  00333E  06E8               	decf	wreg,f,c
 14163  003340  E2FC               	bc	u8281
 14164  003342  EE20  F072         	lfsr	2,checkForOverlap@a
 14165  003346  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 14166  00334A  0E08               	movlw	8
 14167  00334C                     u8291:
 14168  00334C  CFDB FFEB          	movff	plusw2,plusw0
 14169  003350  06E8               	decf	wreg,f,c
 14170  003352  E2FC               	bc	u8291
 14171  003354  EC2B  F01C         	call	_checkForOverlapSwitched	;wreg free
 14172  003358  0012               	return	
 14173  00335A                     __end_of_checkForOverlap:
 14174                           	opt stack 0
 14175                           tblptru	equ	0xFF8
 14176                           tblptrh	equ	0xFF7
 14177                           tblptrl	equ	0xFF6
 14178                           tablat	equ	0xFF5
 14179                           prodh	equ	0xFF4
 14180                           prodl	equ	0xFF3
 14181                           intcon	equ	0xFF2
 14182                           intcon3	equ	0xFF0
 14183                           indf0	equ	0xFEF
 14184                           postinc0	equ	0xFEE
 14185                           plusw0	equ	0xFEB
 14186                           fsr0h	equ	0xFEA
 14187                           fsr0l	equ	0xFE9
 14188                           wreg	equ	0xFE8
 14189                           indf1	equ	0xFE7
 14190                           postinc1	equ	0xFE6
 14191                           postdec1	equ	0xFE5
 14192                           plusw1	equ	0xFE3
 14193                           fsr1h	equ	0xFE2
 14194                           fsr1l	equ	0xFE1
 14195                           indf2	equ	0xFDF
 14196                           postinc2	equ	0xFDE
 14197                           postdec2	equ	0xFDD
 14198                           plusw2	equ	0xFDB
 14199                           fsr2h	equ	0xFDA
 14200                           fsr2l	equ	0xFD9
 14201                           status	equ	0xFD8
 14202                           
 14203 ;; *************** function _checkForOverlapSwitched *****************
 14204 ;; Defined at:
 14205 ;;		line 101 in file "src/mem/memoryController.c"
 14206 ;; Parameters:    Size  Location     Type
 14207 ;;  a               9    0[BANK0 ] struct memoryField
 14208 ;;  b               9    9[BANK0 ] struct memoryField
 14209 ;; Auto vars:     Size  Location     Type
 14210 ;;		None
 14211 ;; Return value:  Size  Location     Type
 14212 ;;                  1    wreg      unsigned char 
 14213 ;; Registers used:
 14214 ;;		wreg, status,2, status,0
 14215 ;; Tracked objects:
 14216 ;;		On entry : 0/0
 14217 ;;		On exit  : 0/0
 14218 ;;		Unchanged: 0/0
 14219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14220 ;;      Params:         0      18       0       0       0       0       0       0       0
 14221 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14222 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14223 ;;      Totals:         0      18       0       0       0       0       0       0       0
 14224 ;;Total ram usage:       18 bytes
 14225 ;; Hardware stack levels used:    1
 14226 ;; Hardware stack levels required when called:    4
 14227 ;; This function calls:
 14228 ;;		Nothing
 14229 ;; This function is called by:
 14230 ;;		_checkForOverlap
 14231 ;; This function uses a non-reentrant model
 14232 ;;
 14233                           
 14234                           	psect	text47
 14235  003856                     __ptext47:
 14236                           	opt stack 0
 14237  003856                     _checkForOverlapSwitched:
 14238                           	opt stack 18
 14239                           
 14240                           ;memoryController.c: 104: if ((a.start == b.start) ||
 14241                           ;memoryController.c: 105: (a.end == b.end) ||
 14242                           ;memoryController.c: 106: (a.start == b.end) ||
 14243                           ;memoryController.c: 107: (a.end == b.start) ||
 14244                           ;memoryController.c: 108: (a.end > 0x3000) ||
 14245                           ;memoryController.c: 109: (a.start > 0x3000) ||
 14246                           ;memoryController.c: 110: (b.end > 0x3000) ||
 14247                           ;memoryController.c: 111: (b.start > 0x3000))
 14248                           
 14249                           ;incstack = 0
 14250  003856  0100               	movlb	0	; () banked
 14251  003858  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 14252  00385A  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 14253  00385C  E104               	bnz	u7940
 14254  00385E  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14255  003860  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14256  003862  B4D8               	btfsc	status,2,c
 14257  003864  D029               	goto	u8010
 14258  003866                     u7940:
 14259                           
 14260                           ; BSR set to: 0
 14261  003866  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14262  003868  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14263  00386A  E104               	bnz	u7950
 14264  00386C  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14265  00386E  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14266  003870  B4D8               	btfsc	status,2,c
 14267  003872  D022               	goto	u8010
 14268  003874                     u7950:
 14269                           
 14270                           ; BSR set to: 0
 14271  003874  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 14272  003876  196B               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14273  003878  E104               	bnz	u7960
 14274  00387A  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14275  00387C  196C               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14276  00387E  B4D8               	btfsc	status,2,c
 14277  003880  D01B               	goto	u8010
 14278  003882                     u7960:
 14279                           
 14280                           ; BSR set to: 0
 14281  003882  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 14282  003884  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14283  003886  E104               	bnz	u7970
 14284  003888  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14285  00388A  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14286  00388C  B4D8               	btfsc	status,2,c
 14287  00388E  D014               	goto	u8010
 14288  003890                     u7970:
 14289                           
 14290                           ; BSR set to: 0
 14291  003890  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14292  003892  0E30               	movlw	48
 14293  003894  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14294  003896  B0D8               	btfsc	status,0,c
 14295  003898  D00F               	goto	u8010
 14296                           
 14297                           ; BSR set to: 0
 14298  00389A  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 14299  00389C  0E30               	movlw	48
 14300  00389E  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14301  0038A0  B0D8               	btfsc	status,0,c
 14302  0038A2  D00A               	goto	u8010
 14303                           
 14304                           ; BSR set to: 0
 14305  0038A4  056B               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14306  0038A6  0E30               	movlw	48
 14307  0038A8  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14308  0038AA  B0D8               	btfsc	status,0,c
 14309  0038AC  D005               	goto	u8010
 14310                           
 14311                           ; BSR set to: 0
 14312  0038AE  0569               	decf	checkForOverlapSwitched@b& (0+255),w,b
 14313  0038B0  0E30               	movlw	48
 14314  0038B2  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14315  0038B4  A0D8               	btfss	status,0,c
 14316  0038B6  D002               	goto	l450
 14317  0038B8                     u8010:
 14318                           
 14319                           ; BSR set to: 0
 14320                           ;memoryController.c: 112: return 1;
 14321                           
 14322                           ; BSR set to: 0
 14323  0038B8  0E01               	movlw	1
 14324                           
 14325                           ; BSR set to: 0
 14326  0038BA  0012               	return	
 14327  0038BC                     l450:
 14328                           
 14329                           ; BSR set to: 0
 14330                           ;memoryController.c: 115: if (a.start < a.end) {
 14331                           
 14332                           ; BSR set to: 0
 14333  0038BC  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14334  0038BE  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 14335  0038C0  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14336  0038C2  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14337  0038C4  B0D8               	btfsc	status,0,c
 14338  0038C6  0012               	return	
 14339                           
 14340                           ; BSR set to: 0
 14341                           ;memoryController.c: 116: if (b.start < b.end) {
 14342  0038C8  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14343  0038CA  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 14344  0038CC  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14345  0038CE  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14346  0038D0  B0D8               	btfsc	status,0,c
 14347  0038D2  D010               	goto	l455
 14348                           
 14349                           ; BSR set to: 0
 14350                           ;memoryController.c: 118: if (a.start < b.start) {
 14351  0038D4  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 14352  0038D6  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 14353  0038D8  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14354  0038DA  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14355  0038DC  B0D8               	btfsc	status,0,c
 14356  0038DE  0012               	return	
 14357                           
 14358                           ; BSR set to: 0
 14359                           ;memoryController.c: 119: if (a.end > b.start) {
 14360  0038E0  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14361  0038E2  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 14362  0038E4  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14363  0038E6  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14364  0038E8  B0D8               	btfsc	status,0,c
 14365  0038EA  D002               	goto	l457
 14366                           
 14367                           ; BSR set to: 0
 14368                           ;memoryController.c: 120: return 1;
 14369  0038EC  0E01               	movlw	1
 14370                           
 14371                           ; BSR set to: 0
 14372                           ;memoryController.c: 121: }
 14373                           
 14374                           ; BSR set to: 0
 14375  0038EE  0012               	return	
 14376  0038F0                     l457:
 14377                           
 14378                           ; BSR set to: 0
 14379                           ;memoryController.c: 122: else {
 14380                           ;memoryController.c: 123: return 0;
 14381                           
 14382                           ; BSR set to: 0
 14383  0038F0  0E00               	movlw	0
 14384                           
 14385                           ; BSR set to: 0
 14386                           ;memoryController.c: 124: }
 14387                           ;memoryController.c: 125: }
 14388                           ;memoryController.c: 126: }
 14389                           
 14390                           ; BSR set to: 0
 14391                           
 14392                           ; BSR set to: 0
 14393  0038F2  0012               	return	
 14394  0038F4                     l455:
 14395                           
 14396                           ; BSR set to: 0
 14397                           ;memoryController.c: 127: else {
 14398                           ;memoryController.c: 128: if (b.end < a.start)
 14399                           
 14400                           ; BSR set to: 0
 14401  0038F4  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 14402  0038F6  5D6B               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14403  0038F8  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14404  0038FA  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14405  0038FC  B0D8               	btfsc	status,0,c
 14406  0038FE  D002               	goto	l460
 14407                           
 14408                           ; BSR set to: 0
 14409                           ;memoryController.c: 129: return 0;
 14410  003900  0E00               	movlw	0
 14411                           
 14412                           ; BSR set to: 0
 14413                           
 14414                           ; BSR set to: 0
 14415  003902  0012               	return	
 14416  003904                     l460:
 14417                           
 14418                           ; BSR set to: 0
 14419                           ;memoryController.c: 130: else
 14420                           ;memoryController.c: 131: return 1;
 14421                           
 14422                           ; BSR set to: 0
 14423  003904  0E01               	movlw	1
 14424                           
 14425                           ; BSR set to: 0
 14426                           
 14427                           ; BSR set to: 0
 14428                           
 14429                           ; BSR set to: 0
 14430  003906  0012               	return	
 14431  003908                     __end_of_checkForOverlapSwitched:
 14432                           	opt stack 0
 14433                           tblptru	equ	0xFF8
 14434                           tblptrh	equ	0xFF7
 14435                           tblptrl	equ	0xFF6
 14436                           tablat	equ	0xFF5
 14437                           prodh	equ	0xFF4
 14438                           prodl	equ	0xFF3
 14439                           intcon	equ	0xFF2
 14440                           intcon3	equ	0xFF0
 14441                           indf0	equ	0xFEF
 14442                           postinc0	equ	0xFEE
 14443                           plusw0	equ	0xFEB
 14444                           fsr0h	equ	0xFEA
 14445                           fsr0l	equ	0xFE9
 14446                           wreg	equ	0xFE8
 14447                           indf1	equ	0xFE7
 14448                           postinc1	equ	0xFE6
 14449                           postdec1	equ	0xFE5
 14450                           plusw1	equ	0xFE3
 14451                           fsr1h	equ	0xFE2
 14452                           fsr1l	equ	0xFE1
 14453                           indf2	equ	0xFDF
 14454                           postinc2	equ	0xFDE
 14455                           postdec2	equ	0xFDD
 14456                           plusw2	equ	0xFDB
 14457                           fsr2h	equ	0xFDA
 14458                           fsr2l	equ	0xFD9
 14459                           status	equ	0xFD8
 14460                           
 14461 ;; *************** function ___wmul *****************
 14462 ;; Defined at:
 14463 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14464 ;; Parameters:    Size  Location     Type
 14465 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14466 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14467 ;; Auto vars:     Size  Location     Type
 14468 ;;  product         2    4[BANK0 ] unsigned int 
 14469 ;; Return value:  Size  Location     Type
 14470 ;;                  2    0[BANK0 ] unsigned int 
 14471 ;; Registers used:
 14472 ;;		wreg, status,2, status,0, prodl, prodh
 14473 ;; Tracked objects:
 14474 ;;		On entry : 0/0
 14475 ;;		On exit  : 0/0
 14476 ;;		Unchanged: 0/0
 14477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14478 ;;      Params:         0       4       0       0       0       0       0       0       0
 14479 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14480 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14481 ;;      Totals:         0       6       0       0       0       0       0       0       0
 14482 ;;Total ram usage:        6 bytes
 14483 ;; Hardware stack levels used:    1
 14484 ;; Hardware stack levels required when called:    4
 14485 ;; This function calls:
 14486 ;;		Nothing
 14487 ;; This function is called by:
 14488 ;;		_memory_txFrameRequest
 14489 ;;		_intToString
 14490 ;; This function uses a non-reentrant model
 14491 ;;
 14492                           
 14493                           	psect	text48
 14494  004A66                     __ptext48:
 14495                           	opt stack 0
 14496  004A66                     ___wmul:
 14497                           	opt stack 24
 14498                           
 14499                           ; BSR set to: 0
 14500                           ;incstack = 0
 14501  004A66  0100               	movlb	0	; () banked
 14502  004A68  5160               	movf	___wmul@multiplier& (0+255),w,b
 14503  004A6A  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14504  004A6C  CFF3 F064          	movff	prodl,___wmul@product
 14505  004A70  CFF4 F065          	movff	prodh,___wmul@product+1
 14506  004A74  5160               	movf	___wmul@multiplier& (0+255),w,b
 14507  004A76  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14508  004A78  50F3               	movf	prodl,w,c
 14509  004A7A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14510  004A7C  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14511  004A7E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14512  004A80  50F3               	movf	prodl,w,c
 14513  004A82  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14514                           
 14515                           ; BSR set to: 0
 14516  004A84  C064  F060         	movff	___wmul@product,?___wmul
 14517  004A88  C065  F061         	movff	___wmul@product+1,?___wmul+1
 14518  004A8C  0012               	return	
 14519  004A8E                     __end_of___wmul:
 14520                           	opt stack 0
 14521                           tblptru	equ	0xFF8
 14522                           tblptrh	equ	0xFF7
 14523                           tblptrl	equ	0xFF6
 14524                           tablat	equ	0xFF5
 14525                           prodh	equ	0xFF4
 14526                           prodl	equ	0xFF3
 14527                           intcon	equ	0xFF2
 14528                           intcon3	equ	0xFF0
 14529                           indf0	equ	0xFEF
 14530                           postinc0	equ	0xFEE
 14531                           plusw0	equ	0xFEB
 14532                           fsr0h	equ	0xFEA
 14533                           fsr0l	equ	0xFE9
 14534                           wreg	equ	0xFE8
 14535                           indf1	equ	0xFE7
 14536                           postinc1	equ	0xFE6
 14537                           postdec1	equ	0xFE5
 14538                           plusw1	equ	0xFE3
 14539                           fsr1h	equ	0xFE2
 14540                           fsr1l	equ	0xFE1
 14541                           indf2	equ	0xFDF
 14542                           postinc2	equ	0xFDE
 14543                           postdec2	equ	0xFDD
 14544                           plusw2	equ	0xFDB
 14545                           fsr2h	equ	0xFDA
 14546                           fsr2l	equ	0xFD9
 14547                           status	equ	0xFD8
 14548                           
 14549 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 14550 ;; Defined at:
 14551 ;;		line 240 in file "src/enc424j600/ENC424J600.c"
 14552 ;; Parameters:    Size  Location     Type
 14553 ;;  ethtype         2   15[BANK0 ] enum E5507
 14554 ;;  field           9   17[BANK0 ] struct memoryField
 14555 ;; Auto vars:     Size  Location     Type
 14556 ;;  opcode          1   28[BANK0 ] unsigned char 
 14557 ;;  highByte        1   27[BANK0 ] unsigned char 
 14558 ;;  lowByte         1   26[BANK0 ] unsigned char 
 14559 ;; Return value:  Size  Location     Type
 14560 ;;                  1    wreg      void 
 14561 ;; Registers used:
 14562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14563 ;; Tracked objects:
 14564 ;;		On entry : 0/0
 14565 ;;		On exit  : 0/0
 14566 ;;		Unchanged: 0/0
 14567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14568 ;;      Params:         0      11       0       0       0       0       0       0       0
 14569 ;;      Locals:         0       3       0       0       0       0       0       0       0
 14570 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14571 ;;      Totals:         0      14       0       0       0       0       0       0       0
 14572 ;;Total ram usage:       14 bytes
 14573 ;; Hardware stack levels used:    1
 14574 ;; Hardware stack levels required when called:    7
 14575 ;; This function calls:
 14576 ;;		_ENC424J600_setGPDATAWritePointer
 14577 ;;		_ENC424J600_writeSPI
 14578 ;; This function is called by:
 14579 ;;		_ethernet_txFrameRequest
 14580 ;; This function uses a non-reentrant model
 14581 ;;
 14582                           
 14583                           	psect	text49
 14584  004564                     __ptext49:
 14585                           	opt stack 0
 14586  004564                     _ethernetController_writeEtherTypeFieldToBuffer:
 14587                           	opt stack 17
 14588                           
 14589                           ;ENC424J600.c: 241: ENC424J600_setGPDATAWritePointer(field.start + 0x0006);
 14590                           
 14591                           ; BSR set to: 0
 14592                           ;incstack = 0
 14593  004564  0E06               	movlw	6
 14594  004566  0100               	movlb	0	; () banked
 14595  004568  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 14596  00456A  6F6A               	movwf	ENC424J600_setGPDATAWritePointer@addr& (0+255),b
 14597  00456C  0E00               	movlw	0
 14598  00456E  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 14599  004570  6F6B               	movwf	(ENC424J600_setGPDATAWritePointer@addr+1)& (0+255),b
 14600  004572  ECEE  F023         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 14601                           
 14602                           ;ENC424J600.c: 242: uint8_t lowByte = ethtype & 0x00ff;
 14603  004576  C06F  F07A         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 14604                           
 14605                           ;ENC424J600.c: 243: uint8_t highByte = (ethtype & 0xff00) >> 8;
 14606  00457A  0100               	movlb	0	; () banked
 14607  00457C  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 14608  00457E  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 14609                           
 14610                           ; BSR set to: 0
 14611                           ;ENC424J600.c: 244: uint8_t opcode = 0x2A;
 14612  004580  0E2A               	movlw	42
 14613  004582  6F7C               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 14614                           
 14615                           ; BSR set to: 0
 14616                           ;ENC424J600.c: 245: PORTBbits.RB4=0;
 14617  004584  9881               	bcf	3969,4,c	;volatile
 14618                           
 14619                           ;ENC424J600.c: 246: ENC424J600_writeSPI(&opcode);
 14620  004586  0E7C               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 14621  004588  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14622  00458A  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 14623  00458C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14624  00458E  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 14625                           
 14626                           ;ENC424J600.c: 247: ENC424J600_writeSPI(&highByte);
 14627  004592  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 14628  004594  0100               	movlb	0	; () banked
 14629  004596  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14630  004598  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 14631  00459A  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14632  00459C  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 14633                           
 14634                           ;ENC424J600.c: 248: ENC424J600_writeSPI(&lowByte);
 14635  0045A0  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 14636  0045A2  0100               	movlb	0	; () banked
 14637  0045A4  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14638  0045A6  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 14639  0045A8  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14640  0045AA  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 14641                           
 14642                           ;ENC424J600.c: 249: PORTBbits.RB4=1;
 14643  0045AE  8881               	bsf	3969,4,c	;volatile
 14644  0045B0  0012               	return		;funcret
 14645  0045B2                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 14646                           	opt stack 0
 14647                           tblptru	equ	0xFF8
 14648                           tblptrh	equ	0xFF7
 14649                           tblptrl	equ	0xFF6
 14650                           tablat	equ	0xFF5
 14651                           prodh	equ	0xFF4
 14652                           prodl	equ	0xFF3
 14653                           intcon	equ	0xFF2
 14654                           intcon3	equ	0xFF0
 14655                           indf0	equ	0xFEF
 14656                           postinc0	equ	0xFEE
 14657                           plusw0	equ	0xFEB
 14658                           fsr0h	equ	0xFEA
 14659                           fsr0l	equ	0xFE9
 14660                           wreg	equ	0xFE8
 14661                           indf1	equ	0xFE7
 14662                           postinc1	equ	0xFE6
 14663                           postdec1	equ	0xFE5
 14664                           plusw1	equ	0xFE3
 14665                           fsr1h	equ	0xFE2
 14666                           fsr1l	equ	0xFE1
 14667                           indf2	equ	0xFDF
 14668                           postinc2	equ	0xFDE
 14669                           postdec2	equ	0xFDD
 14670                           plusw2	equ	0xFDB
 14671                           fsr2h	equ	0xFDA
 14672                           fsr2l	equ	0xFD9
 14673                           status	equ	0xFD8
 14674                           
 14675 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 14676 ;; Defined at:
 14677 ;;		line 227 in file "src/enc424j600/ENC424J600.c"
 14678 ;; Parameters:    Size  Location     Type
 14679 ;;  addr            6   15[BANK0 ] struct macaddress
 14680 ;;  field           9   21[BANK0 ] struct memoryField
 14681 ;; Auto vars:     Size  Location     Type
 14682 ;;  i               1   37[BANK0 ] unsigned char 
 14683 ;;  i               1   38[BANK0 ] unsigned char 
 14684 ;;  data            6   30[BANK0 ] unsigned char [6]
 14685 ;;  opcode          1   36[BANK0 ] unsigned char 
 14686 ;; Return value:  Size  Location     Type
 14687 ;;                  1    wreg      void 
 14688 ;; Registers used:
 14689 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14690 ;; Tracked objects:
 14691 ;;		On entry : 0/0
 14692 ;;		On exit  : 0/0
 14693 ;;		Unchanged: 0/0
 14694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14695 ;;      Params:         0      15       0       0       0       0       0       0       0
 14696 ;;      Locals:         0       9       0       0       0       0       0       0       0
 14697 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14698 ;;      Totals:         0      24       0       0       0       0       0       0       0
 14699 ;;Total ram usage:       24 bytes
 14700 ;; Hardware stack levels used:    1
 14701 ;; Hardware stack levels required when called:    7
 14702 ;; This function calls:
 14703 ;;		_ENC424J600_setGPDATAWritePointer
 14704 ;;		_ENC424J600_writeSPI
 14705 ;; This function is called by:
 14706 ;;		_ethernet_txFrameRequest
 14707 ;; This function uses a non-reentrant model
 14708 ;;
 14709                           
 14710                           	psect	text50
 14711  003D04                     __ptext50:
 14712                           	opt stack 0
 14713  003D04                     _ethernetController_writeDestinationMACAddress:
 14714                           	opt stack 17
 14715                           
 14716                           ;ENC424J600.c: 228: ENC424J600_setGPDATAWritePointer(field.start);
 14717                           
 14718                           ;incstack = 0
 14719  003D04  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,ENC424J600_setGPDATAWritePoin
      +                          ter@addr
 14720  003D08  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,ENC424J600_setGPDATAWritePo
      +                          inter@addr+1
 14721  003D0C  ECEE  F023         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 14722                           
 14723                           ;ENC424J600.c: 229: uint8_t data[6];
 14724                           ;ENC424J600.c: 230: for (uint8_t i = 0; i < 6; i++)
 14725  003D10  0E00               	movlw	0
 14726  003D12  0100               	movlb	0	; () banked
 14727  003D14  6F86               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 14728  003D16                     l7265:
 14729                           
 14730                           ; BSR set to: 0
 14731  003D16  0E05               	movlw	5
 14732  003D18  6586               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 14733  003D1A  D001               	goto	l138
 14734  003D1C  D014               	goto	u8310
 14735  003D1E                     l138:
 14736                           
 14737                           ; BSR set to: 0
 14738                           ;ENC424J600.c: 231: data[i] = addr.address[i];
 14739                           
 14740                           ; BSR set to: 0
 14741  003D1E  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 14742  003D20  0D01               	mullw	1
 14743  003D22  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 14744  003D24  24F3               	addwf	prodl,w,c
 14745  003D26  6ED9               	movwf	fsr2l,c
 14746  003D28  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 14747  003D2A  20F4               	addwfc	prodh,w,c
 14748  003D2C  6EDA               	movwf	fsr2h,c
 14749  003D2E  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 14750  003D30  0D01               	mullw	1
 14751  003D32  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 14752  003D34  24F3               	addwf	prodl,w,c
 14753  003D36  6EE1               	movwf	fsr1l,c
 14754  003D38  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 14755  003D3A  20F4               	addwfc	prodh,w,c
 14756  003D3C  6EE2               	movwf	fsr1h,c
 14757  003D3E  CFDF FFE7          	movff	indf2,indf1
 14758                           
 14759                           ; BSR set to: 0
 14760  003D42  2B86               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 14761  003D44  D7E8               	goto	l7265
 14762  003D46                     u8310:
 14763                           
 14764                           ; BSR set to: 0
 14765                           ;ENC424J600.c: 232: uint8_t opcode = 0x2A;
 14766                           
 14767                           ; BSR set to: 0
 14768  003D46  0E2A               	movlw	42
 14769  003D48  6F84               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 14770                           
 14771                           ; BSR set to: 0
 14772                           ;ENC424J600.c: 233: PORTBbits.RB4=0;
 14773  003D4A  9881               	bcf	3969,4,c	;volatile
 14774                           
 14775                           ; BSR set to: 0
 14776                           ;ENC424J600.c: 234: ENC424J600_writeSPI(&opcode);
 14777  003D4C  0E84               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 14778  003D4E  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14779  003D50  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 14780  003D52  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14781  003D54  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 14782                           
 14783                           ;ENC424J600.c: 235: for (uint8_t i = 0; i < 6; i++)
 14784  003D58  0E00               	movlw	0
 14785  003D5A  0100               	movlb	0	; () banked
 14786  003D5C  6F85               	movwf	ethernetController_writeDestinationMACAddress@i_634& (0+255),b
 14787  003D5E                     l7283:
 14788                           
 14789                           ; BSR set to: 0
 14790  003D5E  0E05               	movlw	5
 14791  003D60  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i_634& (0+255),b
 14792  003D62  D001               	goto	l140
 14793  003D64  D00D               	goto	u8330
 14794  003D66                     l140:
 14795                           
 14796                           ; BSR set to: 0
 14797                           ;ENC424J600.c: 236: ENC424J600_writeSPI(&data[i]);
 14798                           
 14799                           ; BSR set to: 0
 14800  003D66  5185               	movf	ethernetController_writeDestinationMACAddress@i_634& (0+255),w,b
 14801  003D68  0D01               	mullw	1
 14802  003D6A  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 14803  003D6C  24F3               	addwf	prodl,w,c
 14804  003D6E  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14805  003D70  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 14806  003D72  20F4               	addwfc	prodh,w,c
 14807  003D74  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14808  003D76  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 14809  003D7A  0100               	movlb	0	; () banked
 14810  003D7C  2B85               	incf	ethernetController_writeDestinationMACAddress@i_634& (0+255),f,b
 14811  003D7E  D7EF               	goto	l7283
 14812  003D80                     u8330:
 14813                           
 14814                           ; BSR set to: 0
 14815                           ;ENC424J600.c: 237: PORTBbits.RB4=1;
 14816  003D80  8881               	bsf	3969,4,c	;volatile
 14817                           
 14818                           ; BSR set to: 0
 14819  003D82  0012               	return		;funcret
 14820  003D84                     __end_of_ethernetController_writeDestinationMACAddress:
 14821                           	opt stack 0
 14822                           tblptru	equ	0xFF8
 14823                           tblptrh	equ	0xFF7
 14824                           tblptrl	equ	0xFF6
 14825                           tablat	equ	0xFF5
 14826                           prodh	equ	0xFF4
 14827                           prodl	equ	0xFF3
 14828                           intcon	equ	0xFF2
 14829                           intcon3	equ	0xFF0
 14830                           indf0	equ	0xFEF
 14831                           postinc0	equ	0xFEE
 14832                           plusw0	equ	0xFEB
 14833                           fsr0h	equ	0xFEA
 14834                           fsr0l	equ	0xFE9
 14835                           wreg	equ	0xFE8
 14836                           indf1	equ	0xFE7
 14837                           postinc1	equ	0xFE6
 14838                           postdec1	equ	0xFE5
 14839                           plusw1	equ	0xFE3
 14840                           fsr1h	equ	0xFE2
 14841                           fsr1l	equ	0xFE1
 14842                           indf2	equ	0xFDF
 14843                           postinc2	equ	0xFDE
 14844                           postdec2	equ	0xFDD
 14845                           plusw2	equ	0xFDB
 14846                           fsr2h	equ	0xFDA
 14847                           fsr2l	equ	0xFD9
 14848                           status	equ	0xFD8
 14849                           
 14850 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 14851 ;; Defined at:
 14852 ;;		line 207 in file "src/enc424j600/ENC424J600.c"
 14853 ;; Parameters:    Size  Location     Type
 14854 ;;  data            1    wreg     unsigned char 
 14855 ;;  field           9   15[BANK0 ] struct memoryField
 14856 ;; Auto vars:     Size  Location     Type
 14857 ;;  data            1   28[BANK0 ] unsigned char 
 14858 ;;  opcode          1   29[BANK0 ] unsigned char 
 14859 ;; Return value:  Size  Location     Type
 14860 ;;                  1    wreg      void 
 14861 ;; Registers used:
 14862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14863 ;; Tracked objects:
 14864 ;;		On entry : 0/0
 14865 ;;		On exit  : 0/0
 14866 ;;		Unchanged: 0/0
 14867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14868 ;;      Params:         0       9       0       0       0       0       0       0       0
 14869 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14870 ;;      Temps:          0       4       0       0       0       0       0       0       0
 14871 ;;      Totals:         0      15       0       0       0       0       0       0       0
 14872 ;;Total ram usage:       15 bytes
 14873 ;; Hardware stack levels used:    1
 14874 ;; Hardware stack levels required when called:    7
 14875 ;; This function calls:
 14876 ;;		_ENC424J600_setGPDATAWritePointer
 14877 ;;		_ENC424J600_writeSPI
 14878 ;; This function is called by:
 14879 ;;		_ARP_send
 14880 ;;		_ipv4_streamToTransmissionBuffer
 14881 ;; This function uses a non-reentrant model
 14882 ;;
 14883                           
 14884                           	psect	text51
 14885  003EFA                     __ptext51:
 14886                           	opt stack 0
 14887  003EFA                     _ethernetController_streamToTransmitBuffer:
 14888                           	opt stack 18
 14889                           
 14890                           ; BSR set to: 0
 14891                           ;incstack = 0
 14892                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 14893  003EFA  0100               	movlb	0	; () banked
 14894  003EFC  6F7C               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 14895                           
 14896                           ;ENC424J600.c: 208: uint8_t opcode;
 14897                           ;ENC424J600.c: 209: uint16_t static pointer = 0;
 14898                           ;ENC424J600.c: 210: if (pointer == 0) {
 14899  003EFE  5040               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 14900  003F00  1041               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 14901  003F02  A4D8               	btfss	status,2,c
 14902  003F04  D010               	goto	l132
 14903                           
 14904                           ;ENC424J600.c: 211: ENC424J600_setGPDATAWritePointer(field.start);
 14905  003F06  C06F  F06A         	movff	ethernetController_streamToTransmitBuffer@field,ENC424J600_setGPDATAWritePointer@
      +                          addr
 14906  003F0A  C070  F06B         	movff	ethernetController_streamToTransmitBuffer@field+1,ENC424J600_setGPDATAWritePointe
      +                          r@addr+1
 14907  003F0E  ECEE  F023         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 14908                           
 14909                           ;ENC424J600.c: 212: opcode = 0x2A;
 14910  003F12  0E2A               	movlw	42
 14911  003F14  0100               	movlb	0	; () banked
 14912  003F16  6F7D               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 14913                           
 14914                           ; BSR set to: 0
 14915                           ;ENC424J600.c: 213: PORTBbits.RB4=0;
 14916  003F18  9881               	bcf	3969,4,c	;volatile
 14917                           
 14918                           ; BSR set to: 0
 14919                           ;ENC424J600.c: 214: ENC424J600_writeSPI(&opcode);
 14920  003F1A  0E7D               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 14921  003F1C  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14922  003F1E  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 14923  003F20  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14924  003F22  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 14925  003F26                     l132:
 14926                           
 14927                           ;ENC424J600.c: 215: }
 14928                           ;ENC424J600.c: 217: ENC424J600_writeSPI(&data);
 14929  003F26  0E7C               	movlw	low ethernetController_streamToTransmitBuffer@data
 14930  003F28  0100               	movlb	0	; () banked
 14931  003F2A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14932  003F2C  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 14933  003F2E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14934  003F30  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 14935                           
 14936                           ;ENC424J600.c: 219: if (pointer == field.length - 1) {
 14937  003F34  0EFF               	movlw	255
 14938  003F36  0100               	movlb	0	; () banked
 14939  003F38  6F78               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 14940  003F3A  0EFF               	movlw	255
 14941  003F3C  6F79               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 14942  003F3E  EE20  F073         	lfsr	2,ethernetController_streamToTransmitBuffer@field+4
 14943  003F42  CFDE F07A          	movff	postinc2,??_ethernetController_streamToTransmitBuffer+2
 14944  003F46  CFDD F07B          	movff	postdec2,??_ethernetController_streamToTransmitBuffer+3
 14945  003F4A  5178               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 14946  003F4C  277A               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 14947  003F4E  5179               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 14948  003F50  237B               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 14949  003F52  5040               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 14950  003F54  197A               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 14951  003F56  E10A               	bnz	l7529
 14952  003F58  5041               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 14953  003F5A  197B               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 14954  003F5C  A4D8               	btfss	status,2,c
 14955  003F5E  D006               	goto	l133
 14956                           
 14957                           ; BSR set to: 0
 14958                           ;ENC424J600.c: 220: PORTBbits.RB4=1;
 14959  003F60  8881               	bsf	3969,4,c	;volatile
 14960                           
 14961                           ; BSR set to: 0
 14962                           ;ENC424J600.c: 221: pointer = 0;
 14963  003F62  0E00               	movlw	0
 14964  003F64  6E41               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 14965  003F66  0E00               	movlw	0
 14966  003F68  6E40               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 14967                           
 14968                           ;ENC424J600.c: 222: } else {
 14969  003F6A  0012               	return	
 14970  003F6C                     l133:
 14971  003F6C                     l7529:
 14972                           
 14973                           ; BSR set to: 0
 14974                           ;ENC424J600.c: 223: pointer++;
 14975  003F6C  4A40               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 14976  003F6E  2A41               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 14977  003F70  0012               	return	
 14978  003F72                     __end_of_ethernetController_streamToTransmitBuffer:
 14979                           	opt stack 0
 14980                           tblptru	equ	0xFF8
 14981                           tblptrh	equ	0xFF7
 14982                           tblptrl	equ	0xFF6
 14983                           tablat	equ	0xFF5
 14984                           prodh	equ	0xFF4
 14985                           prodl	equ	0xFF3
 14986                           intcon	equ	0xFF2
 14987                           intcon3	equ	0xFF0
 14988                           indf0	equ	0xFEF
 14989                           postinc0	equ	0xFEE
 14990                           plusw0	equ	0xFEB
 14991                           fsr0h	equ	0xFEA
 14992                           fsr0l	equ	0xFE9
 14993                           wreg	equ	0xFE8
 14994                           indf1	equ	0xFE7
 14995                           postinc1	equ	0xFE6
 14996                           postdec1	equ	0xFE5
 14997                           plusw1	equ	0xFE3
 14998                           fsr1h	equ	0xFE2
 14999                           fsr1l	equ	0xFE1
 15000                           indf2	equ	0xFDF
 15001                           postinc2	equ	0xFDE
 15002                           postdec2	equ	0xFDD
 15003                           plusw2	equ	0xFDB
 15004                           fsr2h	equ	0xFDA
 15005                           fsr2l	equ	0xFD9
 15006                           status	equ	0xFD8
 15007                           
 15008 ;; *************** function _ENC424J600_setGPDATAWritePointer *****************
 15009 ;; Defined at:
 15010 ;;		line 644 in file "src/enc424j600/ENC424J600.c"
 15011 ;; Parameters:    Size  Location     Type
 15012 ;;  addr            2   10[BANK0 ] unsigned int 
 15013 ;; Auto vars:     Size  Location     Type
 15014 ;;  highByte        1   14[BANK0 ] unsigned char 
 15015 ;;  lowByte         1   13[BANK0 ] unsigned char 
 15016 ;;  opcode          1   12[BANK0 ] unsigned char 
 15017 ;; Return value:  Size  Location     Type
 15018 ;;                  1    wreg      void 
 15019 ;; Registers used:
 15020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15021 ;; Tracked objects:
 15022 ;;		On entry : 0/0
 15023 ;;		On exit  : 0/0
 15024 ;;		Unchanged: 0/0
 15025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15026 ;;      Params:         0       2       0       0       0       0       0       0       0
 15027 ;;      Locals:         0       3       0       0       0       0       0       0       0
 15028 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15029 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15030 ;;Total ram usage:        5 bytes
 15031 ;; Hardware stack levels used:    1
 15032 ;; Hardware stack levels required when called:    6
 15033 ;; This function calls:
 15034 ;;		_ENC424J600_writeSPI
 15035 ;; This function is called by:
 15036 ;;		_ethernetController_streamToTransmitBuffer
 15037 ;;		_ethernetController_writeDestinationMACAddress
 15038 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 15039 ;; This function uses a non-reentrant model
 15040 ;;
 15041                           
 15042                           	psect	text52
 15043  0047DC                     __ptext52:
 15044                           	opt stack 0
 15045  0047DC                     _ENC424J600_setGPDATAWritePointer:
 15046                           	opt stack 17
 15047                           
 15048                           ;ENC424J600.c: 645: uint8_t opcode = 0x6C;
 15049                           
 15050                           ; BSR set to: 0
 15051                           ;incstack = 0
 15052  0047DC  0E6C               	movlw	108
 15053  0047DE  0100               	movlb	0	; () banked
 15054  0047E0  6F6C               	movwf	ENC424J600_setGPDATAWritePointer@opcode& (0+255),b
 15055                           
 15056                           ; BSR set to: 0
 15057                           ;ENC424J600.c: 646: uint8_t lowByte = addr & 0x00ff;
 15058  0047E2  C06A  F06D         	movff	ENC424J600_setGPDATAWritePointer@addr,ENC424J600_setGPDATAWritePointer@lowByte
 15059                           
 15060                           ;ENC424J600.c: 647: uint8_t highByte = (addr & 0xff00) >> 8;
 15061  0047E6  516B               	movf	(ENC424J600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 15062  0047E8  6F6E               	movwf	ENC424J600_setGPDATAWritePointer@highByte& (0+255),b
 15063                           
 15064                           ; BSR set to: 0
 15065                           ;ENC424J600.c: 648: PORTBbits.RB4=0;
 15066  0047EA  9881               	bcf	3969,4,c	;volatile
 15067                           
 15068                           ; BSR set to: 0
 15069                           ;ENC424J600.c: 649: ENC424J600_writeSPI(&opcode);
 15070  0047EC  0E6C               	movlw	low ENC424J600_setGPDATAWritePointer@opcode
 15071  0047EE  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15072  0047F0  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@opcode
 15073  0047F2  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15074  0047F4  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 15075                           
 15076                           ;ENC424J600.c: 650: ENC424J600_writeSPI(&lowByte);
 15077  0047F8  0E6D               	movlw	low ENC424J600_setGPDATAWritePointer@lowByte
 15078  0047FA  0100               	movlb	0	; () banked
 15079  0047FC  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15080  0047FE  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@lowByte
 15081  004800  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15082  004802  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 15083                           
 15084                           ;ENC424J600.c: 651: ENC424J600_writeSPI(&highByte);
 15085  004806  0E6E               	movlw	low ENC424J600_setGPDATAWritePointer@highByte
 15086  004808  0100               	movlb	0	; () banked
 15087  00480A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15088  00480C  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@highByte
 15089  00480E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15090  004810  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 15091                           
 15092                           ;ENC424J600.c: 652: PORTBbits.RB4=1;
 15093  004814  8881               	bsf	3969,4,c	;volatile
 15094  004816  0012               	return		;funcret
 15095  004818                     __end_of_ENC424J600_setGPDATAWritePointer:
 15096                           	opt stack 0
 15097                           tblptru	equ	0xFF8
 15098                           tblptrh	equ	0xFF7
 15099                           tblptrl	equ	0xFF6
 15100                           tablat	equ	0xFF5
 15101                           prodh	equ	0xFF4
 15102                           prodl	equ	0xFF3
 15103                           intcon	equ	0xFF2
 15104                           intcon3	equ	0xFF0
 15105                           indf0	equ	0xFEF
 15106                           postinc0	equ	0xFEE
 15107                           plusw0	equ	0xFEB
 15108                           fsr0h	equ	0xFEA
 15109                           fsr0l	equ	0xFE9
 15110                           wreg	equ	0xFE8
 15111                           indf1	equ	0xFE7
 15112                           postinc1	equ	0xFE6
 15113                           postdec1	equ	0xFE5
 15114                           plusw1	equ	0xFE3
 15115                           fsr1h	equ	0xFE2
 15116                           fsr1l	equ	0xFE1
 15117                           indf2	equ	0xFDF
 15118                           postinc2	equ	0xFDE
 15119                           postdec2	equ	0xFDD
 15120                           plusw2	equ	0xFDB
 15121                           fsr2h	equ	0xFDA
 15122                           fsr2l	equ	0xFD9
 15123                           status	equ	0xFD8
 15124                           
 15125 ;; *************** function _ethernetController_sendPacket *****************
 15126 ;; Defined at:
 15127 ;;		line 200 in file "src/enc424j600/ENC424J600.c"
 15128 ;; Parameters:    Size  Location     Type
 15129 ;;  field           9   18[BANK0 ] struct memoryField
 15130 ;; Auto vars:     Size  Location     Type
 15131 ;;		None
 15132 ;; Return value:  Size  Location     Type
 15133 ;;                  1    wreg      void 
 15134 ;; Registers used:
 15135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15136 ;; Tracked objects:
 15137 ;;		On entry : 0/0
 15138 ;;		On exit  : 0/0
 15139 ;;		Unchanged: 0/0
 15140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15141 ;;      Params:         0       9       0       0       0       0       0       0       0
 15142 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15143 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15144 ;;      Totals:         0       9       0       0       0       0       0       0       0
 15145 ;;Total ram usage:        9 bytes
 15146 ;; Hardware stack levels used:    1
 15147 ;; Hardware stack levels required when called:    8
 15148 ;; This function calls:
 15149 ;;		_ENC424J600_setTXLength
 15150 ;;		_ENC424J600_setTXStartAddress
 15151 ;;		_ENC424J600_writeSingleByte
 15152 ;;		_memory_txFrameClear
 15153 ;; This function is called by:
 15154 ;;		_ARP_send
 15155 ;; This function uses a non-reentrant model
 15156 ;;
 15157                           
 15158                           	psect	text53
 15159  004A8E                     __ptext53:
 15160                           	opt stack 0
 15161  004A8E                     _ethernetController_sendPacket:
 15162                           	opt stack 17
 15163                           
 15164                           ;ENC424J600.c: 201: ENC424J600_setTXStartAddress(field.start);
 15165                           
 15166                           ;incstack = 0
 15167  004A8E  C072  F06E         	movff	ethernetController_sendPacket@field,ENC424J600_setTXStartAddress@addr
 15168  004A92  C073  F06F         	movff	ethernetController_sendPacket@field+1,ENC424J600_setTXStartAddress@addr+1
 15169  004A96  ECDF  F024         	call	_ENC424J600_setTXStartAddress	;wreg free
 15170                           
 15171                           ;ENC424J600.c: 202: ENC424J600_setTXLength(field.length);
 15172  004A9A  C076  F06E         	movff	ethernetController_sendPacket@field+4,ENC424J600_setTXLength@len
 15173  004A9E  C077  F06F         	movff	ethernetController_sendPacket@field+5,ENC424J600_setTXLength@len+1
 15174  004AA2  ECF4  F024         	call	_ENC424J600_setTXLength	;wreg free
 15175                           
 15176                           ;ENC424J600.c: 203: ENC424J600_writeSingleByte(0b11010100);
 15177  004AA6  0ED4               	movlw	212
 15178  004AA8  EC2E  F026         	call	_ENC424J600_writeSingleByte
 15179                           
 15180                           ;ENC424J600.c: 204: memory_txFrameClear(field.index);
 15181  004AAC  0100               	movlb	0	; () banked
 15182  004AAE  517A               	movf	(ethernetController_sendPacket@field+8)& (0+255),w,b
 15183  004AB0  EC95  F025         	call	_memory_txFrameClear
 15184  004AB4  0012               	return		;funcret
 15185  004AB6                     __end_of_ethernetController_sendPacket:
 15186                           	opt stack 0
 15187                           tblptru	equ	0xFF8
 15188                           tblptrh	equ	0xFF7
 15189                           tblptrl	equ	0xFF6
 15190                           tablat	equ	0xFF5
 15191                           prodh	equ	0xFF4
 15192                           prodl	equ	0xFF3
 15193                           intcon	equ	0xFF2
 15194                           intcon3	equ	0xFF0
 15195                           indf0	equ	0xFEF
 15196                           postinc0	equ	0xFEE
 15197                           plusw0	equ	0xFEB
 15198                           fsr0h	equ	0xFEA
 15199                           fsr0l	equ	0xFE9
 15200                           wreg	equ	0xFE8
 15201                           indf1	equ	0xFE7
 15202                           postinc1	equ	0xFE6
 15203                           postdec1	equ	0xFE5
 15204                           plusw1	equ	0xFE3
 15205                           fsr1h	equ	0xFE2
 15206                           fsr1l	equ	0xFE1
 15207                           indf2	equ	0xFDF
 15208                           postinc2	equ	0xFDE
 15209                           postdec2	equ	0xFDD
 15210                           plusw2	equ	0xFDB
 15211                           fsr2h	equ	0xFDA
 15212                           fsr2l	equ	0xFD9
 15213                           status	equ	0xFD8
 15214                           
 15215 ;; *************** function _memory_txFrameClear *****************
 15216 ;; Defined at:
 15217 ;;		line 224 in file "src/mem/memoryController.c"
 15218 ;; Parameters:    Size  Location     Type
 15219 ;;  index           1    wreg     unsigned char 
 15220 ;; Auto vars:     Size  Location     Type
 15221 ;;  index           1    0[BANK0 ] unsigned char 
 15222 ;; Return value:  Size  Location     Type
 15223 ;;                  1    wreg      void 
 15224 ;; Registers used:
 15225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15226 ;; Tracked objects:
 15227 ;;		On entry : 0/0
 15228 ;;		On exit  : 0/0
 15229 ;;		Unchanged: 0/0
 15230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15231 ;;      Params:         0       0       0       0       0       0       0       0       0
 15232 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15233 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15234 ;;      Totals:         0       1       0       0       0       0       0       0       0
 15235 ;;Total ram usage:        1 bytes
 15236 ;; Hardware stack levels used:    1
 15237 ;; Hardware stack levels required when called:    4
 15238 ;; This function calls:
 15239 ;;		Nothing
 15240 ;; This function is called by:
 15241 ;;		_ethernetController_sendPacket
 15242 ;; This function uses a non-reentrant model
 15243 ;;
 15244                           
 15245                           	psect	text54
 15246  004B2A                     __ptext54:
 15247                           	opt stack 0
 15248  004B2A                     _memory_txFrameClear:
 15249                           	opt stack 20
 15250                           
 15251                           ;incstack = 0
 15252                           ;memory_txFrameClear@index stored from wreg
 15253  004B2A  0100               	movlb	0	; () banked
 15254  004B2C  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 15255                           
 15256                           ;memoryController.c: 225: occupiedMemory[index].fIsAssigned = 0;
 15257  004B2E  0100               	movlb	0	; () banked
 15258  004B30  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 15259  004B32  0D09               	mullw	9
 15260  004B34  0E06               	movlw	6
 15261  004B36  26F3               	addwf	prodl,f,c
 15262  004B38  0E00               	movlw	0
 15263  004B3A  22F4               	addwfc	prodh,f,c
 15264  004B3C  0E8C               	movlw	low _occupiedMemory
 15265  004B3E  24F3               	addwf	prodl,w,c
 15266  004B40  6ED9               	movwf	fsr2l,c
 15267  004B42  0E01               	movlw	high _occupiedMemory
 15268  004B44  20F4               	addwfc	prodh,w,c
 15269  004B46  6EDA               	movwf	fsr2h,c
 15270  004B48  0E00               	movlw	0
 15271  004B4A  6EDF               	movwf	indf2,c
 15272                           
 15273                           ; BSR set to: 0
 15274  004B4C  0012               	return		;funcret
 15275  004B4E                     __end_of_memory_txFrameClear:
 15276                           	opt stack 0
 15277                           tblptru	equ	0xFF8
 15278                           tblptrh	equ	0xFF7
 15279                           tblptrl	equ	0xFF6
 15280                           tablat	equ	0xFF5
 15281                           prodh	equ	0xFF4
 15282                           prodl	equ	0xFF3
 15283                           intcon	equ	0xFF2
 15284                           intcon3	equ	0xFF0
 15285                           indf0	equ	0xFEF
 15286                           postinc0	equ	0xFEE
 15287                           plusw0	equ	0xFEB
 15288                           fsr0h	equ	0xFEA
 15289                           fsr0l	equ	0xFE9
 15290                           wreg	equ	0xFE8
 15291                           indf1	equ	0xFE7
 15292                           postinc1	equ	0xFE6
 15293                           postdec1	equ	0xFE5
 15294                           plusw1	equ	0xFE3
 15295                           fsr1h	equ	0xFE2
 15296                           fsr1l	equ	0xFE1
 15297                           indf2	equ	0xFDF
 15298                           postinc2	equ	0xFDE
 15299                           postdec2	equ	0xFDD
 15300                           plusw2	equ	0xFDB
 15301                           fsr2h	equ	0xFDA
 15302                           fsr2l	equ	0xFD9
 15303                           status	equ	0xFD8
 15304                           
 15305 ;; *************** function _ENC424J600_setTXStartAddress *****************
 15306 ;; Defined at:
 15307 ;;		line 637 in file "src/enc424j600/ENC424J600.c"
 15308 ;; Parameters:    Size  Location     Type
 15309 ;;  addr            2   14[BANK0 ] unsigned int 
 15310 ;; Auto vars:     Size  Location     Type
 15311 ;;  highByte        1   17[BANK0 ] unsigned char 
 15312 ;;  lowByte         1   16[BANK0 ] unsigned char 
 15313 ;; Return value:  Size  Location     Type
 15314 ;;                  1    wreg      void 
 15315 ;; Registers used:
 15316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15317 ;; Tracked objects:
 15318 ;;		On entry : 0/0
 15319 ;;		On exit  : 0/0
 15320 ;;		Unchanged: 0/0
 15321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15322 ;;      Params:         0       2       0       0       0       0       0       0       0
 15323 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15324 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15325 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15326 ;;Total ram usage:        4 bytes
 15327 ;; Hardware stack levels used:    1
 15328 ;; Hardware stack levels required when called:    7
 15329 ;; This function calls:
 15330 ;;		_ENC424J600_writeControlRegisterUnbanked
 15331 ;; This function is called by:
 15332 ;;		_ethernetController_sendPacket
 15333 ;; This function uses a non-reentrant model
 15334 ;;
 15335                           
 15336                           	psect	text55
 15337  0049BE                     __ptext55:
 15338                           	opt stack 0
 15339  0049BE                     _ENC424J600_setTXStartAddress:
 15340                           	opt stack 17
 15341                           
 15342                           ;ENC424J600.c: 638: uint8_t lowByte = addr & 0xff;
 15343                           
 15344                           ; BSR set to: 0
 15345                           ;incstack = 0
 15346  0049BE  C06E  F070         	movff	ENC424J600_setTXStartAddress@addr,ENC424J600_setTXStartAddress@lowByte
 15347                           
 15348                           ;ENC424J600.c: 639: uint8_t highByte = (addr & 0xff00) >> 8;
 15349  0049C2  0100               	movlb	0	; () banked
 15350  0049C4  516F               	movf	(ENC424J600_setTXStartAddress@addr+1)& (0+255),w,b
 15351  0049C6  6F71               	movwf	ENC424J600_setTXStartAddress@highByte& (0+255),b
 15352                           
 15353                           ; BSR set to: 0
 15354                           ;ENC424J600.c: 640: ENC424J600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 15355  0049C8  0E70               	movlw	low ENC424J600_setTXStartAddress@lowByte
 15356  0049CA  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 15357  0049CC  0E00               	movlw	high ENC424J600_setTXStartAddress@lowByte
 15358  0049CE  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 15359  0049D0  0E00               	movlw	0
 15360  0049D2  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 15361                           
 15362                           ;ENC424J600.c: 641: ENC424J600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 15363  0049D6  0E71               	movlw	low ENC424J600_setTXStartAddress@highByte
 15364  0049D8  0100               	movlb	0	; () banked
 15365  0049DA  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 15366  0049DC  0E00               	movlw	high ENC424J600_setTXStartAddress@highByte
 15367  0049DE  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 15368  0049E0  0E01               	movlw	1
 15369  0049E2  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 15370  0049E6  0012               	return		;funcret
 15371  0049E8                     __end_of_ENC424J600_setTXStartAddress:
 15372                           	opt stack 0
 15373                           tblptru	equ	0xFF8
 15374                           tblptrh	equ	0xFF7
 15375                           tblptrl	equ	0xFF6
 15376                           tablat	equ	0xFF5
 15377                           prodh	equ	0xFF4
 15378                           prodl	equ	0xFF3
 15379                           intcon	equ	0xFF2
 15380                           intcon3	equ	0xFF0
 15381                           indf0	equ	0xFEF
 15382                           postinc0	equ	0xFEE
 15383                           plusw0	equ	0xFEB
 15384                           fsr0h	equ	0xFEA
 15385                           fsr0l	equ	0xFE9
 15386                           wreg	equ	0xFE8
 15387                           indf1	equ	0xFE7
 15388                           postinc1	equ	0xFE6
 15389                           postdec1	equ	0xFE5
 15390                           plusw1	equ	0xFE3
 15391                           fsr1h	equ	0xFE2
 15392                           fsr1l	equ	0xFE1
 15393                           indf2	equ	0xFDF
 15394                           postinc2	equ	0xFDE
 15395                           postdec2	equ	0xFDD
 15396                           plusw2	equ	0xFDB
 15397                           fsr2h	equ	0xFDA
 15398                           fsr2l	equ	0xFD9
 15399                           status	equ	0xFD8
 15400                           
 15401 ;; *************** function _ENC424J600_setTXLength *****************
 15402 ;; Defined at:
 15403 ;;		line 612 in file "src/enc424j600/ENC424J600.c"
 15404 ;; Parameters:    Size  Location     Type
 15405 ;;  len             2   14[BANK0 ] unsigned int 
 15406 ;; Auto vars:     Size  Location     Type
 15407 ;;  highByte        1   17[BANK0 ] unsigned char 
 15408 ;;  lowByte         1   16[BANK0 ] unsigned char 
 15409 ;; Return value:  Size  Location     Type
 15410 ;;                  1    wreg      void 
 15411 ;; Registers used:
 15412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15413 ;; Tracked objects:
 15414 ;;		On entry : 0/0
 15415 ;;		On exit  : 0/0
 15416 ;;		Unchanged: 0/0
 15417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15418 ;;      Params:         0       2       0       0       0       0       0       0       0
 15419 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15420 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15421 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15422 ;;Total ram usage:        4 bytes
 15423 ;; Hardware stack levels used:    1
 15424 ;; Hardware stack levels required when called:    7
 15425 ;; This function calls:
 15426 ;;		_ENC424J600_writeControlRegisterUnbanked
 15427 ;; This function is called by:
 15428 ;;		_ethernetController_sendPacket
 15429 ;; This function uses a non-reentrant model
 15430 ;;
 15431                           
 15432                           	psect	text56
 15433  0049E8                     __ptext56:
 15434                           	opt stack 0
 15435  0049E8                     _ENC424J600_setTXLength:
 15436                           	opt stack 17
 15437                           
 15438                           ;ENC424J600.c: 613: uint8_t lowByte = len & 0x00ff;
 15439                           
 15440                           ;incstack = 0
 15441  0049E8  C06E  F070         	movff	ENC424J600_setTXLength@len,ENC424J600_setTXLength@lowByte
 15442                           
 15443                           ;ENC424J600.c: 614: uint8_t highByte = len >> 8;
 15444  0049EC  0100               	movlb	0	; () banked
 15445  0049EE  516F               	movf	(ENC424J600_setTXLength@len+1)& (0+255),w,b
 15446  0049F0  6F71               	movwf	ENC424J600_setTXLength@highByte& (0+255),b
 15447                           
 15448                           ; BSR set to: 0
 15449                           ;ENC424J600.c: 615: ENC424J600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 15450  0049F2  0E70               	movlw	low ENC424J600_setTXLength@lowByte
 15451  0049F4  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 15452  0049F6  0E00               	movlw	high ENC424J600_setTXLength@lowByte
 15453  0049F8  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 15454  0049FA  0E02               	movlw	2
 15455  0049FC  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 15456                           
 15457                           ;ENC424J600.c: 616: ENC424J600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 15458  004A00  0E71               	movlw	low ENC424J600_setTXLength@highByte
 15459  004A02  0100               	movlb	0	; () banked
 15460  004A04  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 15461  004A06  0E00               	movlw	high ENC424J600_setTXLength@highByte
 15462  004A08  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 15463  004A0A  0E03               	movlw	3
 15464  004A0C  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 15465  004A10  0012               	return		;funcret
 15466  004A12                     __end_of_ENC424J600_setTXLength:
 15467                           	opt stack 0
 15468                           tblptru	equ	0xFF8
 15469                           tblptrh	equ	0xFF7
 15470                           tblptrl	equ	0xFF6
 15471                           tablat	equ	0xFF5
 15472                           prodh	equ	0xFF4
 15473                           prodl	equ	0xFF3
 15474                           intcon	equ	0xFF2
 15475                           intcon3	equ	0xFF0
 15476                           indf0	equ	0xFEF
 15477                           postinc0	equ	0xFEE
 15478                           plusw0	equ	0xFEB
 15479                           fsr0h	equ	0xFEA
 15480                           fsr0l	equ	0xFE9
 15481                           wreg	equ	0xFE8
 15482                           indf1	equ	0xFE7
 15483                           postinc1	equ	0xFE6
 15484                           postdec1	equ	0xFE5
 15485                           plusw1	equ	0xFE3
 15486                           fsr1h	equ	0xFE2
 15487                           fsr1l	equ	0xFE1
 15488                           indf2	equ	0xFDF
 15489                           postinc2	equ	0xFDE
 15490                           postdec2	equ	0xFDD
 15491                           plusw2	equ	0xFDB
 15492                           fsr2h	equ	0xFDA
 15493                           fsr2l	equ	0xFD9
 15494                           status	equ	0xFD8
 15495                           
 15496 ;; *************** function _ethernetController_getSourceMACAddress *****************
 15497 ;; Defined at:
 15498 ;;		line 267 in file "src/enc424j600/ENC424J600.c"
 15499 ;; Parameters:    Size  Location     Type
 15500 ;;  field           9   15[BANK0 ] struct memoryField
 15501 ;; Auto vars:     Size  Location     Type
 15502 ;;  temp            1   31[BANK0 ] unsigned char 
 15503 ;;  i               1   32[BANK0 ] unsigned char 
 15504 ;;  sourceAddres    6   25[BANK0 ] struct macaddress
 15505 ;;  opcode          1   24[BANK0 ] unsigned char 
 15506 ;; Return value:  Size  Location     Type
 15507 ;;                  6   15[BANK0 ] struct macaddress
 15508 ;; Registers used:
 15509 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15510 ;; Tracked objects:
 15511 ;;		On entry : 0/0
 15512 ;;		On exit  : 0/0
 15513 ;;		Unchanged: 0/0
 15514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15515 ;;      Params:         0       9       0       0       0       0       0       0       0
 15516 ;;      Locals:         0       9       0       0       0       0       0       0       0
 15517 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15518 ;;      Totals:         0      18       0       0       0       0       0       0       0
 15519 ;;Total ram usage:       18 bytes
 15520 ;; Hardware stack levels used:    1
 15521 ;; Hardware stack levels required when called:    7
 15522 ;; This function calls:
 15523 ;;		_ENC424J600_readSPI
 15524 ;;		_ENC424J600_setERXDATAReadPointer
 15525 ;;		_ENC424J600_writeSPI
 15526 ;; This function is called by:
 15527 ;;		_ARP_send
 15528 ;; This function uses a non-reentrant model
 15529 ;;
 15530                           
 15531                           	psect	text57
 15532  0041AE                     __ptext57:
 15533                           	opt stack 0
 15534  0041AE                     _ethernetController_getSourceMACAddress:
 15535                           	opt stack 18
 15536                           
 15537                           ;ENC424J600.c: 268: macaddress_t sourceAddress;
 15538                           ;ENC424J600.c: 269: ENC424J600_setERXDATAReadPointer(field.start + 14);
 15539                           
 15540                           ;incstack = 0
 15541  0041AE  0E0E               	movlw	14
 15542  0041B0  0100               	movlb	0	; () banked
 15543  0041B2  256F               	addwf	ethernetController_getSourceMACAddress@field& (0+255),w,b
 15544  0041B4  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
 15545  0041B6  0E00               	movlw	0
 15546  0041B8  2170               	addwfc	(ethernetController_getSourceMACAddress@field+1)& (0+255),w,b
 15547  0041BA  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
 15548  0041BC  EC0C  F024         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
 15549                           
 15550                           ;ENC424J600.c: 270: uint8_t opcode = 0x2C;
 15551  0041C0  0E2C               	movlw	44
 15552  0041C2  0100               	movlb	0	; () banked
 15553  0041C4  6F78               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 15554                           
 15555                           ; BSR set to: 0
 15556                           ;ENC424J600.c: 271: PORTBbits.RB4=0;
 15557  0041C6  9881               	bcf	3969,4,c	;volatile
 15558                           
 15559                           ; BSR set to: 0
 15560                           ;ENC424J600.c: 272: ENC424J600_writeSPI(&opcode);
 15561  0041C8  0E78               	movlw	low ethernetController_getSourceMACAddress@opcode
 15562  0041CA  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15563  0041CC  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 15564  0041CE  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15565  0041D0  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 15566                           
 15567                           ;ENC424J600.c: 273: for (uint8_t i = 0; i < 6; i++) {
 15568  0041D4  0E00               	movlw	0
 15569  0041D6  0100               	movlb	0	; () banked
 15570  0041D8  6F80               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 15571  0041DA                     l7539:
 15572                           
 15573                           ; BSR set to: 0
 15574  0041DA  0E05               	movlw	5
 15575  0041DC  6580               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 15576  0041DE  D001               	goto	l153
 15577  0041E0  D013               	goto	u8760
 15578  0041E2                     l153:
 15579                           
 15580                           ; BSR set to: 0
 15581                           ;ENC424J600.c: 274: uint8_t temp;
 15582                           ;ENC424J600.c: 275: ENC424J600_readSPI(&temp);
 15583                           
 15584                           ; BSR set to: 0
 15585  0041E2  0E7F               	movlw	low ethernetController_getSourceMACAddress@temp
 15586  0041E4  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 15587  0041E6  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 15588  0041E8  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 15589  0041EA  EC0F  F021         	call	_ENC424J600_readSPI	;wreg free
 15590                           
 15591                           ;ENC424J600.c: 276: sourceAddress.address[i] = temp;
 15592  0041EE  0100               	movlb	0	; () banked
 15593  0041F0  5180               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 15594  0041F2  0D01               	mullw	1
 15595  0041F4  0E79               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 15596  0041F6  24F3               	addwf	prodl,w,c
 15597  0041F8  6ED9               	movwf	fsr2l,c
 15598  0041FA  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 15599  0041FC  20F4               	addwfc	prodh,w,c
 15600  0041FE  6EDA               	movwf	fsr2h,c
 15601  004200  C07F  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 15602                           
 15603                           ; BSR set to: 0
 15604  004204  2B80               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 15605  004206  D7E9               	goto	l7539
 15606  004208                     u8760:
 15607                           
 15608                           ; BSR set to: 0
 15609                           ;ENC424J600.c: 277: }
 15610                           ;ENC424J600.c: 278: PORTBbits.RB4=1;
 15611  004208  8881               	bsf	3969,4,c	;volatile
 15612                           
 15613                           ; BSR set to: 0
 15614                           ;ENC424J600.c: 279: return sourceAddress;
 15615  00420A  EE20  F079         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 15616  00420E  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 15617  004212  0E05               	movlw	5
 15618  004214                     u8771:
 15619  004214  CFDB FFEB          	movff	plusw2,plusw0
 15620  004218  06E8               	decf	wreg,f,c
 15621  00421A  E2FC               	bc	u8771
 15622  00421C  0012               	return	
 15623  00421E                     __end_of_ethernetController_getSourceMACAddress:
 15624                           	opt stack 0
 15625                           tblptru	equ	0xFF8
 15626                           tblptrh	equ	0xFF7
 15627                           tblptrl	equ	0xFF6
 15628                           tablat	equ	0xFF5
 15629                           prodh	equ	0xFF4
 15630                           prodl	equ	0xFF3
 15631                           intcon	equ	0xFF2
 15632                           intcon3	equ	0xFF0
 15633                           indf0	equ	0xFEF
 15634                           postinc0	equ	0xFEE
 15635                           plusw0	equ	0xFEB
 15636                           fsr0h	equ	0xFEA
 15637                           fsr0l	equ	0xFE9
 15638                           wreg	equ	0xFE8
 15639                           indf1	equ	0xFE7
 15640                           postinc1	equ	0xFE6
 15641                           postdec1	equ	0xFE5
 15642                           plusw1	equ	0xFE3
 15643                           fsr1h	equ	0xFE2
 15644                           fsr1l	equ	0xFE1
 15645                           indf2	equ	0xFDF
 15646                           postinc2	equ	0xFDE
 15647                           postdec2	equ	0xFDD
 15648                           plusw2	equ	0xFDB
 15649                           fsr2h	equ	0xFDA
 15650                           fsr2l	equ	0xFD9
 15651                           status	equ	0xFD8
 15652                           
 15653 ;; *************** function _UARTTransmitText *****************
 15654 ;; Defined at:
 15655 ;;		line 53 in file "src/system/uart.c"
 15656 ;; Parameters:    Size  Location     Type
 15657 ;;  str             2   56[BANK0 ] PTR const unsigned char 
 15658 ;;		 -> STR_88(2), STR_87(7), STR_86(11), STR_85(19), 
 15659 ;;		 -> STR_84(2), STR_83(3), STR_82(3), STR_81(3), 
 15660 ;;		 -> STR_80(3), STR_79(5), STR_78(2), STR_77(3), 
 15661 ;;		 -> STR_76(7), STR_75(8), STR_74(2), STR_73(3), 
 15662 ;;		 -> STR_72(16), STR_71(3), STR_70(3), STR_69(15), 
 15663 ;;		 -> STR_68(10), STR_67(2), STR_66(3), STR_65(5), 
 15664 ;;		 -> STR_64(3), STR_63(2), STR_62(39), arpEntryToString@string(50), 
 15665 ;;		 -> ipAdressToString@address(16), STR_61(17), STR_60(4), STR_59(4), 
 15666 ;;		 -> STR_58(5), STR_57(18), STR_56(4), STR_55(5), 
 15667 ;;		 -> macToString@address(18), hexToString@number(10), intToString@number(10), STR_54(5), 
 15668 ;;		 -> STR_53(9), STR_52(30), STR_51(34), STR_50(55), 
 15669 ;;		 -> STR_49(37), STR_48(15), STR_47(14), STR_46(19), 
 15670 ;;		 -> STR_45(30), STR_44(17), STR_43(8), STR_42(29), 
 15671 ;;		 -> STR_41(29), STR_40(20), STR_39(19), STR_38(19), 
 15672 ;;		 -> STR_37(13), STR_36(26), STR_35(51), STR_34(4), 
 15673 ;;		 -> STR_33(23), STR_32(12), STR_31(4), STR_30(9), 
 15674 ;;		 -> STR_29(2), STR_28(12), STR_27(24), STR_26(51), 
 15675 ;;		 -> STR_25(49), STR_24(51), STR_23(2), STR_22(18), 
 15676 ;;		 -> STR_21(3), STR_20(19), STR_19(3), STR_18(3), 
 15677 ;;		 -> STR_17(3), STR_16(5), STR_15(2), STR_14(2), 
 15678 ;;		 -> STR_13(5), STR_12(3), STR_11(3), STR_10(2), 
 15679 ;;		 -> STR_9(7), STR_8(6), STR_7(2), STR_6(2), 
 15680 ;;		 -> STR_5(16), STR_4(10), STR_3(12), STR_2(2), 
 15681 ;;		 -> STR_1(2), ethernetController_getDeviceName@string(11), 
 15682 ;; Auto vars:     Size  Location     Type
 15683 ;;		None
 15684 ;; Return value:  Size  Location     Type
 15685 ;;                  1    wreg      void 
 15686 ;; Registers used:
 15687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 15688 ;; Tracked objects:
 15689 ;;		On entry : 0/0
 15690 ;;		On exit  : 0/0
 15691 ;;		Unchanged: 0/0
 15692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15693 ;;      Params:         0       2       0       0       0       0       0       0       0
 15694 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15695 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15696 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15697 ;;Total ram usage:        2 bytes
 15698 ;; Hardware stack levels used:    1
 15699 ;; Hardware stack levels required when called:    4
 15700 ;; This function calls:
 15701 ;;		Nothing
 15702 ;; This function is called by:
 15703 ;;		_ethernet_rxGetNewFrame
 15704 ;;		_handleStackBackgroundTasks
 15705 ;;		_main
 15706 ;;		_printEthernetState
 15707 ;;		_printErrorMessage
 15708 ;;		_UARTTransmitInt
 15709 ;;		_ARP_handleNewPacket
 15710 ;;		_ARP_send
 15711 ;;		_ARP_sendReply
 15712 ;;		_ARP_probe
 15713 ;;		_ipv4_handleNewPacket
 15714 ;;		_ipv4_checkHeaderChecksum
 15715 ;;		_printArpTable
 15716 ;; This function uses a non-reentrant model
 15717 ;;
 15718                           
 15719                           	psect	text58
 15720  004468                     __ptext58:
 15721                           	opt stack 0
 15722  004468                     _UARTTransmitText:
 15723                           	opt stack 25
 15724                           
 15725                           ;uart.c: 54: while (*str) {
 15726                           
 15727                           ; BSR set to: 0
 15728                           ;incstack = 0
 15729  004468  D016               	goto	u8850
 15730  00446A                     
 15731                           ;uart.c: 55: TXREG1 = *str++;
 15732  00446A  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 15733  00446E  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 15734  004472  6AF8               	clrf	tblptru,c
 15735  004474  0E07               	movlw	(high __ramtop+-1)
 15736  004476  64F7               	cpfsgt	tblptrh,c
 15737  004478  D003               	bra	u8847
 15738  00447A  0008               	tblrd		*
 15739  00447C  50F5               	movf	tablat,w,c
 15740  00447E  D005               	bra	u8840
 15741  004480                     u8847:
 15742  004480  CFF6 FFE9          	movff	tblptrl,fsr0l
 15743  004484  CFF7 FFEA          	movff	tblptrh,fsr0h
 15744  004488  50EF               	movf	indf0,w,c
 15745  00448A                     u8840:
 15746  00448A  6EAD               	movwf	4013,c	;volatile
 15747  00448C  0100               	movlb	0	; () banked
 15748  00448E  4B98               	infsnz	UARTTransmitText@str& (0+255),f,b
 15749  004490  2B99               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 15750  004492                     
 15751                           ; BSR set to: 0
 15752  004492  A2AC               	btfss	4012,1,c	;volatile
 15753  004494  D7FE               	goto	l759
 15754  004496                     u8850:
 15755  004496  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 15756  00449A  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 15757  00449E  6AF8               	clrf	tblptru,c
 15758  0044A0  0E07               	movlw	(high __ramtop+-1)
 15759  0044A2  64F7               	cpfsgt	tblptrh,c
 15760  0044A4  D003               	bra	u8867
 15761  0044A6  0008               	tblrd		*
 15762  0044A8  50F5               	movf	tablat,w,c
 15763  0044AA  D005               	bra	u8860
 15764  0044AC                     u8867:
 15765  0044AC  CFF6 FFE9          	movff	tblptrl,fsr0l
 15766  0044B0  CFF7 FFEA          	movff	tblptrh,fsr0h
 15767  0044B4  50EF               	movf	indf0,w,c
 15768  0044B6                     u8860:
 15769  0044B6  0900               	iorlw	0
 15770  0044B8  B4D8               	btfsc	status,2,c
 15771  0044BA  0012               	return	
 15772  0044BC  D7D6               	goto	l757
 15773  0044BE                     __end_of_UARTTransmitText:
 15774                           	opt stack 0
 15775                           tblptru	equ	0xFF8
 15776                           tblptrh	equ	0xFF7
 15777                           tblptrl	equ	0xFF6
 15778                           tablat	equ	0xFF5
 15779                           prodh	equ	0xFF4
 15780                           prodl	equ	0xFF3
 15781                           intcon	equ	0xFF2
 15782                           intcon3	equ	0xFF0
 15783                           indf0	equ	0xFEF
 15784                           postinc0	equ	0xFEE
 15785                           plusw0	equ	0xFEB
 15786                           fsr0h	equ	0xFEA
 15787                           fsr0l	equ	0xFE9
 15788                           wreg	equ	0xFE8
 15789                           indf1	equ	0xFE7
 15790                           postinc1	equ	0xFE6
 15791                           postdec1	equ	0xFE5
 15792                           plusw1	equ	0xFE3
 15793                           fsr1h	equ	0xFE2
 15794                           fsr1l	equ	0xFE1
 15795                           indf2	equ	0xFDF
 15796                           postinc2	equ	0xFDE
 15797                           postdec2	equ	0xFDD
 15798                           plusw2	equ	0xFDB
 15799                           fsr2h	equ	0xFDA
 15800                           fsr2l	equ	0xFD9
 15801                           status	equ	0xFD8
 15802                           
 15803 ;; *************** function _ARP_parseFromRXBuffer *****************
 15804 ;; Defined at:
 15805 ;;		line 65 in file "src/stack/protocols/arp.c"
 15806 ;; Parameters:    Size  Location     Type
 15807 ;;  frame           2   23[BANK0 ] PTR struct ethernetFrame
 15808 ;;		 -> stack.ethernet(15), stack(122), 
 15809 ;; Auto vars:     Size  Location     Type
 15810 ;;  i               1   61[BANK0 ] unsigned char 
 15811 ;;  i               1   60[BANK0 ] unsigned char 
 15812 ;;  i               1   59[BANK0 ] unsigned char 
 15813 ;;  i               1   58[BANK0 ] unsigned char 
 15814 ;;  arp            32   64[BANK0 ] struct ARP_message
 15815 ;;  offset          2   62[BANK0 ] const unsigned int 
 15816 ;; Return value:  Size  Location     Type
 15817 ;;                  32   23[BANK0 ] struct ARP_message
 15818 ;; Registers used:
 15819 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15820 ;; Tracked objects:
 15821 ;;		On entry : 0/0
 15822 ;;		On exit  : 0/0
 15823 ;;		Unchanged: 0/0
 15824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15825 ;;      Params:         0      32       0       0       0       0       0       0       0
 15826 ;;      Locals:         0      38       0       0       0       0       0       0       0
 15827 ;;      Temps:          0       3       0       0       0       0       0       0       0
 15828 ;;      Totals:         0      73       0       0       0       0       0       0       0
 15829 ;;Total ram usage:       73 bytes
 15830 ;; Hardware stack levels used:    1
 15831 ;; Hardware stack levels required when called:    9
 15832 ;; This function calls:
 15833 ;;		_ethernetController_streamFromRXBuffer
 15834 ;;		_ipv4_cmp
 15835 ;;		_ipv4_isAllZero
 15836 ;;		_mac_cmp
 15837 ;;		_mac_isAllZero
 15838 ;; This function is called by:
 15839 ;;		_ARP_handleNewPacket
 15840 ;; This function uses a non-reentrant model
 15841 ;;
 15842                           
 15843                           	psect	text59
 15844  001076                     __ptext59:
 15845                           	opt stack 0
 15846  001076                     _ARP_parseFromRXBuffer:
 15847                           	opt stack 18
 15848                           
 15849                           ;arp.c: 66: ARP_message_t arp;
 15850                           ;arp.c: 67: uint16_t const offset = 22;
 15851                           
 15852                           ;incstack = 0
 15853  001076  0E00               	movlw	0
 15854  001078  0100               	movlb	0	; () banked
 15855  00107A  6F9F               	movwf	(ARP_parseFromRXBuffer@offset+1)& (0+255),b
 15856  00107C  0E16               	movlw	22
 15857  00107E  6F9E               	movwf	ARP_parseFromRXBuffer@offset& (0+255),b
 15858                           
 15859                           ; BSR set to: 0
 15860                           ;arp.c: 69: ethernetController_streamFromRXBuffer(0, frame->memory.start + offset);
 15861  001080  EE20 F010          	lfsr	2,16
 15862  001084  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15863  001086  26D9               	addwf	fsr2l,f,c
 15864  001088  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15865  00108A  22DA               	addwfc	fsr2h,f,c
 15866  00108C  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15867  001090  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15868  001094  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15869  001096  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15870  001098  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15871  00109A  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15872  00109C  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15873  00109E  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15874  0010A0  0E00               	movlw	0
 15875  0010A2  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 15876                           
 15877                           ;arp.c: 72: arp.htype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 15878  0010A6  0100               	movlb	0	; () banked
 15879  0010A8  EE20 F010          	lfsr	2,16
 15880  0010AC  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15881  0010AE  26D9               	addwf	fsr2l,f,c
 15882  0010B0  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15883  0010B2  22DA               	addwfc	fsr2h,f,c
 15884  0010B4  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15885  0010B8  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15886  0010BC  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15887  0010BE  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15888  0010C0  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15889  0010C2  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15890  0010C4  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15891  0010C6  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15892  0010C8  0E01               	movlw	1
 15893  0010CA  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 15894  0010CE  0100               	movlb	0	; () banked
 15895  0010D0  6FA1               	movwf	(ARP_parseFromRXBuffer@arp+1)& (0+255),b
 15896  0010D2  6BA0               	clrf	ARP_parseFromRXBuffer@arp& (0+255),b
 15897                           
 15898                           ; BSR set to: 0
 15899                           ;arp.c: 73: arp.htype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 15900  0010D4  EE20 F010          	lfsr	2,16
 15901  0010D8  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15902  0010DA  26D9               	addwf	fsr2l,f,c
 15903  0010DC  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15904  0010DE  22DA               	addwfc	fsr2h,f,c
 15905  0010E0  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15906  0010E4  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15907  0010E8  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15908  0010EA  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15909  0010EC  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15910  0010EE  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15911  0010F0  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15912  0010F2  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15913  0010F4  0E01               	movlw	1
 15914  0010F6  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 15915  0010FA  0100               	movlb	0	; () banked
 15916  0010FC  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 15917  0010FE  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 15918  001100  13A0               	iorwf	ARP_parseFromRXBuffer@arp& (0+255),f,b
 15919                           
 15920                           ; BSR set to: 0
 15921                           ;arp.c: 75: arp.ptype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 15922  001102  EE20 F010          	lfsr	2,16
 15923  001106  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15924  001108  26D9               	addwf	fsr2l,f,c
 15925  00110A  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15926  00110C  22DA               	addwfc	fsr2h,f,c
 15927  00110E  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15928  001112  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15929  001116  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15930  001118  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15931  00111A  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15932  00111C  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15933  00111E  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15934  001120  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15935  001122  0E01               	movlw	1
 15936  001124  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 15937  001128  0100               	movlb	0	; () banked
 15938  00112A  6FA3               	movwf	(ARP_parseFromRXBuffer@arp+3)& (0+255),b
 15939  00112C  6BA2               	clrf	(ARP_parseFromRXBuffer@arp+2)& (0+255),b
 15940                           
 15941                           ; BSR set to: 0
 15942                           ;arp.c: 76: arp.ptype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 15943  00112E  EE20 F010          	lfsr	2,16
 15944  001132  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15945  001134  26D9               	addwf	fsr2l,f,c
 15946  001136  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15947  001138  22DA               	addwfc	fsr2h,f,c
 15948  00113A  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15949  00113E  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15950  001142  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15951  001144  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15952  001146  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15953  001148  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15954  00114A  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15955  00114C  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15956  00114E  0E01               	movlw	1
 15957  001150  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 15958  001154  0100               	movlb	0	; () banked
 15959  001156  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 15960  001158  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 15961  00115A  13A2               	iorwf	(ARP_parseFromRXBuffer@arp+2)& (0+255),f,b
 15962                           
 15963                           ; BSR set to: 0
 15964                           ;arp.c: 78: arp.hlen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 15965  00115C  EE20 F010          	lfsr	2,16
 15966  001160  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15967  001162  26D9               	addwf	fsr2l,f,c
 15968  001164  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15969  001166  22DA               	addwfc	fsr2h,f,c
 15970  001168  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15971  00116C  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15972  001170  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15973  001172  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15974  001174  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15975  001176  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15976  001178  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15977  00117A  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15978  00117C  0E01               	movlw	1
 15979  00117E  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 15980  001182  0100               	movlb	0	; () banked
 15981  001184  6FA4               	movwf	(ARP_parseFromRXBuffer@arp+4)& (0+255),b
 15982                           
 15983                           ; BSR set to: 0
 15984                           ;arp.c: 79: arp.plen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 15985  001186  EE20 F010          	lfsr	2,16
 15986  00118A  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15987  00118C  26D9               	addwf	fsr2l,f,c
 15988  00118E  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15989  001190  22DA               	addwfc	fsr2h,f,c
 15990  001192  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15991  001196  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15992  00119A  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15993  00119C  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15994  00119E  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15995  0011A0  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15996  0011A2  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15997  0011A4  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15998  0011A6  0E01               	movlw	1
 15999  0011A8  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 16000  0011AC  0100               	movlb	0	; () banked
 16001  0011AE  6FA5               	movwf	(ARP_parseFromRXBuffer@arp+5)& (0+255),b
 16002                           
 16003                           ; BSR set to: 0
 16004                           ;arp.c: 81: arp.operation = (ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset) << 8);
 16005  0011B0  EE20 F010          	lfsr	2,16
 16006  0011B4  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16007  0011B6  26D9               	addwf	fsr2l,f,c
 16008  0011B8  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16009  0011BA  22DA               	addwfc	fsr2h,f,c
 16010  0011BC  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16011  0011C0  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16012  0011C4  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16013  0011C6  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16014  0011C8  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16015  0011CA  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16016  0011CC  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16017  0011CE  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16018  0011D0  0E01               	movlw	1
 16019  0011D2  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 16020  0011D6  0100               	movlb	0	; () banked
 16021  0011D8  6FA7               	movwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),b
 16022  0011DA  6BA6               	clrf	(ARP_parseFromRXBuffer@arp+6)& (0+255),b
 16023                           
 16024                           ; BSR set to: 0
 16025                           ;arp.c: 82: arp.operation |= ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset);
 16026  0011DC  EE20 F010          	lfsr	2,16
 16027  0011E0  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16028  0011E2  26D9               	addwf	fsr2l,f,c
 16029  0011E4  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16030  0011E6  22DA               	addwfc	fsr2h,f,c
 16031  0011E8  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16032  0011EC  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16033  0011F0  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16034  0011F2  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16035  0011F4  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16036  0011F6  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16037  0011F8  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16038  0011FA  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16039  0011FC  0E01               	movlw	1
 16040  0011FE  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 16041  001202  0100               	movlb	0	; () banked
 16042  001204  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16043  001206  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 16044  001208  13A6               	iorwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),f,b
 16045                           
 16046                           ; BSR set to: 0
 16047                           ;arp.c: 85: for (uint8_t i = 0; i < arp.hlen; i++)
 16048  00120A  0E00               	movlw	0
 16049  00120C  6F9A               	movwf	ARP_parseFromRXBuffer@i& (0+255),b
 16050  00120E  D024               	goto	l909
 16051  001210                     
 16052                           ; BSR set to: 0
 16053                           ;arp.c: 86: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 16054                           
 16055                           ; BSR set to: 0
 16056  001210  EE20 F010          	lfsr	2,16
 16057  001214  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16058  001216  26D9               	addwf	fsr2l,f,c
 16059  001218  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16060  00121A  22DA               	addwfc	fsr2h,f,c
 16061  00121C  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16062  001220  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16063  001224  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16064  001226  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16065  001228  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16066  00122A  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16067  00122C  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16068  00122E  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16069  001230  0E01               	movlw	1
 16070  001232  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 16071  001236  0100               	movlb	0	; () banked
 16072  001238  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16073  00123A  519A               	movf	ARP_parseFromRXBuffer@i& (0+255),w,b
 16074  00123C  0D01               	mullw	1
 16075  00123E  0E08               	movlw	8
 16076  001240  26F3               	addwf	prodl,f,c
 16077  001242  0E00               	movlw	0
 16078  001244  22F4               	addwfc	prodh,f,c
 16079  001246  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 16080  001248  24F3               	addwf	prodl,w,c
 16081  00124A  6ED9               	movwf	fsr2l,c
 16082  00124C  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 16083  00124E  20F4               	addwfc	prodh,w,c
 16084  001250  6EDA               	movwf	fsr2h,c
 16085  001252  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 16086                           
 16087                           ; BSR set to: 0
 16088  001256  2B9A               	incf	ARP_parseFromRXBuffer@i& (0+255),f,b
 16089  001258                     l909:
 16090                           
 16091                           ; BSR set to: 0
 16092                           
 16093                           ; BSR set to: 0
 16094  001258  51A4               	movf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 16095  00125A  5D9A               	subwf	ARP_parseFromRXBuffer@i& (0+255),w,b
 16096  00125C  A0D8               	btfss	status,0,c
 16097  00125E  D7D8               	goto	l910
 16098                           
 16099                           ; BSR set to: 0
 16100                           ;arp.c: 87: for (uint8_t i = 0; i < arp.plen; i++)
 16101                           
 16102                           ; BSR set to: 0
 16103  001260  0E00               	movlw	0
 16104  001262  6F9B               	movwf	ARP_parseFromRXBuffer@i_2962& (0+255),b
 16105  001264  D024               	goto	l912
 16106  001266                     
 16107                           ; BSR set to: 0
 16108                           ;arp.c: 88: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 16109                           
 16110                           ; BSR set to: 0
 16111  001266  EE20 F010          	lfsr	2,16
 16112  00126A  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16113  00126C  26D9               	addwf	fsr2l,f,c
 16114  00126E  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16115  001270  22DA               	addwfc	fsr2h,f,c
 16116  001272  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16117  001276  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16118  00127A  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16119  00127C  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16120  00127E  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16121  001280  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16122  001282  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16123  001284  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16124  001286  0E01               	movlw	1
 16125  001288  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 16126  00128C  0100               	movlb	0	; () banked
 16127  00128E  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16128  001290  519B               	movf	ARP_parseFromRXBuffer@i_2962& (0+255),w,b
 16129  001292  0D01               	mullw	1
 16130  001294  0E0E               	movlw	14
 16131  001296  26F3               	addwf	prodl,f,c
 16132  001298  0E00               	movlw	0
 16133  00129A  22F4               	addwfc	prodh,f,c
 16134  00129C  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 16135  00129E  24F3               	addwf	prodl,w,c
 16136  0012A0  6ED9               	movwf	fsr2l,c
 16137  0012A2  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 16138  0012A4  20F4               	addwfc	prodh,w,c
 16139  0012A6  6EDA               	movwf	fsr2h,c
 16140  0012A8  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 16141                           
 16142                           ; BSR set to: 0
 16143  0012AC  2B9B               	incf	ARP_parseFromRXBuffer@i_2962& (0+255),f,b
 16144  0012AE                     l912:
 16145                           
 16146                           ; BSR set to: 0
 16147                           
 16148                           ; BSR set to: 0
 16149  0012AE  51A5               	movf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 16150  0012B0  5D9B               	subwf	ARP_parseFromRXBuffer@i_2962& (0+255),w,b
 16151  0012B2  A0D8               	btfss	status,0,c
 16152  0012B4  D7D8               	goto	l913
 16153                           
 16154                           ; BSR set to: 0
 16155                           ;arp.c: 90: for (uint8_t i = 0; i < arp.hlen; i++)
 16156                           
 16157                           ; BSR set to: 0
 16158  0012B6  0E00               	movlw	0
 16159  0012B8  6F9C               	movwf	ARP_parseFromRXBuffer@i_2963& (0+255),b
 16160  0012BA  D024               	goto	l915
 16161  0012BC                     
 16162                           ; BSR set to: 0
 16163                           ;arp.c: 91: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 16164                           
 16165                           ; BSR set to: 0
 16166  0012BC  EE20 F010          	lfsr	2,16
 16167  0012C0  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16168  0012C2  26D9               	addwf	fsr2l,f,c
 16169  0012C4  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16170  0012C6  22DA               	addwfc	fsr2h,f,c
 16171  0012C8  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16172  0012CC  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16173  0012D0  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16174  0012D2  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16175  0012D4  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16176  0012D6  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16177  0012D8  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16178  0012DA  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16179  0012DC  0E01               	movlw	1
 16180  0012DE  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 16181  0012E2  0100               	movlb	0	; () banked
 16182  0012E4  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16183  0012E6  519C               	movf	ARP_parseFromRXBuffer@i_2963& (0+255),w,b
 16184  0012E8  0D01               	mullw	1
 16185  0012EA  0E12               	movlw	18
 16186  0012EC  26F3               	addwf	prodl,f,c
 16187  0012EE  0E00               	movlw	0
 16188  0012F0  22F4               	addwfc	prodh,f,c
 16189  0012F2  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 16190  0012F4  24F3               	addwf	prodl,w,c
 16191  0012F6  6ED9               	movwf	fsr2l,c
 16192  0012F8  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 16193  0012FA  20F4               	addwfc	prodh,w,c
 16194  0012FC  6EDA               	movwf	fsr2h,c
 16195  0012FE  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 16196                           
 16197                           ; BSR set to: 0
 16198  001302  2B9C               	incf	ARP_parseFromRXBuffer@i_2963& (0+255),f,b
 16199  001304                     l915:
 16200                           
 16201                           ; BSR set to: 0
 16202                           
 16203                           ; BSR set to: 0
 16204  001304  51A4               	movf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 16205  001306  5D9C               	subwf	ARP_parseFromRXBuffer@i_2963& (0+255),w,b
 16206  001308  A0D8               	btfss	status,0,c
 16207  00130A  D7D8               	goto	l916
 16208                           
 16209                           ; BSR set to: 0
 16210                           ;arp.c: 92: for (uint8_t i = 0; i < arp.plen; i++)
 16211                           
 16212                           ; BSR set to: 0
 16213  00130C  0E00               	movlw	0
 16214  00130E  6F9D               	movwf	ARP_parseFromRXBuffer@i_2964& (0+255),b
 16215  001310  D024               	goto	l918
 16216  001312                     
 16217                           ; BSR set to: 0
 16218                           ;arp.c: 93: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 16219                           
 16220                           ; BSR set to: 0
 16221  001312  EE20 F010          	lfsr	2,16
 16222  001316  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16223  001318  26D9               	addwf	fsr2l,f,c
 16224  00131A  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16225  00131C  22DA               	addwfc	fsr2h,f,c
 16226  00131E  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16227  001322  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16228  001326  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16229  001328  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16230  00132A  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16231  00132C  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16232  00132E  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16233  001330  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16234  001332  0E01               	movlw	1
 16235  001334  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 16236  001338  0100               	movlb	0	; () banked
 16237  00133A  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16238  00133C  519D               	movf	ARP_parseFromRXBuffer@i_2964& (0+255),w,b
 16239  00133E  0D01               	mullw	1
 16240  001340  0E18               	movlw	24
 16241  001342  26F3               	addwf	prodl,f,c
 16242  001344  0E00               	movlw	0
 16243  001346  22F4               	addwfc	prodh,f,c
 16244  001348  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 16245  00134A  24F3               	addwf	prodl,w,c
 16246  00134C  6ED9               	movwf	fsr2l,c
 16247  00134E  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 16248  001350  20F4               	addwfc	prodh,w,c
 16249  001352  6EDA               	movwf	fsr2h,c
 16250  001354  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 16251                           
 16252                           ; BSR set to: 0
 16253  001358  2B9D               	incf	ARP_parseFromRXBuffer@i_2964& (0+255),f,b
 16254  00135A                     l918:
 16255                           
 16256                           ; BSR set to: 0
 16257                           
 16258                           ; BSR set to: 0
 16259  00135A  51A5               	movf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 16260  00135C  5D9D               	subwf	ARP_parseFromRXBuffer@i_2964& (0+255),w,b
 16261  00135E  A0D8               	btfss	status,0,c
 16262  001360  D7D8               	goto	l919
 16263                           
 16264                           ; BSR set to: 0
 16265                           ;arp.c: 95: ethernetController_streamFromRXBuffer(2, frame->memory.start + offset);
 16266                           
 16267                           ; BSR set to: 0
 16268  001362  EE20 F010          	lfsr	2,16
 16269  001366  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16270  001368  26D9               	addwf	fsr2l,f,c
 16271  00136A  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16272  00136C  22DA               	addwfc	fsr2h,f,c
 16273  00136E  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16274  001372  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16275  001376  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16276  001378  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16277  00137A  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16278  00137C  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16279  00137E  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16280  001380  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16281  001382  0E02               	movlw	2
 16282  001384  EC23  F01D         	call	_ethernetController_streamFromRXBuffer
 16283                           
 16284                           ;arp.c: 97: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 16285  001388  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 16286  00138A  0100               	movlb	0	; () banked
 16287  00138C  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 16288  00138E  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 16289  001390  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 16290  001392  ECB0  F024         	call	_ipv4_isAllZero	;wreg free
 16291  001396  0100               	movlb	0	; () banked
 16292  001398  A0D8               	btfss	status,0,c
 16293  00139A  D002               	goto	l921
 16294                           
 16295                           ; BSR set to: 0
 16296                           ;arp.c: 98: arp.fIsProbe = 1;
 16297  00139C  83BC               	bsf	(ARP_parseFromRXBuffer@arp+28)& (0+255),1,b
 16298  00139E  D03C               	goto	l925
 16299  0013A0                     l921:
 16300                           
 16301                           ; BSR set to: 0
 16302                           ;arp.c: 101: arp.fIsProbe = 0;
 16303  0013A0  93BC               	bcf	(ARP_parseFromRXBuffer@arp+28)& (0+255),1,b
 16304                           
 16305                           ; BSR set to: 0
 16306                           ;arp.c: 103: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 16307                           ;arp.c: 104: mac_isAllZero(&arp.targetMACAddress) &&
 16308                           ;arp.c: 105: arp.operation == ARP_REQUEST) {
 16309  0013A2  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 16310  0013A4  6F60               	movwf	ipv4_cmp@a& (0+255),b
 16311  0013A6  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 16312  0013A8  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 16313  0013AA  0EB8               	movlw	low (ARP_parseFromRXBuffer@arp+24)
 16314  0013AC  6F62               	movwf	ipv4_cmp@b& (0+255),b
 16315  0013AE  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+24)
 16316  0013B0  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 16317  0013B2  ECAF  F023         	call	_ipv4_cmp	;wreg free
 16318  0013B6  0100               	movlb	0	; () banked
 16319  0013B8  A0D8               	btfss	status,0,c
 16320  0013BA  D00D               	goto	l923
 16321                           
 16322                           ; BSR set to: 0
 16323  0013BC  0EB2               	movlw	low (ARP_parseFromRXBuffer@arp+18)
 16324  0013BE  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 16325  0013C0  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+18)
 16326  0013C2  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 16327  0013C4  EC98  F024         	call	_mac_isAllZero	;wreg free
 16328  0013C8  0100               	movlb	0	; () banked
 16329  0013CA  A0D8               	btfss	status,0,c
 16330  0013CC  D004               	goto	l923
 16331                           
 16332                           ; BSR set to: 0
 16333  0013CE  05A6               	decf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 16334  0013D0  11A7               	iorwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 16335  0013D2  B4D8               	btfsc	status,2,c
 16336  0013D4  D01F               	goto	u10130
 16337  0013D6                     l923:
 16338                           
 16339                           ; BSR set to: 0
 16340                           ;arp.c: 109: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 16341                           ;arp.c: 110: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 16342                           ;arp.c: 111: arp.operation == ARP_REPLY) {
 16343                           
 16344                           ; BSR set to: 0
 16345  0013D6  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 16346  0013D8  6F60               	movwf	ipv4_cmp@a& (0+255),b
 16347  0013DA  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 16348  0013DC  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 16349  0013DE  0EB8               	movlw	low (ARP_parseFromRXBuffer@arp+24)
 16350  0013E0  6F62               	movwf	ipv4_cmp@b& (0+255),b
 16351  0013E2  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+24)
 16352  0013E4  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 16353  0013E6  ECAF  F023         	call	_ipv4_cmp	;wreg free
 16354  0013EA  0100               	movlb	0	; () banked
 16355  0013EC  A0D8               	btfss	status,0,c
 16356  0013EE  D014               	goto	l925
 16357                           
 16358                           ; BSR set to: 0
 16359  0013F0  0EA8               	movlw	low (ARP_parseFromRXBuffer@arp+8)
 16360  0013F2  6F60               	movwf	mac_cmp@a& (0+255),b
 16361  0013F4  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+8)
 16362  0013F6  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 16363  0013F8  0EB2               	movlw	low (ARP_parseFromRXBuffer@arp+18)
 16364  0013FA  6F62               	movwf	mac_cmp@b& (0+255),b
 16365  0013FC  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+18)
 16366  0013FE  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 16367  001400  EC8E  F023         	call	_mac_cmp	;wreg free
 16368  001404  0100               	movlb	0	; () banked
 16369  001406  A0D8               	btfss	status,0,c
 16370  001408  D007               	goto	l925
 16371                           
 16372                           ; BSR set to: 0
 16373  00140A  0E02               	movlw	2
 16374  00140C  19A6               	xorwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 16375  00140E  11A7               	iorwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 16376  001410  A4D8               	btfss	status,2,c
 16377  001412  D002               	goto	l925
 16378  001414                     u10130:
 16379                           
 16380                           ; BSR set to: 0
 16381                           ;arp.c: 112: arp.fIsGratuitous = 1;
 16382  001414  81BC               	bsf	(ARP_parseFromRXBuffer@arp+28)& (0+255),0,b
 16383                           
 16384                           ;arp.c: 113: } else {
 16385  001416  D001               	goto	l926
 16386  001418                     l925:
 16387                           
 16388                           ; BSR set to: 0
 16389                           ;arp.c: 114: arp.fIsGratuitous = 0;
 16390  001418  91BC               	bcf	(ARP_parseFromRXBuffer@arp+28)& (0+255),0,b
 16391  00141A                     l926:
 16392                           
 16393                           ; BSR set to: 0
 16394                           ;arp.c: 115: }
 16395                           ;arp.c: 116: }
 16396                           ;arp.c: 117: }
 16397                           ;arp.c: 120: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 16398                           ;arp.c: 121: (arp.ptype != ARP_PTYPE_IPv4) ||
 16399                           ;arp.c: 122: (arp.operation > 2) ||
 16400                           ;arp.c: 123: (arp.hlen != 6) ||
 16401                           ;arp.c: 124: (arp.plen != 4)) {
 16402                           
 16403                           ; BSR set to: 0
 16404                           
 16405                           ; BSR set to: 0
 16406                           
 16407                           ; BSR set to: 0
 16408  00141A  05A0               	decf	ARP_parseFromRXBuffer@arp& (0+255),w,b
 16409  00141C  11A1               	iorwf	(ARP_parseFromRXBuffer@arp+1)& (0+255),w,b
 16410  00141E  A4D8               	btfss	status,2,c
 16411  001420  D013               	goto	u10180
 16412                           
 16413                           ; BSR set to: 0
 16414  001422  0E08               	movlw	8
 16415  001424  19A3               	xorwf	(ARP_parseFromRXBuffer@arp+3)& (0+255),w,b
 16416  001426  11A2               	iorwf	(ARP_parseFromRXBuffer@arp+2)& (0+255),w,b
 16417  001428  A4D8               	btfss	status,2,c
 16418  00142A  D00E               	goto	u10180
 16419                           
 16420                           ; BSR set to: 0
 16421  00142C  51A7               	movf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 16422  00142E  E10C               	bnz	l8231
 16423  001430  0E03               	movlw	3
 16424  001432  5DA6               	subwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 16425  001434  B0D8               	btfsc	status,0,c
 16426  001436  D008               	goto	u10180
 16427                           
 16428                           ; BSR set to: 0
 16429  001438  0E06               	movlw	6
 16430  00143A  19A4               	xorwf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 16431  00143C  A4D8               	btfss	status,2,c
 16432  00143E  D004               	goto	u10180
 16433                           
 16434                           ; BSR set to: 0
 16435  001440  0E04               	movlw	4
 16436  001442  19A5               	xorwf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 16437  001444  B4D8               	btfsc	status,2,c
 16438  001446  D004               	goto	l927
 16439  001448                     u10180:
 16440  001448                     l8231:
 16441                           
 16442                           ; BSR set to: 0
 16443                           ;arp.c: 125: arp.err.code = ERROR_ARP_INVALID_VALUES;
 16444  001448  0E01               	movlw	1
 16445  00144A  6FBF               	movwf	(ARP_parseFromRXBuffer@arp+31)& (0+255),b
 16446  00144C  0E93               	movlw	147
 16447  00144E  D003               	goto	L2
 16448  001450                     l927:
 16449                           
 16450                           ; BSR set to: 0
 16451                           ;arp.c: 128: arp.err.code = (uint16_t)0;
 16452                           
 16453                           ; BSR set to: 0
 16454  001450  0E00               	movlw	0
 16455  001452  6FBF               	movwf	(ARP_parseFromRXBuffer@arp+31)& (0+255),b
 16456  001454  0E00               	movlw	0
 16457  001456                     L2:
 16458  001456  6FBE               	movwf	(ARP_parseFromRXBuffer@arp+30)& (0+255),b
 16459                           
 16460                           ;arp.c: 129: arp.err.module = ERROR_MODULE_ARP;
 16461  001458  0E03               	movlw	3
 16462  00145A  6FBD               	movwf	(ARP_parseFromRXBuffer@arp+29)& (0+255),b
 16463                           
 16464                           ; BSR set to: 0
 16465                           ;arp.c: 130: }
 16466                           ;arp.c: 132: return arp;
 16467                           
 16468                           ; BSR set to: 0
 16469  00145C  EE20  F0A0         	lfsr	2,ARP_parseFromRXBuffer@arp
 16470  001460  EE00  F077         	lfsr	0,?_ARP_parseFromRXBuffer
 16471  001464  0E1F               	movlw	31
 16472  001466                     u10191:
 16473  001466  CFDB FFEB          	movff	plusw2,plusw0
 16474  00146A  06E8               	decf	wreg,f,c
 16475  00146C  E2FC               	bc	u10191
 16476  00146E  0012               	return	
 16477  001470                     __end_of_ARP_parseFromRXBuffer:
 16478                           	opt stack 0
 16479                           tblptru	equ	0xFF8
 16480                           tblptrh	equ	0xFF7
 16481                           tblptrl	equ	0xFF6
 16482                           tablat	equ	0xFF5
 16483                           prodh	equ	0xFF4
 16484                           prodl	equ	0xFF3
 16485                           intcon	equ	0xFF2
 16486                           intcon3	equ	0xFF0
 16487                           indf0	equ	0xFEF
 16488                           postinc0	equ	0xFEE
 16489                           plusw0	equ	0xFEB
 16490                           fsr0h	equ	0xFEA
 16491                           fsr0l	equ	0xFE9
 16492                           wreg	equ	0xFE8
 16493                           indf1	equ	0xFE7
 16494                           postinc1	equ	0xFE6
 16495                           postdec1	equ	0xFE5
 16496                           plusw1	equ	0xFE3
 16497                           fsr1h	equ	0xFE2
 16498                           fsr1l	equ	0xFE1
 16499                           indf2	equ	0xFDF
 16500                           postinc2	equ	0xFDE
 16501                           postdec2	equ	0xFDD
 16502                           plusw2	equ	0xFDB
 16503                           fsr2h	equ	0xFDA
 16504                           fsr2l	equ	0xFD9
 16505                           status	equ	0xFD8
 16506                           
 16507 ;; *************** function _mac_isAllZero *****************
 16508 ;; Defined at:
 16509 ;;		line 31 in file "src/eth/mac.c"
 16510 ;; Parameters:    Size  Location     Type
 16511 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 16512 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 16513 ;; Auto vars:     Size  Location     Type
 16514 ;;  i               1    2[BANK0 ] unsigned char 
 16515 ;; Return value:  Size  Location     Type
 16516 ;;		None               void
 16517 ;; Registers used:
 16518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16519 ;; Tracked objects:
 16520 ;;		On entry : 0/0
 16521 ;;		On exit  : 0/0
 16522 ;;		Unchanged: 0/0
 16523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16524 ;;      Params:         0       2       0       0       0       0       0       0       0
 16525 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16526 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16527 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16528 ;;Total ram usage:        3 bytes
 16529 ;; Hardware stack levels used:    1
 16530 ;; Hardware stack levels required when called:    4
 16531 ;; This function calls:
 16532 ;;		Nothing
 16533 ;; This function is called by:
 16534 ;;		_ARP_parseFromRXBuffer
 16535 ;; This function uses a non-reentrant model
 16536 ;;
 16537                           
 16538                           	psect	text60
 16539  004930                     __ptext60:
 16540                           	opt stack 0
 16541  004930                     _mac_isAllZero:
 16542                           	opt stack 22
 16543                           
 16544                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 16545                           
 16546                           ; BSR set to: 0
 16547                           ;incstack = 0
 16548  004930  0E00               	movlw	0
 16549  004932  0100               	movlb	0	; () banked
 16550  004934  6F62               	movwf	mac_isAllZero@i& (0+255),b
 16551  004936                     l7759:
 16552                           
 16553                           ; BSR set to: 0
 16554  004936  0E05               	movlw	5
 16555  004938  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 16556  00493A  D001               	goto	l386
 16557  00493C  D00F               	goto	u9090
 16558  00493E                     l386:
 16559                           
 16560                           ; BSR set to: 0
 16561                           ;mac.c: 33: if (mac->address[i] != 0x00)
 16562                           
 16563                           ; BSR set to: 0
 16564  00493E  5162               	movf	mac_isAllZero@i& (0+255),w,b
 16565  004940  0D01               	mullw	1
 16566  004942  50F3               	movf	prodl,w,c
 16567  004944  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 16568  004946  6ED9               	movwf	fsr2l,c
 16569  004948  50F4               	movf	prodh,w,c
 16570  00494A  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 16571  00494C  6EDA               	movwf	fsr2h,c
 16572  00494E  50DF               	movf	indf2,w,c
 16573  004950  B4D8               	btfsc	status,2,c
 16574  004952  D002               	goto	l388
 16575                           
 16576                           ; BSR set to: 0
 16577                           ;mac.c: 34: return 0;
 16578  004954  90D8               	bcf	status,0,c
 16579                           
 16580                           ; BSR set to: 0
 16581  004956  0012               	return	
 16582  004958                     l388:
 16583                           
 16584                           ; BSR set to: 0
 16585                           
 16586                           ; BSR set to: 0
 16587  004958  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 16588  00495A  D7ED               	goto	l7759
 16589  00495C                     u9090:
 16590                           
 16591                           ; BSR set to: 0
 16592                           ;mac.c: 35: }
 16593                           ;mac.c: 36: return 1;
 16594                           
 16595                           ; BSR set to: 0
 16596  00495C  80D8               	bsf	status,0,c
 16597  00495E  0012               	return	
 16598  004960                     __end_of_mac_isAllZero:
 16599                           	opt stack 0
 16600                           tblptru	equ	0xFF8
 16601                           tblptrh	equ	0xFF7
 16602                           tblptrl	equ	0xFF6
 16603                           tablat	equ	0xFF5
 16604                           prodh	equ	0xFF4
 16605                           prodl	equ	0xFF3
 16606                           intcon	equ	0xFF2
 16607                           intcon3	equ	0xFF0
 16608                           indf0	equ	0xFEF
 16609                           postinc0	equ	0xFEE
 16610                           plusw0	equ	0xFEB
 16611                           fsr0h	equ	0xFEA
 16612                           fsr0l	equ	0xFE9
 16613                           wreg	equ	0xFE8
 16614                           indf1	equ	0xFE7
 16615                           postinc1	equ	0xFE6
 16616                           postdec1	equ	0xFE5
 16617                           plusw1	equ	0xFE3
 16618                           fsr1h	equ	0xFE2
 16619                           fsr1l	equ	0xFE1
 16620                           indf2	equ	0xFDF
 16621                           postinc2	equ	0xFDE
 16622                           postdec2	equ	0xFDD
 16623                           plusw2	equ	0xFDB
 16624                           fsr2h	equ	0xFDA
 16625                           fsr2l	equ	0xFD9
 16626                           status	equ	0xFD8
 16627                           
 16628 ;; *************** function _mac_cmp *****************
 16629 ;; Defined at:
 16630 ;;		line 39 in file "src/eth/mac.c"
 16631 ;; Parameters:    Size  Location     Type
 16632 ;;  a               2    0[BANK0 ] PTR struct macaddress
 16633 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 16634 ;;  b               2    2[BANK0 ] PTR struct macaddress
 16635 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 16636 ;; Auto vars:     Size  Location     Type
 16637 ;;  i               1    6[BANK0 ] unsigned char 
 16638 ;; Return value:  Size  Location     Type
 16639 ;;		None               void
 16640 ;; Registers used:
 16641 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16642 ;; Tracked objects:
 16643 ;;		On entry : 0/0
 16644 ;;		On exit  : 0/0
 16645 ;;		Unchanged: 0/0
 16646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16647 ;;      Params:         0       4       0       0       0       0       0       0       0
 16648 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16649 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16650 ;;      Totals:         0       7       0       0       0       0       0       0       0
 16651 ;;Total ram usage:        7 bytes
 16652 ;; Hardware stack levels used:    1
 16653 ;; Hardware stack levels required when called:    4
 16654 ;; This function calls:
 16655 ;;		Nothing
 16656 ;; This function is called by:
 16657 ;;		_ARP_parseFromRXBuffer
 16658 ;; This function uses a non-reentrant model
 16659 ;;
 16660                           
 16661                           	psect	text61
 16662  00471C                     __ptext61:
 16663                           	opt stack 0
 16664  00471C                     _mac_cmp:
 16665                           	opt stack 22
 16666                           
 16667                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 16668                           
 16669                           ; BSR set to: 0
 16670                           ;incstack = 0
 16671  00471C  0E00               	movlw	0
 16672  00471E  0100               	movlb	0	; () banked
 16673  004720  6F66               	movwf	mac_cmp@i& (0+255),b
 16674  004722                     l7779:
 16675                           
 16676                           ; BSR set to: 0
 16677  004722  0E05               	movlw	5
 16678  004724  6566               	cpfsgt	mac_cmp@i& (0+255),b
 16679  004726  D001               	goto	l392
 16680  004728  D018               	goto	u9120
 16681  00472A                     l392:
 16682                           
 16683                           ; BSR set to: 0
 16684                           ;mac.c: 41: if (a->address[i] != b->address[i])
 16685                           
 16686                           ; BSR set to: 0
 16687  00472A  5166               	movf	mac_cmp@i& (0+255),w,b
 16688  00472C  0D01               	mullw	1
 16689  00472E  50F3               	movf	prodl,w,c
 16690  004730  2562               	addwf	mac_cmp@b& (0+255),w,b
 16691  004732  6ED9               	movwf	fsr2l,c
 16692  004734  50F4               	movf	prodh,w,c
 16693  004736  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 16694  004738  6EDA               	movwf	fsr2h,c
 16695  00473A  5166               	movf	mac_cmp@i& (0+255),w,b
 16696  00473C  0D01               	mullw	1
 16697  00473E  50F3               	movf	prodl,w,c
 16698  004740  2560               	addwf	mac_cmp@a& (0+255),w,b
 16699  004742  6EE1               	movwf	fsr1l,c
 16700  004744  50F4               	movf	prodh,w,c
 16701  004746  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 16702  004748  6EE2               	movwf	fsr1h,c
 16703  00474A  50DE               	movf	postinc2,w,c
 16704  00474C  18E6               	xorwf	postinc1,w,c
 16705  00474E  B4D8               	btfsc	status,2,c
 16706  004750  D002               	goto	l394
 16707                           
 16708                           ; BSR set to: 0
 16709                           ;mac.c: 42: return 0;
 16710  004752  90D8               	bcf	status,0,c
 16711                           
 16712                           ; BSR set to: 0
 16713  004754  0012               	return	
 16714  004756                     l394:
 16715                           
 16716                           ; BSR set to: 0
 16717                           
 16718                           ; BSR set to: 0
 16719  004756  2B66               	incf	mac_cmp@i& (0+255),f,b
 16720  004758  D7E4               	goto	l7779
 16721  00475A                     u9120:
 16722                           
 16723                           ; BSR set to: 0
 16724                           ;mac.c: 43: }
 16725                           ;mac.c: 44: return 1;
 16726                           
 16727                           ; BSR set to: 0
 16728  00475A  80D8               	bsf	status,0,c
 16729  00475C  0012               	return	
 16730  00475E                     __end_of_mac_cmp:
 16731                           	opt stack 0
 16732                           tblptru	equ	0xFF8
 16733                           tblptrh	equ	0xFF7
 16734                           tblptrl	equ	0xFF6
 16735                           tablat	equ	0xFF5
 16736                           prodh	equ	0xFF4
 16737                           prodl	equ	0xFF3
 16738                           intcon	equ	0xFF2
 16739                           intcon3	equ	0xFF0
 16740                           indf0	equ	0xFEF
 16741                           postinc0	equ	0xFEE
 16742                           plusw0	equ	0xFEB
 16743                           fsr0h	equ	0xFEA
 16744                           fsr0l	equ	0xFE9
 16745                           wreg	equ	0xFE8
 16746                           indf1	equ	0xFE7
 16747                           postinc1	equ	0xFE6
 16748                           postdec1	equ	0xFE5
 16749                           plusw1	equ	0xFE3
 16750                           fsr1h	equ	0xFE2
 16751                           fsr1l	equ	0xFE1
 16752                           indf2	equ	0xFDF
 16753                           postinc2	equ	0xFDE
 16754                           postdec2	equ	0xFDD
 16755                           plusw2	equ	0xFDB
 16756                           fsr2h	equ	0xFDA
 16757                           fsr2l	equ	0xFD9
 16758                           status	equ	0xFD8
 16759                           
 16760 ;; *************** function _ipv4_isAllZero *****************
 16761 ;; Defined at:
 16762 ;;		line 246 in file "src/stack/protocols/ipv4.c"
 16763 ;; Parameters:    Size  Location     Type
 16764 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 16765 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 16766 ;; Auto vars:     Size  Location     Type
 16767 ;;  i               1    2[BANK0 ] unsigned char 
 16768 ;; Return value:  Size  Location     Type
 16769 ;;		None               void
 16770 ;; Registers used:
 16771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16772 ;; Tracked objects:
 16773 ;;		On entry : 0/0
 16774 ;;		On exit  : 0/0
 16775 ;;		Unchanged: 0/0
 16776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16777 ;;      Params:         0       2       0       0       0       0       0       0       0
 16778 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16779 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16780 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16781 ;;Total ram usage:        3 bytes
 16782 ;; Hardware stack levels used:    1
 16783 ;; Hardware stack levels required when called:    4
 16784 ;; This function calls:
 16785 ;;		Nothing
 16786 ;; This function is called by:
 16787 ;;		_ARP_parseFromRXBuffer
 16788 ;; This function uses a non-reentrant model
 16789 ;;
 16790                           
 16791                           	psect	text62
 16792  004960                     __ptext62:
 16793                           	opt stack 0
 16794  004960                     _ipv4_isAllZero:
 16795                           	opt stack 22
 16796                           
 16797                           ;ipv4.c: 247: for (uint8_t i = 0; i < 4; i++) {
 16798                           
 16799                           ; BSR set to: 0
 16800                           ;incstack = 0
 16801  004960  0E00               	movlw	0
 16802  004962  0100               	movlb	0	; () banked
 16803  004964  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 16804  004966                     l7851:
 16805                           
 16806                           ; BSR set to: 0
 16807  004966  0E03               	movlw	3
 16808  004968  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 16809  00496A  D001               	goto	l1071
 16810  00496C  D00F               	goto	u9230
 16811  00496E                     l1071:
 16812                           
 16813                           ; BSR set to: 0
 16814                           ;ipv4.c: 248: if (ip->address[i] != 0x00)
 16815                           
 16816                           ; BSR set to: 0
 16817  00496E  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 16818  004970  0D01               	mullw	1
 16819  004972  50F3               	movf	prodl,w,c
 16820  004974  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 16821  004976  6ED9               	movwf	fsr2l,c
 16822  004978  50F4               	movf	prodh,w,c
 16823  00497A  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 16824  00497C  6EDA               	movwf	fsr2h,c
 16825  00497E  50DF               	movf	indf2,w,c
 16826  004980  B4D8               	btfsc	status,2,c
 16827  004982  D002               	goto	l1073
 16828                           
 16829                           ; BSR set to: 0
 16830                           ;ipv4.c: 249: return 0;
 16831  004984  90D8               	bcf	status,0,c
 16832                           
 16833                           ; BSR set to: 0
 16834  004986  0012               	return	
 16835  004988                     l1073:
 16836                           
 16837                           ; BSR set to: 0
 16838                           
 16839                           ; BSR set to: 0
 16840  004988  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 16841  00498A  D7ED               	goto	l7851
 16842  00498C                     u9230:
 16843                           
 16844                           ; BSR set to: 0
 16845                           ;ipv4.c: 250: }
 16846                           ;ipv4.c: 251: return 1;
 16847                           
 16848                           ; BSR set to: 0
 16849  00498C  80D8               	bsf	status,0,c
 16850  00498E  0012               	return	
 16851  004990                     __end_of_ipv4_isAllZero:
 16852                           	opt stack 0
 16853                           tblptru	equ	0xFF8
 16854                           tblptrh	equ	0xFF7
 16855                           tblptrl	equ	0xFF6
 16856                           tablat	equ	0xFF5
 16857                           prodh	equ	0xFF4
 16858                           prodl	equ	0xFF3
 16859                           intcon	equ	0xFF2
 16860                           intcon3	equ	0xFF0
 16861                           indf0	equ	0xFEF
 16862                           postinc0	equ	0xFEE
 16863                           plusw0	equ	0xFEB
 16864                           fsr0h	equ	0xFEA
 16865                           fsr0l	equ	0xFE9
 16866                           wreg	equ	0xFE8
 16867                           indf1	equ	0xFE7
 16868                           postinc1	equ	0xFE6
 16869                           postdec1	equ	0xFE5
 16870                           plusw1	equ	0xFE3
 16871                           fsr1h	equ	0xFE2
 16872                           fsr1l	equ	0xFE1
 16873                           indf2	equ	0xFDF
 16874                           postinc2	equ	0xFDE
 16875                           postdec2	equ	0xFDD
 16876                           plusw2	equ	0xFDB
 16877                           fsr2h	equ	0xFDA
 16878                           fsr2l	equ	0xFD9
 16879                           status	equ	0xFD8
 16880                           
 16881 ;; *************** function _ipv4_cmp *****************
 16882 ;; Defined at:
 16883 ;;		line 238 in file "src/stack/protocols/ipv4.c"
 16884 ;; Parameters:    Size  Location     Type
 16885 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 16886 ;;		 -> ARP_table(112), ARP_sendReply@request(32), ARP_parseFromRXBuffer@arp(32), 
 16887 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 16888 ;;		 -> ARP_checkForEntry@ip(4), ARP_sendReply@myIP(4), ARP_parseFromRXBuffer@arp(32), 
 16889 ;; Auto vars:     Size  Location     Type
 16890 ;;  i               1    6[BANK0 ] unsigned char 
 16891 ;; Return value:  Size  Location     Type
 16892 ;;		None               void
 16893 ;; Registers used:
 16894 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16895 ;; Tracked objects:
 16896 ;;		On entry : 0/0
 16897 ;;		On exit  : 0/0
 16898 ;;		Unchanged: 0/0
 16899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16900 ;;      Params:         0       4       0       0       0       0       0       0       0
 16901 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16902 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16903 ;;      Totals:         0       7       0       0       0       0       0       0       0
 16904 ;;Total ram usage:        7 bytes
 16905 ;; Hardware stack levels used:    1
 16906 ;; Hardware stack levels required when called:    4
 16907 ;; This function calls:
 16908 ;;		Nothing
 16909 ;; This function is called by:
 16910 ;;		_ARP_parseFromRXBuffer
 16911 ;;		_ARP_sendReply
 16912 ;;		_ARP_checkForEntry
 16913 ;; This function uses a non-reentrant model
 16914 ;;
 16915                           
 16916                           	psect	text63
 16917  00475E                     __ptext63:
 16918                           	opt stack 0
 16919  00475E                     _ipv4_cmp:
 16920                           	opt stack 22
 16921                           
 16922                           ;ipv4.c: 239: for (uint8_t i = 0; i < 4; i++) {
 16923                           
 16924                           ; BSR set to: 0
 16925                           ;incstack = 0
 16926  00475E  0E00               	movlw	0
 16927  004760  0100               	movlb	0	; () banked
 16928  004762  6F66               	movwf	ipv4_cmp@i& (0+255),b
 16929  004764                     l7871:
 16930                           
 16931                           ; BSR set to: 0
 16932  004764  0E03               	movlw	3
 16933  004766  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 16934  004768  D001               	goto	l1065
 16935  00476A  D018               	goto	u9260
 16936  00476C                     l1065:
 16937                           
 16938                           ; BSR set to: 0
 16939                           ;ipv4.c: 240: if (a->address[i] != b->address[i])
 16940                           
 16941                           ; BSR set to: 0
 16942  00476C  5166               	movf	ipv4_cmp@i& (0+255),w,b
 16943  00476E  0D01               	mullw	1
 16944  004770  50F3               	movf	prodl,w,c
 16945  004772  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 16946  004774  6ED9               	movwf	fsr2l,c
 16947  004776  50F4               	movf	prodh,w,c
 16948  004778  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 16949  00477A  6EDA               	movwf	fsr2h,c
 16950  00477C  5166               	movf	ipv4_cmp@i& (0+255),w,b
 16951  00477E  0D01               	mullw	1
 16952  004780  50F3               	movf	prodl,w,c
 16953  004782  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 16954  004784  6EE1               	movwf	fsr1l,c
 16955  004786  50F4               	movf	prodh,w,c
 16956  004788  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 16957  00478A  6EE2               	movwf	fsr1h,c
 16958  00478C  50DE               	movf	postinc2,w,c
 16959  00478E  18E6               	xorwf	postinc1,w,c
 16960  004790  B4D8               	btfsc	status,2,c
 16961  004792  D002               	goto	l1067
 16962                           
 16963                           ; BSR set to: 0
 16964                           ;ipv4.c: 241: return 0;
 16965  004794  90D8               	bcf	status,0,c
 16966                           
 16967                           ; BSR set to: 0
 16968  004796  0012               	return	
 16969  004798                     l1067:
 16970                           
 16971                           ; BSR set to: 0
 16972                           
 16973                           ; BSR set to: 0
 16974  004798  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 16975  00479A  D7E4               	goto	l7871
 16976  00479C                     u9260:
 16977                           
 16978                           ; BSR set to: 0
 16979                           ;ipv4.c: 242: }
 16980                           ;ipv4.c: 243: return 1;
 16981                           
 16982                           ; BSR set to: 0
 16983  00479C  80D8               	bsf	status,0,c
 16984  00479E  0012               	return	
 16985  0047A0                     __end_of_ipv4_cmp:
 16986                           	opt stack 0
 16987                           tblptru	equ	0xFF8
 16988                           tblptrh	equ	0xFF7
 16989                           tblptrl	equ	0xFF6
 16990                           tablat	equ	0xFF5
 16991                           prodh	equ	0xFF4
 16992                           prodl	equ	0xFF3
 16993                           intcon	equ	0xFF2
 16994                           intcon3	equ	0xFF0
 16995                           indf0	equ	0xFEF
 16996                           postinc0	equ	0xFEE
 16997                           plusw0	equ	0xFEB
 16998                           fsr0h	equ	0xFEA
 16999                           fsr0l	equ	0xFE9
 17000                           wreg	equ	0xFE8
 17001                           indf1	equ	0xFE7
 17002                           postinc1	equ	0xFE6
 17003                           postdec1	equ	0xFE5
 17004                           plusw1	equ	0xFE3
 17005                           fsr1h	equ	0xFE2
 17006                           fsr1l	equ	0xFE1
 17007                           indf2	equ	0xFDF
 17008                           postinc2	equ	0xFDE
 17009                           postdec2	equ	0xFDD
 17010                           plusw2	equ	0xFDB
 17011                           fsr2h	equ	0xFDA
 17012                           fsr2l	equ	0xFD9
 17013                           status	equ	0xFD8
 17014                           
 17015 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 17016 ;; Defined at:
 17017 ;;		line 349 in file "src/enc424j600/ENC424J600.c"
 17018 ;; Parameters:    Size  Location     Type
 17019 ;;  startEnd        1    wreg     unsigned char 
 17020 ;;  startAddress    2   18[BANK0 ] unsigned int 
 17021 ;; Auto vars:     Size  Location     Type
 17022 ;;  startEnd        1   20[BANK0 ] unsigned char 
 17023 ;;  temp            1   22[BANK0 ] unsigned char 
 17024 ;;  opcode          1   21[BANK0 ] unsigned char 
 17025 ;; Return value:  Size  Location     Type
 17026 ;;                  1    wreg      unsigned char 
 17027 ;; Registers used:
 17028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17029 ;; Tracked objects:
 17030 ;;		On entry : 0/0
 17031 ;;		On exit  : 0/0
 17032 ;;		Unchanged: 0/0
 17033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17034 ;;      Params:         0       2       0       0       0       0       0       0       0
 17035 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17036 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17037 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17038 ;;Total ram usage:        5 bytes
 17039 ;; Hardware stack levels used:    1
 17040 ;; Hardware stack levels required when called:    8
 17041 ;; This function calls:
 17042 ;;		_ENC424J600_readSPI
 17043 ;;		_ENC424J600_setERXDATAReadPointer
 17044 ;;		_ENC424J600_setRXTailPointer
 17045 ;;		_ENC424J600_writeSPI
 17046 ;;		_ENC424J600_writeSingleByte
 17047 ;;		_ethernetController_getNextPacketPointer
 17048 ;; This function is called by:
 17049 ;;		_ARP_parseFromRXBuffer
 17050 ;;		_ipv4_parseHeader
 17051 ;; This function uses a non-reentrant model
 17052 ;;
 17053                           
 17054                           	psect	text64
 17055  003A46                     __ptext64:
 17056                           	opt stack 0
 17057  003A46                     _ethernetController_streamFromRXBuffer:
 17058                           	opt stack 18
 17059                           
 17060                           ; BSR set to: 0
 17061                           ;incstack = 0
 17062                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 17063  003A46  0100               	movlb	0	; () banked
 17064  003A48  6F74               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 17065                           
 17066                           ;ENC424J600.c: 350: uint8_t temp;
 17067                           ;ENC424J600.c: 351: uint8_t opcode;
 17068                           ;ENC424J600.c: 352: switch (startEnd) {
 17069  003A4A  D03C               	goto	l177
 17070  003A4C                     
 17071                           ;ENC424J600.c: 354: ENC424J600_setERXDATAReadPointer(startAddress);
 17072  003A4C  C072  F06A         	movff	ethernetController_streamFromRXBuffer@startAddress,ENC424J600_setERXDATAReadPoint
      +                          er@addr
 17073  003A50  C073  F06B         	movff	ethernetController_streamFromRXBuffer@startAddress+1,ENC424J600_setERXDATAReadPoi
      +                          nter@addr+1
 17074  003A54  EC0C  F024         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
 17075                           
 17076                           ;ENC424J600.c: 355: opcode = 0x2C;
 17077  003A58  0E2C               	movlw	44
 17078  003A5A  0100               	movlb	0	; () banked
 17079  003A5C  6F75               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 17080                           
 17081                           ; BSR set to: 0
 17082                           ;ENC424J600.c: 356: PORTBbits.RB4=0;
 17083  003A5E  9881               	bcf	3969,4,c	;volatile
 17084                           
 17085                           ; BSR set to: 0
 17086                           ;ENC424J600.c: 357: ENC424J600_writeSPI(&opcode);
 17087  003A60  0E75               	movlw	low ethernetController_streamFromRXBuffer@opcode
 17088  003A62  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 17089  003A64  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 17090  003A66  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 17091  003A68  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 17092                           
 17093                           ;ENC424J600.c: 358: return 0;
 17094  003A6C  0E00               	movlw	0
 17095  003A6E  0012               	return	
 17096  003A70                     
 17097                           ;ENC424J600.c: 360: ENC424J600_readSPI(&temp);
 17098  003A70  0E76               	movlw	low ethernetController_streamFromRXBuffer@temp
 17099  003A72  0100               	movlb	0	; () banked
 17100  003A74  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 17101  003A76  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 17102  003A78  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 17103  003A7A  EC0F  F021         	call	_ENC424J600_readSPI	;wreg free
 17104                           
 17105                           ;ENC424J600.c: 361: return temp;
 17106  003A7E  0100               	movlb	0	; () banked
 17107  003A80  5176               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 17108                           
 17109                           ; BSR set to: 0
 17110  003A82  0012               	return	
 17111  003A84                     l181:
 17112                           
 17113                           ; BSR set to: 0
 17114                           ;ENC424J600.c: 363: PORTBbits.RB4=1;
 17115  003A84  8881               	bsf	3969,4,c	;volatile
 17116                           
 17117                           ; BSR set to: 0
 17118                           ;ENC424J600.c: 365: if (ethernetController_getNextPacketPointer() == 0x3000) {
 17119  003A86  EC64  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
 17120  003A8A  0E30               	movlw	48
 17121  003A8C  0100               	movlb	0	; () banked
 17122  003A8E  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 17123  003A90  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 17124  003A92  A4D8               	btfss	status,2,c
 17125  003A94  D007               	goto	l182
 17126                           
 17127                           ; BSR set to: 0
 17128                           ;ENC424J600.c: 366: ENC424J600_setRXTailPointer(0x55FE);
 17129  003A96  0E55               	movlw	85
 17130  003A98  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 17131  003A9A  0EFE               	movlw	254
 17132  003A9C  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 17133  003A9E  EC09  F025         	call	_ENC424J600_setRXTailPointer	;wreg free
 17134                           
 17135                           ;ENC424J600.c: 367: } else {
 17136  003AA2  D00B               	goto	l183
 17137  003AA4                     l182:
 17138                           
 17139                           ;ENC424J600.c: 368: ENC424J600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
 17140  003AA4  EC64  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
 17141  003AA8  0EFE               	movlw	254
 17142  003AAA  0100               	movlb	0	; () banked
 17143  003AAC  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 17144  003AAE  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 17145  003AB0  0EFF               	movlw	255
 17146  003AB2  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 17147  003AB4  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 17148  003AB6  EC09  F025         	call	_ENC424J600_setRXTailPointer	;wreg free
 17149  003ABA                     l183:
 17150                           
 17151                           ;ENC424J600.c: 369: }
 17152                           ;ENC424J600.c: 372: ENC424J600_writeSingleByte(0b11001100);
 17153  003ABA  0ECC               	movlw	204
 17154  003ABC  EC2E  F026         	call	_ENC424J600_writeSingleByte
 17155                           
 17156                           ;ENC424J600.c: 373: return 0;
 17157  003AC0  0E00               	movlw	0
 17158  003AC2  0012               	return	
 17159  003AC4                     l177:
 17160  003AC4  0100               	movlb	0	; () banked
 17161  003AC6  5174               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 17162                           
 17163                           ; Switch size 1, requested type "space"
 17164                           ; Number of cases is 3, Range of values is 0 to 2
 17165                           ; switch strategies available:
 17166                           ; Name         Instructions Cycles
 17167                           ; simple_byte           10     6 (average)
 17168                           ;	Chosen strategy is simple_byte
 17169  003AC8  0A00               	xorlw	0	; case 0
 17170  003ACA  B4D8               	btfsc	status,2,c
 17171  003ACC  D7BF               	goto	l178
 17172  003ACE  0A01               	xorlw	1	; case 1
 17173  003AD0  B4D8               	btfsc	status,2,c
 17174  003AD2  D7CE               	goto	l180
 17175  003AD4  0A03               	xorlw	3	; case 2
 17176  003AD6  B4D8               	btfsc	status,2,c
 17177  003AD8  D7D5               	goto	l181
 17178                           
 17179                           ;ENC424J600.c: 375: return 0;
 17180                           
 17181                           ; BSR set to: 0
 17182  003ADA  0E00               	movlw	0
 17183  003ADC  0012               	return	
 17184  003ADE                     __end_of_ethernetController_streamFromRXBuffer:
 17185                           	opt stack 0
 17186                           tblptru	equ	0xFF8
 17187                           tblptrh	equ	0xFF7
 17188                           tblptrl	equ	0xFF6
 17189                           tablat	equ	0xFF5
 17190                           prodh	equ	0xFF4
 17191                           prodl	equ	0xFF3
 17192                           intcon	equ	0xFF2
 17193                           intcon3	equ	0xFF0
 17194                           indf0	equ	0xFEF
 17195                           postinc0	equ	0xFEE
 17196                           plusw0	equ	0xFEB
 17197                           fsr0h	equ	0xFEA
 17198                           fsr0l	equ	0xFE9
 17199                           wreg	equ	0xFE8
 17200                           indf1	equ	0xFE7
 17201                           postinc1	equ	0xFE6
 17202                           postdec1	equ	0xFE5
 17203                           plusw1	equ	0xFE3
 17204                           fsr1h	equ	0xFE2
 17205                           fsr1l	equ	0xFE1
 17206                           indf2	equ	0xFDF
 17207                           postinc2	equ	0xFDE
 17208                           postdec2	equ	0xFDD
 17209                           plusw2	equ	0xFDB
 17210                           fsr2h	equ	0xFDA
 17211                           fsr2l	equ	0xFD9
 17212                           status	equ	0xFD8
 17213                           
 17214 ;; *************** function _ethernetController_getNextPacketPointer *****************
 17215 ;; Defined at:
 17216 ;;		line 497 in file "src/enc424j600/ENC424J600.c"
 17217 ;; Parameters:    Size  Location     Type
 17218 ;;		None
 17219 ;; Auto vars:     Size  Location     Type
 17220 ;;		None
 17221 ;; Return value:  Size  Location     Type
 17222 ;;                  2    2[BANK0 ] unsigned int 
 17223 ;; Registers used:
 17224 ;;		cstack
 17225 ;; Tracked objects:
 17226 ;;		On entry : 0/0
 17227 ;;		On exit  : 0/0
 17228 ;;		Unchanged: 0/0
 17229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17230 ;;      Params:         0       2       0       0       0       0       0       0       0
 17231 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17232 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17233 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17234 ;;Total ram usage:        2 bytes
 17235 ;; Hardware stack levels used:    1
 17236 ;; Hardware stack levels required when called:    5
 17237 ;; This function calls:
 17238 ;;		_ENC424J600_getNextPacketPointer
 17239 ;; This function is called by:
 17240 ;;		_ethernetController_streamFromRXBuffer
 17241 ;;		_ethernetController_dropPacket
 17242 ;;		_ethernet_rxGetNewFrame
 17243 ;; This function uses a non-reentrant model
 17244 ;;
 17245                           
 17246                           	psect	text65
 17247  004CC8                     __ptext65:
 17248                           	opt stack 0
 17249  004CC8                     _ethernetController_getNextPacketPointer:
 17250                           	opt stack 20
 17251                           
 17252                           ;ENC424J600.c: 498: return ENC424J600_getNextPacketPointer();
 17253                           
 17254                           ;incstack = 0
 17255  004CC8  EC79  F026         	call	_ENC424J600_getNextPacketPointer	;wreg free
 17256  004CCC  C060  F062         	movff	?_ENC424J600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
 17257  004CD0  C061  F063         	movff	?_ENC424J600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
 17258  004CD4  0012               	return	
 17259  004CD6                     __end_of_ethernetController_getNextPacketPointer:
 17260                           	opt stack 0
 17261                           tblptru	equ	0xFF8
 17262                           tblptrh	equ	0xFF7
 17263                           tblptrl	equ	0xFF6
 17264                           tablat	equ	0xFF5
 17265                           prodh	equ	0xFF4
 17266                           prodl	equ	0xFF3
 17267                           intcon	equ	0xFF2
 17268                           intcon3	equ	0xFF0
 17269                           indf0	equ	0xFEF
 17270                           postinc0	equ	0xFEE
 17271                           plusw0	equ	0xFEB
 17272                           fsr0h	equ	0xFEA
 17273                           fsr0l	equ	0xFE9
 17274                           wreg	equ	0xFE8
 17275                           indf1	equ	0xFE7
 17276                           postinc1	equ	0xFE6
 17277                           postdec1	equ	0xFE5
 17278                           plusw1	equ	0xFE3
 17279                           fsr1h	equ	0xFE2
 17280                           fsr1l	equ	0xFE1
 17281                           indf2	equ	0xFDF
 17282                           postinc2	equ	0xFDE
 17283                           postdec2	equ	0xFDD
 17284                           plusw2	equ	0xFDB
 17285                           fsr2h	equ	0xFDA
 17286                           fsr2l	equ	0xFD9
 17287                           status	equ	0xFD8
 17288                           
 17289 ;; *************** function _ENC424J600_getNextPacketPointer *****************
 17290 ;; Defined at:
 17291 ;;		line 625 in file "src/enc424j600/ENC424J600.c"
 17292 ;; Parameters:    Size  Location     Type
 17293 ;;		None
 17294 ;; Auto vars:     Size  Location     Type
 17295 ;;		None
 17296 ;; Return value:  Size  Location     Type
 17297 ;;                  2    0[BANK0 ] unsigned int 
 17298 ;; Registers used:
 17299 ;;		None
 17300 ;; Tracked objects:
 17301 ;;		On entry : 0/0
 17302 ;;		On exit  : 0/0
 17303 ;;		Unchanged: 0/0
 17304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17305 ;;      Params:         0       2       0       0       0       0       0       0       0
 17306 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17307 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17308 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17309 ;;Total ram usage:        2 bytes
 17310 ;; Hardware stack levels used:    1
 17311 ;; Hardware stack levels required when called:    4
 17312 ;; This function calls:
 17313 ;;		Nothing
 17314 ;; This function is called by:
 17315 ;;		_ethernetController_updateNextPacketPointer
 17316 ;;		_ethernetController_getNextPacketPointer
 17317 ;; This function uses a non-reentrant model
 17318 ;;
 17319                           
 17320                           	psect	text66
 17321  004CF2                     __ptext66:
 17322                           	opt stack 0
 17323  004CF2                     _ENC424J600_getNextPacketPointer:
 17324                           	opt stack 20
 17325                           
 17326                           ;ENC424J600.c: 626: return nextPacketPointer;
 17327                           
 17328                           ;incstack = 0
 17329  004CF2  C044  F060         	movff	_nextPacketPointer,?_ENC424J600_getNextPacketPointer
 17330  004CF6  C045  F061         	movff	_nextPacketPointer+1,?_ENC424J600_getNextPacketPointer+1
 17331  004CFA  0012               	return		;funcret
 17332  004CFC                     __end_of_ENC424J600_getNextPacketPointer:
 17333                           	opt stack 0
 17334                           tblptru	equ	0xFF8
 17335                           tblptrh	equ	0xFF7
 17336                           tblptrl	equ	0xFF6
 17337                           tablat	equ	0xFF5
 17338                           prodh	equ	0xFF4
 17339                           prodl	equ	0xFF3
 17340                           intcon	equ	0xFF2
 17341                           intcon3	equ	0xFF0
 17342                           indf0	equ	0xFEF
 17343                           postinc0	equ	0xFEE
 17344                           plusw0	equ	0xFEB
 17345                           fsr0h	equ	0xFEA
 17346                           fsr0l	equ	0xFE9
 17347                           wreg	equ	0xFE8
 17348                           indf1	equ	0xFE7
 17349                           postinc1	equ	0xFE6
 17350                           postdec1	equ	0xFE5
 17351                           plusw1	equ	0xFE3
 17352                           fsr1h	equ	0xFE2
 17353                           fsr1l	equ	0xFE1
 17354                           indf2	equ	0xFDF
 17355                           postinc2	equ	0xFDE
 17356                           postdec2	equ	0xFDD
 17357                           plusw2	equ	0xFDB
 17358                           fsr2h	equ	0xFDA
 17359                           fsr2l	equ	0xFD9
 17360                           status	equ	0xFD8
 17361                           
 17362 ;; *************** function _ENC424J600_setERXDATAReadPointer *****************
 17363 ;; Defined at:
 17364 ;;		line 666 in file "src/enc424j600/ENC424J600.c"
 17365 ;; Parameters:    Size  Location     Type
 17366 ;;  addr            2   10[BANK0 ] unsigned int 
 17367 ;; Auto vars:     Size  Location     Type
 17368 ;;  highByte        1   14[BANK0 ] unsigned char 
 17369 ;;  lowByte         1   13[BANK0 ] unsigned char 
 17370 ;;  opcode          1   12[BANK0 ] unsigned char 
 17371 ;; Return value:  Size  Location     Type
 17372 ;;                  1    wreg      void 
 17373 ;; Registers used:
 17374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17375 ;; Tracked objects:
 17376 ;;		On entry : 0/0
 17377 ;;		On exit  : 0/0
 17378 ;;		Unchanged: 0/0
 17379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17380 ;;      Params:         0       2       0       0       0       0       0       0       0
 17381 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17382 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17383 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17384 ;;Total ram usage:        5 bytes
 17385 ;; Hardware stack levels used:    1
 17386 ;; Hardware stack levels required when called:    6
 17387 ;; This function calls:
 17388 ;;		_ENC424J600_writeSPI
 17389 ;; This function is called by:
 17390 ;;		_ethernetController_getSourceMACAddress
 17391 ;;		_ethernetController_getEtherTypeField
 17392 ;;		_ethernetController_getRSV
 17393 ;;		_ethernetController_updateNextPacketPointer
 17394 ;;		_ethernetController_streamFromRXBuffer
 17395 ;;		_ethernetController_getDestinationMACAddress
 17396 ;; This function uses a non-reentrant model
 17397 ;;
 17398                           
 17399                           	psect	text67
 17400  004818                     __ptext67:
 17401                           	opt stack 0
 17402  004818                     _ENC424J600_setERXDATAReadPointer:
 17403                           	opt stack 18
 17404                           
 17405                           ;ENC424J600.c: 667: uint8_t opcode = 0x64;
 17406                           
 17407                           ;incstack = 0
 17408  004818  0E64               	movlw	100
 17409  00481A  0100               	movlb	0	; () banked
 17410  00481C  6F6C               	movwf	ENC424J600_setERXDATAReadPointer@opcode& (0+255),b
 17411                           
 17412                           ; BSR set to: 0
 17413                           ;ENC424J600.c: 668: uint8_t lowByte = addr & 0x00ff;
 17414  00481E  C06A  F06D         	movff	ENC424J600_setERXDATAReadPointer@addr,ENC424J600_setERXDATAReadPointer@lowByte
 17415                           
 17416                           ;ENC424J600.c: 669: uint8_t highByte = (addr >> 8) & 0xff;
 17417  004822  516B               	movf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 17418  004824  6F6E               	movwf	ENC424J600_setERXDATAReadPointer@highByte& (0+255),b
 17419                           
 17420                           ; BSR set to: 0
 17421                           ;ENC424J600.c: 670: PORTBbits.RB4=0;
 17422  004826  9881               	bcf	3969,4,c	;volatile
 17423                           
 17424                           ; BSR set to: 0
 17425                           ;ENC424J600.c: 671: ENC424J600_writeSPI(&opcode);
 17426  004828  0E6C               	movlw	low ENC424J600_setERXDATAReadPointer@opcode
 17427  00482A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 17428  00482C  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@opcode
 17429  00482E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 17430  004830  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 17431                           
 17432                           ;ENC424J600.c: 672: ENC424J600_writeSPI(&lowByte);
 17433  004834  0E6D               	movlw	low ENC424J600_setERXDATAReadPointer@lowByte
 17434  004836  0100               	movlb	0	; () banked
 17435  004838  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 17436  00483A  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@lowByte
 17437  00483C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 17438  00483E  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 17439                           
 17440                           ;ENC424J600.c: 673: ENC424J600_writeSPI(&highByte);
 17441  004842  0E6E               	movlw	low ENC424J600_setERXDATAReadPointer@highByte
 17442  004844  0100               	movlb	0	; () banked
 17443  004846  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 17444  004848  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@highByte
 17445  00484A  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 17446  00484C  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 17447                           
 17448                           ;ENC424J600.c: 674: PORTBbits.RB4=1;
 17449  004850  8881               	bsf	3969,4,c	;volatile
 17450  004852  0012               	return		;funcret
 17451  004854                     __end_of_ENC424J600_setERXDATAReadPointer:
 17452                           	opt stack 0
 17453                           tblptru	equ	0xFF8
 17454                           tblptrh	equ	0xFF7
 17455                           tblptrl	equ	0xFF6
 17456                           tablat	equ	0xFF5
 17457                           prodh	equ	0xFF4
 17458                           prodl	equ	0xFF3
 17459                           intcon	equ	0xFF2
 17460                           intcon3	equ	0xFF0
 17461                           indf0	equ	0xFEF
 17462                           postinc0	equ	0xFEE
 17463                           plusw0	equ	0xFEB
 17464                           fsr0h	equ	0xFEA
 17465                           fsr0l	equ	0xFE9
 17466                           wreg	equ	0xFE8
 17467                           indf1	equ	0xFE7
 17468                           postinc1	equ	0xFE6
 17469                           postdec1	equ	0xFE5
 17470                           plusw1	equ	0xFE3
 17471                           fsr1h	equ	0xFE2
 17472                           fsr1l	equ	0xFE1
 17473                           indf2	equ	0xFDF
 17474                           postinc2	equ	0xFDE
 17475                           postdec2	equ	0xFDD
 17476                           plusw2	equ	0xFDB
 17477                           fsr2h	equ	0xFDA
 17478                           fsr2l	equ	0xFD9
 17479                           status	equ	0xFD8
 17480                           
 17481 ;; *************** function _ethernetController_updateLinkStatus *****************
 17482 ;; Defined at:
 17483 ;;		line 406 in file "src/enc424j600/ENC424J600.c"
 17484 ;; Parameters:    Size  Location     Type
 17485 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 17486 ;;		 -> stack(122), 
 17487 ;; Auto vars:     Size  Location     Type
 17488 ;;  temp16          1   35[BANK0 ] unsigned char 
 17489 ;;  temp            1   34[BANK0 ] unsigned char 
 17490 ;; Return value:  Size  Location     Type
 17491 ;;                  1    wreg      void 
 17492 ;; Registers used:
 17493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17494 ;; Tracked objects:
 17495 ;;		On entry : 0/0
 17496 ;;		On exit  : 0/0
 17497 ;;		Unchanged: 0/0
 17498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17499 ;;      Params:         0       2       0       0       0       0       0       0       0
 17500 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17501 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17502 ;;      Totals:         0       4       0       0       0       0       0       0       0
 17503 ;;Total ram usage:        4 bytes
 17504 ;; Hardware stack levels used:    1
 17505 ;; Hardware stack levels required when called:    8
 17506 ;; This function calls:
 17507 ;;		_ENC424J600_readControlRegisterUnbanked
 17508 ;;		_ENC424J600_readPHYRegister
 17509 ;; This function is called by:
 17510 ;;		_handleStackBackgroundTasks
 17511 ;; This function uses a non-reentrant model
 17512 ;;
 17513                           
 17514                           	psect	text68
 17515  003B6C                     __ptext68:
 17516                           	opt stack 0
 17517  003B6C                     _ethernetController_updateLinkStatus:
 17518                           	opt stack 21
 17519                           
 17520                           ;ENC424J600.c: 407: uint8_t temp, temp16;
 17521                           ;ENC424J600.c: 408: ENC424J600_readControlRegisterUnbanked(0x1B, &temp);
 17522                           
 17523                           ;incstack = 0
 17524  003B6C  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 17525  003B6E  0100               	movlb	0	; () banked
 17526  003B70  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17527  003B72  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 17528  003B74  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17529  003B76  0E1B               	movlw	27
 17530  003B78  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17531                           
 17532                           ;ENC424J600.c: 409: if (temp & 0x01) {
 17533  003B7C  0100               	movlb	0	; () banked
 17534  003B7E  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 17535  003B80  D006               	goto	l195
 17536                           
 17537                           ; BSR set to: 0
 17538                           ;ENC424J600.c: 410: state->link = LINK_ESTABLISHED;
 17539  003B82  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 17540  003B86  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 17541  003B8A  0E01               	movlw	1
 17542  003B8C  D005               	goto	L3
 17543  003B8E                     l195:
 17544                           
 17545                           ; BSR set to: 0
 17546                           ;ENC424J600.c: 412: state->link = NO_LINK;
 17547                           
 17548                           ; BSR set to: 0
 17549  003B8E  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 17550  003B92  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 17551  003B96  0E00               	movlw	0
 17552  003B98                     L3:
 17553  003B98  6EDF               	movwf	indf2,c
 17554                           
 17555                           ; BSR set to: 0
 17556                           ;ENC424J600.c: 413: }
 17557                           ;ENC424J600.c: 415: ENC424J600_readPHYRegister(0x1F, &temp16);
 17558                           
 17559                           ; BSR set to: 0
 17560  003B9A  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 17561  003B9C  6F6E               	movwf	ENC424J600_readPHYRegister@data& (0+255),b
 17562  003B9E  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 17563  003BA0  6F6F               	movwf	(ENC424J600_readPHYRegister@data+1)& (0+255),b
 17564  003BA2  0E1F               	movlw	31
 17565  003BA4  EC8F  F017         	call	_ENC424J600_readPHYRegister
 17566                           
 17567                           ;ENC424J600.c: 417: if (temp16 & (1 << 3)) {
 17568  003BA8  0100               	movlb	0	; () banked
 17569  003BAA  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 17570  003BAC  D008               	goto	l197
 17571                           
 17572                           ; BSR set to: 0
 17573                           ;ENC424J600.c: 418: state->speed = HUNDRED_MBIT;
 17574  003BAE  EE20 F001          	lfsr	2,1
 17575  003BB2  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 17576  003BB4  26D9               	addwf	fsr2l,f,c
 17577  003BB6  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 17578  003BB8  22DA               	addwfc	fsr2h,f,c
 17579  003BBA  0E01               	movlw	1
 17580  003BBC  D007               	goto	L4
 17581  003BBE                     l197:
 17582                           
 17583                           ; BSR set to: 0
 17584                           ;ENC424J600.c: 420: state->speed = TEN_MBIT;
 17585                           
 17586                           ; BSR set to: 0
 17587  003BBE  EE20 F001          	lfsr	2,1
 17588  003BC2  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 17589  003BC4  26D9               	addwf	fsr2l,f,c
 17590  003BC6  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 17591  003BC8  22DA               	addwfc	fsr2h,f,c
 17592  003BCA  0E00               	movlw	0
 17593  003BCC                     L4:
 17594  003BCC  6EDF               	movwf	indf2,c
 17595                           
 17596                           ; BSR set to: 0
 17597                           ;ENC424J600.c: 421: }
 17598                           ;ENC424J600.c: 423: if (temp16 & (1 << 4)) {
 17599                           
 17600                           ; BSR set to: 0
 17601  003BCE  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 17602  003BD0  D009               	goto	l199
 17603                           
 17604                           ; BSR set to: 0
 17605                           ;ENC424J600.c: 424: state->duplex = FULL_DUPLEX;
 17606  003BD2  EE20 F002          	lfsr	2,2
 17607  003BD6  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 17608  003BD8  26D9               	addwf	fsr2l,f,c
 17609  003BDA  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 17610  003BDC  22DA               	addwfc	fsr2h,f,c
 17611  003BDE  0E01               	movlw	1
 17612  003BE0  6EDF               	movwf	indf2,c
 17613                           
 17614                           ;ENC424J600.c: 425: } else {
 17615  003BE2  0012               	return	
 17616  003BE4                     l199:
 17617                           
 17618                           ; BSR set to: 0
 17619                           ;ENC424J600.c: 426: state->duplex = HALF_DUPLEX;
 17620                           
 17621                           ; BSR set to: 0
 17622  003BE4  EE20 F002          	lfsr	2,2
 17623  003BE8  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 17624  003BEA  26D9               	addwf	fsr2l,f,c
 17625  003BEC  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 17626  003BEE  22DA               	addwfc	fsr2h,f,c
 17627  003BF0  0E00               	movlw	0
 17628  003BF2  6EDF               	movwf	indf2,c
 17629  003BF4  0012               	return	
 17630  003BF6                     __end_of_ethernetController_updateLinkStatus:
 17631                           	opt stack 0
 17632                           tblptru	equ	0xFF8
 17633                           tblptrh	equ	0xFF7
 17634                           tblptrl	equ	0xFF6
 17635                           tablat	equ	0xFF5
 17636                           prodh	equ	0xFF4
 17637                           prodl	equ	0xFF3
 17638                           intcon	equ	0xFF2
 17639                           intcon3	equ	0xFF0
 17640                           indf0	equ	0xFEF
 17641                           postinc0	equ	0xFEE
 17642                           plusw0	equ	0xFEB
 17643                           fsr0h	equ	0xFEA
 17644                           fsr0l	equ	0xFE9
 17645                           wreg	equ	0xFE8
 17646                           indf1	equ	0xFE7
 17647                           postinc1	equ	0xFE6
 17648                           postdec1	equ	0xFE5
 17649                           plusw1	equ	0xFE3
 17650                           fsr1h	equ	0xFE2
 17651                           fsr1l	equ	0xFE1
 17652                           indf2	equ	0xFDF
 17653                           postinc2	equ	0xFDE
 17654                           postdec2	equ	0xFDD
 17655                           plusw2	equ	0xFDB
 17656                           fsr2h	equ	0xFDA
 17657                           fsr2l	equ	0xFD9
 17658                           status	equ	0xFD8
 17659                           
 17660 ;; *************** function _ENC424J600_readPHYRegister *****************
 17661 ;; Defined at:
 17662 ;;		line 573 in file "src/enc424j600/ENC424J600.c"
 17663 ;; Parameters:    Size  Location     Type
 17664 ;;  addr            1    wreg     unsigned char 
 17665 ;;  data            2   14[BANK0 ] PTR unsigned int 
 17666 ;;		 -> ethernetController_updateLinkStatus@temp16(1), 
 17667 ;; Auto vars:     Size  Location     Type
 17668 ;;  addr            1   22[BANK0 ] unsigned char 
 17669 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 17670 ;;  temp            1   31[BANK0 ] unsigned char 
 17671 ;;  highByte        1   30[BANK0 ] unsigned char 
 17672 ;;  lowByte         1   29[BANK0 ] unsigned char 
 17673 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 17674 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 17675 ;; Return value:  Size  Location     Type
 17676 ;;                  1    wreg      void 
 17677 ;; Registers used:
 17678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17679 ;; Tracked objects:
 17680 ;;		On entry : 0/0
 17681 ;;		On exit  : 0/0
 17682 ;;		Unchanged: 0/0
 17683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17684 ;;      Params:         0       2       0       0       0       0       0       0       0
 17685 ;;      Locals:         0      10       0       0       0       0       0       0       0
 17686 ;;      Temps:          0       6       0       0       0       0       0       0       0
 17687 ;;      Totals:         0      18       0       0       0       0       0       0       0
 17688 ;;Total ram usage:       18 bytes
 17689 ;; Hardware stack levels used:    1
 17690 ;; Hardware stack levels required when called:    7
 17691 ;; This function calls:
 17692 ;;		_ENC424J600_readControlRegisterUnbanked
 17693 ;;		_ENC424J600_writeControlRegisterUnbanked
 17694 ;; This function is called by:
 17695 ;;		_ethernetController_updateLinkStatus
 17696 ;; This function uses a non-reentrant model
 17697 ;;
 17698                           
 17699                           	psect	text69
 17700  002F1E                     __ptext69:
 17701                           	opt stack 0
 17702  002F1E                     _ENC424J600_readPHYRegister:
 17703                           	opt stack 21
 17704                           
 17705                           ; BSR set to: 0
 17706                           ;incstack = 0
 17707                           ;ENC424J600_readPHYRegister@addr stored from wreg
 17708  002F1E  0100               	movlb	0	; () banked
 17709  002F20  6F76               	movwf	ENC424J600_readPHYRegister@addr& (0+255),b
 17710                           
 17711                           ;ENC424J600.c: 575: uint8_t PHYaddress = addr & 0x1F;
 17712  002F22  0100               	movlb	0	; () banked
 17713  002F24  5176               	movf	ENC424J600_readPHYRegister@addr& (0+255),w,b
 17714  002F26  0B1F               	andlw	31
 17715  002F28  6F77               	movwf	ENC424J600_readPHYRegister@PHYaddress& (0+255),b
 17716                           
 17717                           ; BSR set to: 0
 17718                           ;ENC424J600.c: 576: uint8_t unusedBits = 0x01;
 17719  002F2A  0E01               	movlw	1
 17720  002F2C  6F78               	movwf	ENC424J600_readPHYRegister@unusedBits& (0+255),b
 17721                           
 17722                           ; BSR set to: 0
 17723                           ;ENC424J600.c: 577: uint8_t temp;
 17724                           ;ENC424J600.c: 578: uint8_t lowByte;
 17725                           ;ENC424J600.c: 579: uint8_t highByte;
 17726                           ;ENC424J600.c: 580: uint32_t timeoutCounter = 0;
 17727  002F2E  0E00               	movlw	0
 17728  002F30  6F79               	movwf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),b
 17729  002F32  0E00               	movlw	0
 17730  002F34  6F7A               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),b
 17731  002F36  0E00               	movlw	0
 17732  002F38  6F7B               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),b
 17733  002F3A  0E00               	movlw	0
 17734  002F3C  6F7C               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),b
 17735                           
 17736                           ; BSR set to: 0
 17737                           ;ENC424J600.c: 582: ENC424J600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 17738  002F3E  0E77               	movlw	low ENC424J600_readPHYRegister@PHYaddress
 17739  002F40  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17740  002F42  0E00               	movlw	high ENC424J600_readPHYRegister@PHYaddress
 17741  002F44  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17742  002F46  0E54               	movlw	84
 17743  002F48  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 17744                           
 17745                           ;ENC424J600.c: 583: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 17746  002F4C  0E78               	movlw	low ENC424J600_readPHYRegister@unusedBits
 17747  002F4E  0100               	movlb	0	; () banked
 17748  002F50  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17749  002F52  0E00               	movlw	high ENC424J600_readPHYRegister@unusedBits
 17750  002F54  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17751  002F56  0E55               	movlw	85
 17752  002F58  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 17753                           
 17754                           ;ENC424J600.c: 586: ENC424J600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 17755  002F5C  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 17756  002F5E  0100               	movlb	0	; () banked
 17757  002F60  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17758  002F62  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 17759  002F64  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17760  002F66  0E52               	movlw	82
 17761  002F68  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17762                           
 17763                           ;ENC424J600.c: 587: temp |= 0x01;
 17764  002F6C  0100               	movlb	0	; () banked
 17765  002F6E  817F               	bsf	ENC424J600_readPHYRegister@temp& (0+255),0,b
 17766                           
 17767                           ; BSR set to: 0
 17768                           ;ENC424J600.c: 588: ENC424J600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 17769  002F70  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 17770  002F72  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17771  002F74  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 17772  002F76  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17773  002F78  0E52               	movlw	82
 17774  002F7A  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 17775                           
 17776                           ;ENC424J600.c: 590: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 17777  002F7E  0E45               	movlw	69
 17778  002F80                     u11637:
 17779  002F80  2EE8               	decfsz	wreg,f,c
 17780  002F82  D7FE               	bra	u11637
 17781  002F84  F000               	nop	
 17782  002F86                     
 17783                           ;ENC424J600.c: 593: ENC424J600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 17784  002F86  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 17785  002F88  0100               	movlb	0	; () banked
 17786  002F8A  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17787  002F8C  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 17788  002F8E  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17789  002F90  0E6A               	movlw	106
 17790  002F92  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17791                           
 17792                           ;ENC424J600.c: 594: timeoutCounter++;
 17793  002F96  0E01               	movlw	1
 17794  002F98  0100               	movlb	0	; () banked
 17795  002F9A  2779               	addwf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),f,b
 17796  002F9C  0E00               	movlw	0
 17797  002F9E  237A               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 17798  002FA0  237B               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 17799  002FA2  237C               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 17800                           
 17801                           ; BSR set to: 0
 17802                           ;ENC424J600.c: 595: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 17803  002FA4  A17F               	btfss	ENC424J600_readPHYRegister@temp& (0+255),0,b
 17804  002FA6  D008               	goto	u10580
 17805                           
 17806                           ; BSR set to: 0
 17807  002FA8  517C               	movf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 17808  002FAA  117B               	iorwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 17809  002FAC  E105               	bnz	l8567
 17810  002FAE  2979               	incf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),w,b
 17811  002FB0  0E0F               	movlw	15
 17812  002FB2  597A               	subwfb	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 17813  002FB4  A0D8               	btfss	status,0,c
 17814  002FB6  D7E7               	goto	l258
 17815  002FB8                     u10580:
 17816  002FB8                     l8567:
 17817                           
 17818                           ; BSR set to: 0
 17819                           ;ENC424J600.c: 596: if (timeoutCounter >= 0xfff)
 17820  002FB8  517C               	movf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 17821  002FBA  117B               	iorwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 17822  002FBC  E140               	bnz	l263
 17823  002FBE  2979               	incf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),w,b
 17824  002FC0  0E0F               	movlw	15
 17825  002FC2  597A               	subwfb	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 17826  002FC4  B0D8               	btfsc	status,0,c
 17827  002FC6  0012               	return	
 17828                           
 17829                           ; BSR set to: 0
 17830                           ;ENC424J600.c: 600: ENC424J600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 17831                           
 17832                           ; BSR set to: 0
 17833                           
 17834                           ; BSR set to: 0
 17835                           ;ENC424J600.c: 597: return;
 17836  002FC8  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 17837  002FCA  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17838  002FCC  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 17839  002FCE  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17840  002FD0  0E52               	movlw	82
 17841  002FD2  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17842                           
 17843                           ;ENC424J600.c: 601: temp &= ~0x01;
 17844  002FD6  0100               	movlb	0	; () banked
 17845  002FD8  917F               	bcf	ENC424J600_readPHYRegister@temp& (0+255),0,b
 17846                           
 17847                           ; BSR set to: 0
 17848                           ;ENC424J600.c: 602: ENC424J600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 17849  002FDA  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 17850  002FDC  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17851  002FDE  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 17852  002FE0  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17853  002FE2  0E52               	movlw	82
 17854  002FE4  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 17855                           
 17856                           ;ENC424J600.c: 605: ENC424J600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 17857  002FE8  0E7D               	movlw	low ENC424J600_readPHYRegister@lowByte
 17858  002FEA  0100               	movlb	0	; () banked
 17859  002FEC  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17860  002FEE  0E00               	movlw	high ENC424J600_readPHYRegister@lowByte
 17861  002FF0  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17862  002FF2  0E68               	movlw	104
 17863  002FF4  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17864                           
 17865                           ;ENC424J600.c: 606: ENC424J600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 17866  002FF8  0E7E               	movlw	low ENC424J600_readPHYRegister@highByte
 17867  002FFA  0100               	movlb	0	; () banked
 17868  002FFC  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17869  002FFE  0E00               	movlw	high ENC424J600_readPHYRegister@highByte
 17870  003000  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17871  003002  0E69               	movlw	105
 17872  003004  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17873                           
 17874                           ;ENC424J600.c: 607: *data = (lowByte | ((highByte << 8)&0xff00));
 17875  003008  0E00               	movlw	0
 17876  00300A  0100               	movlb	0	; () banked
 17877  00300C  6F70               	movwf	??_ENC424J600_readPHYRegister& (0+255),b
 17878  00300E  0EFF               	movlw	255
 17879  003010  6F71               	movwf	(??_ENC424J600_readPHYRegister+1)& (0+255),b
 17880  003012  517E               	movf	ENC424J600_readPHYRegister@highByte& (0+255),w,b
 17881  003014  6F73               	movwf	(??_ENC424J600_readPHYRegister+3)& (0+255),b
 17882  003016  6B72               	clrf	(??_ENC424J600_readPHYRegister+2)& (0+255),b
 17883  003018  5170               	movf	??_ENC424J600_readPHYRegister& (0+255),w,b
 17884  00301A  1772               	andwf	(??_ENC424J600_readPHYRegister+2)& (0+255),f,b
 17885  00301C  5171               	movf	(??_ENC424J600_readPHYRegister+1)& (0+255),w,b
 17886  00301E  1773               	andwf	(??_ENC424J600_readPHYRegister+3)& (0+255),f,b
 17887  003020  517D               	movf	ENC424J600_readPHYRegister@lowByte& (0+255),w,b
 17888  003022  6F74               	movwf	(??_ENC424J600_readPHYRegister+4)& (0+255),b
 17889  003024  6B75               	clrf	(??_ENC424J600_readPHYRegister+5)& (0+255),b
 17890  003026  5172               	movf	(??_ENC424J600_readPHYRegister+2)& (0+255),w,b
 17891  003028  1374               	iorwf	(??_ENC424J600_readPHYRegister+4)& (0+255),f,b
 17892  00302A  5173               	movf	(??_ENC424J600_readPHYRegister+3)& (0+255),w,b
 17893  00302C  1375               	iorwf	(??_ENC424J600_readPHYRegister+5)& (0+255),f,b
 17894  00302E  C06E  FFD9         	movff	ENC424J600_readPHYRegister@data,fsr2l
 17895  003032  C06F  FFDA         	movff	ENC424J600_readPHYRegister@data+1,fsr2h
 17896  003036  C074  FFDE         	movff	??_ENC424J600_readPHYRegister+4,postinc2
 17897  00303A  C075  FFDD         	movff	??_ENC424J600_readPHYRegister+5,postdec2
 17898  00303E                     l263:
 17899                           
 17900                           ; BSR set to: 0
 17901  00303E  0012               	return		;funcret
 17902  003040                     __end_of_ENC424J600_readPHYRegister:
 17903                           	opt stack 0
 17904                           tblptru	equ	0xFF8
 17905                           tblptrh	equ	0xFF7
 17906                           tblptrl	equ	0xFF6
 17907                           tablat	equ	0xFF5
 17908                           prodh	equ	0xFF4
 17909                           prodl	equ	0xFF3
 17910                           intcon	equ	0xFF2
 17911                           intcon3	equ	0xFF0
 17912                           indf0	equ	0xFEF
 17913                           postinc0	equ	0xFEE
 17914                           plusw0	equ	0xFEB
 17915                           fsr0h	equ	0xFEA
 17916                           fsr0l	equ	0xFE9
 17917                           wreg	equ	0xFE8
 17918                           indf1	equ	0xFE7
 17919                           postinc1	equ	0xFE6
 17920                           postdec1	equ	0xFE5
 17921                           plusw1	equ	0xFE3
 17922                           fsr1h	equ	0xFE2
 17923                           fsr1l	equ	0xFE1
 17924                           indf2	equ	0xFDF
 17925                           postinc2	equ	0xFDE
 17926                           postdec2	equ	0xFDD
 17927                           plusw2	equ	0xFDB
 17928                           fsr2h	equ	0xFDA
 17929                           fsr2l	equ	0xFD9
 17930                           status	equ	0xFD8
 17931                           
 17932 ;; *************** function _ethernetController_setLEDConfig *****************
 17933 ;; Defined at:
 17934 ;;		line 455 in file "src/enc424j600/ENC424J600.c"
 17935 ;; Parameters:    Size  Location     Type
 17936 ;;  LED             1    wreg     enum E5568
 17937 ;;  conf            1   14[BANK0 ] enum E5572
 17938 ;; Auto vars:     Size  Location     Type
 17939 ;;  LED             1   15[BANK0 ] enum E5568
 17940 ;;  data            1   16[BANK0 ] unsigned char 
 17941 ;; Return value:  Size  Location     Type
 17942 ;;                  1    wreg      void 
 17943 ;; Registers used:
 17944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17945 ;; Tracked objects:
 17946 ;;		On entry : 0/0
 17947 ;;		On exit  : 0/0
 17948 ;;		Unchanged: 0/0
 17949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17950 ;;      Params:         0       1       0       0       0       0       0       0       0
 17951 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17952 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17953 ;;      Totals:         0       3       0       0       0       0       0       0       0
 17954 ;;Total ram usage:        3 bytes
 17955 ;; Hardware stack levels used:    1
 17956 ;; Hardware stack levels required when called:    7
 17957 ;; This function calls:
 17958 ;;		_ENC424J600_readControlRegisterUnbanked
 17959 ;;		_ENC424J600_writeControlRegisterUnbanked
 17960 ;; This function is called by:
 17961 ;;		_handleStackBackgroundTasks
 17962 ;;		_main
 17963 ;; This function uses a non-reentrant model
 17964 ;;
 17965                           
 17966                           	psect	text70
 17967  003ADE                     __ptext70:
 17968                           	opt stack 0
 17969  003ADE                     _ethernetController_setLEDConfig:
 17970                           	opt stack 22
 17971                           
 17972                           ; BSR set to: 0
 17973                           ;incstack = 0
 17974                           ;ethernetController_setLEDConfig@LED stored from wreg
 17975  003ADE  0100               	movlb	0	; () banked
 17976  003AE0  6F6F               	movwf	ethernetController_setLEDConfig@LED& (0+255),b
 17977                           
 17978                           ;ENC424J600.c: 456: uint8_t data;
 17979                           ;ENC424J600.c: 457: ENC424J600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 17980  003AE2  0E70               	movlw	low ethernetController_setLEDConfig@data
 17981  003AE4  0100               	movlb	0	; () banked
 17982  003AE6  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17983  003AE8  0E00               	movlw	high ethernetController_setLEDConfig@data
 17984  003AEA  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17985  003AEC  0E75               	movlw	117
 17986  003AEE  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17987                           
 17988                           ;ENC424J600.c: 458: if (LED == LEDB) {
 17989  003AF2  0100               	movlb	0	; () banked
 17990  003AF4  056F               	decf	ethernetController_setLEDConfig@LED& (0+255),w,b
 17991  003AF6  B4D8               	btfsc	status,2,c
 17992  003AF8  D00B               	goto	l205
 17993  003AFA  D015               	goto	l204
 17994  003AFC                     
 17995                           ; BSR set to: 0
 17996                           ;ENC424J600.c: 463: data &= ~0x0f;
 17997                           
 17998                           ; BSR set to: 0
 17999                           
 18000                           ;ENC424J600.c: 462: case LED_OFF:
 18001                           
 18002                           ; BSR set to: 0
 18003  003AFC  0EF0               	movlw	240
 18004  003AFE  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 18005                           
 18006                           ; BSR set to: 0
 18007                           ;ENC424J600.c: 464: data |= 0x01;
 18008  003B00  8170               	bsf	ethernetController_setLEDConfig@data& (0+255),0,b
 18009                           
 18010                           ;ENC424J600.c: 465: break;
 18011  003B02  D02C               	goto	l216
 18012  003B04                     
 18013                           ; BSR set to: 0
 18014                           ;ENC424J600.c: 467: data &= ~0x0f;
 18015                           
 18016                           ; BSR set to: 0
 18017  003B04  0EF0               	movlw	240
 18018  003B06  D018               	goto	L5
 18019  003B08                     
 18020                           ; BSR set to: 0
 18021                           ;ENC424J600.c: 470: data &= ~0x0f;
 18022                           
 18023                           ; BSR set to: 0
 18024  003B08  0EF0               	movlw	240
 18025  003B0A  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 18026                           
 18027                           ;ENC424J600.c: 471: data |= 0x06;
 18028  003B0C  0E06               	movlw	6
 18029  003B0E  D019               	goto	L6
 18030  003B10                     l205:
 18031                           
 18032                           ; BSR set to: 0
 18033                           
 18034                           ; BSR set to: 0
 18035  003B10  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 18036                           
 18037                           ; Switch size 1, requested type "space"
 18038                           ; Number of cases is 3, Range of values is 0 to 2
 18039                           ; switch strategies available:
 18040                           ; Name         Instructions Cycles
 18041                           ; simple_byte           10     6 (average)
 18042                           ;	Chosen strategy is simple_byte
 18043  003B12  0A00               	xorlw	0	; case 0
 18044  003B14  B4D8               	btfsc	status,2,c
 18045  003B16  D7F6               	goto	l209
 18046  003B18  0A01               	xorlw	1	; case 1
 18047  003B1A  B4D8               	btfsc	status,2,c
 18048  003B1C  D7EF               	goto	l206
 18049  003B1E  0A03               	xorlw	3	; case 2
 18050  003B20  B4D8               	btfsc	status,2,c
 18051  003B22  D7F2               	goto	l210
 18052  003B24  D7EB               	goto	l206
 18053  003B26                     l204:
 18054                           
 18055                           ; BSR set to: 0
 18056                           
 18057                           ; BSR set to: 0
 18058  003B26  516F               	movf	ethernetController_setLEDConfig@LED& (0+255),w,b
 18059  003B28  B4D8               	btfsc	status,2,c
 18060  003B2A  D00D               	goto	l213
 18061  003B2C  D017               	goto	l216
 18062  003B2E                     
 18063                           ; BSR set to: 0
 18064                           ;ENC424J600.c: 478: data &= ~(0x0f << 4);
 18065                           
 18066                           ; BSR set to: 0
 18067                           
 18068                           ;ENC424J600.c: 477: case LED_OFF:
 18069                           
 18070                           ; BSR set to: 0
 18071  003B2E  0E0F               	movlw	15
 18072  003B30  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 18073                           
 18074                           ; BSR set to: 0
 18075                           ;ENC424J600.c: 479: data |= (0x01 << 4);
 18076  003B32  8970               	bsf	ethernetController_setLEDConfig@data& (0+255),4,b
 18077                           
 18078                           ;ENC424J600.c: 480: break;
 18079  003B34  D013               	goto	l216
 18080  003B36                     
 18081                           ; BSR set to: 0
 18082                           ;ENC424J600.c: 482: data &= ~(0x0f << 4);
 18083                           
 18084                           ; BSR set to: 0
 18085  003B36  0E0F               	movlw	15
 18086  003B38                     L5:
 18087  003B38  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 18088                           
 18089                           ;ENC424J600.c: 483: break;
 18090  003B3A  D010               	goto	l216
 18091  003B3C                     
 18092                           ; BSR set to: 0
 18093                           ;ENC424J600.c: 485: data &= ~(0x0f << 4);
 18094                           
 18095                           ; BSR set to: 0
 18096  003B3C  0E0F               	movlw	15
 18097  003B3E  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 18098                           
 18099                           ;ENC424J600.c: 486: data |= (0x06 << 4);
 18100  003B40  0E60               	movlw	96
 18101  003B42                     L6:
 18102  003B42  1370               	iorwf	ethernetController_setLEDConfig@data& (0+255),f,b
 18103                           
 18104                           ; BSR set to: 0
 18105                           ;ENC424J600.c: 488: }
 18106                           
 18107                           ;ENC424J600.c: 487: break;
 18108  003B44  D00B               	goto	l216
 18109  003B46                     l213:
 18110                           
 18111                           ; BSR set to: 0
 18112                           
 18113                           ; BSR set to: 0
 18114  003B46  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 18115                           
 18116                           ; Switch size 1, requested type "space"
 18117                           ; Number of cases is 3, Range of values is 0 to 2
 18118                           ; switch strategies available:
 18119                           ; Name         Instructions Cycles
 18120                           ; simple_byte           10     6 (average)
 18121                           ;	Chosen strategy is simple_byte
 18122  003B48  0A00               	xorlw	0	; case 0
 18123  003B4A  B4D8               	btfsc	status,2,c
 18124  003B4C  D7F4               	goto	l217
 18125  003B4E  0A01               	xorlw	1	; case 1
 18126  003B50  B4D8               	btfsc	status,2,c
 18127  003B52  D7ED               	goto	l214
 18128  003B54  0A03               	xorlw	3	; case 2
 18129  003B56  B4D8               	btfsc	status,2,c
 18130  003B58  D7F1               	goto	l218
 18131  003B5A  D7E9               	goto	l214
 18132  003B5C                     l216:
 18133                           
 18134                           ; BSR set to: 0
 18135                           ;ENC424J600.c: 489: }
 18136                           ;ENC424J600.c: 490: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 18137                           
 18138                           ; BSR set to: 0
 18139                           
 18140                           ; BSR set to: 0
 18141                           
 18142                           ; BSR set to: 0
 18143  003B5C  0E70               	movlw	low ethernetController_setLEDConfig@data
 18144  003B5E  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18145  003B60  0E00               	movlw	high ethernetController_setLEDConfig@data
 18146  003B62  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18147  003B64  0E75               	movlw	117
 18148  003B66  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 18149  003B6A  0012               	return		;funcret
 18150  003B6C                     __end_of_ethernetController_setLEDConfig:
 18151                           	opt stack 0
 18152                           tblptru	equ	0xFF8
 18153                           tblptrh	equ	0xFF7
 18154                           tblptrl	equ	0xFF6
 18155                           tablat	equ	0xFF5
 18156                           prodh	equ	0xFF4
 18157                           prodl	equ	0xFF3
 18158                           intcon	equ	0xFF2
 18159                           intcon3	equ	0xFF0
 18160                           indf0	equ	0xFEF
 18161                           postinc0	equ	0xFEE
 18162                           plusw0	equ	0xFEB
 18163                           fsr0h	equ	0xFEA
 18164                           fsr0l	equ	0xFE9
 18165                           wreg	equ	0xFE8
 18166                           indf1	equ	0xFE7
 18167                           postinc1	equ	0xFE6
 18168                           postdec1	equ	0xFE5
 18169                           plusw1	equ	0xFE3
 18170                           fsr1h	equ	0xFE2
 18171                           fsr1l	equ	0xFE1
 18172                           indf2	equ	0xFDF
 18173                           postinc2	equ	0xFDE
 18174                           postdec2	equ	0xFDD
 18175                           plusw2	equ	0xFDB
 18176                           fsr2h	equ	0xFDA
 18177                           fsr2l	equ	0xFD9
 18178                           status	equ	0xFD8
 18179                           
 18180 ;; *************** function _ethernetController_pollInterruptFlags *****************
 18181 ;; Defined at:
 18182 ;;		line 311 in file "src/enc424j600/ENC424J600.c"
 18183 ;; Parameters:    Size  Location     Type
 18184 ;;		None
 18185 ;; Auto vars:     Size  Location     Type
 18186 ;;  reg             2   29[BANK0 ] unsigned int 
 18187 ;;  flags           2   27[BANK0 ] struct interruptFlags
 18188 ;; Return value:  Size  Location     Type
 18189 ;;                  2   24[BANK0 ] struct interruptFlags
 18190 ;; Registers used:
 18191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18192 ;; Tracked objects:
 18193 ;;		On entry : 0/0
 18194 ;;		On exit  : 0/0
 18195 ;;		Unchanged: 0/0
 18196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18197 ;;      Params:         0       2       0       0       0       0       0       0       0
 18198 ;;      Locals:         0       4       0       0       0       0       0       0       0
 18199 ;;      Temps:          0       1       0       0       0       0       0       0       0
 18200 ;;      Totals:         0       7       0       0       0       0       0       0       0
 18201 ;;Total ram usage:        7 bytes
 18202 ;; Hardware stack levels used:    1
 18203 ;; Hardware stack levels required when called:    8
 18204 ;; This function calls:
 18205 ;;		_ENC424J600_getInterruptFlags
 18206 ;; This function is called by:
 18207 ;;		_handleStackBackgroundTasks
 18208 ;; This function uses a non-reentrant model
 18209 ;;
 18210                           
 18211                           	psect	text71
 18212  002DF8                     __ptext71:
 18213                           	opt stack 0
 18214  002DF8                     _ethernetController_pollInterruptFlags:
 18215                           	opt stack 21
 18216                           
 18217                           ;ENC424J600.c: 312: interruptFlags_t flags;
 18218                           ;ENC424J600.c: 313: uint16_t reg = ENC424J600_getInterruptFlags();
 18219                           
 18220                           ;incstack = 0
 18221  002DF8  EC00  F023         	call	_ENC424J600_getInterruptFlags	;wreg free
 18222  002DFC  C06E  F07D         	movff	?_ENC424J600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 18223  002E00  C06F  F07E         	movff	?_ENC424J600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 18224                           
 18225                           ;ENC424J600.c: 314: flags.MODEXIF = (reg & (1 << 14)) != 0 ? 1 : 0;
 18226  002E04  0100               	movlb	0	; () banked
 18227  002E06  AD7E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 18228  002E08  D003               	goto	u10800
 18229  002E0A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18230  002E0C  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18231  002E0E  D002               	goto	u10818
 18232  002E10                     u10800:
 18233  002E10  0100               	movlb	0	; () banked
 18234  002E12  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18235  002E14                     u10818:
 18236  002E14  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18237  002E16  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18238  002E18  0BFE               	andlw	-2
 18239  002E1A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18240  002E1C  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18241                           
 18242                           ; BSR set to: 0
 18243                           ;ENC424J600.c: 315: flags.HASHIF = (reg & (1 << 13)) != 0 ? 1 : 0;
 18244  002E1E  AB7E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 18245  002E20  D003               	goto	u10820
 18246  002E22  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18247  002E24  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18248  002E26  D002               	goto	u10838
 18249  002E28                     u10820:
 18250  002E28  0100               	movlb	0	; () banked
 18251  002E2A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18252  002E2C                     u10838:
 18253  002E2C  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18254  002E2E  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18255  002E30  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18256  002E32  0BFD               	andlw	-3
 18257  002E34  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18258  002E36  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18259                           
 18260                           ; BSR set to: 0
 18261                           ;ENC424J600.c: 316: flags.AESIF = (reg & (1 << 12)) != 0 ? 1 : 0;
 18262  002E38  A97E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 18263  002E3A  D003               	goto	u10840
 18264  002E3C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18265  002E3E  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18266  002E40  D002               	goto	u10858
 18267  002E42                     u10840:
 18268  002E42  0100               	movlb	0	; () banked
 18269  002E44  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18270  002E46                     u10858:
 18271  002E46  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18272  002E48  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18273  002E4A  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18274  002E4C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18275  002E4E  0BFB               	andlw	-5
 18276  002E50  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18277  002E52  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18278                           
 18279                           ; BSR set to: 0
 18280                           ;ENC424J600.c: 317: flags.LINKIF = (reg & (1 << 11)) != 0 ? 1 : 0;
 18281  002E54  A77E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 18282  002E56  D003               	goto	u10860
 18283  002E58  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18284  002E5A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18285  002E5C  D002               	goto	u10878
 18286  002E5E                     u10860:
 18287  002E5E  0100               	movlb	0	; () banked
 18288  002E60  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18289  002E62                     u10878:
 18290  002E62  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18291  002E64  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18292  002E66  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18293  002E68  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18294  002E6A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18295  002E6C  0BF7               	andlw	-9
 18296  002E6E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18297  002E70  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18298                           
 18299                           ; BSR set to: 0
 18300                           ;ENC424J600.c: 319: flags.PKTIF = (reg & (1 << 6)) != 0 ? 1 : 0;
 18301  002E72  AD7D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 18302  002E74  D003               	goto	u10880
 18303  002E76  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18304  002E78  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18305  002E7A  D002               	goto	u10898
 18306  002E7C                     u10880:
 18307  002E7C  0100               	movlb	0	; () banked
 18308  002E7E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18309  002E80                     u10898:
 18310  002E80  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18311  002E82  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18312  002E84  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18313  002E86  0BEF               	andlw	-17
 18314  002E88  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18315  002E8A  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18316                           
 18317                           ; BSR set to: 0
 18318                           ;ENC424J600.c: 320: flags.DMAIF = (reg & (1 << 5)) != 0 ? 1 : 0;
 18319  002E8C  AB7D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 18320  002E8E  D003               	goto	u10900
 18321  002E90  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18322  002E92  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18323  002E94  D002               	goto	u10918
 18324  002E96                     u10900:
 18325  002E96  0100               	movlb	0	; () banked
 18326  002E98  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18327  002E9A                     u10918:
 18328  002E9A  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18329  002E9C  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18330  002E9E  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18331  002EA0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18332  002EA2  0BDF               	andlw	-33
 18333  002EA4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18334  002EA6  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18335                           
 18336                           ; BSR set to: 0
 18337                           ;ENC424J600.c: 322: flags.TXIF = (reg & (1 << 3)) != 0 ? 1 : 0;
 18338  002EA8  A77D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),3,b
 18339  002EAA  D003               	goto	u10920
 18340  002EAC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18341  002EAE  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18342  002EB0  D002               	goto	u10938
 18343  002EB2                     u10920:
 18344  002EB2  0100               	movlb	0	; () banked
 18345  002EB4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18346  002EB6                     u10938:
 18347  002EB6  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18348  002EB8  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18349  002EBA  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18350  002EBC  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18351  002EBE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18352  002EC0  0BBF               	andlw	-65
 18353  002EC2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18354  002EC4  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18355                           
 18356                           ; BSR set to: 0
 18357                           ;ENC424J600.c: 323: flags.TXABTIF = (reg & (1 << 2)) != 0 ? 1 : 0;
 18358  002EC6  A57D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 18359  002EC8  D003               	goto	u10940
 18360  002ECA  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18361  002ECC  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18362  002ECE  D002               	goto	u10958
 18363  002ED0                     u10940:
 18364  002ED0  0100               	movlb	0	; () banked
 18365  002ED2  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18366  002ED4                     u10958:
 18367  002ED4  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18368  002ED6  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18369  002ED8  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18370  002EDA  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18371  002EDC  0B7F               	andlw	-129
 18372  002EDE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18373  002EE0  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18374                           
 18375                           ; BSR set to: 0
 18376                           ;ENC424J600.c: 324: flags.RXABTIF = (reg & (1 << 1)) != 0 ? 1 : 0;
 18377  002EE2  A37D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 18378  002EE4  D003               	goto	u10960
 18379  002EE6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18380  002EE8  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18381  002EEA  D002               	goto	u10978
 18382  002EEC                     u10960:
 18383  002EEC  0100               	movlb	0	; () banked
 18384  002EEE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18385  002EF0                     u10978:
 18386  002EF0  517C               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 18387  002EF2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18388  002EF4  0BFE               	andlw	-2
 18389  002EF6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18390  002EF8  6F7C               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 18391                           
 18392                           ; BSR set to: 0
 18393                           ;ENC424J600.c: 325: flags.PCFULIF = (reg & (1 << 0)) != 0 ? 1 : 0;
 18394  002EFA  A17D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 18395  002EFC  D003               	goto	u10980
 18396  002EFE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18397  002F00  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18398  002F02  D002               	goto	u10998
 18399  002F04                     u10980:
 18400  002F04  0100               	movlb	0	; () banked
 18401  002F06  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18402  002F08                     u10998:
 18403  002F08  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18404  002F0A  517C               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 18405  002F0C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18406  002F0E  0BFD               	andlw	-3
 18407  002F10  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18408  002F12  6F7C               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 18409                           
 18410                           ; BSR set to: 0
 18411                           ;ENC424J600.c: 326: return flags;
 18412  002F14  C07B  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 18413  002F18  C07C  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 18414  002F1C  0012               	return	
 18415  002F1E                     __end_of_ethernetController_pollInterruptFlags:
 18416                           	opt stack 0
 18417                           tblptru	equ	0xFF8
 18418                           tblptrh	equ	0xFF7
 18419                           tblptrl	equ	0xFF6
 18420                           tablat	equ	0xFF5
 18421                           prodh	equ	0xFF4
 18422                           prodl	equ	0xFF3
 18423                           intcon	equ	0xFF2
 18424                           intcon3	equ	0xFF0
 18425                           indf0	equ	0xFEF
 18426                           postinc0	equ	0xFEE
 18427                           plusw0	equ	0xFEB
 18428                           fsr0h	equ	0xFEA
 18429                           fsr0l	equ	0xFE9
 18430                           wreg	equ	0xFE8
 18431                           indf1	equ	0xFE7
 18432                           postinc1	equ	0xFE6
 18433                           postdec1	equ	0xFE5
 18434                           plusw1	equ	0xFE3
 18435                           fsr1h	equ	0xFE2
 18436                           fsr1l	equ	0xFE1
 18437                           indf2	equ	0xFDF
 18438                           postinc2	equ	0xFDE
 18439                           postdec2	equ	0xFDD
 18440                           plusw2	equ	0xFDB
 18441                           fsr2h	equ	0xFDA
 18442                           fsr2l	equ	0xFD9
 18443                           status	equ	0xFD8
 18444                           
 18445 ;; *************** function _ENC424J600_getInterruptFlags *****************
 18446 ;; Defined at:
 18447 ;;		line 731 in file "src/enc424j600/ENC424J600.c"
 18448 ;; Parameters:    Size  Location     Type
 18449 ;;		None
 18450 ;; Auto vars:     Size  Location     Type
 18451 ;;  high            1   23[BANK0 ] unsigned char 
 18452 ;;  low             1   22[BANK0 ] unsigned char 
 18453 ;; Return value:  Size  Location     Type
 18454 ;;                  2   14[BANK0 ] unsigned int 
 18455 ;; Registers used:
 18456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18457 ;; Tracked objects:
 18458 ;;		On entry : 0/0
 18459 ;;		On exit  : 0/0
 18460 ;;		Unchanged: 0/0
 18461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18462 ;;      Params:         0       2       0       0       0       0       0       0       0
 18463 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18464 ;;      Temps:          0       6       0       0       0       0       0       0       0
 18465 ;;      Totals:         0      10       0       0       0       0       0       0       0
 18466 ;;Total ram usage:       10 bytes
 18467 ;; Hardware stack levels used:    1
 18468 ;; Hardware stack levels required when called:    7
 18469 ;; This function calls:
 18470 ;;		_ENC424J600_readControlRegisterUnbanked
 18471 ;; This function is called by:
 18472 ;;		_ethernetController_pollInterruptFlags
 18473 ;; This function uses a non-reentrant model
 18474 ;;
 18475                           
 18476                           	psect	text72
 18477  004600                     __ptext72:
 18478                           	opt stack 0
 18479  004600                     _ENC424J600_getInterruptFlags:
 18480                           	opt stack 21
 18481                           
 18482                           ;ENC424J600.c: 732: uint8_t low, high;
 18483                           ;ENC424J600.c: 733: ENC424J600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 18484                           
 18485                           ; BSR set to: 0
 18486                           ;incstack = 0
 18487  004600  0E77               	movlw	low ENC424J600_getInterruptFlags@high
 18488  004602  0100               	movlb	0	; () banked
 18489  004604  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18490  004606  0E00               	movlw	high ENC424J600_getInterruptFlags@high
 18491  004608  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18492  00460A  0E1D               	movlw	29
 18493  00460C  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 18494                           
 18495                           ;ENC424J600.c: 734: ENC424J600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 18496  004610  0E76               	movlw	low ENC424J600_getInterruptFlags@low
 18497  004612  0100               	movlb	0	; () banked
 18498  004614  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18499  004616  0E00               	movlw	high ENC424J600_getInterruptFlags@low
 18500  004618  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18501  00461A  0E1C               	movlw	28
 18502  00461C  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 18503                           
 18504                           ;ENC424J600.c: 735: return (((uint16_t) low & 0x00ff) | (((uint16_t) high << 8)&0xff00))
      +                          ;
 18505  004620  0E00               	movlw	0
 18506  004622  0100               	movlb	0	; () banked
 18507  004624  6F70               	movwf	??_ENC424J600_getInterruptFlags& (0+255),b
 18508  004626  0EFF               	movlw	255
 18509  004628  6F71               	movwf	(??_ENC424J600_getInterruptFlags+1)& (0+255),b
 18510  00462A  5177               	movf	ENC424J600_getInterruptFlags@high& (0+255),w,b
 18511  00462C  6F73               	movwf	(??_ENC424J600_getInterruptFlags+3)& (0+255),b
 18512  00462E  6B72               	clrf	(??_ENC424J600_getInterruptFlags+2)& (0+255),b
 18513  004630  5170               	movf	??_ENC424J600_getInterruptFlags& (0+255),w,b
 18514  004632  1772               	andwf	(??_ENC424J600_getInterruptFlags+2)& (0+255),f,b
 18515  004634  5171               	movf	(??_ENC424J600_getInterruptFlags+1)& (0+255),w,b
 18516  004636  1773               	andwf	(??_ENC424J600_getInterruptFlags+3)& (0+255),f,b
 18517  004638  5176               	movf	ENC424J600_getInterruptFlags@low& (0+255),w,b
 18518  00463A  6F74               	movwf	(??_ENC424J600_getInterruptFlags+4)& (0+255),b
 18519  00463C  6B75               	clrf	(??_ENC424J600_getInterruptFlags+5)& (0+255),b
 18520  00463E  5172               	movf	(??_ENC424J600_getInterruptFlags+2)& (0+255),w,b
 18521  004640  1174               	iorwf	(??_ENC424J600_getInterruptFlags+4)& (0+255),w,b
 18522  004642  6F6E               	movwf	?_ENC424J600_getInterruptFlags& (0+255),b
 18523  004644  5173               	movf	(??_ENC424J600_getInterruptFlags+3)& (0+255),w,b
 18524  004646  1175               	iorwf	(??_ENC424J600_getInterruptFlags+5)& (0+255),w,b
 18525  004648  6F6F               	movwf	(?_ENC424J600_getInterruptFlags+1)& (0+255),b
 18526  00464A  0012               	return	
 18527  00464C                     __end_of_ENC424J600_getInterruptFlags:
 18528                           	opt stack 0
 18529                           tblptru	equ	0xFF8
 18530                           tblptrh	equ	0xFF7
 18531                           tblptrl	equ	0xFF6
 18532                           tablat	equ	0xFF5
 18533                           prodh	equ	0xFF4
 18534                           prodl	equ	0xFF3
 18535                           intcon	equ	0xFF2
 18536                           intcon3	equ	0xFF0
 18537                           indf0	equ	0xFEF
 18538                           postinc0	equ	0xFEE
 18539                           plusw0	equ	0xFEB
 18540                           fsr0h	equ	0xFEA
 18541                           fsr0l	equ	0xFE9
 18542                           wreg	equ	0xFE8
 18543                           indf1	equ	0xFE7
 18544                           postinc1	equ	0xFE6
 18545                           postdec1	equ	0xFE5
 18546                           plusw1	equ	0xFE3
 18547                           fsr1h	equ	0xFE2
 18548                           fsr1l	equ	0xFE1
 18549                           indf2	equ	0xFDF
 18550                           postinc2	equ	0xFDE
 18551                           postdec2	equ	0xFDD
 18552                           plusw2	equ	0xFDB
 18553                           fsr2h	equ	0xFDA
 18554                           fsr2l	equ	0xFD9
 18555                           status	equ	0xFD8
 18556                           
 18557 ;; *************** function _ethernetController_newPacketAvailable *****************
 18558 ;; Defined at:
 18559 ;;		line 402 in file "src/enc424j600/ENC424J600.c"
 18560 ;; Parameters:    Size  Location     Type
 18561 ;;		None
 18562 ;; Auto vars:     Size  Location     Type
 18563 ;;		None
 18564 ;; Return value:  Size  Location     Type
 18565 ;;                  1    wreg      unsigned char 
 18566 ;; Registers used:
 18567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18568 ;; Tracked objects:
 18569 ;;		On entry : 0/0
 18570 ;;		On exit  : 0/0
 18571 ;;		Unchanged: 0/0
 18572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18573 ;;      Params:         0       0       0       0       0       0       0       0       0
 18574 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18575 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18576 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18577 ;;Total ram usage:        0 bytes
 18578 ;; Hardware stack levels used:    1
 18579 ;; Hardware stack levels required when called:    8
 18580 ;; This function calls:
 18581 ;;		_ENC424J600_getPacketCount
 18582 ;; This function is called by:
 18583 ;;		_handleStackBackgroundTasks
 18584 ;; This function uses a non-reentrant model
 18585 ;;
 18586                           
 18587                           	psect	text73
 18588  004C98                     __ptext73:
 18589                           	opt stack 0
 18590  004C98                     _ethernetController_newPacketAvailable:
 18591                           	opt stack 21
 18592                           
 18593                           ;ENC424J600.c: 403: return (unsigned) (ENC424J600_getPacketCount() != 0);
 18594                           
 18595                           ; BSR set to: 0
 18596                           ;incstack = 0
 18597  004C98  EC21  F026         	call	_ENC424J600_getPacketCount	;wreg free
 18598  004C9C  0900               	iorlw	0
 18599  004C9E  B4D8               	btfsc	status,2,c
 18600  004CA0  D002               	goto	u11000
 18601  004CA2  0E01               	movlw	1
 18602  004CA4  0012               	return	
 18603  004CA6                     u11000:
 18604  004CA6  0E00               	movlw	0
 18605  004CA8  0012               	return	
 18606  004CAA                     __end_of_ethernetController_newPacketAvailable:
 18607                           	opt stack 0
 18608                           tblptru	equ	0xFF8
 18609                           tblptrh	equ	0xFF7
 18610                           tblptrl	equ	0xFF6
 18611                           tablat	equ	0xFF5
 18612                           prodh	equ	0xFF4
 18613                           prodl	equ	0xFF3
 18614                           intcon	equ	0xFF2
 18615                           intcon3	equ	0xFF0
 18616                           indf0	equ	0xFEF
 18617                           postinc0	equ	0xFEE
 18618                           plusw0	equ	0xFEB
 18619                           fsr0h	equ	0xFEA
 18620                           fsr0l	equ	0xFE9
 18621                           wreg	equ	0xFE8
 18622                           indf1	equ	0xFE7
 18623                           postinc1	equ	0xFE6
 18624                           postdec1	equ	0xFE5
 18625                           plusw1	equ	0xFE3
 18626                           fsr1h	equ	0xFE2
 18627                           fsr1l	equ	0xFE1
 18628                           indf2	equ	0xFDF
 18629                           postinc2	equ	0xFDE
 18630                           postdec2	equ	0xFDD
 18631                           plusw2	equ	0xFDB
 18632                           fsr2h	equ	0xFDA
 18633                           fsr2l	equ	0xFD9
 18634                           status	equ	0xFD8
 18635                           
 18636 ;; *************** function _ethernetController_clearInterruptFlag *****************
 18637 ;; Defined at:
 18638 ;;		line 329 in file "src/enc424j600/ENC424J600.c"
 18639 ;; Parameters:    Size  Location     Type
 18640 ;;  flag            1    wreg     unsigned char 
 18641 ;; Auto vars:     Size  Location     Type
 18642 ;;  flag            1   18[BANK0 ] unsigned char 
 18643 ;; Return value:  Size  Location     Type
 18644 ;;                  1    wreg      void 
 18645 ;; Registers used:
 18646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18647 ;; Tracked objects:
 18648 ;;		On entry : 0/0
 18649 ;;		On exit  : 0/0
 18650 ;;		Unchanged: 0/0
 18651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18652 ;;      Params:         0       0       0       0       0       0       0       0       0
 18653 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18654 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18655 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18656 ;;Total ram usage:        1 bytes
 18657 ;; Hardware stack levels used:    1
 18658 ;; Hardware stack levels required when called:    8
 18659 ;; This function calls:
 18660 ;;		_ENC424J600_clearInterruptFlag
 18661 ;; This function is called by:
 18662 ;;		_handleStackBackgroundTasks
 18663 ;; This function uses a non-reentrant model
 18664 ;;
 18665                           
 18666                           	psect	text74
 18667  004CD6                     __ptext74:
 18668                           	opt stack 0
 18669  004CD6                     _ethernetController_clearInterruptFlag:
 18670                           	opt stack 21
 18671                           
 18672                           ;incstack = 0
 18673                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 18674  004CD6  0100               	movlb	0	; () banked
 18675  004CD8  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 18676                           
 18677                           ;ENC424J600.c: 330: ENC424J600_clearInterruptFlag(flag);
 18678  004CDA  0100               	movlb	0	; () banked
 18679  004CDC  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 18680  004CDE  ECFB  F01D         	call	_ENC424J600_clearInterruptFlag
 18681  004CE2  0012               	return		;funcret
 18682  004CE4                     __end_of_ethernetController_clearInterruptFlag:
 18683                           	opt stack 0
 18684                           tblptru	equ	0xFF8
 18685                           tblptrh	equ	0xFF7
 18686                           tblptrl	equ	0xFF6
 18687                           tablat	equ	0xFF5
 18688                           prodh	equ	0xFF4
 18689                           prodl	equ	0xFF3
 18690                           intcon	equ	0xFF2
 18691                           intcon3	equ	0xFF0
 18692                           indf0	equ	0xFEF
 18693                           postinc0	equ	0xFEE
 18694                           plusw0	equ	0xFEB
 18695                           fsr0h	equ	0xFEA
 18696                           fsr0l	equ	0xFE9
 18697                           wreg	equ	0xFE8
 18698                           indf1	equ	0xFE7
 18699                           postinc1	equ	0xFE6
 18700                           postdec1	equ	0xFE5
 18701                           plusw1	equ	0xFE3
 18702                           fsr1h	equ	0xFE2
 18703                           fsr1l	equ	0xFE1
 18704                           indf2	equ	0xFDF
 18705                           postinc2	equ	0xFDE
 18706                           postdec2	equ	0xFDD
 18707                           plusw2	equ	0xFDB
 18708                           fsr2h	equ	0xFDA
 18709                           fsr2l	equ	0xFD9
 18710                           status	equ	0xFD8
 18711                           
 18712 ;; *************** function _ENC424J600_clearInterruptFlag *****************
 18713 ;; Defined at:
 18714 ;;		line 738 in file "src/enc424j600/ENC424J600.c"
 18715 ;; Parameters:    Size  Location     Type
 18716 ;;  flag            1    wreg     unsigned char 
 18717 ;; Auto vars:     Size  Location     Type
 18718 ;;  flag            1   16[BANK0 ] unsigned char 
 18719 ;;  temp            1   17[BANK0 ] unsigned char 
 18720 ;; Return value:  Size  Location     Type
 18721 ;;                  1    wreg      void 
 18722 ;; Registers used:
 18723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18724 ;; Tracked objects:
 18725 ;;		On entry : 0/0
 18726 ;;		On exit  : 0/0
 18727 ;;		Unchanged: 0/0
 18728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18729 ;;      Params:         0       0       0       0       0       0       0       0       0
 18730 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18731 ;;      Temps:          0       2       0       0       0       0       0       0       0
 18732 ;;      Totals:         0       4       0       0       0       0       0       0       0
 18733 ;;Total ram usage:        4 bytes
 18734 ;; Hardware stack levels used:    1
 18735 ;; Hardware stack levels required when called:    7
 18736 ;; This function calls:
 18737 ;;		_ENC424J600_readControlRegisterUnbanked
 18738 ;;		_ENC424J600_writeControlRegisterUnbanked
 18739 ;; This function is called by:
 18740 ;;		_ethernetController_clearInterruptFlag
 18741 ;; This function uses a non-reentrant model
 18742 ;;
 18743                           
 18744                           	psect	text75
 18745  003BF6                     __ptext75:
 18746                           	opt stack 0
 18747  003BF6                     _ENC424J600_clearInterruptFlag:
 18748                           	opt stack 21
 18749                           
 18750                           ;incstack = 0
 18751                           ;ENC424J600_clearInterruptFlag@flag stored from wreg
 18752  003BF6  0100               	movlb	0	; () banked
 18753  003BF8  6F70               	movwf	ENC424J600_clearInterruptFlag@flag& (0+255),b
 18754                           
 18755                           ;ENC424J600.c: 739: uint8_t temp;
 18756                           ;ENC424J600.c: 740: if (flag < 8) {
 18757  003BFA  0E08               	movlw	8
 18758  003BFC  0100               	movlb	0	; () banked
 18759  003BFE  6170               	cpfslt	ENC424J600_clearInterruptFlag@flag& (0+255),b
 18760  003C00  D01E               	goto	l317
 18761                           
 18762                           ; BSR set to: 0
 18763                           ;ENC424J600.c: 741: ENC424J600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 18764  003C02  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 18765  003C04  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18766  003C06  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 18767  003C08  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18768  003C0A  0E1C               	movlw	28
 18769  003C0C  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 18770                           
 18771                           ;ENC424J600.c: 742: temp &= ~(1 << flag);
 18772  003C10  C070  F06E         	movff	ENC424J600_clearInterruptFlag@flag,??_ENC424J600_clearInterruptFlag
 18773  003C14  0E01               	movlw	1
 18774  003C16  0100               	movlb	0	; () banked
 18775  003C18  6F6F               	movwf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),b
 18776  003C1A  2B6E               	incf	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 18777  003C1C  D002               	goto	u10554
 18778  003C1E                     u10555:
 18779  003C1E  90D8               	bcf	status,0,c
 18780  003C20  376F               	rlcf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),f,b
 18781  003C22                     u10554:
 18782  003C22  2F6E               	decfsz	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 18783  003C24  D7FC               	goto	u10555
 18784  003C26  0100               	movlb	0	; () banked
 18785  003C28  516F               	movf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),w,b
 18786  003C2A  0AFF               	xorlw	255
 18787  003C2C  1771               	andwf	ENC424J600_clearInterruptFlag@temp& (0+255),f,b
 18788                           
 18789                           ; BSR set to: 0
 18790                           ;ENC424J600.c: 743: ENC424J600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 18791  003C2E  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 18792  003C30  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18793  003C32  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 18794  003C34  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18795  003C36  0E1C               	movlw	28
 18796  003C38  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 18797                           
 18798                           ;ENC424J600.c: 744: } else {
 18799  003C3C  0012               	return	
 18800  003C3E                     l317:
 18801                           
 18802                           ;ENC424J600.c: 745: flag -= 8;
 18803  003C3E  0E08               	movlw	8
 18804  003C40  0100               	movlb	0	; () banked
 18805  003C42  5F70               	subwf	ENC424J600_clearInterruptFlag@flag& (0+255),f,b
 18806                           
 18807                           ; BSR set to: 0
 18808                           ;ENC424J600.c: 746: ENC424J600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 18809  003C44  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 18810  003C46  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18811  003C48  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 18812  003C4A  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18813  003C4C  0E1D               	movlw	29
 18814  003C4E  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 18815                           
 18816                           ;ENC424J600.c: 747: temp &= ~(1 << flag);
 18817  003C52  C070  F06E         	movff	ENC424J600_clearInterruptFlag@flag,??_ENC424J600_clearInterruptFlag
 18818  003C56  0E01               	movlw	1
 18819  003C58  0100               	movlb	0	; () banked
 18820  003C5A  6F6F               	movwf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),b
 18821  003C5C  2B6E               	incf	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 18822  003C5E  D002               	goto	u10564
 18823  003C60                     u10565:
 18824  003C60  90D8               	bcf	status,0,c
 18825  003C62  376F               	rlcf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),f,b
 18826  003C64                     u10564:
 18827  003C64  2F6E               	decfsz	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 18828  003C66  D7FC               	goto	u10565
 18829  003C68  0100               	movlb	0	; () banked
 18830  003C6A  516F               	movf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),w,b
 18831  003C6C  0AFF               	xorlw	255
 18832  003C6E  1771               	andwf	ENC424J600_clearInterruptFlag@temp& (0+255),f,b
 18833                           
 18834                           ;ENC424J600.c: 748: ENC424J600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 18835  003C70  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 18836  003C72  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18837  003C74  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 18838  003C76  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18839  003C78  0E1D               	movlw	29
 18840  003C7A  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 18841  003C7E  0012               	return	
 18842  003C80                     __end_of_ENC424J600_clearInterruptFlag:
 18843                           	opt stack 0
 18844                           tblptru	equ	0xFF8
 18845                           tblptrh	equ	0xFF7
 18846                           tblptrl	equ	0xFF6
 18847                           tablat	equ	0xFF5
 18848                           prodh	equ	0xFF4
 18849                           prodl	equ	0xFF3
 18850                           intcon	equ	0xFF2
 18851                           intcon3	equ	0xFF0
 18852                           indf0	equ	0xFEF
 18853                           postinc0	equ	0xFEE
 18854                           plusw0	equ	0xFEB
 18855                           fsr0h	equ	0xFEA
 18856                           fsr0l	equ	0xFE9
 18857                           wreg	equ	0xFE8
 18858                           indf1	equ	0xFE7
 18859                           postinc1	equ	0xFE6
 18860                           postdec1	equ	0xFE5
 18861                           plusw1	equ	0xFE3
 18862                           fsr1h	equ	0xFE2
 18863                           fsr1l	equ	0xFE1
 18864                           indf2	equ	0xFDF
 18865                           postinc2	equ	0xFDE
 18866                           postdec2	equ	0xFDD
 18867                           plusw2	equ	0xFDB
 18868                           fsr2h	equ	0xFDA
 18869                           fsr2l	equ	0xFD9
 18870                           status	equ	0xFD8
 18871                           
 18872 ;; *************** function _ethernetController_init *****************
 18873 ;; Defined at:
 18874 ;;		line 33 in file "src/enc424j600/ENC424J600.c"
 18875 ;; Parameters:    Size  Location     Type
 18876 ;;		None
 18877 ;; Auto vars:     Size  Location     Type
 18878 ;;  err             3   29[BANK0 ] struct error
 18879 ;; Return value:  Size  Location     Type
 18880 ;;                  3   26[BANK0 ] struct error
 18881 ;; Registers used:
 18882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18883 ;; Tracked objects:
 18884 ;;		On entry : 0/0
 18885 ;;		On exit  : 0/0
 18886 ;;		Unchanged: 0/0
 18887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18888 ;;      Params:         0       3       0       0       0       0       0       0       0
 18889 ;;      Locals:         0       3       0       0       0       0       0       0       0
 18890 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18891 ;;      Totals:         0       6       0       0       0       0       0       0       0
 18892 ;;Total ram usage:        6 bytes
 18893 ;; Hardware stack levels used:    1
 18894 ;; Hardware stack levels required when called:    8
 18895 ;; This function calls:
 18896 ;;		_ENC424J600_enableAutoMACInsertion
 18897 ;;		_ENC424J600_enableReception
 18898 ;;		_ENC424J600_initSPI
 18899 ;;		_ENC424J600_setNextPacketPointer
 18900 ;;		_ENC424J600_setRXBufferStartAddress
 18901 ;;		_ENC424J600_setRXTailPointer
 18902 ;;		_ethernetController_checkDeviceId
 18903 ;;		_ethernetController_softReset
 18904 ;; This function is called by:
 18905 ;;		_main
 18906 ;; This function uses a non-reentrant model
 18907 ;;
 18908                           
 18909                           	psect	text76
 18910  0040CC                     __ptext76:
 18911                           	opt stack 0
 18912  0040CC                     _ethernetController_init:
 18913                           	opt stack 22
 18914                           
 18915                           ;ENC424J600.c: 34: error_t err;
 18916                           ;ENC424J600.c: 35: ENC424J600_initSPI();
 18917                           
 18918                           ;incstack = 0
 18919  0040CC  EC06  F026         	call	_ENC424J600_initSPI	;wreg free
 18920                           
 18921                           ;ENC424J600.c: 36: err = ethernetController_softReset();
 18922  0040D0  EC20  F018         	call	_ethernetController_softReset	;wreg free
 18923  0040D4  C06E  F07D         	movff	?_ethernetController_softReset,ethernetController_init@err
 18924  0040D8  C06F  F07E         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 18925  0040DC  C070  F07F         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 18926                           
 18927                           ;ENC424J600.c: 39: }
 18928                           ;ENC424J600.c: 40: err = ethernetController_checkDeviceId();
 18929  0040E0  ECD9  F022         	call	_ethernetController_checkDeviceId	;wreg free
 18930  0040E4  C06E  F07D         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 18931  0040E8  C06F  F07E         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 18932  0040EC  C070  F07F         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 18933                           
 18934                           ;ENC424J600.c: 43: }
 18935                           ;ENC424J600.c: 62: ENC424J600_setRXBufferStartAddress(0x3000);
 18936  0040F0  0E30               	movlw	48
 18937  0040F2  0100               	movlb	0	; () banked
 18938  0040F4  6F6F               	movwf	(ENC424J600_setRXBufferStartAddress@addr+1)& (0+255),b
 18939  0040F6  0E00               	movlw	0
 18940  0040F8  6F6E               	movwf	ENC424J600_setRXBufferStartAddress@addr& (0+255),b
 18941  0040FA  EC1E  F025         	call	_ENC424J600_setRXBufferStartAddress	;wreg free
 18942                           
 18943                           ;ENC424J600.c: 63: ENC424J600_setNextPacketPointer(0x3000);
 18944  0040FE  0E30               	movlw	48
 18945  004100  0100               	movlb	0	; () banked
 18946  004102  6F61               	movwf	(ENC424J600_setNextPacketPointer@ptr+1)& (0+255),b
 18947  004104  0E00               	movlw	0
 18948  004106  6F60               	movwf	ENC424J600_setNextPacketPointer@ptr& (0+255),b
 18949  004108  EC7E  F026         	call	_ENC424J600_setNextPacketPointer	;wreg free
 18950                           
 18951                           ;ENC424J600.c: 64: ENC424J600_setRXTailPointer(0x5FFE);
 18952  00410C  0E5F               	movlw	95
 18953  00410E  0100               	movlb	0	; () banked
 18954  004110  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 18955  004112  0EFE               	movlw	254
 18956  004114  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 18957  004116  EC09  F025         	call	_ENC424J600_setRXTailPointer	;wreg free
 18958                           
 18959                           ;ENC424J600.c: 66: ENC424J600_enableReception();
 18960  00411A  EC83  F026         	call	_ENC424J600_enableReception	;wreg free
 18961                           
 18962                           ;ENC424J600.c: 67: ENC424J600_enableAutoMACInsertion();
 18963  00411E  EC5B  F025         	call	_ENC424J600_enableAutoMACInsertion	;wreg free
 18964                           
 18965                           ;ENC424J600.c: 69: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 18966  004122  0E01               	movlw	1
 18967  004124  0100               	movlb	0	; () banked
 18968  004126  6F7D               	movwf	ethernetController_init@err& (0+255),b
 18969                           
 18970                           ; BSR set to: 0
 18971                           ;ENC424J600.c: 70: err.code = (uint16_t)0;
 18972  004128  0E00               	movlw	0
 18973  00412A  6F7F               	movwf	(ethernetController_init@err+2)& (0+255),b
 18974  00412C  0E00               	movlw	0
 18975  00412E  6F7E               	movwf	(ethernetController_init@err+1)& (0+255),b
 18976                           
 18977                           ; BSR set to: 0
 18978                           ;ENC424J600.c: 71: return err;
 18979  004130  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 18980  004134  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 18981  004138  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 18982  00413C  0012               	return	
 18983  00413E                     __end_of_ethernetController_init:
 18984                           	opt stack 0
 18985                           tblptru	equ	0xFF8
 18986                           tblptrh	equ	0xFF7
 18987                           tblptrl	equ	0xFF6
 18988                           tablat	equ	0xFF5
 18989                           prodh	equ	0xFF4
 18990                           prodl	equ	0xFF3
 18991                           intcon	equ	0xFF2
 18992                           intcon3	equ	0xFF0
 18993                           indf0	equ	0xFEF
 18994                           postinc0	equ	0xFEE
 18995                           plusw0	equ	0xFEB
 18996                           fsr0h	equ	0xFEA
 18997                           fsr0l	equ	0xFE9
 18998                           wreg	equ	0xFE8
 18999                           indf1	equ	0xFE7
 19000                           postinc1	equ	0xFE6
 19001                           postdec1	equ	0xFE5
 19002                           plusw1	equ	0xFE3
 19003                           fsr1h	equ	0xFE2
 19004                           fsr1l	equ	0xFE1
 19005                           indf2	equ	0xFDF
 19006                           postinc2	equ	0xFDE
 19007                           postdec2	equ	0xFDD
 19008                           plusw2	equ	0xFDB
 19009                           fsr2h	equ	0xFDA
 19010                           fsr2l	equ	0xFD9
 19011                           status	equ	0xFD8
 19012                           
 19013 ;; *************** function _ethernetController_softReset *****************
 19014 ;; Defined at:
 19015 ;;		line 74 in file "src/enc424j600/ENC424J600.c"
 19016 ;; Parameters:    Size  Location     Type
 19017 ;;		None
 19018 ;; Auto vars:     Size  Location     Type
 19019 ;;  err             3   23[BANK0 ] struct error
 19020 ;;  receivedData    2   21[BANK0 ] unsigned char [2]
 19021 ;;  dataToSend      2   19[BANK0 ] unsigned char [2]
 19022 ;;  comFailCount    1   18[BANK0 ] unsigned char 
 19023 ;; Return value:  Size  Location     Type
 19024 ;;                  3   14[BANK0 ] struct error
 19025 ;; Registers used:
 19026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19027 ;; Tracked objects:
 19028 ;;		On entry : 0/0
 19029 ;;		On exit  : 0/0
 19030 ;;		Unchanged: 0/0
 19031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19032 ;;      Params:         0       3       0       0       0       0       0       0       0
 19033 ;;      Locals:         0       8       0       0       0       0       0       0       0
 19034 ;;      Temps:          0       1       0       0       0       0       0       0       0
 19035 ;;      Totals:         0      12       0       0       0       0       0       0       0
 19036 ;;Total ram usage:       12 bytes
 19037 ;; Hardware stack levels used:    1
 19038 ;; Hardware stack levels required when called:    7
 19039 ;; This function calls:
 19040 ;;		_ENC424J600_readControlRegisterUnbanked
 19041 ;;		_ENC424J600_writeControlRegisterUnbanked
 19042 ;;		_ENC424J600_writeSingleByte
 19043 ;; This function is called by:
 19044 ;;		_ethernetController_init
 19045 ;; This function uses a non-reentrant model
 19046 ;;
 19047                           
 19048                           	psect	text77
 19049  003040                     __ptext77:
 19050                           	opt stack 0
 19051  003040                     _ethernetController_softReset:
 19052                           	opt stack 22
 19053                           
 19054                           ;ENC424J600.c: 92: uint8_t comFailCount = 0;
 19055                           
 19056                           ; BSR set to: 0
 19057                           ;incstack = 0
 19058  003040  0E00               	movlw	0
 19059  003042  0100               	movlb	0	; () banked
 19060  003044  6F72               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 19061                           
 19062                           ; BSR set to: 0
 19063                           ;ENC424J600.c: 93: uint8_t dataToSend[2] = {0x12, 0x34};
 19064  003046  C04F  F073         	movff	ethernetController_softReset@F5850,ethernetController_softReset@dataToSend
 19065  00304A  C050  F074         	movff	ethernetController_softReset@F5850+1,ethernetController_softReset@dataToSend+1
 19066                           
 19067                           ; BSR set to: 0
 19068                           ;ENC424J600.c: 94: uint8_t receivedData[2] = {0, 0};
 19069  00304E  C042  F075         	movff	ethernetController_softReset@F5852,ethernetController_softReset@receivedData
 19070  003052  C043  F076         	movff	ethernetController_softReset@F5852+1,ethernetController_softReset@receivedData+1
 19071                           
 19072                           ;ENC424J600.c: 95: error_t err;
 19073                           ;ENC424J600.c: 96: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 19074  003056  0E01               	movlw	1
 19075  003058  6F77               	movwf	ethernetController_softReset@err& (0+255),b
 19076                           
 19077                           ;ENC424J600.c: 97: err.code = (uint16_t)0;
 19078  00305A  0E00               	movlw	0
 19079  00305C  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 19080  00305E  0E00               	movlw	0
 19081  003060  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 19082                           
 19083                           ; BSR set to: 0
 19084                           ;ENC424J600.c: 98: if (comFailCount < 5) {
 19085  003062  0E05               	movlw	5
 19086  003064  6172               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 19087  003066  D05F               	goto	l82
 19088                           
 19089                           ; BSR set to: 0
 19090                           ;ENC424J600.c: 100: ENC424J600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0])
      +                          ;
 19091  003068  0E73               	movlw	low ethernetController_softReset@dataToSend
 19092  00306A  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19093  00306C  0E00               	movlw	high ethernetController_softReset@dataToSend
 19094  00306E  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19095  003070  0E16               	movlw	22
 19096  003072  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 19097                           
 19098                           ;ENC424J600.c: 101: ENC424J600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1])
      +                          ;
 19099  003076  0E74               	movlw	low (ethernetController_softReset@dataToSend+1)
 19100  003078  0100               	movlb	0	; () banked
 19101  00307A  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19102  00307C  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 19103  00307E  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19104  003080  0E17               	movlw	23
 19105  003082  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 19106                           
 19107                           ;ENC424J600.c: 103: ENC424J600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 19108  003086  0E75               	movlw	low ethernetController_softReset@receivedData
 19109  003088  0100               	movlb	0	; () banked
 19110  00308A  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19111  00308C  0E00               	movlw	high ethernetController_softReset@receivedData
 19112  00308E  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19113  003090  0E16               	movlw	22
 19114  003092  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 19115                           
 19116                           ;ENC424J600.c: 104: ENC424J600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 19117  003096  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 19118  003098  0100               	movlb	0	; () banked
 19119  00309A  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19120  00309C  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 19121  00309E  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19122  0030A0  0E17               	movlw	23
 19123  0030A2  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 19124                           
 19125                           ;ENC424J600.c: 106: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 19126  0030A6  0100               	movlb	0	; () banked
 19127  0030A8  5173               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 19128  0030AA  1975               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 19129  0030AC  A4D8               	btfss	status,2,c
 19130  0030AE  D038               	goto	l86
 19131                           
 19132                           ; BSR set to: 0
 19133  0030B0  5174               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 19134  0030B2  1976               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 19135  0030B4  A4D8               	btfss	status,2,c
 19136  0030B6  D034               	goto	l86
 19137                           
 19138                           ; BSR set to: 0
 19139                           ;ENC424J600.c: 108: ENC424J600_writeSingleByte(0b11001010);
 19140  0030B8  0ECA               	movlw	202
 19141  0030BA  EC2E  F026         	call	_ENC424J600_writeSingleByte
 19142                           
 19143                           ;ENC424J600.c: 109: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 19144  0030BE  0E42               	movlw	66
 19145  0030C0                     u11647:
 19146  0030C0  2EE8               	decfsz	wreg,f,c
 19147  0030C2  D7FE               	bra	u11647
 19148  0030C4  D000               	nop2	
 19149                           
 19150                           ;ENC424J600.c: 111: ENC424J600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 19151  0030C6  0E75               	movlw	low ethernetController_softReset@receivedData
 19152  0030C8  0100               	movlb	0	; () banked
 19153  0030CA  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19154  0030CC  0E00               	movlw	high ethernetController_softReset@receivedData
 19155  0030CE  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19156  0030D0  0E16               	movlw	22
 19157  0030D2  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 19158                           
 19159                           ;ENC424J600.c: 112: ENC424J600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 19160  0030D6  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 19161  0030D8  0100               	movlb	0	; () banked
 19162  0030DA  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19163  0030DC  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 19164  0030DE  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19165  0030E0  0E17               	movlw	23
 19166  0030E2  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 19167                           
 19168                           ;ENC424J600.c: 114: if (!receivedData[0] && !receivedData[1]) {
 19169  0030E6  0100               	movlb	0	; () banked
 19170  0030E8  5175               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 19171  0030EA  A4D8               	btfss	status,2,c
 19172  0030EC  D00D               	goto	l84
 19173                           
 19174                           ; BSR set to: 0
 19175  0030EE  5176               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 19176  0030F0  A4D8               	btfss	status,2,c
 19177  0030F2  D00A               	goto	l84
 19178                           
 19179                           ; BSR set to: 0
 19180                           ;ENC424J600.c: 116: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 19181  0030F4  0E03               	movlw	3
 19182  0030F6  0100               	movlb	0	; () banked
 19183  0030F8  6F71               	movwf	??_ethernetController_softReset& (0+255),b
 19184  0030FA  0EA7               	movlw	167
 19185  0030FC                     u11657:
 19186  0030FC  2EE8               	decfsz	wreg,f,c
 19187  0030FE  D7FE               	bra	u11657
 19188  003100  2F71               	decfsz	??_ethernetController_softReset& (0+255),f,b
 19189  003102  D7FC               	bra	u11657
 19190  003104  D000               	nop2	
 19191  003106  D005               	goto	l8761
 19192  003108                     l84:
 19193                           
 19194                           ;ENC424J600.c: 119: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 19195  003108  0E01               	movlw	1
 19196  00310A  0100               	movlb	0	; () banked
 19197  00310C  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 19198  00310E  0E2E               	movlw	46
 19199  003110  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 19200  003112                     l8761:
 19201                           
 19202                           ; BSR set to: 0
 19203                           ;ENC424J600.c: 120: return err;
 19204  003112  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 19205  003116  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 19206  00311A  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 19207                           
 19208                           ; BSR set to: 0
 19209  00311E  0012               	return	
 19210  003120                     l86:
 19211                           
 19212                           ;ENC424J600.c: 121: }
 19213                           ;ENC424J600.c: 122: }
 19214                           ;ENC424J600.c: 123: comFailCount++;
 19215                           
 19216                           ; BSR set to: 0
 19217                           
 19218                           ; BSR set to: 0
 19219  003120  0100               	movlb	0	; () banked
 19220  003122  2B72               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 19221                           
 19222                           ;ENC424J600.c: 124: } else {
 19223  003124  D00B               	goto	l87
 19224  003126                     l82:
 19225                           
 19226                           ; BSR set to: 0
 19227                           ;ENC424J600.c: 125: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 19228                           
 19229                           ; BSR set to: 0
 19230  003126  0E01               	movlw	1
 19231  003128  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 19232  00312A  0E2E               	movlw	46
 19233  00312C  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 19234                           
 19235                           ; BSR set to: 0
 19236                           ;ENC424J600.c: 126: return err;
 19237  00312E  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 19238  003132  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 19239  003136  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 19240                           
 19241                           ; BSR set to: 0
 19242  00313A  0012               	return	
 19243  00313C                     l87:
 19244                           
 19245                           ; BSR set to: 0
 19246                           ;ENC424J600.c: 127: }
 19247                           ;ENC424J600.c: 128: return err;
 19248  00313C  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 19249  003140  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 19250  003144  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 19251  003148  0012               	return		;funcret
 19252  00314A                     __end_of_ethernetController_softReset:
 19253                           	opt stack 0
 19254                           tblptru	equ	0xFF8
 19255                           tblptrh	equ	0xFF7
 19256                           tblptrl	equ	0xFF6
 19257                           tablat	equ	0xFF5
 19258                           prodh	equ	0xFF4
 19259                           prodl	equ	0xFF3
 19260                           intcon	equ	0xFF2
 19261                           intcon3	equ	0xFF0
 19262                           indf0	equ	0xFEF
 19263                           postinc0	equ	0xFEE
 19264                           plusw0	equ	0xFEB
 19265                           fsr0h	equ	0xFEA
 19266                           fsr0l	equ	0xFE9
 19267                           wreg	equ	0xFE8
 19268                           indf1	equ	0xFE7
 19269                           postinc1	equ	0xFE6
 19270                           postdec1	equ	0xFE5
 19271                           plusw1	equ	0xFE3
 19272                           fsr1h	equ	0xFE2
 19273                           fsr1l	equ	0xFE1
 19274                           indf2	equ	0xFDF
 19275                           postinc2	equ	0xFDE
 19276                           postdec2	equ	0xFDD
 19277                           plusw2	equ	0xFDB
 19278                           fsr2h	equ	0xFDA
 19279                           fsr2l	equ	0xFD9
 19280                           status	equ	0xFD8
 19281                           
 19282 ;; *************** function _ethernetController_checkDeviceId *****************
 19283 ;; Defined at:
 19284 ;;		line 131 in file "src/enc424j600/ENC424J600.c"
 19285 ;; Parameters:    Size  Location     Type
 19286 ;;		None
 19287 ;; Auto vars:     Size  Location     Type
 19288 ;;  err             3   18[BANK0 ] struct error
 19289 ;;  data            1   17[BANK0 ] unsigned char 
 19290 ;; Return value:  Size  Location     Type
 19291 ;;                  3   14[BANK0 ] struct error
 19292 ;; Registers used:
 19293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19294 ;; Tracked objects:
 19295 ;;		On entry : 0/0
 19296 ;;		On exit  : 0/0
 19297 ;;		Unchanged: 0/0
 19298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19299 ;;      Params:         0       3       0       0       0       0       0       0       0
 19300 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19301 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19302 ;;      Totals:         0       7       0       0       0       0       0       0       0
 19303 ;;Total ram usage:        7 bytes
 19304 ;; Hardware stack levels used:    1
 19305 ;; Hardware stack levels required when called:    7
 19306 ;; This function calls:
 19307 ;;		_ENC424J600_readControlRegisterUnbanked
 19308 ;; This function is called by:
 19309 ;;		_ethernetController_init
 19310 ;;		_main
 19311 ;; This function uses a non-reentrant model
 19312 ;;
 19313                           
 19314                           	psect	text78
 19315  0045B2                     __ptext78:
 19316                           	opt stack 0
 19317  0045B2                     _ethernetController_checkDeviceId:
 19318                           	opt stack 22
 19319                           
 19320                           ;ENC424J600.c: 132: error_t err;
 19321                           ;ENC424J600.c: 133: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 19322                           
 19323                           ;incstack = 0
 19324  0045B2  0E01               	movlw	1
 19325  0045B4  0100               	movlb	0	; () banked
 19326  0045B6  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 19327                           
 19328                           ;ENC424J600.c: 134: err.code = (uint16_t)0;
 19329  0045B8  0E00               	movlw	0
 19330  0045BA  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 19331  0045BC  0E00               	movlw	0
 19332  0045BE  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 19333                           
 19334                           ;ENC424J600.c: 135: uint8_t data = 0;
 19335  0045C0  0E00               	movlw	0
 19336  0045C2  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 19337                           
 19338                           ; BSR set to: 0
 19339                           ;ENC424J600.c: 136: ENC424J600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 19340  0045C4  0E71               	movlw	low ethernetController_checkDeviceId@data
 19341  0045C6  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19342  0045C8  0E00               	movlw	high ethernetController_checkDeviceId@data
 19343  0045CA  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19344  0045CC  0E74               	movlw	116
 19345  0045CE  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 19346                           
 19347                           ;ENC424J600.c: 137: if (((data >> 5)&0x07) == 0b001)
 19348  0045D2  0100               	movlb	0	; () banked
 19349  0045D4  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 19350  0045D6  42E8               	rrncf	wreg,f,c
 19351  0045D8  0B07               	andlw	7
 19352  0045DA  0B07               	andlw	7
 19353  0045DC  06E8               	decf	wreg,f,c
 19354  0045DE  A4D8               	btfss	status,2,c
 19355  0045E0  D004               	goto	l90
 19356                           
 19357                           ; BSR set to: 0
 19358                           ;ENC424J600.c: 138: err.code = (uint16_t)0;
 19359  0045E2  0E00               	movlw	0
 19360  0045E4  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 19361  0045E6  0E00               	movlw	0
 19362  0045E8  D003               	goto	L7
 19363  0045EA                     l90:
 19364                           
 19365                           ; BSR set to: 0
 19366                           ;ENC424J600.c: 139: else
 19367                           ;ENC424J600.c: 140: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 19368                           
 19369                           ; BSR set to: 0
 19370  0045EA  0E01               	movlw	1
 19371  0045EC  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 19372  0045EE  0E2D               	movlw	45
 19373  0045F0                     L7:
 19374  0045F0  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 19375                           
 19376                           ; BSR set to: 0
 19377                           ;ENC424J600.c: 141: return err;
 19378                           
 19379                           ; BSR set to: 0
 19380  0045F2  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 19381  0045F6  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 19382  0045FA  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 19383  0045FE  0012               	return	
 19384  004600                     __end_of_ethernetController_checkDeviceId:
 19385                           	opt stack 0
 19386                           tblptru	equ	0xFF8
 19387                           tblptrh	equ	0xFF7
 19388                           tblptrl	equ	0xFF6
 19389                           tablat	equ	0xFF5
 19390                           prodh	equ	0xFF4
 19391                           prodl	equ	0xFF3
 19392                           intcon	equ	0xFF2
 19393                           intcon3	equ	0xFF0
 19394                           indf0	equ	0xFEF
 19395                           postinc0	equ	0xFEE
 19396                           plusw0	equ	0xFEB
 19397                           fsr0h	equ	0xFEA
 19398                           fsr0l	equ	0xFE9
 19399                           wreg	equ	0xFE8
 19400                           indf1	equ	0xFE7
 19401                           postinc1	equ	0xFE6
 19402                           postdec1	equ	0xFE5
 19403                           plusw1	equ	0xFE3
 19404                           fsr1h	equ	0xFE2
 19405                           fsr1l	equ	0xFE1
 19406                           indf2	equ	0xFDF
 19407                           postinc2	equ	0xFDE
 19408                           postdec2	equ	0xFDD
 19409                           plusw2	equ	0xFDB
 19410                           fsr2h	equ	0xFDA
 19411                           fsr2l	equ	0xFD9
 19412                           status	equ	0xFD8
 19413                           
 19414 ;; *************** function _ENC424J600_setRXTailPointer *****************
 19415 ;; Defined at:
 19416 ;;		line 684 in file "src/enc424j600/ENC424J600.c"
 19417 ;; Parameters:    Size  Location     Type
 19418 ;;  addr            2   14[BANK0 ] unsigned int 
 19419 ;; Auto vars:     Size  Location     Type
 19420 ;;  highByte        1   17[BANK0 ] unsigned char 
 19421 ;;  lowByte         1   16[BANK0 ] unsigned char 
 19422 ;; Return value:  Size  Location     Type
 19423 ;;                  1    wreg      void 
 19424 ;; Registers used:
 19425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19426 ;; Tracked objects:
 19427 ;;		On entry : 0/0
 19428 ;;		On exit  : 0/0
 19429 ;;		Unchanged: 0/0
 19430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19431 ;;      Params:         0       2       0       0       0       0       0       0       0
 19432 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19433 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19434 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19435 ;;Total ram usage:        4 bytes
 19436 ;; Hardware stack levels used:    1
 19437 ;; Hardware stack levels required when called:    7
 19438 ;; This function calls:
 19439 ;;		_ENC424J600_writeControlRegisterUnbanked
 19440 ;; This function is called by:
 19441 ;;		_ethernetController_init
 19442 ;;		_ethernetController_streamFromRXBuffer
 19443 ;;		_ethernetController_dropPacket
 19444 ;; This function uses a non-reentrant model
 19445 ;;
 19446                           
 19447                           	psect	text79
 19448  004A12                     __ptext79:
 19449                           	opt stack 0
 19450  004A12                     _ENC424J600_setRXTailPointer:
 19451                           	opt stack 18
 19452                           
 19453                           ;ENC424J600.c: 685: uint8_t lowByte = addr & 0x00ff;
 19454                           
 19455                           ; BSR set to: 0
 19456                           ;incstack = 0
 19457  004A12  C06E  F070         	movff	ENC424J600_setRXTailPointer@addr,ENC424J600_setRXTailPointer@lowByte
 19458                           
 19459                           ;ENC424J600.c: 686: uint8_t highByte = (addr >> 8) & 0xff;
 19460  004A16  0100               	movlb	0	; () banked
 19461  004A18  516F               	movf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),w,b
 19462  004A1A  6F71               	movwf	ENC424J600_setRXTailPointer@highByte& (0+255),b
 19463                           
 19464                           ; BSR set to: 0
 19465                           ;ENC424J600.c: 687: ENC424J600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 19466  004A1C  0E70               	movlw	low ENC424J600_setRXTailPointer@lowByte
 19467  004A1E  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19468  004A20  0E00               	movlw	high ENC424J600_setRXTailPointer@lowByte
 19469  004A22  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19470  004A24  0E06               	movlw	6
 19471  004A26  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 19472                           
 19473                           ;ENC424J600.c: 688: ENC424J600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 19474  004A2A  0E71               	movlw	low ENC424J600_setRXTailPointer@highByte
 19475  004A2C  0100               	movlb	0	; () banked
 19476  004A2E  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19477  004A30  0E00               	movlw	high ENC424J600_setRXTailPointer@highByte
 19478  004A32  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19479  004A34  0E07               	movlw	7
 19480  004A36  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 19481  004A3A  0012               	return		;funcret
 19482  004A3C                     __end_of_ENC424J600_setRXTailPointer:
 19483                           	opt stack 0
 19484                           tblptru	equ	0xFF8
 19485                           tblptrh	equ	0xFF7
 19486                           tblptrl	equ	0xFF6
 19487                           tablat	equ	0xFF5
 19488                           prodh	equ	0xFF4
 19489                           prodl	equ	0xFF3
 19490                           intcon	equ	0xFF2
 19491                           intcon3	equ	0xFF0
 19492                           indf0	equ	0xFEF
 19493                           postinc0	equ	0xFEE
 19494                           plusw0	equ	0xFEB
 19495                           fsr0h	equ	0xFEA
 19496                           fsr0l	equ	0xFE9
 19497                           wreg	equ	0xFE8
 19498                           indf1	equ	0xFE7
 19499                           postinc1	equ	0xFE6
 19500                           postdec1	equ	0xFE5
 19501                           plusw1	equ	0xFE3
 19502                           fsr1h	equ	0xFE2
 19503                           fsr1l	equ	0xFE1
 19504                           indf2	equ	0xFDF
 19505                           postinc2	equ	0xFDE
 19506                           postdec2	equ	0xFDD
 19507                           plusw2	equ	0xFDB
 19508                           fsr2h	equ	0xFDA
 19509                           fsr2l	equ	0xFD9
 19510                           status	equ	0xFD8
 19511                           
 19512 ;; *************** function _ENC424J600_setRXBufferStartAddress *****************
 19513 ;; Defined at:
 19514 ;;		line 677 in file "src/enc424j600/ENC424J600.c"
 19515 ;; Parameters:    Size  Location     Type
 19516 ;;  addr            2   14[BANK0 ] unsigned int 
 19517 ;; Auto vars:     Size  Location     Type
 19518 ;;  highByte        1   17[BANK0 ] unsigned char 
 19519 ;;  lowByte         1   16[BANK0 ] unsigned char 
 19520 ;; Return value:  Size  Location     Type
 19521 ;;                  1    wreg      void 
 19522 ;; Registers used:
 19523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19524 ;; Tracked objects:
 19525 ;;		On entry : 0/0
 19526 ;;		On exit  : 0/0
 19527 ;;		Unchanged: 0/0
 19528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19529 ;;      Params:         0       2       0       0       0       0       0       0       0
 19530 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19531 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19532 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19533 ;;Total ram usage:        4 bytes
 19534 ;; Hardware stack levels used:    1
 19535 ;; Hardware stack levels required when called:    7
 19536 ;; This function calls:
 19537 ;;		_ENC424J600_writeControlRegisterUnbanked
 19538 ;; This function is called by:
 19539 ;;		_ethernetController_init
 19540 ;; This function uses a non-reentrant model
 19541 ;;
 19542                           
 19543                           	psect	text80
 19544  004A3C                     __ptext80:
 19545                           	opt stack 0
 19546  004A3C                     _ENC424J600_setRXBufferStartAddress:
 19547                           	opt stack 22
 19548                           
 19549                           ;ENC424J600.c: 678: uint8_t lowByte = addr & 0x00ff;
 19550                           
 19551                           ;incstack = 0
 19552  004A3C  C06E  F070         	movff	ENC424J600_setRXBufferStartAddress@addr,ENC424J600_setRXBufferStartAddress@lowByt
      +                          e
 19553                           
 19554                           ;ENC424J600.c: 679: uint8_t highByte = (addr >> 8) & 0xff;
 19555  004A40  0100               	movlb	0	; () banked
 19556  004A42  516F               	movf	(ENC424J600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 19557  004A44  6F71               	movwf	ENC424J600_setRXBufferStartAddress@highByte& (0+255),b
 19558                           
 19559                           ; BSR set to: 0
 19560                           ;ENC424J600.c: 680: ENC424J600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 19561  004A46  0E70               	movlw	low ENC424J600_setRXBufferStartAddress@lowByte
 19562  004A48  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19563  004A4A  0E00               	movlw	high ENC424J600_setRXBufferStartAddress@lowByte
 19564  004A4C  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19565  004A4E  0E04               	movlw	4
 19566  004A50  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 19567                           
 19568                           ;ENC424J600.c: 681: ENC424J600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 19569  004A54  0E71               	movlw	low ENC424J600_setRXBufferStartAddress@highByte
 19570  004A56  0100               	movlb	0	; () banked
 19571  004A58  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19572  004A5A  0E00               	movlw	high ENC424J600_setRXBufferStartAddress@highByte
 19573  004A5C  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19574  004A5E  0E05               	movlw	5
 19575  004A60  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 19576  004A64  0012               	return		;funcret
 19577  004A66                     __end_of_ENC424J600_setRXBufferStartAddress:
 19578                           	opt stack 0
 19579                           tblptru	equ	0xFF8
 19580                           tblptrh	equ	0xFF7
 19581                           tblptrl	equ	0xFF6
 19582                           tablat	equ	0xFF5
 19583                           prodh	equ	0xFF4
 19584                           prodl	equ	0xFF3
 19585                           intcon	equ	0xFF2
 19586                           intcon3	equ	0xFF0
 19587                           indf0	equ	0xFEF
 19588                           postinc0	equ	0xFEE
 19589                           plusw0	equ	0xFEB
 19590                           fsr0h	equ	0xFEA
 19591                           fsr0l	equ	0xFE9
 19592                           wreg	equ	0xFE8
 19593                           indf1	equ	0xFE7
 19594                           postinc1	equ	0xFE6
 19595                           postdec1	equ	0xFE5
 19596                           plusw1	equ	0xFE3
 19597                           fsr1h	equ	0xFE2
 19598                           fsr1l	equ	0xFE1
 19599                           indf2	equ	0xFDF
 19600                           postinc2	equ	0xFDE
 19601                           postdec2	equ	0xFDD
 19602                           plusw2	equ	0xFDB
 19603                           fsr2h	equ	0xFDA
 19604                           fsr2l	equ	0xFD9
 19605                           status	equ	0xFD8
 19606                           
 19607 ;; *************** function _ENC424J600_setNextPacketPointer *****************
 19608 ;; Defined at:
 19609 ;;		line 621 in file "src/enc424j600/ENC424J600.c"
 19610 ;; Parameters:    Size  Location     Type
 19611 ;;  ptr             2    0[BANK0 ] unsigned int 
 19612 ;; Auto vars:     Size  Location     Type
 19613 ;;		None
 19614 ;; Return value:  Size  Location     Type
 19615 ;;                  1    wreg      void 
 19616 ;; Registers used:
 19617 ;;		None
 19618 ;; Tracked objects:
 19619 ;;		On entry : 0/0
 19620 ;;		On exit  : 0/0
 19621 ;;		Unchanged: 0/0
 19622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19623 ;;      Params:         0       2       0       0       0       0       0       0       0
 19624 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19625 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19626 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19627 ;;Total ram usage:        2 bytes
 19628 ;; Hardware stack levels used:    1
 19629 ;; Hardware stack levels required when called:    4
 19630 ;; This function calls:
 19631 ;;		Nothing
 19632 ;; This function is called by:
 19633 ;;		_ethernetController_init
 19634 ;;		_ethernetController_updateNextPacketPointer
 19635 ;; This function uses a non-reentrant model
 19636 ;;
 19637                           
 19638                           	psect	text81
 19639  004CFC                     __ptext81:
 19640                           	opt stack 0
 19641  004CFC                     _ENC424J600_setNextPacketPointer:
 19642                           	opt stack 23
 19643                           
 19644                           ;ENC424J600.c: 622: nextPacketPointer = ptr;
 19645                           
 19646                           ;incstack = 0
 19647  004CFC  C060  F044         	movff	ENC424J600_setNextPacketPointer@ptr,_nextPacketPointer
 19648  004D00  C061  F045         	movff	ENC424J600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 19649  004D04  0012               	return		;funcret
 19650  004D06                     __end_of_ENC424J600_setNextPacketPointer:
 19651                           	opt stack 0
 19652                           tblptru	equ	0xFF8
 19653                           tblptrh	equ	0xFF7
 19654                           tblptrl	equ	0xFF6
 19655                           tablat	equ	0xFF5
 19656                           prodh	equ	0xFF4
 19657                           prodl	equ	0xFF3
 19658                           intcon	equ	0xFF2
 19659                           intcon3	equ	0xFF0
 19660                           indf0	equ	0xFEF
 19661                           postinc0	equ	0xFEE
 19662                           plusw0	equ	0xFEB
 19663                           fsr0h	equ	0xFEA
 19664                           fsr0l	equ	0xFE9
 19665                           wreg	equ	0xFE8
 19666                           indf1	equ	0xFE7
 19667                           postinc1	equ	0xFE6
 19668                           postdec1	equ	0xFE5
 19669                           plusw1	equ	0xFE3
 19670                           fsr1h	equ	0xFE2
 19671                           fsr1l	equ	0xFE1
 19672                           indf2	equ	0xFDF
 19673                           postinc2	equ	0xFDE
 19674                           postdec2	equ	0xFDD
 19675                           plusw2	equ	0xFDB
 19676                           fsr2h	equ	0xFDA
 19677                           fsr2l	equ	0xFD9
 19678                           status	equ	0xFD8
 19679                           
 19680 ;; *************** function _ENC424J600_enableReception *****************
 19681 ;; Defined at:
 19682 ;;		line 707 in file "src/enc424j600/ENC424J600.c"
 19683 ;; Parameters:    Size  Location     Type
 19684 ;;		None
 19685 ;; Auto vars:     Size  Location     Type
 19686 ;;		None
 19687 ;; Return value:  Size  Location     Type
 19688 ;;                  1    wreg      void 
 19689 ;; Registers used:
 19690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19691 ;; Tracked objects:
 19692 ;;		On entry : 0/0
 19693 ;;		On exit  : 0/0
 19694 ;;		Unchanged: 0/0
 19695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19696 ;;      Params:         0       0       0       0       0       0       0       0       0
 19697 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19698 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19699 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19700 ;;Total ram usage:        0 bytes
 19701 ;; Hardware stack levels used:    1
 19702 ;; Hardware stack levels required when called:    7
 19703 ;; This function calls:
 19704 ;;		_ENC424J600_writeSingleByte
 19705 ;; This function is called by:
 19706 ;;		_ethernetController_init
 19707 ;;		_ethernetController_enableReception
 19708 ;; This function uses a non-reentrant model
 19709 ;;
 19710                           
 19711                           	psect	text82
 19712  004D06                     __ptext82:
 19713                           	opt stack 0
 19714  004D06                     _ENC424J600_enableReception:
 19715                           	opt stack 22
 19716                           
 19717                           ;ENC424J600.c: 708: ENC424J600_writeSingleByte(0b11101000);
 19718                           
 19719                           ;incstack = 0
 19720  004D06  0EE8               	movlw	232
 19721  004D08  EC2E  F026         	call	_ENC424J600_writeSingleByte
 19722  004D0C  0012               	return		;funcret
 19723  004D0E                     __end_of_ENC424J600_enableReception:
 19724                           	opt stack 0
 19725                           tblptru	equ	0xFF8
 19726                           tblptrh	equ	0xFF7
 19727                           tblptrl	equ	0xFF6
 19728                           tablat	equ	0xFF5
 19729                           prodh	equ	0xFF4
 19730                           prodl	equ	0xFF3
 19731                           intcon	equ	0xFF2
 19732                           intcon3	equ	0xFF0
 19733                           indf0	equ	0xFEF
 19734                           postinc0	equ	0xFEE
 19735                           plusw0	equ	0xFEB
 19736                           fsr0h	equ	0xFEA
 19737                           fsr0l	equ	0xFE9
 19738                           wreg	equ	0xFE8
 19739                           indf1	equ	0xFE7
 19740                           postinc1	equ	0xFE6
 19741                           postdec1	equ	0xFE5
 19742                           plusw1	equ	0xFE3
 19743                           fsr1h	equ	0xFE2
 19744                           fsr1l	equ	0xFE1
 19745                           indf2	equ	0xFDF
 19746                           postinc2	equ	0xFDE
 19747                           postdec2	equ	0xFDD
 19748                           plusw2	equ	0xFDB
 19749                           fsr2h	equ	0xFDA
 19750                           fsr2l	equ	0xFD9
 19751                           status	equ	0xFD8
 19752                           
 19753 ;; *************** function _ENC424J600_writeSingleByte *****************
 19754 ;; Defined at:
 19755 ;;		line 547 in file "src/enc424j600/ENC424J600.c"
 19756 ;; Parameters:    Size  Location     Type
 19757 ;;  opcode          1    wreg     unsigned char 
 19758 ;; Auto vars:     Size  Location     Type
 19759 ;;  opcode          1   10[BANK0 ] unsigned char 
 19760 ;; Return value:  Size  Location     Type
 19761 ;;                  1    wreg      void 
 19762 ;; Registers used:
 19763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19764 ;; Tracked objects:
 19765 ;;		On entry : 0/0
 19766 ;;		On exit  : 0/0
 19767 ;;		Unchanged: 0/0
 19768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19769 ;;      Params:         0       0       0       0       0       0       0       0       0
 19770 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19771 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19772 ;;      Totals:         0       1       0       0       0       0       0       0       0
 19773 ;;Total ram usage:        1 bytes
 19774 ;; Hardware stack levels used:    1
 19775 ;; Hardware stack levels required when called:    6
 19776 ;; This function calls:
 19777 ;;		_ENC424J600_writeSPI
 19778 ;; This function is called by:
 19779 ;;		_ethernetController_softReset
 19780 ;;		_ethernetController_sendPacket
 19781 ;;		_ethernetController_streamFromRXBuffer
 19782 ;;		_ethernetController_dropPacket
 19783 ;;		_ENC424J600_enableReception
 19784 ;;		_ENC424J600_disableReception
 19785 ;; This function uses a non-reentrant model
 19786 ;;
 19787                           
 19788                           	psect	text83
 19789  004C5C                     __ptext83:
 19790                           	opt stack 0
 19791  004C5C                     _ENC424J600_writeSingleByte:
 19792                           	opt stack 18
 19793                           
 19794                           ;incstack = 0
 19795                           ;ENC424J600_writeSingleByte@opcode stored from wreg
 19796  004C5C  0100               	movlb	0	; () banked
 19797  004C5E  6F6A               	movwf	ENC424J600_writeSingleByte@opcode& (0+255),b
 19798                           
 19799                           ;ENC424J600.c: 548: PORTBbits.RB4=0;
 19800  004C60  9881               	bcf	3969,4,c	;volatile
 19801                           
 19802                           ;ENC424J600.c: 549: ENC424J600_writeSPI(&opcode);
 19803  004C62  0E6A               	movlw	low ENC424J600_writeSingleByte@opcode
 19804  004C64  0100               	movlb	0	; () banked
 19805  004C66  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 19806  004C68  0E00               	movlw	high ENC424J600_writeSingleByte@opcode
 19807  004C6A  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 19808  004C6C  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 19809                           
 19810                           ;ENC424J600.c: 550: PORTBbits.RB4=1;
 19811  004C70  8881               	bsf	3969,4,c	;volatile
 19812  004C72  0012               	return		;funcret
 19813  004C74                     __end_of_ENC424J600_writeSingleByte:
 19814                           	opt stack 0
 19815                           tblptru	equ	0xFF8
 19816                           tblptrh	equ	0xFF7
 19817                           tblptrl	equ	0xFF6
 19818                           tablat	equ	0xFF5
 19819                           prodh	equ	0xFF4
 19820                           prodl	equ	0xFF3
 19821                           intcon	equ	0xFF2
 19822                           intcon3	equ	0xFF0
 19823                           indf0	equ	0xFEF
 19824                           postinc0	equ	0xFEE
 19825                           plusw0	equ	0xFEB
 19826                           fsr0h	equ	0xFEA
 19827                           fsr0l	equ	0xFE9
 19828                           wreg	equ	0xFE8
 19829                           indf1	equ	0xFE7
 19830                           postinc1	equ	0xFE6
 19831                           postdec1	equ	0xFE5
 19832                           plusw1	equ	0xFE3
 19833                           fsr1h	equ	0xFE2
 19834                           fsr1l	equ	0xFE1
 19835                           indf2	equ	0xFDF
 19836                           postinc2	equ	0xFDE
 19837                           postdec2	equ	0xFDD
 19838                           plusw2	equ	0xFDB
 19839                           fsr2h	equ	0xFDA
 19840                           fsr2l	equ	0xFD9
 19841                           status	equ	0xFD8
 19842                           
 19843 ;; *************** function _ENC424J600_enableAutoMACInsertion *****************
 19844 ;; Defined at:
 19845 ;;		line 693 in file "src/enc424j600/ENC424J600.c"
 19846 ;; Parameters:    Size  Location     Type
 19847 ;;		None
 19848 ;; Auto vars:     Size  Location     Type
 19849 ;;  temp            1   14[BANK0 ] unsigned char 
 19850 ;; Return value:  Size  Location     Type
 19851 ;;                  1    wreg      void 
 19852 ;; Registers used:
 19853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19854 ;; Tracked objects:
 19855 ;;		On entry : 0/0
 19856 ;;		On exit  : 0/0
 19857 ;;		Unchanged: 0/0
 19858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19859 ;;      Params:         0       0       0       0       0       0       0       0       0
 19860 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19861 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19862 ;;      Totals:         0       1       0       0       0       0       0       0       0
 19863 ;;Total ram usage:        1 bytes
 19864 ;; Hardware stack levels used:    1
 19865 ;; Hardware stack levels required when called:    7
 19866 ;; This function calls:
 19867 ;;		_ENC424J600_readControlRegisterUnbanked
 19868 ;;		_ENC424J600_writeControlRegisterUnbanked
 19869 ;; This function is called by:
 19870 ;;		_ethernetController_init
 19871 ;; This function uses a non-reentrant model
 19872 ;;
 19873                           
 19874                           	psect	text84
 19875  004AB6                     __ptext84:
 19876                           	opt stack 0
 19877  004AB6                     _ENC424J600_enableAutoMACInsertion:
 19878                           	opt stack 22
 19879                           
 19880                           ;ENC424J600.c: 694: uint8_t temp = 0;
 19881                           
 19882                           ;incstack = 0
 19883  004AB6  0E00               	movlw	0
 19884  004AB8  0100               	movlb	0	; () banked
 19885  004ABA  6F6E               	movwf	ENC424J600_enableAutoMACInsertion@temp& (0+255),b
 19886                           
 19887                           ; BSR set to: 0
 19888                           ;ENC424J600.c: 695: ENC424J600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 19889  004ABC  0E6E               	movlw	low ENC424J600_enableAutoMACInsertion@temp
 19890  004ABE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19891  004AC0  0E00               	movlw	high ENC424J600_enableAutoMACInsertion@temp
 19892  004AC2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19893  004AC4  0E6F               	movlw	111
 19894  004AC6  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 19895                           
 19896                           ;ENC424J600.c: 696: temp |= (1 << 5);
 19897  004ACA  0100               	movlb	0	; () banked
 19898  004ACC  8B6E               	bsf	ENC424J600_enableAutoMACInsertion@temp& (0+255),5,b
 19899                           
 19900                           ; BSR set to: 0
 19901                           ;ENC424J600.c: 697: ENC424J600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 19902  004ACE  0E6E               	movlw	low ENC424J600_enableAutoMACInsertion@temp
 19903  004AD0  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19904  004AD2  0E00               	movlw	high ENC424J600_enableAutoMACInsertion@temp
 19905  004AD4  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19906  004AD6  0E6F               	movlw	111
 19907  004AD8  EC62  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 19908  004ADC  0012               	return		;funcret
 19909  004ADE                     __end_of_ENC424J600_enableAutoMACInsertion:
 19910                           	opt stack 0
 19911                           tblptru	equ	0xFF8
 19912                           tblptrh	equ	0xFF7
 19913                           tblptrl	equ	0xFF6
 19914                           tablat	equ	0xFF5
 19915                           prodh	equ	0xFF4
 19916                           prodl	equ	0xFF3
 19917                           intcon	equ	0xFF2
 19918                           intcon3	equ	0xFF0
 19919                           indf0	equ	0xFEF
 19920                           postinc0	equ	0xFEE
 19921                           plusw0	equ	0xFEB
 19922                           fsr0h	equ	0xFEA
 19923                           fsr0l	equ	0xFE9
 19924                           wreg	equ	0xFE8
 19925                           indf1	equ	0xFE7
 19926                           postinc1	equ	0xFE6
 19927                           postdec1	equ	0xFE5
 19928                           plusw1	equ	0xFE3
 19929                           fsr1h	equ	0xFE2
 19930                           fsr1l	equ	0xFE1
 19931                           indf2	equ	0xFDF
 19932                           postinc2	equ	0xFDE
 19933                           postdec2	equ	0xFDD
 19934                           plusw2	equ	0xFDB
 19935                           fsr2h	equ	0xFDA
 19936                           fsr2l	equ	0xFD9
 19937                           status	equ	0xFD8
 19938                           
 19939 ;; *************** function _ENC424J600_writeControlRegisterUnbanked *****************
 19940 ;; Defined at:
 19941 ;;		line 553 in file "src/enc424j600/ENC424J600.c"
 19942 ;; Parameters:    Size  Location     Type
 19943 ;;  addr            1    wreg     unsigned char 
 19944 ;;  data            2   10[BANK0 ] PTR unsigned char 
 19945 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_disable@temp(1), ENC424J600_enable@temp(1), ENC424J600_disable
      +AutoMACInsertion@temp(1), 
 19946 ;;		 -> ENC424J600_enableAutoMACInsertion@temp(1), ENC424J600_setRXTailPointer@highByte(1), ENC424J600_setRXTailPointer@
      +lowByte(1), ENC424J600_setRXBufferStartAddress@highByte(1), 
 19947 ;;		 -> ENC424J600_setRXBufferStartAddress@lowByte(1), ENC424J600_setTXStartAddress@highByte(1), ENC424J600_setTXStartAd
      +dress@lowByte(1), ENC424J600_setTXLength@highByte(1), 
 19948 ;;		 -> ENC424J600_setTXLength@lowByte(1), ENC424J600_readPHYRegister@temp(1), ENC424J600_readPHYRegister@unusedBits(1),
      + ENC424J600_readPHYRegister@PHYaddress(1), 
 19949 ;;		 -> ethernetController_setLEDConfig@data(1), mac.address(6), ethernetController_setMacAddress@mac(6), ethernetContro
      +ller_softReset@dataToSend(2), 
 19950 ;; Auto vars:     Size  Location     Type
 19951 ;;  addr            1   12[BANK0 ] unsigned char 
 19952 ;;  opcode          1   13[BANK0 ] unsigned char 
 19953 ;; Return value:  Size  Location     Type
 19954 ;;                  1    wreg      void 
 19955 ;; Registers used:
 19956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19957 ;; Tracked objects:
 19958 ;;		On entry : 0/0
 19959 ;;		On exit  : 0/0
 19960 ;;		Unchanged: 0/0
 19961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19962 ;;      Params:         0       2       0       0       0       0       0       0       0
 19963 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19964 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19965 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19966 ;;Total ram usage:        4 bytes
 19967 ;; Hardware stack levels used:    1
 19968 ;; Hardware stack levels required when called:    6
 19969 ;; This function calls:
 19970 ;;		_ENC424J600_writeSPI
 19971 ;; This function is called by:
 19972 ;;		_ethernetController_softReset
 19973 ;;		_ethernetController_setLEDConfig
 19974 ;;		_ENC424J600_readPHYRegister
 19975 ;;		_ENC424J600_setTXLength
 19976 ;;		_ENC424J600_setTXStartAddress
 19977 ;;		_ENC424J600_setRXBufferStartAddress
 19978 ;;		_ENC424J600_setRXTailPointer
 19979 ;;		_ENC424J600_enableAutoMACInsertion
 19980 ;;		_ENC424J600_clearInterruptFlag
 19981 ;;		_ethernetController_setMacAddress
 19982 ;;		_ENC424J600_disableAutoMACInsertion
 19983 ;;		_ENC424J600_enable
 19984 ;;		_ENC424J600_disable
 19985 ;; This function uses a non-reentrant model
 19986 ;;
 19987                           
 19988                           	psect	text85
 19989  0048C4                     __ptext85:
 19990                           	opt stack 0
 19991  0048C4                     _ENC424J600_writeControlRegisterUnbanked:
 19992                           	opt stack 17
 19993                           
 19994                           ;incstack = 0
 19995                           ;ENC424J600_writeControlRegisterUnbanked@addr stored from wreg
 19996  0048C4  0100               	movlb	0	; () banked
 19997  0048C6  6F6C               	movwf	ENC424J600_writeControlRegisterUnbanked@addr& (0+255),b
 19998                           
 19999                           ;ENC424J600.c: 554: uint8_t opcode = 0x22;
 20000  0048C8  0E22               	movlw	34
 20001  0048CA  0100               	movlb	0	; () banked
 20002  0048CC  6F6D               	movwf	ENC424J600_writeControlRegisterUnbanked@opcode& (0+255),b
 20003                           
 20004                           ; BSR set to: 0
 20005                           ;ENC424J600.c: 555: PORTBbits.RB4=0;
 20006  0048CE  9881               	bcf	3969,4,c	;volatile
 20007                           
 20008                           ; BSR set to: 0
 20009                           ;ENC424J600.c: 556: ENC424J600_writeSPI(&opcode);
 20010  0048D0  0E6D               	movlw	low ENC424J600_writeControlRegisterUnbanked@opcode
 20011  0048D2  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 20012  0048D4  0E00               	movlw	high ENC424J600_writeControlRegisterUnbanked@opcode
 20013  0048D6  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 20014  0048D8  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 20015                           
 20016                           ;ENC424J600.c: 557: ENC424J600_writeSPI(&addr);
 20017  0048DC  0E6C               	movlw	low ENC424J600_writeControlRegisterUnbanked@addr
 20018  0048DE  0100               	movlb	0	; () banked
 20019  0048E0  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 20020  0048E2  0E00               	movlw	high ENC424J600_writeControlRegisterUnbanked@addr
 20021  0048E4  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 20022  0048E6  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 20023                           
 20024                           ;ENC424J600.c: 558: ENC424J600_writeSPI(data);
 20025  0048EA  C06A  F060         	movff	ENC424J600_writeControlRegisterUnbanked@data,ENC424J600_writeSPI@data
 20026  0048EE  C06B  F061         	movff	ENC424J600_writeControlRegisterUnbanked@data+1,ENC424J600_writeSPI@data+1
 20027  0048F2  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 20028                           
 20029                           ;ENC424J600.c: 559: PORTBbits.RB4=1;
 20030  0048F6  8881               	bsf	3969,4,c	;volatile
 20031  0048F8  0012               	return		;funcret
 20032  0048FA                     __end_of_ENC424J600_writeControlRegisterUnbanked:
 20033                           	opt stack 0
 20034                           tblptru	equ	0xFF8
 20035                           tblptrh	equ	0xFF7
 20036                           tblptrl	equ	0xFF6
 20037                           tablat	equ	0xFF5
 20038                           prodh	equ	0xFF4
 20039                           prodl	equ	0xFF3
 20040                           intcon	equ	0xFF2
 20041                           intcon3	equ	0xFF0
 20042                           indf0	equ	0xFEF
 20043                           postinc0	equ	0xFEE
 20044                           plusw0	equ	0xFEB
 20045                           fsr0h	equ	0xFEA
 20046                           fsr0l	equ	0xFE9
 20047                           wreg	equ	0xFE8
 20048                           indf1	equ	0xFE7
 20049                           postinc1	equ	0xFE6
 20050                           postdec1	equ	0xFE5
 20051                           plusw1	equ	0xFE3
 20052                           fsr1h	equ	0xFE2
 20053                           fsr1l	equ	0xFE1
 20054                           indf2	equ	0xFDF
 20055                           postinc2	equ	0xFDE
 20056                           postdec2	equ	0xFDD
 20057                           plusw2	equ	0xFDB
 20058                           fsr2h	equ	0xFDA
 20059                           fsr2l	equ	0xFD9
 20060                           status	equ	0xFD8
 20061                           
 20062 ;; *************** function _ethernetController_getDeviceName *****************
 20063 ;; Defined at:
 20064 ;;		line 144 in file "src/enc424j600/ENC424J600.c"
 20065 ;; Parameters:    Size  Location     Type
 20066 ;;		None
 20067 ;; Auto vars:     Size  Location     Type
 20068 ;;  string         11    2[BANK0 ] const unsigned char [11]
 20069 ;; Return value:  Size  Location     Type
 20070 ;;                  2    0[BANK0 ] PTR unsigned char 
 20071 ;; Registers used:
 20072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20073 ;; Tracked objects:
 20074 ;;		On entry : 0/0
 20075 ;;		On exit  : 0/0
 20076 ;;		Unchanged: 0/0
 20077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20078 ;;      Params:         0       2       0       0       0       0       0       0       0
 20079 ;;      Locals:         0      11       0       0       0       0       0       0       0
 20080 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20081 ;;      Totals:         0      13       0       0       0       0       0       0       0
 20082 ;;Total ram usage:       13 bytes
 20083 ;; Hardware stack levels used:    1
 20084 ;; Hardware stack levels required when called:    4
 20085 ;; This function calls:
 20086 ;;		Nothing
 20087 ;; This function is called by:
 20088 ;;		_main
 20089 ;; This function uses a non-reentrant model
 20090 ;;
 20091                           
 20092                           	psect	text86
 20093  004B4E                     __ptext86:
 20094                           	opt stack 0
 20095  004B4E                     _ethernetController_getDeviceName:
 20096                           	opt stack 26
 20097                           
 20098                           ;ENC424J600.c: 145: const char string [] = "ENC424J600";
 20099                           
 20100                           ;incstack = 0
 20101  004B4E  0E61               	movlw	low ethernetController_getDeviceName@F5862
 20102  004B50  6EF6               	movwf	tblptrl,c
 20103  004B52                     	if	1	;There is more than 1 active tblptr byte
 20104  004B52  0E7C               	movlw	high ethernetController_getDeviceName@F5862
 20105  004B54  6EF7               	movwf	tblptrh,c
 20106  004B56                     	endif
 20107  004B56                     	if	0	;There are less than 3 active tblptr bytes
 20108  004B56                     	endif
 20109  004B56  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 20110  004B5A  0E0A               	movlw	10
 20111  004B5C                     u11150:
 20112  004B5C  0009               	tblrd		*+
 20113  004B5E  CFF5 FFDE          	movff	tablat,postinc2
 20114  004B62  06E8               	decf	wreg,f,c
 20115  004B64  E2FB               	bc	u11150
 20116                           
 20117                           ;ENC424J600.c: 146: return string;
 20118  004B66  0E62               	movlw	low ethernetController_getDeviceName@string
 20119  004B68  0100               	movlb	0	; () banked
 20120  004B6A  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 20121  004B6C  0E00               	movlw	high ethernetController_getDeviceName@string
 20122  004B6E  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 20123  004B70  0012               	return	
 20124  004B72                     __end_of_ethernetController_getDeviceName:
 20125                           	opt stack 0
 20126                           tblptru	equ	0xFF8
 20127                           tblptrh	equ	0xFF7
 20128                           tblptrl	equ	0xFF6
 20129                           tablat	equ	0xFF5
 20130                           prodh	equ	0xFF4
 20131                           prodl	equ	0xFF3
 20132                           intcon	equ	0xFF2
 20133                           intcon3	equ	0xFF0
 20134                           indf0	equ	0xFEF
 20135                           postinc0	equ	0xFEE
 20136                           plusw0	equ	0xFEB
 20137                           fsr0h	equ	0xFEA
 20138                           fsr0l	equ	0xFE9
 20139                           wreg	equ	0xFE8
 20140                           indf1	equ	0xFE7
 20141                           postinc1	equ	0xFE6
 20142                           postdec1	equ	0xFE5
 20143                           plusw1	equ	0xFE3
 20144                           fsr1h	equ	0xFE2
 20145                           fsr1l	equ	0xFE1
 20146                           indf2	equ	0xFDF
 20147                           postinc2	equ	0xFDE
 20148                           postdec2	equ	0xFDD
 20149                           plusw2	equ	0xFDB
 20150                           fsr2h	equ	0xFDA
 20151                           fsr2l	equ	0xFD9
 20152                           status	equ	0xFD8
 20153                           
 20154 ;; *************** function _ethernetController_getCurrentPacketCount *****************
 20155 ;; Defined at:
 20156 ;;		line 493 in file "src/enc424j600/ENC424J600.c"
 20157 ;; Parameters:    Size  Location     Type
 20158 ;;		None
 20159 ;; Auto vars:     Size  Location     Type
 20160 ;;		None
 20161 ;; Return value:  Size  Location     Type
 20162 ;;                  1    wreg      unsigned char 
 20163 ;; Registers used:
 20164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20165 ;; Tracked objects:
 20166 ;;		On entry : 0/0
 20167 ;;		On exit  : 0/0
 20168 ;;		Unchanged: 0/0
 20169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20170 ;;      Params:         0       0       0       0       0       0       0       0       0
 20171 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20172 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20173 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20174 ;;Total ram usage:        0 bytes
 20175 ;; Hardware stack levels used:    1
 20176 ;; Hardware stack levels required when called:    8
 20177 ;; This function calls:
 20178 ;;		_ENC424J600_getPacketCount
 20179 ;; This function is called by:
 20180 ;;		_main
 20181 ;; This function uses a non-reentrant model
 20182 ;;
 20183                           
 20184                           	psect	text87
 20185  004D14                     __ptext87:
 20186                           	opt stack 0
 20187  004D14                     _ethernetController_getCurrentPacketCount:
 20188                           	opt stack 22
 20189                           
 20190                           ;ENC424J600.c: 494: return ENC424J600_getPacketCount();
 20191                           
 20192                           ; BSR set to: 0
 20193                           ;incstack = 0
 20194  004D14  EC21  F026         	call	_ENC424J600_getPacketCount	;wreg free
 20195  004D18  0012               	return	
 20196  004D1A                     __end_of_ethernetController_getCurrentPacketCount:
 20197                           	opt stack 0
 20198                           tblptru	equ	0xFF8
 20199                           tblptrh	equ	0xFF7
 20200                           tblptrl	equ	0xFF6
 20201                           tablat	equ	0xFF5
 20202                           prodh	equ	0xFF4
 20203                           prodl	equ	0xFF3
 20204                           intcon	equ	0xFF2
 20205                           intcon3	equ	0xFF0
 20206                           indf0	equ	0xFEF
 20207                           postinc0	equ	0xFEE
 20208                           plusw0	equ	0xFEB
 20209                           fsr0h	equ	0xFEA
 20210                           fsr0l	equ	0xFE9
 20211                           wreg	equ	0xFE8
 20212                           indf1	equ	0xFE7
 20213                           postinc1	equ	0xFE6
 20214                           postdec1	equ	0xFE5
 20215                           plusw1	equ	0xFE3
 20216                           fsr1h	equ	0xFE2
 20217                           fsr1l	equ	0xFE1
 20218                           indf2	equ	0xFDF
 20219                           postinc2	equ	0xFDE
 20220                           postdec2	equ	0xFDD
 20221                           plusw2	equ	0xFDB
 20222                           fsr2h	equ	0xFDA
 20223                           fsr2l	equ	0xFD9
 20224                           status	equ	0xFD8
 20225                           
 20226 ;; *************** function _ENC424J600_getPacketCount *****************
 20227 ;; Defined at:
 20228 ;;		line 629 in file "src/enc424j600/ENC424J600.c"
 20229 ;; Parameters:    Size  Location     Type
 20230 ;;		None
 20231 ;; Auto vars:     Size  Location     Type
 20232 ;;  lowByte         1   14[BANK0 ] unsigned char 
 20233 ;; Return value:  Size  Location     Type
 20234 ;;                  1    wreg      unsigned char 
 20235 ;; Registers used:
 20236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20237 ;; Tracked objects:
 20238 ;;		On entry : 0/0
 20239 ;;		On exit  : 0/0
 20240 ;;		Unchanged: 0/0
 20241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20242 ;;      Params:         0       0       0       0       0       0       0       0       0
 20243 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20244 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20245 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20246 ;;Total ram usage:        1 bytes
 20247 ;; Hardware stack levels used:    1
 20248 ;; Hardware stack levels required when called:    7
 20249 ;; This function calls:
 20250 ;;		_ENC424J600_readControlRegisterUnbanked
 20251 ;; This function is called by:
 20252 ;;		_ethernetController_newPacketAvailable
 20253 ;;		_ethernetController_getCurrentPacketCount
 20254 ;; This function uses a non-reentrant model
 20255 ;;
 20256                           
 20257                           	psect	text88
 20258  004C42                     __ptext88:
 20259                           	opt stack 0
 20260  004C42                     _ENC424J600_getPacketCount:
 20261                           	opt stack 21
 20262                           
 20263                           ;ENC424J600.c: 630: uint8_t lowByte = 0;
 20264                           
 20265                           ;incstack = 0
 20266  004C42  0E00               	movlw	0
 20267  004C44  0100               	movlb	0	; () banked
 20268  004C46  6F6E               	movwf	ENC424J600_getPacketCount@lowByte& (0+255),b
 20269                           
 20270                           ; BSR set to: 0
 20271                           ;ENC424J600.c: 631: ENC424J600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 20272  004C48  0E6E               	movlw	low ENC424J600_getPacketCount@lowByte
 20273  004C4A  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 20274  004C4C  0E00               	movlw	high ENC424J600_getPacketCount@lowByte
 20275  004C4E  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 20276  004C50  0E1A               	movlw	26
 20277  004C52  EC7D  F024         	call	_ENC424J600_readControlRegisterUnbanked
 20278                           
 20279                           ;ENC424J600.c: 632: return (uint32_t) lowByte;
 20280  004C56  0100               	movlb	0	; () banked
 20281  004C58  516E               	movf	ENC424J600_getPacketCount@lowByte& (0+255),w,b
 20282  004C5A  0012               	return	
 20283  004C5C                     __end_of_ENC424J600_getPacketCount:
 20284                           	opt stack 0
 20285                           tblptru	equ	0xFF8
 20286                           tblptrh	equ	0xFF7
 20287                           tblptrl	equ	0xFF6
 20288                           tablat	equ	0xFF5
 20289                           prodh	equ	0xFF4
 20290                           prodl	equ	0xFF3
 20291                           intcon	equ	0xFF2
 20292                           intcon3	equ	0xFF0
 20293                           indf0	equ	0xFEF
 20294                           postinc0	equ	0xFEE
 20295                           plusw0	equ	0xFEB
 20296                           fsr0h	equ	0xFEA
 20297                           fsr0l	equ	0xFE9
 20298                           wreg	equ	0xFE8
 20299                           indf1	equ	0xFE7
 20300                           postinc1	equ	0xFE6
 20301                           postdec1	equ	0xFE5
 20302                           plusw1	equ	0xFE3
 20303                           fsr1h	equ	0xFE2
 20304                           fsr1l	equ	0xFE1
 20305                           indf2	equ	0xFDF
 20306                           postinc2	equ	0xFDE
 20307                           postdec2	equ	0xFDD
 20308                           plusw2	equ	0xFDB
 20309                           fsr2h	equ	0xFDA
 20310                           fsr2l	equ	0xFD9
 20311                           status	equ	0xFD8
 20312                           
 20313 ;; *************** function _ENC424J600_readControlRegisterUnbanked *****************
 20314 ;; Defined at:
 20315 ;;		line 562 in file "src/enc424j600/ENC424J600.c"
 20316 ;; Parameters:    Size  Location     Type
 20317 ;;  addr            1    wreg     unsigned char 
 20318 ;;  data            2   10[BANK0 ] PTR unsigned char 
 20319 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_getInterruptFlags@low(1), ENC424J600_getInterruptFlags@high(1)
      +, ENC424J600_disable@temp(1), 
 20320 ;;		 -> ENC424J600_enable@temp(1), ENC424J600_disableAutoMACInsertion@temp(1), ENC424J600_enableAutoMACInsertion@temp(1)
      +, ENC424J600_getPacketCount@lowByte(1), 
 20321 ;;		 -> ENC424J600_readPHYRegister@highByte(1), ENC424J600_readPHYRegister@lowByte(1), ENC424J600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 20322 ;;		 -> ethernetController_updateLinkStatus@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), ethernetCo
      +ntroller_getSiliconRevision@data(1), 
 20323 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 20324 ;; Auto vars:     Size  Location     Type
 20325 ;;  addr            1   12[BANK0 ] unsigned char 
 20326 ;;  opcode          1   13[BANK0 ] unsigned char 
 20327 ;; Return value:  Size  Location     Type
 20328 ;;                  1    wreg      void 
 20329 ;; Registers used:
 20330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20331 ;; Tracked objects:
 20332 ;;		On entry : 0/0
 20333 ;;		On exit  : 0/0
 20334 ;;		Unchanged: 0/0
 20335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20336 ;;      Params:         0       2       0       0       0       0       0       0       0
 20337 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20338 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20339 ;;      Totals:         0       4       0       0       0       0       0       0       0
 20340 ;;Total ram usage:        4 bytes
 20341 ;; Hardware stack levels used:    1
 20342 ;; Hardware stack levels required when called:    6
 20343 ;; This function calls:
 20344 ;;		_ENC424J600_readSPI
 20345 ;;		_ENC424J600_writeSPI
 20346 ;; This function is called by:
 20347 ;;		_ethernetController_softReset
 20348 ;;		_ethernetController_checkDeviceId
 20349 ;;		_ethernetController_getMacAddress
 20350 ;;		_ethernetController_updateLinkStatus
 20351 ;;		_ethernetController_setLEDConfig
 20352 ;;		_ENC424J600_readPHYRegister
 20353 ;;		_ENC424J600_getPacketCount
 20354 ;;		_ENC424J600_enableAutoMACInsertion
 20355 ;;		_ENC424J600_getInterruptFlags
 20356 ;;		_ENC424J600_clearInterruptFlag
 20357 ;;		_ethernetController_getSiliconRevision
 20358 ;;		_ENC424J600_disableAutoMACInsertion
 20359 ;;		_ENC424J600_enable
 20360 ;;		_ENC424J600_disable
 20361 ;; This function uses a non-reentrant model
 20362 ;;
 20363                           
 20364                           	psect	text89
 20365  0048FA                     __ptext89:
 20366                           	opt stack 0
 20367  0048FA                     _ENC424J600_readControlRegisterUnbanked:
 20368                           	opt stack 19
 20369                           
 20370                           ; BSR set to: 0
 20371                           ;incstack = 0
 20372                           ;ENC424J600_readControlRegisterUnbanked@addr stored from wreg
 20373  0048FA  0100               	movlb	0	; () banked
 20374  0048FC  6F6C               	movwf	ENC424J600_readControlRegisterUnbanked@addr& (0+255),b
 20375                           
 20376                           ;ENC424J600.c: 563: uint8_t opcode = 0x20;
 20377  0048FE  0E20               	movlw	32
 20378  004900  0100               	movlb	0	; () banked
 20379  004902  6F6D               	movwf	ENC424J600_readControlRegisterUnbanked@opcode& (0+255),b
 20380                           
 20381                           ; BSR set to: 0
 20382                           ;ENC424J600.c: 564: PORTBbits.RB4=0;
 20383  004904  9881               	bcf	3969,4,c	;volatile
 20384                           
 20385                           ; BSR set to: 0
 20386                           ;ENC424J600.c: 565: ENC424J600_writeSPI(&opcode);
 20387  004906  0E6D               	movlw	low ENC424J600_readControlRegisterUnbanked@opcode
 20388  004908  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 20389  00490A  0E00               	movlw	high ENC424J600_readControlRegisterUnbanked@opcode
 20390  00490C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 20391  00490E  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 20392                           
 20393                           ;ENC424J600.c: 566: ENC424J600_writeSPI(&addr);
 20394  004912  0E6C               	movlw	low ENC424J600_readControlRegisterUnbanked@addr
 20395  004914  0100               	movlb	0	; () banked
 20396  004916  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 20397  004918  0E00               	movlw	high ENC424J600_readControlRegisterUnbanked@addr
 20398  00491A  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 20399  00491C  ECAB  F021         	call	_ENC424J600_writeSPI	;wreg free
 20400                           
 20401                           ;ENC424J600.c: 567: ENC424J600_readSPI(data);
 20402  004920  C06A  F060         	movff	ENC424J600_readControlRegisterUnbanked@data,ENC424J600_readSPI@data
 20403  004924  C06B  F061         	movff	ENC424J600_readControlRegisterUnbanked@data+1,ENC424J600_readSPI@data+1
 20404  004928  EC0F  F021         	call	_ENC424J600_readSPI	;wreg free
 20405                           
 20406                           ;ENC424J600.c: 568: PORTBbits.RB4=1;
 20407  00492C  8881               	bsf	3969,4,c	;volatile
 20408  00492E  0012               	return		;funcret
 20409  004930                     __end_of_ENC424J600_readControlRegisterUnbanked:
 20410                           	opt stack 0
 20411                           tblptru	equ	0xFF8
 20412                           tblptrh	equ	0xFF7
 20413                           tblptrl	equ	0xFF6
 20414                           tablat	equ	0xFF5
 20415                           prodh	equ	0xFF4
 20416                           prodl	equ	0xFF3
 20417                           intcon	equ	0xFF2
 20418                           intcon3	equ	0xFF0
 20419                           indf0	equ	0xFEF
 20420                           postinc0	equ	0xFEE
 20421                           plusw0	equ	0xFEB
 20422                           fsr0h	equ	0xFEA
 20423                           fsr0l	equ	0xFE9
 20424                           wreg	equ	0xFE8
 20425                           indf1	equ	0xFE7
 20426                           postinc1	equ	0xFE6
 20427                           postdec1	equ	0xFE5
 20428                           plusw1	equ	0xFE3
 20429                           fsr1h	equ	0xFE2
 20430                           fsr1l	equ	0xFE1
 20431                           indf2	equ	0xFDF
 20432                           postinc2	equ	0xFDE
 20433                           postdec2	equ	0xFDD
 20434                           plusw2	equ	0xFDB
 20435                           fsr2h	equ	0xFDA
 20436                           fsr2l	equ	0xFD9
 20437                           status	equ	0xFD8
 20438                           
 20439 ;; *************** function _ENC424J600_writeSPI *****************
 20440 ;; Defined at:
 20441 ;;		line 522 in file "src/enc424j600/ENC424J600.c"
 20442 ;; Parameters:    Size  Location     Type
 20443 ;;  data            2    0[BANK0 ] PTR unsigned char 
 20444 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_disable@temp(1), ENC424J600_enable@temp(1), ENC424J600_disable
      +AutoMACInsertion@temp(1), 
 20445 ;;		 -> ENC424J600_enableAutoMACInsertion@temp(1), ENC424J600_setRXTailPointer@highByte(1), ENC424J600_setRXTailPointer@
      +lowByte(1), ENC424J600_setRXBufferStartAddress@highByte(1), 
 20446 ;;		 -> ENC424J600_setRXBufferStartAddress@lowByte(1), ENC424J600_setERXDATAReadPointer@highByte(1), ENC424J600_setERXDA
      +TAReadPointer@lowByte(1), ENC424J600_setERXDATAReadPointer@opcode(1), 
 20447 ;;		 -> ENC424J600_setGPDATAReadPointer@highByte(1), ENC424J600_setGPDATAReadPointer@lowByte(1), ENC424J600_setGPDATARea
      +dPointer@opcode(1), ENC424J600_setGPDATAWritePointer@highByte(1), 
 20448 ;;		 -> ENC424J600_setGPDATAWritePointer@lowByte(1), ENC424J600_setGPDATAWritePointer@opcode(1), ENC424J600_setTXStartAd
      +dress@highByte(1), ENC424J600_setTXStartAddress@lowByte(1), 
 20449 ;;		 -> ENC424J600_setTXLength@highByte(1), ENC424J600_setTXLength@lowByte(1), ENC424J600_readPHYRegister@temp(1), ENC42
      +4J600_readPHYRegister@unusedBits(1), 
 20450 ;;		 -> ENC424J600_readPHYRegister@PHYaddress(1), ENC424J600_readControlRegisterUnbanked@addr(1), ENC424J600_readControl
      +RegisterUnbanked@opcode(1), ENC424J600_writeControlRegisterUnbanked@addr(1), 
 20451 ;;		 -> ENC424J600_writeControlRegisterUnbanked@opcode(1), ENC424J600_writeSingleByte@opcode(1), ethernetController_setL
      +EDConfig@data(1), ethernetController_streamFromRXBuffer@opcode(1), 
 20452 ;;		 -> ethernetController_updateNextPacketPointer@opcode(1), ethernetController_getRSV@opcode(1), ethernetController_ge
      +tEtherTypeField@opcode(1), ethernetController_getSourceMACAddress@opcode(1), 
 20453 ;;		 -> ethernetController_getDestinationMACAddress@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@opcode(1),
      + ethernetController_writeEtherTypeFieldToBuffer@highByte(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), 
 20454 ;;		 -> ethernetController_writeDestinationMACAddress@opcode(1), ethernetController_writeDestinationMACAddress@data(6), 
      +ethernetController_streamToTransmitBuffer@data(1), ethernetController_streamToTransmitBuffer@opcode(1), 
 20455 ;;		 -> mac.address(6), ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 20456 ;; Auto vars:     Size  Location     Type
 20457 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 20458 ;; Return value:  Size  Location     Type
 20459 ;;                  1    wreg      void 
 20460 ;; Registers used:
 20461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20462 ;; Tracked objects:
 20463 ;;		On entry : 0/0
 20464 ;;		On exit  : 0/0
 20465 ;;		Unchanged: 0/0
 20466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20467 ;;      Params:         0       2       0       0       0       0       0       0       0
 20468 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20469 ;;      Temps:          0       4       0       0       0       0       0       0       0
 20470 ;;      Totals:         0      10       0       0       0       0       0       0       0
 20471 ;;Total ram usage:       10 bytes
 20472 ;; Hardware stack levels used:    1
 20473 ;; Hardware stack levels required when called:    5
 20474 ;; This function calls:
 20475 ;;		_ENC424J600_initSPI
 20476 ;; This function is called by:
 20477 ;;		_ethernetController_streamToTransmitBuffer
 20478 ;;		_ethernetController_writeDestinationMACAddress
 20479 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 20480 ;;		_ethernetController_getSourceMACAddress
 20481 ;;		_ethernetController_getEtherTypeField
 20482 ;;		_ethernetController_getRSV
 20483 ;;		_ethernetController_updateNextPacketPointer
 20484 ;;		_ethernetController_streamFromRXBuffer
 20485 ;;		_ENC424J600_writeSingleByte
 20486 ;;		_ENC424J600_writeControlRegisterUnbanked
 20487 ;;		_ENC424J600_readControlRegisterUnbanked
 20488 ;;		_ENC424J600_setGPDATAWritePointer
 20489 ;;		_ENC424J600_setERXDATAReadPointer
 20490 ;;		_ethernetController_getDestinationMACAddress
 20491 ;;		_ENC424J600_setGPDATAReadPointer
 20492 ;; This function uses a non-reentrant model
 20493 ;;
 20494                           
 20495                           	psect	text90
 20496  004356                     __ptext90:
 20497                           	opt stack 0
 20498  004356                     _ENC424J600_writeSPI:
 20499                           	opt stack 19
 20500                           
 20501                           ;ENC424J600.c: 524: uint32_t timeoutCounter = 0;
 20502                           
 20503                           ;incstack = 0
 20504  004356  0E00               	movlw	0
 20505  004358  0100               	movlb	0	; () banked
 20506  00435A  6F66               	movwf	ENC424J600_writeSPI@timeoutCounter& (0+255),b
 20507  00435C  0E00               	movlw	0
 20508  00435E  6F67               	movwf	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),b
 20509  004360  0E00               	movlw	0
 20510  004362  6F68               	movwf	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),b
 20511  004364  0E00               	movlw	0
 20512  004366  6F69               	movwf	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),b
 20513                           
 20514                           ; BSR set to: 0
 20515                           ;ENC424J600.c: 525: SSP1BUF = *data;
 20516  004368  C060  FFD9         	movff	ENC424J600_writeSPI@data,fsr2l
 20517  00436C  C061  FFDA         	movff	ENC424J600_writeSPI@data+1,fsr2h
 20518  004370  50DF               	movf	indf2,w,c
 20519  004372  6EC9               	movwf	4041,c	;volatile
 20520  004374                     
 20521                           ; BSR set to: 0
 20522                           
 20523                           ; BSR set to: 0
 20524  004374  B0C7               	btfsc	4039,0,c	;volatile
 20525  004376  D015               	goto	u7920
 20526                           
 20527                           ; BSR set to: 0
 20528  004378  C066  F062         	movff	ENC424J600_writeSPI@timeoutCounter,??_ENC424J600_writeSPI
 20529  00437C  C067  F063         	movff	ENC424J600_writeSPI@timeoutCounter+1,??_ENC424J600_writeSPI+1
 20530  004380  C068  F064         	movff	ENC424J600_writeSPI@timeoutCounter+2,??_ENC424J600_writeSPI+2
 20531  004384  C069  F065         	movff	ENC424J600_writeSPI@timeoutCounter+3,??_ENC424J600_writeSPI+3
 20532  004388  2B66               	incf	ENC424J600_writeSPI@timeoutCounter& (0+255),f,b
 20533  00438A  0E00               	movlw	0
 20534  00438C  2367               	addwfc	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),f,b
 20535  00438E  2368               	addwfc	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),f,b
 20536  004390  2369               	addwfc	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),f,b
 20537  004392  5165               	movf	(??_ENC424J600_writeSPI+3)& (0+255),w,b
 20538  004394  1164               	iorwf	(??_ENC424J600_writeSPI+2)& (0+255),w,b
 20539  004396  E105               	bnz	l7049
 20540  004398  2962               	incf	??_ENC424J600_writeSPI& (0+255),w,b
 20541  00439A  0E0F               	movlw	15
 20542  00439C  5963               	subwfb	(??_ENC424J600_writeSPI+1)& (0+255),w,b
 20543  00439E  A0D8               	btfss	status,0,c
 20544  0043A0  D7E9               	goto	l232
 20545  0043A2                     u7920:
 20546  0043A2                     l7049:
 20547                           
 20548                           ; BSR set to: 0
 20549                           ;ENC424J600.c: 527: if (timeoutCounter >= 0xfff) {
 20550  0043A2  5169               	movf	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),w,b
 20551  0043A4  1168               	iorwf	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),w,b
 20552  0043A6  E105               	bnz	u7930
 20553  0043A8  2966               	incf	ENC424J600_writeSPI@timeoutCounter& (0+255),w,b
 20554  0043AA  0E0F               	movlw	15
 20555  0043AC  5967               	subwfb	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),w,b
 20556  0043AE  A0D8               	btfss	status,0,c
 20557  0043B0  0012               	return	
 20558  0043B2                     u7930:
 20559                           
 20560                           ; BSR set to: 0
 20561                           ;ENC424J600.c: 528: PORTBbits.RB4=1;
 20562  0043B2  8881               	bsf	3969,4,c	;volatile
 20563                           
 20564                           ; BSR set to: 0
 20565                           ;ENC424J600.c: 529: ENC424J600_initSPI();
 20566  0043B4  EC06  F026         	call	_ENC424J600_initSPI	;wreg free
 20567                           
 20568                           ;ENC424J600.c: 530: return;
 20569  0043B8  0012               	return	
 20570  0043BA                     __end_of_ENC424J600_writeSPI:
 20571                           	opt stack 0
 20572                           tblptru	equ	0xFF8
 20573                           tblptrh	equ	0xFF7
 20574                           tblptrl	equ	0xFF6
 20575                           tablat	equ	0xFF5
 20576                           prodh	equ	0xFF4
 20577                           prodl	equ	0xFF3
 20578                           intcon	equ	0xFF2
 20579                           intcon3	equ	0xFF0
 20580                           indf0	equ	0xFEF
 20581                           postinc0	equ	0xFEE
 20582                           plusw0	equ	0xFEB
 20583                           fsr0h	equ	0xFEA
 20584                           fsr0l	equ	0xFE9
 20585                           wreg	equ	0xFE8
 20586                           indf1	equ	0xFE7
 20587                           postinc1	equ	0xFE6
 20588                           postdec1	equ	0xFE5
 20589                           plusw1	equ	0xFE3
 20590                           fsr1h	equ	0xFE2
 20591                           fsr1l	equ	0xFE1
 20592                           indf2	equ	0xFDF
 20593                           postinc2	equ	0xFDE
 20594                           postdec2	equ	0xFDD
 20595                           plusw2	equ	0xFDB
 20596                           fsr2h	equ	0xFDA
 20597                           fsr2l	equ	0xFD9
 20598                           status	equ	0xFD8
 20599                           
 20600 ;; *************** function _ENC424J600_readSPI *****************
 20601 ;; Defined at:
 20602 ;;		line 534 in file "src/enc424j600/ENC424J600.c"
 20603 ;; Parameters:    Size  Location     Type
 20604 ;;  data            2    0[BANK0 ] PTR unsigned char 
 20605 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_getInterruptFlags@low(1), ENC424J600_getInterruptFlags@high(1)
      +, ENC424J600_disable@temp(1), 
 20606 ;;		 -> ENC424J600_enable@temp(1), ENC424J600_disableAutoMACInsertion@temp(1), ENC424J600_enableAutoMACInsertion@temp(1)
      +, ENC424J600_getPacketCount@lowByte(1), 
 20607 ;;		 -> ENC424J600_readPHYRegister@highByte(1), ENC424J600_readPHYRegister@lowByte(1), ENC424J600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 20608 ;;		 -> ethernetController_updateLinkStatus@temp(1), ethernetController_streamFromRXBuffer@temp(1), ethernetController_u
      +pdateNextPacketPointer@newPointerH(1), ethernetController_updateNextPacketPointer@newPointerL(1), 
 20609 ;;		 -> ethernetController_getRSV@temp(6), ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherT
      +ypeField@highByte(1), ethernetController_getSourceMACAddress@temp(1), 
 20610 ;;		 -> ethernetController_getDestinationMACAddress@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), et
      +hernetController_getSiliconRevision@data(1), 
 20611 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 20612 ;; Auto vars:     Size  Location     Type
 20613 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 20614 ;; Return value:  Size  Location     Type
 20615 ;;                  1    wreg      void 
 20616 ;; Registers used:
 20617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20618 ;; Tracked objects:
 20619 ;;		On entry : 0/0
 20620 ;;		On exit  : 0/0
 20621 ;;		Unchanged: 0/0
 20622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20623 ;;      Params:         0       2       0       0       0       0       0       0       0
 20624 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20625 ;;      Temps:          0       4       0       0       0       0       0       0       0
 20626 ;;      Totals:         0      10       0       0       0       0       0       0       0
 20627 ;;Total ram usage:       10 bytes
 20628 ;; Hardware stack levels used:    1
 20629 ;; Hardware stack levels required when called:    5
 20630 ;; This function calls:
 20631 ;;		_ENC424J600_initSPI
 20632 ;; This function is called by:
 20633 ;;		_ethernetController_getSourceMACAddress
 20634 ;;		_ethernetController_getEtherTypeField
 20635 ;;		_ethernetController_getRSV
 20636 ;;		_ethernetController_updateNextPacketPointer
 20637 ;;		_ethernetController_streamFromRXBuffer
 20638 ;;		_ENC424J600_readControlRegisterUnbanked
 20639 ;;		_ethernetController_getDestinationMACAddress
 20640 ;; This function uses a non-reentrant model
 20641 ;;
 20642                           
 20643                           	psect	text91
 20644  00421E                     __ptext91:
 20645                           	opt stack 0
 20646  00421E                     _ENC424J600_readSPI:
 20647                           	opt stack 19
 20648                           
 20649                           ;ENC424J600.c: 536: uint32_t timeoutCounter = 0;
 20650                           
 20651                           ;incstack = 0
 20652  00421E  0E00               	movlw	0
 20653  004220  0100               	movlb	0	; () banked
 20654  004222  6F66               	movwf	ENC424J600_readSPI@timeoutCounter& (0+255),b
 20655  004224  0E00               	movlw	0
 20656  004226  6F67               	movwf	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),b
 20657  004228  0E00               	movlw	0
 20658  00422A  6F68               	movwf	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),b
 20659  00422C  0E00               	movlw	0
 20660  00422E  6F69               	movwf	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),b
 20661                           
 20662                           ;ENC424J600.c: 537: SSP1BUF = 0x00;
 20663  004230  0E00               	movlw	0
 20664  004232  6EC9               	movwf	4041,c	;volatile
 20665  004234                     
 20666                           ; BSR set to: 0
 20667                           
 20668                           ; BSR set to: 0
 20669  004234  B0C7               	btfsc	4039,0,c	;volatile
 20670  004236  D015               	goto	u8350
 20671                           
 20672                           ; BSR set to: 0
 20673  004238  C066  F062         	movff	ENC424J600_readSPI@timeoutCounter,??_ENC424J600_readSPI
 20674  00423C  C067  F063         	movff	ENC424J600_readSPI@timeoutCounter+1,??_ENC424J600_readSPI+1
 20675  004240  C068  F064         	movff	ENC424J600_readSPI@timeoutCounter+2,??_ENC424J600_readSPI+2
 20676  004244  C069  F065         	movff	ENC424J600_readSPI@timeoutCounter+3,??_ENC424J600_readSPI+3
 20677  004248  2B66               	incf	ENC424J600_readSPI@timeoutCounter& (0+255),f,b
 20678  00424A  0E00               	movlw	0
 20679  00424C  2367               	addwfc	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),f,b
 20680  00424E  2368               	addwfc	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),f,b
 20681  004250  2369               	addwfc	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),f,b
 20682  004252  5165               	movf	(??_ENC424J600_readSPI+3)& (0+255),w,b
 20683  004254  1164               	iorwf	(??_ENC424J600_readSPI+2)& (0+255),w,b
 20684  004256  E105               	bnz	l7323
 20685  004258  2962               	incf	??_ENC424J600_readSPI& (0+255),w,b
 20686  00425A  0E0F               	movlw	15
 20687  00425C  5963               	subwfb	(??_ENC424J600_readSPI+1)& (0+255),w,b
 20688  00425E  A0D8               	btfss	status,0,c
 20689  004260  D7E9               	goto	l241
 20690  004262                     u8350:
 20691  004262                     l7323:
 20692                           
 20693                           ; BSR set to: 0
 20694                           ;ENC424J600.c: 539: if (timeoutCounter >= 0xfff) {
 20695  004262  5169               	movf	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),w,b
 20696  004264  1168               	iorwf	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),w,b
 20697  004266  E105               	bnz	u8360
 20698  004268  2966               	incf	ENC424J600_readSPI@timeoutCounter& (0+255),w,b
 20699  00426A  0E0F               	movlw	15
 20700  00426C  5967               	subwfb	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),w,b
 20701  00426E  A0D8               	btfss	status,0,c
 20702  004270  D004               	goto	l245
 20703  004272                     u8360:
 20704                           
 20705                           ; BSR set to: 0
 20706                           ;ENC424J600.c: 540: PORTBbits.RB4=1;
 20707  004272  8881               	bsf	3969,4,c	;volatile
 20708                           
 20709                           ; BSR set to: 0
 20710                           ;ENC424J600.c: 541: ENC424J600_initSPI();
 20711  004274  EC06  F026         	call	_ENC424J600_initSPI	;wreg free
 20712                           
 20713                           ;ENC424J600.c: 542: return;
 20714  004278  0012               	return	
 20715  00427A                     l245:
 20716                           
 20717                           ;ENC424J600.c: 543: }
 20718                           ;ENC424J600.c: 544: *data = SSP1BUF;
 20719  00427A  C060  FFD9         	movff	ENC424J600_readSPI@data,fsr2l
 20720  00427E  C061  FFDA         	movff	ENC424J600_readSPI@data+1,fsr2h
 20721  004282  CFC9 FFDF          	movff	4041,indf2	;volatile
 20722  004286  0012               	return		;funcret
 20723  004288                     __end_of_ENC424J600_readSPI:
 20724                           	opt stack 0
 20725                           tblptru	equ	0xFF8
 20726                           tblptrh	equ	0xFF7
 20727                           tblptrl	equ	0xFF6
 20728                           tablat	equ	0xFF5
 20729                           prodh	equ	0xFF4
 20730                           prodl	equ	0xFF3
 20731                           intcon	equ	0xFF2
 20732                           intcon3	equ	0xFF0
 20733                           indf0	equ	0xFEF
 20734                           postinc0	equ	0xFEE
 20735                           plusw0	equ	0xFEB
 20736                           fsr0h	equ	0xFEA
 20737                           fsr0l	equ	0xFE9
 20738                           wreg	equ	0xFE8
 20739                           indf1	equ	0xFE7
 20740                           postinc1	equ	0xFE6
 20741                           postdec1	equ	0xFE5
 20742                           plusw1	equ	0xFE3
 20743                           fsr1h	equ	0xFE2
 20744                           fsr1l	equ	0xFE1
 20745                           indf2	equ	0xFDF
 20746                           postinc2	equ	0xFDE
 20747                           postdec2	equ	0xFDD
 20748                           plusw2	equ	0xFDB
 20749                           fsr2h	equ	0xFDA
 20750                           fsr2l	equ	0xFD9
 20751                           status	equ	0xFD8
 20752                           
 20753 ;; *************** function _ENC424J600_initSPI *****************
 20754 ;; Defined at:
 20755 ;;		line 504 in file "src/enc424j600/ENC424J600.c"
 20756 ;; Parameters:    Size  Location     Type
 20757 ;;		None
 20758 ;; Auto vars:     Size  Location     Type
 20759 ;;		None
 20760 ;; Return value:  Size  Location     Type
 20761 ;;                  1    wreg      void 
 20762 ;; Registers used:
 20763 ;;		None
 20764 ;; Tracked objects:
 20765 ;;		On entry : 0/0
 20766 ;;		On exit  : 0/0
 20767 ;;		Unchanged: 0/0
 20768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20769 ;;      Params:         0       0       0       0       0       0       0       0       0
 20770 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20771 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20772 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20773 ;;Total ram usage:        0 bytes
 20774 ;; Hardware stack levels used:    1
 20775 ;; Hardware stack levels required when called:    4
 20776 ;; This function calls:
 20777 ;;		Nothing
 20778 ;; This function is called by:
 20779 ;;		_ethernetController_init
 20780 ;;		_ENC424J600_writeSPI
 20781 ;;		_ENC424J600_readSPI
 20782 ;; This function uses a non-reentrant model
 20783 ;;
 20784                           
 20785                           	psect	text92
 20786  004C0C                     __ptext92:
 20787                           	opt stack 0
 20788  004C0C                     _ENC424J600_initSPI:
 20789                           	opt stack 19
 20790                           
 20791                           ;ENC424J600.c: 505: SSP1CON1bits.SSPEN = 0;
 20792                           
 20793                           ;incstack = 0
 20794  004C0C  9AC6               	bcf	4038,5,c	;volatile
 20795                           
 20796                           ;ENC424J600.c: 506: SSP1STATbits.CKE = 1;
 20797  004C0E  8CC7               	bsf	4039,6,c	;volatile
 20798                           
 20799                           ;ENC424J600.c: 508: TRISBbits.TRISB0 = 1;
 20800  004C10  8093               	bsf	3987,0,c	;volatile
 20801                           
 20802                           ;ENC424J600.c: 509: ANSELBbits.ANSB0 = 0;
 20803  004C12  010F               	movlb	15	; () banked
 20804  004C14  915C               	bcf	92,0,b	;volatile
 20805                           
 20806                           ;ENC424J600.c: 510: TRISBbits.TRISB1 = 0;
 20807  004C16  9293               	bcf	3987,1,c	;volatile
 20808                           
 20809                           ;ENC424J600.c: 511: ANSELBbits.ANSB1 = 0;
 20810  004C18  935C               	bcf	92,1,b	;volatile
 20811                           
 20812                           ;ENC424J600.c: 512: TRISBbits.TRISB3 = 0;
 20813  004C1A  9693               	bcf	3987,3,c	;volatile
 20814                           
 20815                           ;ENC424J600.c: 513: ANSELBbits.ANSB3 = 0;
 20816  004C1C  975C               	bcf	92,3,b	;volatile
 20817                           
 20818                           ;ENC424J600.c: 514: TRISBbits.TRISB4 = 0;
 20819  004C1E  9893               	bcf	3987,4,c	;volatile
 20820                           
 20821                           ;ENC424J600.c: 515: ANSELBbits.ANSB4 = 0;
 20822  004C20  995C               	bcf	92,4,b	;volatile
 20823                           
 20824                           ;ENC424J600.c: 516: PORTBbits.RB4=1;
 20825  004C22  8881               	bsf	3969,4,c	;volatile
 20826                           
 20827                           ;ENC424J600.c: 517: SSP1CON1bits.SSPEN = 1;
 20828  004C24  8AC6               	bsf	4038,5,c	;volatile
 20829                           
 20830                           ; BSR set to: 15
 20831  004C26  0012               	return		;funcret
 20832  004C28                     __end_of_ENC424J600_initSPI:
 20833                           	opt stack 0
 20834                           tblptru	equ	0xFF8
 20835                           tblptrh	equ	0xFF7
 20836                           tblptrl	equ	0xFF6
 20837                           tablat	equ	0xFF5
 20838                           prodh	equ	0xFF4
 20839                           prodl	equ	0xFF3
 20840                           intcon	equ	0xFF2
 20841                           intcon3	equ	0xFF0
 20842                           indf0	equ	0xFEF
 20843                           postinc0	equ	0xFEE
 20844                           plusw0	equ	0xFEB
 20845                           fsr0h	equ	0xFEA
 20846                           fsr0l	equ	0xFE9
 20847                           wreg	equ	0xFE8
 20848                           indf1	equ	0xFE7
 20849                           postinc1	equ	0xFE6
 20850                           postdec1	equ	0xFE5
 20851                           plusw1	equ	0xFE3
 20852                           fsr1h	equ	0xFE2
 20853                           fsr1l	equ	0xFE1
 20854                           indf2	equ	0xFDF
 20855                           postinc2	equ	0xFDE
 20856                           postdec2	equ	0xFDD
 20857                           plusw2	equ	0xFDB
 20858                           fsr2h	equ	0xFDA
 20859                           fsr2l	equ	0xFD9
 20860                           status	equ	0xFD8
 20861                           
 20862 ;; *************** function _UARTInit *****************
 20863 ;; Defined at:
 20864 ;;		line 26 in file "src/system/uart.c"
 20865 ;; Parameters:    Size  Location     Type
 20866 ;;		None
 20867 ;; Auto vars:     Size  Location     Type
 20868 ;;		None
 20869 ;; Return value:  Size  Location     Type
 20870 ;;                  1    wreg      void 
 20871 ;; Registers used:
 20872 ;;		wreg, status,2
 20873 ;; Tracked objects:
 20874 ;;		On entry : 0/0
 20875 ;;		On exit  : 0/0
 20876 ;;		Unchanged: 0/0
 20877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20878 ;;      Params:         0       0       0       0       0       0       0       0       0
 20879 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20880 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20881 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20882 ;;Total ram usage:        0 bytes
 20883 ;; Hardware stack levels used:    1
 20884 ;; Hardware stack levels required when called:    4
 20885 ;; This function calls:
 20886 ;;		Nothing
 20887 ;; This function is called by:
 20888 ;;		_main
 20889 ;; This function uses a non-reentrant model
 20890 ;;
 20891                           
 20892                           	psect	text93
 20893  004CAA                     __ptext93:
 20894                           	opt stack 0
 20895  004CAA                     _UARTInit:
 20896                           	opt stack 26
 20897                           
 20898                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 20899                           
 20900                           ; BSR set to: 15
 20901                           ;incstack = 0
 20902  004CAA  8AAC               	bsf	4012,5,c	;volatile
 20903                           
 20904                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 20905  004CAC  98AC               	bcf	4012,4,c	;volatile
 20906                           
 20907                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 20908  004CAE  8EAB               	bsf	4011,7,c	;volatile
 20909                           
 20910                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 20911  004CB0  8CAC               	bsf	4012,6,c	;volatile
 20912                           
 20913                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 20914  004CB2  80AC               	bsf	4012,0,c	;volatile
 20915                           
 20916                           ;uart.c: 32: SPBRG = 3;
 20917  004CB4  0E03               	movlw	3
 20918  004CB6  6EAF               	movwf	4015,c	;volatile
 20919  004CB8  0012               	return		;funcret
 20920  004CBA                     __end_of_UARTInit:
 20921                           	opt stack 0
 20922                           tblptru	equ	0xFF8
 20923                           tblptrh	equ	0xFF7
 20924                           tblptrl	equ	0xFF6
 20925                           tablat	equ	0xFF5
 20926                           prodh	equ	0xFF4
 20927                           prodl	equ	0xFF3
 20928                           intcon	equ	0xFF2
 20929                           intcon3	equ	0xFF0
 20930                           indf0	equ	0xFEF
 20931                           postinc0	equ	0xFEE
 20932                           plusw0	equ	0xFEB
 20933                           fsr0h	equ	0xFEA
 20934                           fsr0l	equ	0xFE9
 20935                           wreg	equ	0xFE8
 20936                           indf1	equ	0xFE7
 20937                           postinc1	equ	0xFE6
 20938                           postdec1	equ	0xFE5
 20939                           plusw1	equ	0xFE3
 20940                           fsr1h	equ	0xFE2
 20941                           fsr1l	equ	0xFE1
 20942                           indf2	equ	0xFDF
 20943                           postinc2	equ	0xFDE
 20944                           postdec2	equ	0xFDD
 20945                           plusw2	equ	0xFDB
 20946                           fsr2h	equ	0xFDA
 20947                           fsr2l	equ	0xFD9
 20948                           status	equ	0xFD8
 20949                           
 20950 ;; *************** function _ARP_initTable *****************
 20951 ;; Defined at:
 20952 ;;		line 317 in file "src/stack/protocols/arp.c"
 20953 ;; Parameters:    Size  Location     Type
 20954 ;;		None
 20955 ;; Auto vars:     Size  Location     Type
 20956 ;;  i               1   38[BANK0 ] unsigned char 
 20957 ;;  mac             6   28[BANK0 ] struct macaddress
 20958 ;;  ip              4   34[BANK0 ] struct ipv4_address
 20959 ;; Return value:  Size  Location     Type
 20960 ;;                  1    wreg      void 
 20961 ;; Registers used:
 20962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20963 ;; Tracked objects:
 20964 ;;		On entry : 0/0
 20965 ;;		On exit  : 0/0
 20966 ;;		Unchanged: 0/0
 20967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20968 ;;      Params:         0       0       0       0       0       0       0       0       0
 20969 ;;      Locals:         0      11       0       0       0       0       0       0       0
 20970 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20971 ;;      Totals:         0      11       0       0       0       0       0       0       0
 20972 ;;Total ram usage:       11 bytes
 20973 ;; Hardware stack levels used:    1
 20974 ;; Hardware stack levels required when called:    5
 20975 ;; This function calls:
 20976 ;;		_ARP_setNewEntry
 20977 ;;		_ipv4_setToAllZero
 20978 ;;		_mac_setAllZero
 20979 ;; This function is called by:
 20980 ;;		_main
 20981 ;; This function uses a non-reentrant model
 20982 ;;
 20983                           
 20984                           	psect	text94
 20985  0042F0                     __ptext94:
 20986                           	opt stack 0
 20987  0042F0                     _ARP_initTable:
 20988                           	opt stack 25
 20989                           
 20990                           ;arp.c: 318: macaddress_t mac;
 20991                           ;arp.c: 319: ipv4_address_t ip;
 20992                           ;arp.c: 320: mac_setAllZero(&mac);
 20993                           
 20994                           ;incstack = 0
 20995  0042F0  0E7C               	movlw	low ARP_initTable@mac
 20996  0042F2  0100               	movlb	0	; () banked
 20997  0042F4  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 20998  0042F6  0E00               	movlw	high ARP_initTable@mac
 20999  0042F8  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 21000  0042FA  EC82  F025         	call	_mac_setAllZero	;wreg free
 21001                           
 21002                           ;arp.c: 321: ipv4_setToAllZero(&ip);
 21003  0042FE  0E82               	movlw	low ARP_initTable@ip
 21004  004300  0100               	movlb	0	; () banked
 21005  004302  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 21006  004304  0E00               	movlw	high ARP_initTable@ip
 21007  004306  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 21008  004308  ECDB  F025         	call	_ipv4_setToAllZero	;wreg free
 21009                           
 21010                           ;arp.c: 322: for (uint8_t i = 0; i < 8; i++)
 21011  00430C  0E00               	movlw	0
 21012  00430E  0100               	movlb	0	; () banked
 21013  004310  6F86               	movwf	ARP_initTable@i& (0+255),b
 21014  004312                     l9143:
 21015                           
 21016                           ; BSR set to: 0
 21017  004312  0E07               	movlw	7
 21018  004314  6586               	cpfsgt	ARP_initTable@i& (0+255),b
 21019  004316  D001               	goto	l985
 21020  004318  0012               	return	
 21021  00431A                     l985:
 21022                           
 21023                           ; BSR set to: 0
 21024                           ;arp.c: 323: ARP_setNewEntry(mac, ip, 0xffffffff);
 21025                           
 21026                           ; BSR set to: 0
 21027  00431A  EE20  F07C         	lfsr	2,ARP_initTable@mac
 21028  00431E  EE00  F064         	lfsr	0,ARP_setNewEntry@mac
 21029  004322  0E05               	movlw	5
 21030  004324                     u11291:
 21031  004324  CFDB FFEB          	movff	plusw2,plusw0
 21032  004328  06E8               	decf	wreg,f,c
 21033  00432A  E2FC               	bc	u11291
 21034  00432C  C082  F06A         	movff	ARP_initTable@ip,ARP_setNewEntry@ip
 21035  004330  C083  F06B         	movff	ARP_initTable@ip+1,ARP_setNewEntry@ip+1
 21036  004334  C084  F06C         	movff	ARP_initTable@ip+2,ARP_setNewEntry@ip+2
 21037  004338  C085  F06D         	movff	ARP_initTable@ip+3,ARP_setNewEntry@ip+3
 21038  00433C  0EFF               	movlw	255
 21039  00433E  6F6E               	movwf	ARP_setNewEntry@timestamp& (0+255),b
 21040  004340  0EFF               	movlw	255
 21041  004342  6F6F               	movwf	(ARP_setNewEntry@timestamp+1)& (0+255),b
 21042  004344  0EFF               	movlw	255
 21043  004346  6F70               	movwf	(ARP_setNewEntry@timestamp+2)& (0+255),b
 21044  004348  0EFF               	movlw	255
 21045  00434A  6F71               	movwf	(ARP_setNewEntry@timestamp+3)& (0+255),b
 21046  00434C  EC24  F01A         	call	_ARP_setNewEntry	;wreg free
 21047  004350  0100               	movlb	0	; () banked
 21048  004352  2B86               	incf	ARP_initTable@i& (0+255),f,b
 21049  004354  D7DE               	goto	l9143
 21050  004356                     __end_of_ARP_initTable:
 21051                           	opt stack 0
 21052                           tblptru	equ	0xFF8
 21053                           tblptrh	equ	0xFF7
 21054                           tblptrl	equ	0xFF6
 21055                           tablat	equ	0xFF5
 21056                           prodh	equ	0xFF4
 21057                           prodl	equ	0xFF3
 21058                           intcon	equ	0xFF2
 21059                           intcon3	equ	0xFF0
 21060                           indf0	equ	0xFEF
 21061                           postinc0	equ	0xFEE
 21062                           plusw0	equ	0xFEB
 21063                           fsr0h	equ	0xFEA
 21064                           fsr0l	equ	0xFE9
 21065                           wreg	equ	0xFE8
 21066                           indf1	equ	0xFE7
 21067                           postinc1	equ	0xFE6
 21068                           postdec1	equ	0xFE5
 21069                           plusw1	equ	0xFE3
 21070                           fsr1h	equ	0xFE2
 21071                           fsr1l	equ	0xFE1
 21072                           indf2	equ	0xFDF
 21073                           postinc2	equ	0xFDE
 21074                           postdec2	equ	0xFDD
 21075                           plusw2	equ	0xFDB
 21076                           fsr2h	equ	0xFDA
 21077                           fsr2l	equ	0xFD9
 21078                           status	equ	0xFD8
 21079                           
 21080 ;; *************** function _mac_setAllZero *****************
 21081 ;; Defined at:
 21082 ;;		line 47 in file "src/eth/mac.c"
 21083 ;; Parameters:    Size  Location     Type
 21084 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 21085 ;;		 -> ARP_initTable@mac(6), ARP_sendRequest@targetMAC(6), 
 21086 ;; Auto vars:     Size  Location     Type
 21087 ;;  i               1    2[BANK0 ] unsigned char 
 21088 ;; Return value:  Size  Location     Type
 21089 ;;                  1    wreg      void 
 21090 ;; Registers used:
 21091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21092 ;; Tracked objects:
 21093 ;;		On entry : 0/0
 21094 ;;		On exit  : 0/0
 21095 ;;		Unchanged: 0/0
 21096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21097 ;;      Params:         0       2       0       0       0       0       0       0       0
 21098 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21099 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21100 ;;      Totals:         0       3       0       0       0       0       0       0       0
 21101 ;;Total ram usage:        3 bytes
 21102 ;; Hardware stack levels used:    1
 21103 ;; Hardware stack levels required when called:    4
 21104 ;; This function calls:
 21105 ;;		Nothing
 21106 ;; This function is called by:
 21107 ;;		_ARP_sendRequest
 21108 ;;		_ARP_initTable
 21109 ;; This function uses a non-reentrant model
 21110 ;;
 21111                           
 21112                           	psect	text95
 21113  004B04                     __ptext95:
 21114                           	opt stack 0
 21115  004B04                     _mac_setAllZero:
 21116                           	opt stack 22
 21117                           
 21118                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 21119                           
 21120                           ; BSR set to: 0
 21121                           ;incstack = 0
 21122  004B04  0E00               	movlw	0
 21123  004B06  0100               	movlb	0	; () banked
 21124  004B08  6F62               	movwf	mac_setAllZero@i& (0+255),b
 21125  004B0A                     l7799:
 21126                           
 21127                           ; BSR set to: 0
 21128  004B0A  0E05               	movlw	5
 21129  004B0C  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 21130  004B0E  D001               	goto	l398
 21131  004B10  0012               	return	
 21132  004B12                     l398:
 21133                           
 21134                           ; BSR set to: 0
 21135                           ;mac.c: 49: mac->address[i] = 0x00;
 21136                           
 21137                           ; BSR set to: 0
 21138  004B12  5162               	movf	mac_setAllZero@i& (0+255),w,b
 21139  004B14  0D01               	mullw	1
 21140  004B16  50F3               	movf	prodl,w,c
 21141  004B18  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 21142  004B1A  6ED9               	movwf	fsr2l,c
 21143  004B1C  50F4               	movf	prodh,w,c
 21144  004B1E  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 21145  004B20  6EDA               	movwf	fsr2h,c
 21146  004B22  0E00               	movlw	0
 21147  004B24  6EDF               	movwf	indf2,c
 21148                           
 21149                           ; BSR set to: 0
 21150  004B26  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 21151  004B28  D7F0               	goto	l7799
 21152  004B2A                     __end_of_mac_setAllZero:
 21153                           	opt stack 0
 21154                           tblptru	equ	0xFF8
 21155                           tblptrh	equ	0xFF7
 21156                           tblptrl	equ	0xFF6
 21157                           tablat	equ	0xFF5
 21158                           prodh	equ	0xFF4
 21159                           prodl	equ	0xFF3
 21160                           intcon	equ	0xFF2
 21161                           intcon3	equ	0xFF0
 21162                           indf0	equ	0xFEF
 21163                           postinc0	equ	0xFEE
 21164                           plusw0	equ	0xFEB
 21165                           fsr0h	equ	0xFEA
 21166                           fsr0l	equ	0xFE9
 21167                           wreg	equ	0xFE8
 21168                           indf1	equ	0xFE7
 21169                           postinc1	equ	0xFE6
 21170                           postdec1	equ	0xFE5
 21171                           plusw1	equ	0xFE3
 21172                           fsr1h	equ	0xFE2
 21173                           fsr1l	equ	0xFE1
 21174                           indf2	equ	0xFDF
 21175                           postinc2	equ	0xFDE
 21176                           postdec2	equ	0xFDD
 21177                           plusw2	equ	0xFDB
 21178                           fsr2h	equ	0xFDA
 21179                           fsr2l	equ	0xFD9
 21180                           status	equ	0xFD8
 21181                           
 21182 ;; *************** function _ipv4_setToAllZero *****************
 21183 ;; Defined at:
 21184 ;;		line 254 in file "src/stack/protocols/ipv4.c"
 21185 ;; Parameters:    Size  Location     Type
 21186 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 21187 ;;		 -> ARP_initTable@ip(4), ARP_probe@ipSender(4), 
 21188 ;; Auto vars:     Size  Location     Type
 21189 ;;  i               1    2[BANK0 ] unsigned char 
 21190 ;; Return value:  Size  Location     Type
 21191 ;;                  1    wreg      void 
 21192 ;; Registers used:
 21193 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21194 ;; Tracked objects:
 21195 ;;		On entry : 0/0
 21196 ;;		On exit  : 0/0
 21197 ;;		Unchanged: 0/0
 21198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21199 ;;      Params:         0       2       0       0       0       0       0       0       0
 21200 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21201 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21202 ;;      Totals:         0       3       0       0       0       0       0       0       0
 21203 ;;Total ram usage:        3 bytes
 21204 ;; Hardware stack levels used:    1
 21205 ;; Hardware stack levels required when called:    4
 21206 ;; This function calls:
 21207 ;;		Nothing
 21208 ;; This function is called by:
 21209 ;;		_ARP_probe
 21210 ;;		_ARP_initTable
 21211 ;; This function uses a non-reentrant model
 21212 ;;
 21213                           
 21214                           	psect	text96
 21215  004BB6                     __ptext96:
 21216                           	opt stack 0
 21217  004BB6                     _ipv4_setToAllZero:
 21218                           	opt stack 23
 21219                           
 21220                           ;ipv4.c: 255: for (uint8_t i = 0; i < 4; i++) {
 21221                           
 21222                           ; BSR set to: 0
 21223                           ;incstack = 0
 21224  004BB6  0E00               	movlw	0
 21225  004BB8  0100               	movlb	0	; () banked
 21226  004BBA  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 21227  004BBC                     l8337:
 21228                           
 21229                           ; BSR set to: 0
 21230  004BBC  0E03               	movlw	3
 21231  004BBE  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 21232  004BC0  D001               	goto	l1077
 21233  004BC2  0012               	return	
 21234  004BC4                     l1077:
 21235                           
 21236                           ; BSR set to: 0
 21237                           ;ipv4.c: 256: ip->address[0] = 0x00;
 21238                           
 21239                           ; BSR set to: 0
 21240  004BC4  C060  FFD9         	movff	ipv4_setToAllZero@ip,fsr2l
 21241  004BC8  C061  FFDA         	movff	ipv4_setToAllZero@ip+1,fsr2h
 21242  004BCC  0E00               	movlw	0
 21243  004BCE  6EDF               	movwf	indf2,c
 21244                           
 21245                           ; BSR set to: 0
 21246  004BD0  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 21247  004BD2  D7F4               	goto	l8337
 21248  004BD4                     __end_of_ipv4_setToAllZero:
 21249                           	opt stack 0
 21250                           tblptru	equ	0xFF8
 21251                           tblptrh	equ	0xFF7
 21252                           tblptrl	equ	0xFF6
 21253                           tablat	equ	0xFF5
 21254                           prodh	equ	0xFF4
 21255                           prodl	equ	0xFF3
 21256                           intcon	equ	0xFF2
 21257                           intcon3	equ	0xFF0
 21258                           indf0	equ	0xFEF
 21259                           postinc0	equ	0xFEE
 21260                           plusw0	equ	0xFEB
 21261                           fsr0h	equ	0xFEA
 21262                           fsr0l	equ	0xFE9
 21263                           wreg	equ	0xFE8
 21264                           indf1	equ	0xFE7
 21265                           postinc1	equ	0xFE6
 21266                           postdec1	equ	0xFE5
 21267                           plusw1	equ	0xFE3
 21268                           fsr1h	equ	0xFE2
 21269                           fsr1l	equ	0xFE1
 21270                           indf2	equ	0xFDF
 21271                           postinc2	equ	0xFDE
 21272                           postdec2	equ	0xFDD
 21273                           plusw2	equ	0xFDB
 21274                           fsr2h	equ	0xFDA
 21275                           fsr2l	equ	0xFD9
 21276                           status	equ	0xFD8
 21277                           
 21278 ;; *************** function _ARP_setNewEntry *****************
 21279 ;; Defined at:
 21280 ;;		line 301 in file "src/stack/protocols/arp.c"
 21281 ;; Parameters:    Size  Location     Type
 21282 ;;  mac             6    4[BANK0 ] struct macaddress
 21283 ;;  ip              4   10[BANK0 ] struct ipv4_address
 21284 ;;  timestamp       4   14[BANK0 ] unsigned long 
 21285 ;; Auto vars:     Size  Location     Type
 21286 ;;  i               1   27[BANK0 ] unsigned char 
 21287 ;;  maxSeconds      4   22[BANK0 ] unsigned long 
 21288 ;;  oldestIndex     1   26[BANK0 ] unsigned char 
 21289 ;; Return value:  Size  Location     Type
 21290 ;;                  1    wreg      void 
 21291 ;; Registers used:
 21292 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21293 ;; Tracked objects:
 21294 ;;		On entry : 0/0
 21295 ;;		On exit  : 0/0
 21296 ;;		Unchanged: 0/0
 21297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21298 ;;      Params:         0      14       0       0       0       0       0       0       0
 21299 ;;      Locals:         0       6       0       0       0       0       0       0       0
 21300 ;;      Temps:          0       4       0       0       0       0       0       0       0
 21301 ;;      Totals:         0      24       0       0       0       0       0       0       0
 21302 ;;Total ram usage:       24 bytes
 21303 ;; Hardware stack levels used:    1
 21304 ;; Hardware stack levels required when called:    4
 21305 ;; This function calls:
 21306 ;;		Nothing
 21307 ;; This function is called by:
 21308 ;;		_ARP_handleNewPacket
 21309 ;;		_ARP_initTable
 21310 ;; This function uses a non-reentrant model
 21311 ;;
 21312                           
 21313                           	psect	text97
 21314  003448                     __ptext97:
 21315                           	opt stack 0
 21316  003448                     _ARP_setNewEntry:
 21317                           	opt stack 23
 21318                           
 21319                           ;arp.c: 302: uint32_t maxSeconds = 0;
 21320                           
 21321                           ; BSR set to: 0
 21322                           ;incstack = 0
 21323  003448  0E00               	movlw	0
 21324  00344A  0100               	movlb	0	; () banked
 21325  00344C  6F76               	movwf	ARP_setNewEntry@maxSeconds& (0+255),b
 21326  00344E  0E00               	movlw	0
 21327  003450  6F77               	movwf	(ARP_setNewEntry@maxSeconds+1)& (0+255),b
 21328  003452  0E00               	movlw	0
 21329  003454  6F78               	movwf	(ARP_setNewEntry@maxSeconds+2)& (0+255),b
 21330  003456  0E00               	movlw	0
 21331  003458  6F79               	movwf	(ARP_setNewEntry@maxSeconds+3)& (0+255),b
 21332                           
 21333                           ;arp.c: 303: uint8_t oldestIndex = 0;
 21334  00345A  0E00               	movlw	0
 21335  00345C  6F7A               	movwf	ARP_setNewEntry@oldestIndex& (0+255),b
 21336                           
 21337                           ;arp.c: 305: for (uint8_t i = 0; i < 8; i++) {
 21338  00345E  0E00               	movlw	0
 21339  003460  6F7B               	movwf	ARP_setNewEntry@i& (0+255),b
 21340  003462                     l8289:
 21341                           
 21342                           ; BSR set to: 0
 21343  003462  0E07               	movlw	7
 21344  003464  657B               	cpfsgt	ARP_setNewEntry@i& (0+255),b
 21345  003466  D001               	goto	l979
 21346  003468  D02E               	goto	u10300
 21347  00346A                     l979:
 21348                           
 21349                           ; BSR set to: 0
 21350                           ;arp.c: 306: if (ARP_table[i].timeCreated > maxSeconds) {
 21351                           
 21352                           ; BSR set to: 0
 21353  00346A  517B               	movf	ARP_setNewEntry@i& (0+255),w,b
 21354  00346C  0D0E               	mullw	14
 21355  00346E  0E0A               	movlw	10
 21356  003470  26F3               	addwf	prodl,f,c
 21357  003472  0E00               	movlw	0
 21358  003474  22F4               	addwfc	prodh,f,c
 21359  003476  0E0F               	movlw	low _ARP_table
 21360  003478  24F3               	addwf	prodl,w,c
 21361  00347A  6ED9               	movwf	fsr2l,c
 21362  00347C  0E02               	movlw	high _ARP_table
 21363  00347E  20F4               	addwfc	prodh,w,c
 21364  003480  6EDA               	movwf	fsr2h,c
 21365  003482  50DE               	movf	postinc2,w,c
 21366  003484  5D76               	subwf	ARP_setNewEntry@maxSeconds& (0+255),w,b
 21367  003486  50DE               	movf	postinc2,w,c
 21368  003488  5977               	subwfb	(ARP_setNewEntry@maxSeconds+1)& (0+255),w,b
 21369  00348A  50DE               	movf	postinc2,w,c
 21370  00348C  5978               	subwfb	(ARP_setNewEntry@maxSeconds+2)& (0+255),w,b
 21371  00348E  50DE               	movf	postinc2,w,c
 21372  003490  5979               	subwfb	(ARP_setNewEntry@maxSeconds+3)& (0+255),w,b
 21373  003492  B0D8               	btfsc	status,0,c
 21374  003494  D016               	goto	l981
 21375                           
 21376                           ; BSR set to: 0
 21377                           ;arp.c: 307: maxSeconds = ARP_table[i].timeCreated;
 21378  003496  517B               	movf	ARP_setNewEntry@i& (0+255),w,b
 21379  003498  0D0E               	mullw	14
 21380  00349A  0E0A               	movlw	10
 21381  00349C  26F3               	addwf	prodl,f,c
 21382  00349E  0E00               	movlw	0
 21383  0034A0  22F4               	addwfc	prodh,f,c
 21384  0034A2  0E0F               	movlw	low _ARP_table
 21385  0034A4  24F3               	addwf	prodl,w,c
 21386  0034A6  6ED9               	movwf	fsr2l,c
 21387  0034A8  0E02               	movlw	high _ARP_table
 21388  0034AA  20F4               	addwfc	prodh,w,c
 21389  0034AC  6EDA               	movwf	fsr2h,c
 21390  0034AE  CFDE F076          	movff	postinc2,ARP_setNewEntry@maxSeconds
 21391  0034B2  CFDE F077          	movff	postinc2,ARP_setNewEntry@maxSeconds+1
 21392  0034B6  CFDE F078          	movff	postinc2,ARP_setNewEntry@maxSeconds+2
 21393  0034BA  CFDE F079          	movff	postinc2,ARP_setNewEntry@maxSeconds+3
 21394                           
 21395                           ; BSR set to: 0
 21396                           ;arp.c: 308: oldestIndex = i;
 21397  0034BE  C07B  F07A         	movff	ARP_setNewEntry@i,ARP_setNewEntry@oldestIndex
 21398  0034C2                     l981:
 21399                           
 21400                           ; BSR set to: 0
 21401                           
 21402                           ; BSR set to: 0
 21403  0034C2  2B7B               	incf	ARP_setNewEntry@i& (0+255),f,b
 21404  0034C4  D7CE               	goto	l8289
 21405  0034C6                     u10300:
 21406                           
 21407                           ; BSR set to: 0
 21408                           ;arp.c: 309: }
 21409                           ;arp.c: 310: }
 21410                           ;arp.c: 312: ARP_table[oldestIndex].ip = ip;
 21411                           
 21412                           ; BSR set to: 0
 21413  0034C6  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 21414  0034C8  0D0E               	mullw	14
 21415  0034CA  0E0F               	movlw	low _ARP_table
 21416  0034CC  24F3               	addwf	prodl,w,c
 21417  0034CE  6ED9               	movwf	fsr2l,c
 21418  0034D0  0E02               	movlw	high _ARP_table
 21419  0034D2  20F4               	addwfc	prodh,w,c
 21420  0034D4  6EDA               	movwf	fsr2h,c
 21421  0034D6  C06A  FFDE         	movff	ARP_setNewEntry@ip,postinc2
 21422  0034DA  C06B  FFDE         	movff	ARP_setNewEntry@ip+1,postinc2
 21423  0034DE  C06C  FFDE         	movff	ARP_setNewEntry@ip+2,postinc2
 21424  0034E2  C06D  FFDE         	movff	ARP_setNewEntry@ip+3,postinc2
 21425                           
 21426                           ; BSR set to: 0
 21427                           ;arp.c: 313: ARP_table[oldestIndex].mac = mac;
 21428  0034E6  EE20  F064         	lfsr	2,ARP_setNewEntry@mac
 21429  0034EA  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 21430  0034EC  0D0E               	mullw	14
 21431  0034EE  0E04               	movlw	4
 21432  0034F0  26F3               	addwf	prodl,f,c
 21433  0034F2  0E00               	movlw	0
 21434  0034F4  22F4               	addwfc	prodh,f,c
 21435  0034F6  0E0F               	movlw	low _ARP_table
 21436  0034F8  24F3               	addwf	prodl,w,c
 21437  0034FA  6EE1               	movwf	fsr1l,c
 21438  0034FC  0E02               	movlw	high _ARP_table
 21439  0034FE  20F4               	addwfc	prodh,w,c
 21440  003500  6EE2               	movwf	fsr1h,c
 21441  003502  0E05               	movlw	5
 21442  003504                     u10311:
 21443  003504  CFDB FFE3          	movff	plusw2,plusw1
 21444  003508  06E8               	decf	wreg,f,c
 21445  00350A  E2FC               	bc	u10311
 21446                           
 21447                           ; BSR set to: 0
 21448                           ;arp.c: 314: ARP_table[oldestIndex].timeCreated = timestamp;
 21449  00350C  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 21450  00350E  0D0E               	mullw	14
 21451  003510  0E0A               	movlw	10
 21452  003512  26F3               	addwf	prodl,f,c
 21453  003514  0E00               	movlw	0
 21454  003516  22F4               	addwfc	prodh,f,c
 21455  003518  0E0F               	movlw	low _ARP_table
 21456  00351A  24F3               	addwf	prodl,w,c
 21457  00351C  6ED9               	movwf	fsr2l,c
 21458  00351E  0E02               	movlw	high _ARP_table
 21459  003520  20F4               	addwfc	prodh,w,c
 21460  003522  6EDA               	movwf	fsr2h,c
 21461  003524  C06E  FFDE         	movff	ARP_setNewEntry@timestamp,postinc2
 21462  003528  C06F  FFDE         	movff	ARP_setNewEntry@timestamp+1,postinc2
 21463  00352C  C070  FFDE         	movff	ARP_setNewEntry@timestamp+2,postinc2
 21464  003530  C071  FFDE         	movff	ARP_setNewEntry@timestamp+3,postinc2
 21465                           
 21466                           ; BSR set to: 0
 21467  003534  0012               	return		;funcret
 21468  003536                     __end_of_ARP_setNewEntry:
 21469                           	opt stack 0
 21470                           tblptru	equ	0xFF8
 21471                           tblptrh	equ	0xFF7
 21472                           tblptrl	equ	0xFF6
 21473                           tablat	equ	0xFF5
 21474                           prodh	equ	0xFF4
 21475                           prodl	equ	0xFF3
 21476                           intcon	equ	0xFF2
 21477                           intcon3	equ	0xFF0
 21478                           indf0	equ	0xFEF
 21479                           postinc0	equ	0xFEE
 21480                           plusw0	equ	0xFEB
 21481                           fsr0h	equ	0xFEA
 21482                           fsr0l	equ	0xFE9
 21483                           wreg	equ	0xFE8
 21484                           indf1	equ	0xFE7
 21485                           postinc1	equ	0xFE6
 21486                           postdec1	equ	0xFE5
 21487                           plusw1	equ	0xFE3
 21488                           fsr1h	equ	0xFE2
 21489                           fsr1l	equ	0xFE1
 21490                           indf2	equ	0xFDF
 21491                           postinc2	equ	0xFDE
 21492                           postdec2	equ	0xFDD
 21493                           plusw2	equ	0xFDB
 21494                           fsr2h	equ	0xFDA
 21495                           fsr2l	equ	0xFD9
 21496                           status	equ	0xFD8
 21497                           
 21498 ;; *************** function _ISR *****************
 21499 ;; Defined at:
 21500 ;;		line 266 in file "src/system/main.c"
 21501 ;; Parameters:    Size  Location     Type
 21502 ;;		None
 21503 ;; Auto vars:     Size  Location     Type
 21504 ;;		None
 21505 ;; Return value:  Size  Location     Type
 21506 ;;                  1    wreg      void 
 21507 ;; Registers used:
 21508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21509 ;; Tracked objects:
 21510 ;;		On entry : 0/0
 21511 ;;		On exit  : 0/0
 21512 ;;		Unchanged: 0/0
 21513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21514 ;;      Params:         0       0       0       0       0       0       0       0       0
 21515 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21516 ;;      Temps:         19       0       0       0       0       0       0       0       0
 21517 ;;      Totals:        19       0       0       0       0       0       0       0       0
 21518 ;;Total ram usage:       19 bytes
 21519 ;; Hardware stack levels used:    1
 21520 ;; Hardware stack levels required when called:    3
 21521 ;; This function calls:
 21522 ;;		_buttonHandler
 21523 ;;		_sevenSegmentUpdate
 21524 ;;		_updateTime
 21525 ;; This function is called by:
 21526 ;;		Interrupt level 2
 21527 ;; This function uses a non-reentrant model
 21528 ;;
 21529                           
 21530                           	psect	intcode
 21531  000008                     __pintcode:
 21532                           	opt stack 0
 21533  000008                     _ISR:
 21534                           	opt stack 17
 21535                           
 21536                           ; BSR set to: 0
 21537                           ;incstack = 0
 21538  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21539  00000A  CFFA F017          	movff	pclath,??_ISR+1
 21540  00000E  CFFB F018          	movff	pclatu,??_ISR+2
 21541  000012  CFE9 F019          	movff	fsr0l,??_ISR+3
 21542  000016  CFEA F01A          	movff	fsr0h,??_ISR+4
 21543  00001A  CFE1 F01B          	movff	fsr1l,??_ISR+5
 21544  00001E  CFE2 F01C          	movff	fsr1h,??_ISR+6
 21545  000022  CFD9 F01D          	movff	fsr2l,??_ISR+7
 21546  000026  CFDA F01E          	movff	fsr2h,??_ISR+8
 21547  00002A  CFF3 F01F          	movff	prodl,??_ISR+9
 21548  00002E  CFF4 F020          	movff	prodh,??_ISR+10
 21549  000032  CFF6 F021          	movff	tblptrl,??_ISR+11
 21550  000036  CFF7 F022          	movff	tblptrh,??_ISR+12
 21551  00003A  CFF8 F023          	movff	tblptru,??_ISR+13
 21552  00003E  CFF5 F024          	movff	tablat,??_ISR+14
 21553  000042  C051  F025         	movff	btemp,??_ISR+15
 21554  000046  C052  F026         	movff	btemp+1,??_ISR+16
 21555  00004A  C053  F027         	movff	btemp+2,??_ISR+17
 21556  00004E  C054  F028         	movff	btemp+3,??_ISR+18
 21557                           
 21558                           ;main.c: 268: if (PIR1bits.CCP1IF) {
 21559  000052  A49E               	btfss	3998,2,c	;volatile
 21560  000054  D012               	goto	i2l688
 21561                           
 21562                           ;main.c: 269: PIR1bits.CCP1IF = 0;
 21563  000056  949E               	bcf	3998,2,c	;volatile
 21564                           
 21565                           ;main.c: 270: PORTBbits.RB6 = ~PORTBbits.RB6;
 21566  000058  AC81               	btfss	3969,6,c	;volatile
 21567  00005A  D002               	goto	i2u780_40
 21568  00005C  0E01               	movlw	1
 21569  00005E  D001               	goto	i2u780_46
 21570  000060                     i2u780_40:
 21571  000060  0E00               	movlw	0
 21572  000062                     i2u780_46:
 21573  000062  0AFF               	xorlw	255
 21574  000064  6E16               	movwf	??_ISR& (0+255),c
 21575  000066  3A16               	swapf	??_ISR,f,c
 21576  000068  4616               	rlncf	??_ISR,f,c
 21577  00006A  4616               	rlncf	??_ISR,f,c
 21578  00006C  5081               	movf	3969,w,c	;volatile
 21579  00006E  1816               	xorwf	??_ISR,w,c
 21580  000070  0BBF               	andlw	-65
 21581  000072  1816               	xorwf	??_ISR,w,c
 21582  000074  6E81               	movwf	3969,c	;volatile
 21583                           
 21584                           ;main.c: 271: updateTime();
 21585  000076  EC72  F026         	call	_updateTime	;wreg free
 21586  00007A                     i2l688:
 21587                           
 21588                           ;main.c: 272: }
 21589                           ;main.c: 274: if (INTCONbits.TMR0IF) {
 21590  00007A  A4F2               	btfss	intcon,2,c	;volatile
 21591  00007C  D00D               	goto	i2l689
 21592                           
 21593                           ;main.c: 275: INTCONbits.TMR0IF = 0;
 21594  00007E  94F2               	bcf	intcon,2,c	;volatile
 21595                           
 21596                           ;main.c: 276: sevenSegmentUpdate(numberToDisplay);
 21597  000080  C035  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 21598  000084  C036  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 21599  000088  EC73  F01B         	call	_sevenSegmentUpdate	;wreg free
 21600                           
 21601                           ;main.c: 277: buttonHandler(&buttonState);
 21602  00008C  0EF3               	movlw	low _buttonState
 21603  00008E  6E01               	movwf	buttonHandler@state,c
 21604  000090  0E01               	movlw	high _buttonState
 21605  000092  6E02               	movwf	buttonHandler@state+1,c
 21606  000094  ECD5  F01C         	call	_buttonHandler	;wreg free
 21607  000098                     i2l689:
 21608                           
 21609                           ;main.c: 280: }
 21610                           ;main.c: 282: if (INTCON3bits.INT2IF) {
 21611  000098  B2F0               	btfsc	intcon3,1,c	;volatile
 21612                           
 21613                           ;main.c: 283: INTCON3bits.INT2IF = 0;
 21614  00009A  92F0               	bcf	intcon3,1,c	;volatile
 21615                           
 21616                           ;main.c: 290: }
 21617                           ;main.c: 291: if (RCIF) {
 21618  00009C  C028  F054         	movff	??_ISR+18,btemp+3
 21619  0000A0  C027  F053         	movff	??_ISR+17,btemp+2
 21620  0000A4  C026  F052         	movff	??_ISR+16,btemp+1
 21621  0000A8  C025  F051         	movff	??_ISR+15,btemp
 21622  0000AC  C024  FFF5         	movff	??_ISR+14,tablat
 21623  0000B0  C023  FFF8         	movff	??_ISR+13,tblptru
 21624  0000B4  C022  FFF7         	movff	??_ISR+12,tblptrh
 21625  0000B8  C021  FFF6         	movff	??_ISR+11,tblptrl
 21626  0000BC  C020  FFF4         	movff	??_ISR+10,prodh
 21627  0000C0  C01F  FFF3         	movff	??_ISR+9,prodl
 21628  0000C4  C01E  FFDA         	movff	??_ISR+8,fsr2h
 21629  0000C8  C01D  FFD9         	movff	??_ISR+7,fsr2l
 21630  0000CC  C01C  FFE2         	movff	??_ISR+6,fsr1h
 21631  0000D0  C01B  FFE1         	movff	??_ISR+5,fsr1l
 21632  0000D4  C01A  FFEA         	movff	??_ISR+4,fsr0h
 21633  0000D8  C019  FFE9         	movff	??_ISR+3,fsr0l
 21634  0000DC  C018  FFFB         	movff	??_ISR+2,pclatu
 21635  0000E0  C017  FFFA         	movff	??_ISR+1,pclath
 21636  0000E4  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21637  0000E6  0011               	retfie		f
 21638  0000E8                     __end_of_ISR:
 21639                           	opt stack 0
 21640                           pclatu	equ	0xFFB
 21641                           pclath	equ	0xFFA
 21642                           tblptru	equ	0xFF8
 21643                           tblptrh	equ	0xFF7
 21644                           tblptrl	equ	0xFF6
 21645                           tablat	equ	0xFF5
 21646                           prodh	equ	0xFF4
 21647                           prodl	equ	0xFF3
 21648                           intcon	equ	0xFF2
 21649                           intcon3	equ	0xFF0
 21650                           indf0	equ	0xFEF
 21651                           postinc0	equ	0xFEE
 21652                           plusw0	equ	0xFEB
 21653                           fsr0h	equ	0xFEA
 21654                           fsr0l	equ	0xFE9
 21655                           wreg	equ	0xFE8
 21656                           indf1	equ	0xFE7
 21657                           postinc1	equ	0xFE6
 21658                           postdec1	equ	0xFE5
 21659                           plusw1	equ	0xFE3
 21660                           fsr1h	equ	0xFE2
 21661                           fsr1l	equ	0xFE1
 21662                           indf2	equ	0xFDF
 21663                           postinc2	equ	0xFDE
 21664                           postdec2	equ	0xFDD
 21665                           plusw2	equ	0xFDB
 21666                           fsr2h	equ	0xFDA
 21667                           fsr2l	equ	0xFD9
 21668                           status	equ	0xFD8
 21669                           
 21670 ;; *************** function _updateTime *****************
 21671 ;; Defined at:
 21672 ;;		line 29 in file "src/stack/time.c"
 21673 ;; Parameters:    Size  Location     Type
 21674 ;;		None
 21675 ;; Auto vars:     Size  Location     Type
 21676 ;;		None
 21677 ;; Return value:  Size  Location     Type
 21678 ;;                  1    wreg      void 
 21679 ;; Registers used:
 21680 ;;		wreg, status,2, status,0
 21681 ;; Tracked objects:
 21682 ;;		On entry : 0/0
 21683 ;;		On exit  : 0/0
 21684 ;;		Unchanged: 0/0
 21685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21686 ;;      Params:         0       0       0       0       0       0       0       0       0
 21687 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21688 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21689 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21690 ;;Total ram usage:        0 bytes
 21691 ;; Hardware stack levels used:    1
 21692 ;; This function calls:
 21693 ;;		Nothing
 21694 ;; This function is called by:
 21695 ;;		_ISR
 21696 ;; This function uses a non-reentrant model
 21697 ;;
 21698                           
 21699                           	psect	text99
 21700  004CE4                     __ptext99:
 21701                           	opt stack 0
 21702  004CE4                     _updateTime:
 21703                           	opt stack 19
 21704                           
 21705                           ;time.c: 30: time++;
 21706                           
 21707                           ;incstack = 0
 21708  004CE4  0E01               	movlw	1
 21709  004CE6  2629               	addwf	_time,f,c	;volatile
 21710  004CE8  0E00               	movlw	0
 21711  004CEA  222A               	addwfc	_time+1,f,c	;volatile
 21712  004CEC  222B               	addwfc	_time+2,f,c	;volatile
 21713  004CEE  222C               	addwfc	_time+3,f,c	;volatile
 21714  004CF0  0012               	return		;funcret
 21715  004CF2                     __end_of_updateTime:
 21716                           	opt stack 0
 21717                           pclatu	equ	0xFFB
 21718                           pclath	equ	0xFFA
 21719                           tblptru	equ	0xFF8
 21720                           tblptrh	equ	0xFF7
 21721                           tblptrl	equ	0xFF6
 21722                           tablat	equ	0xFF5
 21723                           prodh	equ	0xFF4
 21724                           prodl	equ	0xFF3
 21725                           intcon	equ	0xFF2
 21726                           intcon3	equ	0xFF0
 21727                           indf0	equ	0xFEF
 21728                           postinc0	equ	0xFEE
 21729                           plusw0	equ	0xFEB
 21730                           fsr0h	equ	0xFEA
 21731                           fsr0l	equ	0xFE9
 21732                           wreg	equ	0xFE8
 21733                           indf1	equ	0xFE7
 21734                           postinc1	equ	0xFE6
 21735                           postdec1	equ	0xFE5
 21736                           plusw1	equ	0xFE3
 21737                           fsr1h	equ	0xFE2
 21738                           fsr1l	equ	0xFE1
 21739                           indf2	equ	0xFDF
 21740                           postinc2	equ	0xFDE
 21741                           postdec2	equ	0xFDD
 21742                           plusw2	equ	0xFDB
 21743                           fsr2h	equ	0xFDA
 21744                           fsr2l	equ	0xFD9
 21745                           status	equ	0xFD8
 21746                           
 21747 ;; *************** function _sevenSegmentUpdate *****************
 21748 ;; Defined at:
 21749 ;;		line 41 in file "src/system/sevenseg.c"
 21750 ;; Parameters:    Size  Location     Type
 21751 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 21752 ;; Auto vars:     Size  Location     Type
 21753 ;;  i               1   20[COMRAM] unsigned char 
 21754 ;; Return value:  Size  Location     Type
 21755 ;;                  1    wreg      void 
 21756 ;; Registers used:
 21757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21758 ;; Tracked objects:
 21759 ;;		On entry : 0/0
 21760 ;;		On exit  : 0/0
 21761 ;;		Unchanged: 0/0
 21762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21763 ;;      Params:         2       0       0       0       0       0       0       0       0
 21764 ;;      Locals:         3       0       0       0       0       0       0       0       0
 21765 ;;      Temps:          2       0       0       0       0       0       0       0       0
 21766 ;;      Totals:         7       0       0       0       0       0       0       0       0
 21767 ;;Total ram usage:        7 bytes
 21768 ;; Hardware stack levels used:    1
 21769 ;; Hardware stack levels required when called:    2
 21770 ;; This function calls:
 21771 ;;		_parseNumber
 21772 ;; This function is called by:
 21773 ;;		_ISR
 21774 ;; This function uses a non-reentrant model
 21775 ;;
 21776                           
 21777                           	psect	text100
 21778  0036E6                     __ptext100:
 21779                           	opt stack 0
 21780  0036E6                     _sevenSegmentUpdate:
 21781                           	opt stack 17
 21782                           
 21783                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 21784                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 21785                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 21786                           
 21787                           ;incstack = 0
 21788  0036E6  C047  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 21789  0036EA  0E01               	movlw	1
 21790  0036EC  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 21791  0036EE  2A11               	incf	??_sevenSegmentUpdate,f,c
 21792  0036F0  D002               	goto	i2u754_44
 21793  0036F2                     i2u754_45:
 21794  0036F2  90D8               	bcf	status,0,c
 21795  0036F4  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 21796  0036F6                     i2u754_44:
 21797  0036F6  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 21798  0036F8  D7FC               	goto	i2u754_45
 21799  0036FA  5012               	movf	??_sevenSegmentUpdate+1,w,c
 21800  0036FC  0AFF               	xorlw	255
 21801  0036FE  1682               	andwf	3970,f,c	;volatile
 21802                           
 21803                           ;sevenseg.c: 46: PORTA = 0x00;
 21804  003700  0E00               	movlw	0
 21805  003702  6E80               	movwf	3968,c	;volatile
 21806                           
 21807                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 21808  003704  0E02               	movlw	2
 21809  003706  6047               	cpfslt	sevenSegmentUpdate@digitPointer,c
 21810  003708  D007               	goto	i2l721
 21811  00370A  0E01               	movlw	1
 21812  00370C  2447               	addwf	sevenSegmentUpdate@digitPointer,w,c
 21813  00370E  6E13               	movwf	_sevenSegmentUpdate$2439,c
 21814  003710  6A14               	clrf	_sevenSegmentUpdate$2439+1,c
 21815  003712  0E00               	movlw	0
 21816  003714  2214               	addwfc	_sevenSegmentUpdate$2439+1,f,c
 21817  003716  D004               	goto	i2l723
 21818  003718                     i2l721:
 21819  003718  0E00               	movlw	0
 21820  00371A  6E14               	movwf	_sevenSegmentUpdate$2439+1,c
 21821  00371C  0E00               	movlw	0
 21822  00371E  6E13               	movwf	_sevenSegmentUpdate$2439,c
 21823  003720                     i2l723:
 21824  003720  C013  F047         	movff	_sevenSegmentUpdate$2439,sevenSegmentUpdate@digitPointer
 21825                           
 21826                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 21827  003724  0EE8               	movlw	232
 21828  003726  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 21829  003728  0E03               	movlw	3
 21830  00372A  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 21831  00372C  B0D8               	btfsc	status,0,c
 21832  00372E  0012               	return	
 21833                           
 21834                           ;sevenseg.c: 51: }
 21835                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 21836                           
 21837                           ;sevenseg.c: 50: return;
 21838  003730  0E00               	movlw	0
 21839  003732  6E15               	movwf	sevenSegmentUpdate@i,c
 21840  003734                     i2l6617:
 21841  003734  0E02               	movlw	2
 21842  003736  6415               	cpfsgt	sevenSegmentUpdate@i,c
 21843  003738  D001               	goto	i2l726
 21844  00373A  D013               	goto	i2u758_40
 21845  00373C                     i2l726:
 21846                           
 21847                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 21848  00373C  5015               	movf	sevenSegmentUpdate@i,w,c
 21849  00373E  0D01               	mullw	1
 21850  003740  0E3D               	movlw	low sevenSegmentUpdate@digitsToDisplay
 21851  003742  24F3               	addwf	prodl,w,c
 21852  003744  6ED9               	movwf	fsr2l,c
 21853  003746  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 21854  003748  20F4               	addwfc	prodh,w,c
 21855  00374A  6EDA               	movwf	fsr2h,c
 21856  00374C  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 21857  003750  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 21858  003754  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 21859  003758  EC01  F01F         	call	_parseNumber	;wreg free
 21860  00375C  6EDF               	movwf	indf2,c
 21861  00375E  2A15               	incf	sevenSegmentUpdate@i,f,c
 21862  003760  D7E9               	goto	i2l6617
 21863  003762                     i2u758_40:
 21864                           
 21865                           ;sevenseg.c: 54: }
 21866                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 21867  003762  C047  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 21868  003766  0E01               	movlw	1
 21869  003768  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 21870  00376A  2A11               	incf	??_sevenSegmentUpdate,f,c
 21871  00376C  D002               	goto	i2u759_44
 21872  00376E                     i2u759_45:
 21873  00376E  90D8               	bcf	status,0,c
 21874  003770  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 21875  003772                     i2u759_44:
 21876  003772  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 21877  003774  D7FC               	goto	i2u759_45
 21878  003776  5012               	movf	??_sevenSegmentUpdate+1,w,c
 21879  003778  1282               	iorwf	3970,f,c	;volatile
 21880                           
 21881                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 21882  00377A  5047               	movf	sevenSegmentUpdate@digitPointer,w,c
 21883  00377C  0D01               	mullw	1
 21884  00377E  0E3D               	movlw	low sevenSegmentUpdate@digitsToDisplay
 21885  003780  24F3               	addwf	prodl,w,c
 21886  003782  6ED9               	movwf	fsr2l,c
 21887  003784  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 21888  003786  20F4               	addwfc	prodh,w,c
 21889  003788  6EDA               	movwf	fsr2h,c
 21890  00378A  50DF               	movf	indf2,w,c
 21891  00378C  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 21892  00378E  5011               	movf	??_sevenSegmentUpdate,w,c
 21893  003790  0D01               	mullw	1
 21894  003792  0EC3               	movlw	low _sevenSegCharacters
 21895  003794  24F3               	addwf	prodl,w,c
 21896  003796  6ED9               	movwf	fsr2l,c
 21897  003798  0E02               	movlw	high _sevenSegCharacters
 21898  00379A  20F4               	addwfc	prodh,w,c
 21899  00379C  6EDA               	movwf	fsr2h,c
 21900  00379E  50DF               	movf	indf2,w,c
 21901  0037A0  6E80               	movwf	3968,c	;volatile
 21902  0037A2  0012               	return		;funcret
 21903  0037A4                     __end_of_sevenSegmentUpdate:
 21904                           	opt stack 0
 21905                           pclatu	equ	0xFFB
 21906                           pclath	equ	0xFFA
 21907                           tblptru	equ	0xFF8
 21908                           tblptrh	equ	0xFF7
 21909                           tblptrl	equ	0xFF6
 21910                           tablat	equ	0xFF5
 21911                           prodh	equ	0xFF4
 21912                           prodl	equ	0xFF3
 21913                           intcon	equ	0xFF2
 21914                           intcon3	equ	0xFF0
 21915                           indf0	equ	0xFEF
 21916                           postinc0	equ	0xFEE
 21917                           plusw0	equ	0xFEB
 21918                           fsr0h	equ	0xFEA
 21919                           fsr0l	equ	0xFE9
 21920                           wreg	equ	0xFE8
 21921                           indf1	equ	0xFE7
 21922                           postinc1	equ	0xFE6
 21923                           postdec1	equ	0xFE5
 21924                           plusw1	equ	0xFE3
 21925                           fsr1h	equ	0xFE2
 21926                           fsr1l	equ	0xFE1
 21927                           indf2	equ	0xFDF
 21928                           postinc2	equ	0xFDE
 21929                           postdec2	equ	0xFDD
 21930                           plusw2	equ	0xFDB
 21931                           fsr2h	equ	0xFDA
 21932                           fsr2l	equ	0xFD9
 21933                           status	equ	0xFD8
 21934                           
 21935 ;; *************** function _parseNumber *****************
 21936 ;; Defined at:
 21937 ;;		line 59 in file "src/system/sevenseg.c"
 21938 ;; Parameters:    Size  Location     Type
 21939 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 21940 ;;  digit           1    9[COMRAM] unsigned char 
 21941 ;; Auto vars:     Size  Location     Type
 21942 ;;  hundreds        1   13[COMRAM] unsigned char 
 21943 ;;  tens            1   12[COMRAM] unsigned char 
 21944 ;;  ones            1   11[COMRAM] unsigned char 
 21945 ;; Return value:  Size  Location     Type
 21946 ;;                  1    wreg      unsigned char 
 21947 ;; Registers used:
 21948 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 21949 ;; Tracked objects:
 21950 ;;		On entry : 0/0
 21951 ;;		On exit  : 0/0
 21952 ;;		Unchanged: 0/0
 21953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21954 ;;      Params:         3       0       0       0       0       0       0       0       0
 21955 ;;      Locals:         3       0       0       0       0       0       0       0       0
 21956 ;;      Temps:          1       0       0       0       0       0       0       0       0
 21957 ;;      Totals:         7       0       0       0       0       0       0       0       0
 21958 ;;Total ram usage:        7 bytes
 21959 ;; Hardware stack levels used:    1
 21960 ;; Hardware stack levels required when called:    1
 21961 ;; This function calls:
 21962 ;;		i2___lwdiv
 21963 ;; This function is called by:
 21964 ;;		_sevenSegmentUpdate
 21965 ;; This function uses a non-reentrant model
 21966 ;;
 21967                           
 21968                           	psect	text101
 21969  003E02                     __ptext101:
 21970                           	opt stack 0
 21971  003E02                     _parseNumber:
 21972                           	opt stack 17
 21973                           
 21974                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 21975                           
 21976                           ;incstack = 0
 21977  003E02  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 21978  003E06  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 21979  003E0A  0E00               	movlw	0
 21980  003E0C  6E04               	movwf	i2___lwdiv@divisor+1,c
 21981  003E0E  0E64               	movlw	100
 21982  003E10  6E03               	movwf	i2___lwdiv@divisor,c
 21983  003E12  EC89  F022         	call	i2___lwdiv	;wreg free
 21984  003E16  5001               	movf	?i2___lwdiv,w,c
 21985  003E18  6E0E               	movwf	parseNumber@hundreds,c
 21986                           
 21987                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 21988  003E1A  500E               	movf	parseNumber@hundreds,w,c
 21989  003E1C  0D64               	mullw	100
 21990  003E1E  1EF3               	comf	prodl,f,c
 21991  003E20  1EF4               	comf	prodh,f,c
 21992  003E22  4AF3               	infsnz	prodl,f,c
 21993  003E24  2AF4               	incf	prodh,f,c
 21994  003E26  5008               	movf	parseNumber@numberToDisplay,w,c
 21995  003E28  24F3               	addwf	prodl,w,c
 21996  003E2A  6E01               	movwf	i2___lwdiv@dividend,c
 21997  003E2C  5009               	movf	parseNumber@numberToDisplay+1,w,c
 21998  003E2E  20F4               	addwfc	prodh,w,c
 21999  003E30  6E02               	movwf	i2___lwdiv@dividend+1,c
 22000  003E32  0E00               	movlw	0
 22001  003E34  6E04               	movwf	i2___lwdiv@divisor+1,c
 22002  003E36  0E0A               	movlw	10
 22003  003E38  6E03               	movwf	i2___lwdiv@divisor,c
 22004  003E3A  EC89  F022         	call	i2___lwdiv	;wreg free
 22005  003E3E  5001               	movf	?i2___lwdiv,w,c
 22006  003E40  6E0D               	movwf	parseNumber@tens,c
 22007                           
 22008                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 22009  003E42  500D               	movf	parseNumber@tens,w,c
 22010  003E44  0D0A               	mullw	10
 22011  003E46  CFF3 F00B          	movff	prodl,??_parseNumber
 22012  003E4A  500E               	movf	parseNumber@hundreds,w,c
 22013  003E4C  0D64               	mullw	100
 22014  003E4E  50F3               	movf	prodl,w,c
 22015  003E50  240B               	addwf	??_parseNumber,w,c
 22016  003E52  0800               	sublw	0
 22017  003E54  2408               	addwf	parseNumber@numberToDisplay,w,c
 22018  003E56  6E0C               	movwf	parseNumber@ones,c
 22019                           
 22020                           ;sevenseg.c: 64: switch (digit) {
 22021  003E58  D008               	goto	i2l730
 22022  003E5A                     
 22023                           ;sevenseg.c: 66: return ones;
 22024  003E5A  500C               	movf	parseNumber@ones,w,c
 22025  003E5C  0012               	return	
 22026  003E5E                     
 22027                           ;sevenseg.c: 68: return tens;
 22028  003E5E  500D               	movf	parseNumber@tens,w,c
 22029  003E60  0012               	return	
 22030  003E62                     
 22031                           ;sevenseg.c: 70: return hundreds;
 22032  003E62  500E               	movf	parseNumber@hundreds,w,c
 22033  003E64  0012               	return	
 22034  003E66  0E00               	movlw	0
 22035                           
 22036                           ;sevenseg.c: 72: }
 22037  003E68  0012               	return	
 22038  003E6A                     i2l730:
 22039  003E6A  500A               	movf	parseNumber@digit,w,c
 22040                           
 22041                           ; Switch size 1, requested type "space"
 22042                           ; Number of cases is 3, Range of values is 0 to 2
 22043                           ; switch strategies available:
 22044                           ; Name         Instructions Cycles
 22045                           ; simple_byte           10     6 (average)
 22046                           ;	Chosen strategy is simple_byte
 22047  003E6C  0A00               	xorlw	0	; case 0
 22048  003E6E  B4D8               	btfsc	status,2,c
 22049  003E70  D7F8               	goto	i2l734
 22050  003E72  0A01               	xorlw	1	; case 1
 22051  003E74  B4D8               	btfsc	status,2,c
 22052  003E76  D7F3               	goto	i2l733
 22053  003E78  0A03               	xorlw	3	; case 2
 22054  003E7A  B4D8               	btfsc	status,2,c
 22055  003E7C  D7EE               	goto	i2l731
 22056  003E7E  D7F3               	goto	i2l735
 22057  003E80                     __end_of_parseNumber:
 22058                           	opt stack 0
 22059                           pclatu	equ	0xFFB
 22060                           pclath	equ	0xFFA
 22061                           tblptru	equ	0xFF8
 22062                           tblptrh	equ	0xFF7
 22063                           tblptrl	equ	0xFF6
 22064                           tablat	equ	0xFF5
 22065                           prodh	equ	0xFF4
 22066                           prodl	equ	0xFF3
 22067                           intcon	equ	0xFF2
 22068                           intcon3	equ	0xFF0
 22069                           indf0	equ	0xFEF
 22070                           postinc0	equ	0xFEE
 22071                           plusw0	equ	0xFEB
 22072                           fsr0h	equ	0xFEA
 22073                           fsr0l	equ	0xFE9
 22074                           wreg	equ	0xFE8
 22075                           indf1	equ	0xFE7
 22076                           postinc1	equ	0xFE6
 22077                           postdec1	equ	0xFE5
 22078                           plusw1	equ	0xFE3
 22079                           fsr1h	equ	0xFE2
 22080                           fsr1l	equ	0xFE1
 22081                           indf2	equ	0xFDF
 22082                           postinc2	equ	0xFDE
 22083                           postdec2	equ	0xFDD
 22084                           plusw2	equ	0xFDB
 22085                           fsr2h	equ	0xFDA
 22086                           fsr2l	equ	0xFD9
 22087                           status	equ	0xFD8
 22088                           
 22089 ;; *************** function i2___lwdiv *****************
 22090 ;; Defined at:
 22091 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 22092 ;; Parameters:    Size  Location     Type
 22093 ;;  dividend        2    0[COMRAM] unsigned int 
 22094 ;;  divisor         2    2[COMRAM] unsigned int 
 22095 ;; Auto vars:     Size  Location     Type
 22096 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 22097 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 22098 ;; Return value:  Size  Location     Type
 22099 ;;                  2    0[COMRAM] unsigned int 
 22100 ;; Registers used:
 22101 ;;		wreg, status,2, status,0
 22102 ;; Tracked objects:
 22103 ;;		On entry : 0/0
 22104 ;;		On exit  : 0/0
 22105 ;;		Unchanged: 0/0
 22106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22107 ;;      Params:         4       0       0       0       0       0       0       0       0
 22108 ;;      Locals:         3       0       0       0       0       0       0       0       0
 22109 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22110 ;;      Totals:         7       0       0       0       0       0       0       0       0
 22111 ;;Total ram usage:        7 bytes
 22112 ;; Hardware stack levels used:    1
 22113 ;; This function calls:
 22114 ;;		Nothing
 22115 ;; This function is called by:
 22116 ;;		_parseNumber
 22117 ;; This function uses a non-reentrant model
 22118 ;;
 22119                           
 22120                           	psect	text102
 22121  004512                     __ptext102:
 22122                           	opt stack 0
 22123  004512                     i2___lwdiv:
 22124                           	opt stack 17
 22125                           
 22126                           ;incstack = 0
 22127  004512  0E00               	movlw	0
 22128  004514  6E06               	movwf	i2___lwdiv@quotient+1,c
 22129  004516  0E00               	movlw	0
 22130  004518  6E05               	movwf	i2___lwdiv@quotient,c
 22131  00451A  5003               	movf	i2___lwdiv@divisor,w,c
 22132  00451C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 22133  00451E  B4D8               	btfsc	status,2,c
 22134  004520  D01C               	goto	i2l1496
 22135  004522  0E01               	movlw	1
 22136  004524  6E07               	movwf	i2___lwdiv@counter,c
 22137  004526  D004               	goto	i2l1491
 22138  004528  90D8               	bcf	status,0,c
 22139  00452A  3603               	rlcf	i2___lwdiv@divisor,f,c
 22140  00452C  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 22141  00452E  2A07               	incf	i2___lwdiv@counter,f,c
 22142  004530                     i2l1491:
 22143  004530  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 22144  004532  D7FA               	goto	i2l1492
 22145  004534                     i2u680_40:
 22146  004534  90D8               	bcf	status,0,c
 22147  004536  3605               	rlcf	i2___lwdiv@quotient,f,c
 22148  004538  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 22149  00453A  5003               	movf	i2___lwdiv@divisor,w,c
 22150  00453C  5C01               	subwf	i2___lwdiv@dividend,w,c
 22151  00453E  5004               	movf	i2___lwdiv@divisor+1,w,c
 22152  004540  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 22153  004542  A0D8               	btfss	status,0,c
 22154  004544  D005               	goto	i2l1495
 22155  004546  5003               	movf	i2___lwdiv@divisor,w,c
 22156  004548  5E01               	subwf	i2___lwdiv@dividend,f,c
 22157  00454A  5004               	movf	i2___lwdiv@divisor+1,w,c
 22158  00454C  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 22159  00454E  8005               	bsf	i2___lwdiv@quotient,0,c
 22160  004550                     i2l1495:
 22161  004550  90D8               	bcf	status,0,c
 22162  004552  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 22163  004554  3203               	rrcf	i2___lwdiv@divisor,f,c
 22164  004556  2E07               	decfsz	i2___lwdiv@counter,f,c
 22165  004558  D7ED               	goto	i2u680_40
 22166  00455A                     i2l1496:
 22167  00455A  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 22168  00455E  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22169  004562  0012               	return		;funcret
 22170  004564                     __end_ofi2___lwdiv:
 22171                           	opt stack 0
 22172                           pclatu	equ	0xFFB
 22173                           pclath	equ	0xFFA
 22174                           tblptru	equ	0xFF8
 22175                           tblptrh	equ	0xFF7
 22176                           tblptrl	equ	0xFF6
 22177                           tablat	equ	0xFF5
 22178                           prodh	equ	0xFF4
 22179                           prodl	equ	0xFF3
 22180                           intcon	equ	0xFF2
 22181                           intcon3	equ	0xFF0
 22182                           indf0	equ	0xFEF
 22183                           postinc0	equ	0xFEE
 22184                           plusw0	equ	0xFEB
 22185                           fsr0h	equ	0xFEA
 22186                           fsr0l	equ	0xFE9
 22187                           wreg	equ	0xFE8
 22188                           indf1	equ	0xFE7
 22189                           postinc1	equ	0xFE6
 22190                           postdec1	equ	0xFE5
 22191                           plusw1	equ	0xFE3
 22192                           fsr1h	equ	0xFE2
 22193                           fsr1l	equ	0xFE1
 22194                           indf2	equ	0xFDF
 22195                           postinc2	equ	0xFDE
 22196                           postdec2	equ	0xFDD
 22197                           plusw2	equ	0xFDB
 22198                           fsr2h	equ	0xFDA
 22199                           fsr2l	equ	0xFD9
 22200                           status	equ	0xFD8
 22201                           
 22202 ;; *************** function _buttonHandler *****************
 22203 ;; Defined at:
 22204 ;;		line 245 in file "src/system/main.c"
 22205 ;; Parameters:    Size  Location     Type
 22206 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 22207 ;;		 -> buttonState(1), 
 22208 ;; Auto vars:     Size  Location     Type
 22209 ;;  debounceValu    4    2[COMRAM] const unsigned long 
 22210 ;; Return value:  Size  Location     Type
 22211 ;;                  1    wreg      void 
 22212 ;; Registers used:
 22213 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22214 ;; Tracked objects:
 22215 ;;		On entry : 0/0
 22216 ;;		On exit  : 0/0
 22217 ;;		Unchanged: 0/0
 22218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22219 ;;      Params:         2       0       0       0       0       0       0       0       0
 22220 ;;      Locals:         4       0       0       0       0       0       0       0       0
 22221 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22222 ;;      Totals:         6       0       0       0       0       0       0       0       0
 22223 ;;Total ram usage:        6 bytes
 22224 ;; Hardware stack levels used:    1
 22225 ;; This function calls:
 22226 ;;		Nothing
 22227 ;; This function is called by:
 22228 ;;		_ISR
 22229 ;; This function uses a non-reentrant model
 22230 ;;
 22231                           
 22232                           	psect	text103
 22233  0039AA                     __ptext103:
 22234                           	opt stack 0
 22235  0039AA                     _buttonHandler:
 22236                           	opt stack 19
 22237                           
 22238                           ;main.c: 246: uint8_t static oldState = 0;
 22239                           ;main.c: 247: uint8_t static newState = 0;
 22240                           ;main.c: 248: uint32_t static debounceCounter = 0;
 22241                           ;main.c: 249: const uint32_t debounceValue = 0x1f;
 22242                           
 22243                           ;incstack = 0
 22244  0039AA  0E1F               	movlw	31
 22245  0039AC  6E03               	movwf	buttonHandler@debounceValue,c
 22246  0039AE  0E00               	movlw	0
 22247  0039B0  6E04               	movwf	buttonHandler@debounceValue+1,c
 22248  0039B2  0E00               	movlw	0
 22249  0039B4  6E05               	movwf	buttonHandler@debounceValue+2,c
 22250  0039B6  0E00               	movlw	0
 22251  0039B8  6E06               	movwf	buttonHandler@debounceValue+3,c
 22252                           
 22253                           ;main.c: 250: if ((unsigned)(!(PORTB & (1<<5)))) {
 22254  0039BA  BA81               	btfsc	3969,5,c	;volatile
 22255  0039BC  D011               	goto	i2l678
 22256                           
 22257                           ;main.c: 251: if (debounceCounter < debounceValue)
 22258  0039BE  5003               	movf	buttonHandler@debounceValue,w,c
 22259  0039C0  5C31               	subwf	buttonHandler@debounceCounter,w,c
 22260  0039C2  5004               	movf	buttonHandler@debounceValue+1,w,c
 22261  0039C4  5832               	subwfb	buttonHandler@debounceCounter+1,w,c
 22262  0039C6  5005               	movf	buttonHandler@debounceValue+2,w,c
 22263  0039C8  5833               	subwfb	buttonHandler@debounceCounter+2,w,c
 22264  0039CA  5006               	movf	buttonHandler@debounceValue+3,w,c
 22265  0039CC  5834               	subwfb	buttonHandler@debounceCounter+3,w,c
 22266  0039CE  B0D8               	btfsc	status,0,c
 22267  0039D0  D00F               	goto	i2l680
 22268                           
 22269                           ;main.c: 252: debounceCounter++;
 22270  0039D2  0E01               	movlw	1
 22271  0039D4  2631               	addwf	buttonHandler@debounceCounter,f,c
 22272  0039D6  0E00               	movlw	0
 22273  0039D8  2232               	addwfc	buttonHandler@debounceCounter+1,f,c
 22274  0039DA  2233               	addwfc	buttonHandler@debounceCounter+2,f,c
 22275  0039DC  2234               	addwfc	buttonHandler@debounceCounter+3,f,c
 22276                           
 22277                           ;main.c: 253: } else {
 22278  0039DE  D008               	goto	i2l680
 22279  0039E0                     i2l678:
 22280                           
 22281                           ;main.c: 254: debounceCounter = 0;
 22282  0039E0  0E00               	movlw	0
 22283  0039E2  6E31               	movwf	buttonHandler@debounceCounter,c
 22284  0039E4  0E00               	movlw	0
 22285  0039E6  6E32               	movwf	buttonHandler@debounceCounter+1,c
 22286  0039E8  0E00               	movlw	0
 22287  0039EA  6E33               	movwf	buttonHandler@debounceCounter+2,c
 22288  0039EC  0E00               	movlw	0
 22289  0039EE  6E34               	movwf	buttonHandler@debounceCounter+3,c
 22290  0039F0                     i2l680:
 22291                           
 22292                           ;main.c: 255: }
 22293                           ;main.c: 256: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 22294  0039F0  5003               	movf	buttonHandler@debounceValue,w,c
 22295  0039F2  5C31               	subwf	buttonHandler@debounceCounter,w,c
 22296  0039F4  5004               	movf	buttonHandler@debounceValue+1,w,c
 22297  0039F6  5832               	subwfb	buttonHandler@debounceCounter+1,w,c
 22298  0039F8  5005               	movf	buttonHandler@debounceValue+2,w,c
 22299  0039FA  5833               	subwfb	buttonHandler@debounceCounter+2,w,c
 22300  0039FC  5006               	movf	buttonHandler@debounceValue+3,w,c
 22301  0039FE  5834               	subwfb	buttonHandler@debounceCounter+3,w,c
 22302  003A00  A0D8               	btfss	status,0,c
 22303  003A02  D002               	goto	i2u750_40
 22304  003A04  0E01               	movlw	1
 22305  003A06  D001               	goto	i2u751_40
 22306  003A08                     i2u750_40:
 22307  003A08  0E00               	movlw	0
 22308  003A0A                     i2u751_40:
 22309  003A0A  6E48               	movwf	buttonHandler@newState,c
 22310                           
 22311                           ;main.c: 257: if (newState && !oldState) {
 22312  003A0C  5048               	movf	buttonHandler@newState,w,c
 22313  003A0E  B4D8               	btfsc	status,2,c
 22314  003A10  D011               	goto	i2l681
 22315  003A12  5049               	movf	buttonHandler@oldState,w,c
 22316  003A14  A4D8               	btfss	status,2,c
 22317  003A16  D00E               	goto	i2l681
 22318                           
 22319                           ;main.c: 258: debounceCounter = debounceValue;
 22320  003A18  C003  F031         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 22321  003A1C  C004  F032         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 22322  003A20  C005  F033         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 22323  003A24  C006  F034         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 22324                           
 22325                           ;main.c: 259: *state = 1;
 22326  003A28  C001  FFD9         	movff	buttonHandler@state,fsr2l
 22327  003A2C  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 22328  003A30  0E01               	movlw	1
 22329  003A32  D005               	goto	L8
 22330  003A34                     i2l681:
 22331                           
 22332                           ;main.c: 261: *state = 0;
 22333  003A34  C001  FFD9         	movff	buttonHandler@state,fsr2l
 22334  003A38  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 22335  003A3C  0E00               	movlw	0
 22336  003A3E                     L8:
 22337  003A3E  6EDF               	movwf	indf2,c
 22338                           
 22339                           ;main.c: 262: }
 22340                           ;main.c: 263: oldState = newState;
 22341  003A40  C048  F049         	movff	buttonHandler@newState,buttonHandler@oldState
 22342  003A44  0012               	return		;funcret
 22343  003A46                     __end_of_buttonHandler:
 22344                           	opt stack 0
 22345                           pclatu	equ	0xFFB
 22346                           pclath	equ	0xFFA
 22347                           tblptru	equ	0xFF8
 22348                           tblptrh	equ	0xFF7
 22349                           tblptrl	equ	0xFF6
 22350                           tablat	equ	0xFF5
 22351                           prodh	equ	0xFF4
 22352                           prodl	equ	0xFF3
 22353                           intcon	equ	0xFF2
 22354                           intcon3	equ	0xFF0
 22355                           indf0	equ	0xFEF
 22356                           postinc0	equ	0xFEE
 22357                           plusw0	equ	0xFEB
 22358                           fsr0h	equ	0xFEA
 22359                           fsr0l	equ	0xFE9
 22360                           wreg	equ	0xFE8
 22361                           indf1	equ	0xFE7
 22362                           postinc1	equ	0xFE6
 22363                           postdec1	equ	0xFE5
 22364                           plusw1	equ	0xFE3
 22365                           fsr1h	equ	0xFE2
 22366                           fsr1l	equ	0xFE1
 22367                           indf2	equ	0xFDF
 22368                           postinc2	equ	0xFDE
 22369                           postdec2	equ	0xFDD
 22370                           plusw2	equ	0xFDB
 22371                           fsr2h	equ	0xFDA
 22372                           fsr2l	equ	0xFD9
 22373                           status	equ	0xFD8
 22374                           pclatu	equ	0xFFB
 22375                           pclath	equ	0xFFA
 22376                           tblptru	equ	0xFF8
 22377                           tblptrh	equ	0xFF7
 22378                           tblptrl	equ	0xFF6
 22379                           tablat	equ	0xFF5
 22380                           prodh	equ	0xFF4
 22381                           prodl	equ	0xFF3
 22382                           intcon	equ	0xFF2
 22383                           intcon3	equ	0xFF0
 22384                           indf0	equ	0xFEF
 22385                           postinc0	equ	0xFEE
 22386                           plusw0	equ	0xFEB
 22387                           fsr0h	equ	0xFEA
 22388                           fsr0l	equ	0xFE9
 22389                           wreg	equ	0xFE8
 22390                           indf1	equ	0xFE7
 22391                           postinc1	equ	0xFE6
 22392                           postdec1	equ	0xFE5
 22393                           plusw1	equ	0xFE3
 22394                           fsr1h	equ	0xFE2
 22395                           fsr1l	equ	0xFE1
 22396                           indf2	equ	0xFDF
 22397                           postinc2	equ	0xFDE
 22398                           postdec2	equ	0xFDD
 22399                           plusw2	equ	0xFDB
 22400                           fsr2h	equ	0xFDA
 22401                           fsr2l	equ	0xFD9
 22402                           status	equ	0xFD8
 22403                           
 22404                           	psect	rparam
 22405  0000                     pclatu	equ	0xFFB
 22406                           pclath	equ	0xFFA
 22407                           tblptru	equ	0xFF8
 22408                           tblptrh	equ	0xFF7
 22409                           tblptrl	equ	0xFF6
 22410                           tablat	equ	0xFF5
 22411                           prodh	equ	0xFF4
 22412                           prodl	equ	0xFF3
 22413                           intcon	equ	0xFF2
 22414                           intcon3	equ	0xFF0
 22415                           indf0	equ	0xFEF
 22416                           postinc0	equ	0xFEE
 22417                           plusw0	equ	0xFEB
 22418                           fsr0h	equ	0xFEA
 22419                           fsr0l	equ	0xFE9
 22420                           wreg	equ	0xFE8
 22421                           indf1	equ	0xFE7
 22422                           postinc1	equ	0xFE6
 22423                           postdec1	equ	0xFE5
 22424                           plusw1	equ	0xFE3
 22425                           fsr1h	equ	0xFE2
 22426                           fsr1l	equ	0xFE1
 22427                           indf2	equ	0xFDF
 22428                           postinc2	equ	0xFDE
 22429                           postdec2	equ	0xFDD
 22430                           plusw2	equ	0xFDB
 22431                           fsr2h	equ	0xFDA
 22432                           fsr2l	equ	0xFD9
 22433                           status	equ	0xFD8
 22434                           
 22435                           	psect	temp
 22436  000051                     btemp:
 22437                           	opt stack 0
 22438  000051                     	ds	1
 22439  0000                     int$flags	set	btemp
 22440  0000                     wtemp6	set	btemp+1
 22441                           pclatu	equ	0xFFB
 22442                           pclath	equ	0xFFA
 22443                           tblptru	equ	0xFF8
 22444                           tblptrh	equ	0xFF7
 22445                           tblptrl	equ	0xFF6
 22446                           tablat	equ	0xFF5
 22447                           prodh	equ	0xFF4
 22448                           prodl	equ	0xFF3
 22449                           intcon	equ	0xFF2
 22450                           intcon3	equ	0xFF0
 22451                           indf0	equ	0xFEF
 22452                           postinc0	equ	0xFEE
 22453                           plusw0	equ	0xFEB
 22454                           fsr0h	equ	0xFEA
 22455                           fsr0l	equ	0xFE9
 22456                           wreg	equ	0xFE8
 22457                           indf1	equ	0xFE7
 22458                           postinc1	equ	0xFE6
 22459                           postdec1	equ	0xFE5
 22460                           plusw1	equ	0xFE3
 22461                           fsr1h	equ	0xFE2
 22462                           fsr1l	equ	0xFE1
 22463                           indf2	equ	0xFDF
 22464                           postinc2	equ	0xFDE
 22465                           postdec2	equ	0xFDD
 22466                           plusw2	equ	0xFDB
 22467                           fsr2h	equ	0xFDA
 22468                           fsr2l	equ	0xFD9
 22469                           status	equ	0xFD8


Data Sizes:
    Strings     914
    Constant    11
    Data        52
    BSS         437
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    160     160
    BANK1           256    140     244
    BANK2           256     17     240
    BANK3           256      0     122
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ethernetController_dropPacket@frame	PTR struct ethernetFrame size(2) Largest target is 122
		 -> stack.ethernet(BANK3[15]), stack(BANK3[122]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> ARP_initTable@ip(BANK0[4]), ARP_probe@ipSender(BANK1[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> ARP_checkForEntry@ip(COMRAM[4]), ARP_sendReply@myIP(BANK1[4]), ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> ARP_table(BANK2[112]), ARP_sendReply@request(BANK1[32]), ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_checkHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_handleNewPacket@ip(BANK0[23]), 

    ipv4_parseHeader@field	PTR struct memoryField size(2) Largest target is 9
		 -> ipv4_handleNewPacket@headerField(BANK0[9]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 122
		 -> stack.ethernet(BANK3[15]), stack(BANK3[122]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_checkHeaderChecksum@testHeader(BANK0[23]), 

    ARP_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 122
		 -> stack.ethernet(BANK3[15]), stack(BANK3[122]), 

    ARP_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 122
		 -> stack.ethernet(BANK3[15]), stack(BANK3[122]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK2[50]), 

    sp__ipProtocolToString	PTR unsigned char  size(2) Largest target is 17
		 -> STR_61(CODE[17]), STR_60(CODE[4]), STR_59(CODE[4]), STR_58(CODE[5]), 

    sp__hexToString	PTR unsigned char  size(2) Largest target is 10
		 -> hexToString@number(BANK1[10]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 55
		 -> STR_88(CODE[2]), STR_87(CODE[7]), STR_86(CODE[11]), STR_85(CODE[19]), 
		 -> STR_84(CODE[2]), STR_83(CODE[3]), STR_82(CODE[3]), STR_81(CODE[3]), 
		 -> STR_80(CODE[3]), STR_79(CODE[5]), STR_78(CODE[2]), STR_77(CODE[3]), 
		 -> STR_76(CODE[7]), STR_75(CODE[8]), STR_74(CODE[2]), STR_73(CODE[3]), 
		 -> STR_72(CODE[16]), STR_71(CODE[3]), STR_70(CODE[3]), STR_69(CODE[15]), 
		 -> STR_68(CODE[10]), STR_67(CODE[2]), STR_66(CODE[3]), STR_65(CODE[5]), 
		 -> STR_64(CODE[3]), STR_63(CODE[2]), STR_62(CODE[39]), arpEntryToString@string(BANK2[50]), 
		 -> ipAdressToString@address(BANK2[16]), STR_61(CODE[17]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[5]), STR_57(CODE[18]), STR_56(CODE[4]), STR_55(CODE[5]), 
		 -> macToString@address(BANK0[18]), hexToString@number(BANK1[10]), intToString@number(BANK1[10]), STR_54(CODE[5]), 
		 -> STR_53(CODE[9]), STR_52(CODE[30]), STR_51(CODE[34]), STR_50(CODE[55]), 
		 -> STR_49(CODE[37]), STR_48(CODE[15]), STR_47(CODE[14]), STR_46(CODE[19]), 
		 -> STR_45(CODE[30]), STR_44(CODE[17]), STR_43(CODE[8]), STR_42(CODE[29]), 
		 -> STR_41(CODE[29]), STR_40(CODE[20]), STR_39(CODE[19]), STR_38(CODE[19]), 
		 -> STR_37(CODE[13]), STR_36(CODE[26]), STR_35(CODE[51]), STR_34(CODE[4]), 
		 -> STR_33(CODE[23]), STR_32(CODE[12]), STR_31(CODE[4]), STR_30(CODE[9]), 
		 -> STR_29(CODE[2]), STR_28(CODE[12]), STR_27(CODE[24]), STR_26(CODE[51]), 
		 -> STR_25(CODE[49]), STR_24(CODE[51]), STR_23(CODE[2]), STR_22(CODE[18]), 
		 -> STR_21(CODE[3]), STR_20(CODE[19]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[3]), STR_16(CODE[5]), STR_15(CODE[2]), STR_14(CODE[2]), 
		 -> STR_13(CODE[5]), STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[2]), 
		 -> STR_9(CODE[7]), STR_8(CODE[6]), STR_7(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[16]), STR_4(CODE[10]), STR_3(CODE[12]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), ethernetController_getDeviceName@string(BANK0[11]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK1[1]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 16
		 -> ipAdressToString@address(BANK2[16]), 

    handleStackBackgroundTasks@stack	PTR volatile struct stack size(2) Largest target is 122
		 -> stack(BANK3[122]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> ARP_initTable@mac(BANK0[6]), ARP_sendRequest@targetMAC(BANK1[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> ARP_send@destination(BANK0[6]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_57(CODE[18]), STR_56(CODE[4]), STR_55(CODE[5]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 18
		 -> macToString@address(BANK0[18]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 122
		 -> stack.ethernet(BANK3[15]), stack(BANK3[122]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 34
		 -> ARP_send@ethFrame(BANK0[34]), 

    ENC424J600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK1[6]), 

    ENC424J600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 1
		 -> ethernetController_updateLinkStatus@temp16(BANK0[1]), 

    ENC424J600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_getInterruptFlags@low(BANK0[1]), ENC424J600_getInterruptFlags@high(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), 
		 -> ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_getPacketCount@lowByte(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@highByte(BANK0[1]), ENC424J600_readPHYRegister@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    ENC424J600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_setRXTailPointer@highByte(BANK0[1]), ENC424J600_setRXTailPointer@lowByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> ENC424J600_setRXBufferStartAddress@lowByte(BANK0[1]), ENC424J600_setTXStartAddress@highByte(BANK0[1]), ENC424J600_setTXStartAddress@lowByte(BANK0[1]), ENC424J600_setTXLength@highByte(BANK0[1]), 
		 -> ENC424J600_setTXLength@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_readPHYRegister@unusedBits(BANK0[1]), ENC424J600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ethernetController_setLEDConfig@data(BANK0[1]), mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ENC424J600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_getInterruptFlags@low(BANK0[1]), ENC424J600_getInterruptFlags@high(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), 
		 -> ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_getPacketCount@lowByte(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@highByte(BANK0[1]), ENC424J600_readPHYRegister@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerH(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerL(BANK0[1]), 
		 -> ethernetController_getRSV@temp(BANK1[6]), ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@temp(COMRAM[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    ENC424J600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_setRXTailPointer@highByte(BANK0[1]), ENC424J600_setRXTailPointer@lowByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> ENC424J600_setRXBufferStartAddress@lowByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@highByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@lowByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@opcode(BANK0[1]), 
		 -> ENC424J600_setGPDATAReadPointer@highByte(COMRAM[1]), ENC424J600_setGPDATAReadPointer@lowByte(COMRAM[1]), ENC424J600_setGPDATAReadPointer@opcode(COMRAM[1]), ENC424J600_setGPDATAWritePointer@highByte(BANK0[1]), 
		 -> ENC424J600_setGPDATAWritePointer@lowByte(BANK0[1]), ENC424J600_setGPDATAWritePointer@opcode(BANK0[1]), ENC424J600_setTXStartAddress@highByte(BANK0[1]), ENC424J600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> ENC424J600_setTXLength@highByte(BANK0[1]), ENC424J600_setTXLength@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_readPHYRegister@unusedBits(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@PHYaddress(BANK0[1]), ENC424J600_readControlRegisterUnbanked@addr(BANK0[1]), ENC424J600_readControlRegisterUnbanked@opcode(BANK0[1]), ENC424J600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> ENC424J600_writeControlRegisterUnbanked@opcode(BANK0[1]), ENC424J600_writeSingleByte@opcode(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), 
		 -> ethernetController_updateNextPacketPointer@opcode(BANK0[1]), ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@opcode(COMRAM[1]), ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 122
		 -> stack(BANK3[122]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _srand->_ethernetController_getMacAddress
    _printEthernetState->_UARTTransmitText
    _printErrorMessage->_UARTTransmitText
    _ipv4_setIPSourceAddress->_ARP_probe
    _rand->___lmul
    ___awmod->_rand
    _ARP_sendRequest->_ARP_send
    _ethernet_rxGetNewFrame->_ARP_handleNewPacket
    _ipv4_handleNewPacket->_ipv4_checkHeaderChecksum
    _ipv4_parseHeader->_ethernetController_streamFromRXBuffer
    _ipv4_checkHeaderChecksum->_UARTTransmitText
    _ethernetController_updateNextPacketPointer->_ENC424J600_setERXDATAReadPointer
    _ethernetController_getRSV->_ENC424J600_updateReceiveStatusVector
    _ethernetController_getEtherTypeField->_ENC424J600_setERXDATAReadPointer
    _UARTTransmitInt->_UARTTransmitText
    _intToString->___lldiv
    ___lldiv->___lmul
    _ethernetController_dropPacket->_ENC424J600_setRXTailPointer
    _ARP_sendReply->_ARP_send
    _macToString->_ethernetController_getMacAddress
    _ipAdressToString->___lwdiv
    _ethernetController_getMacAddress->_ENC424J600_readControlRegisterUnbanked
    _ARP_send->_ethernet_txFrameRequest
    _hexToString->_hexToChar
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    _ethernetController_writeEtherTypeFieldToBuffer->_ENC424J600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_ENC424J600_setGPDATAWritePointer
    _ethernetController_streamToTransmitBuffer->_ENC424J600_setGPDATAWritePointer
    _ENC424J600_setGPDATAWritePointer->_ENC424J600_writeSPI
    _ethernetController_sendPacket->_ENC424J600_setTXLength
    _ethernetController_sendPacket->_ENC424J600_setTXStartAddress
    _ENC424J600_setTXStartAddress->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_setTXLength->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_getSourceMACAddress->_ENC424J600_setERXDATAReadPointer
    _UARTTransmitText->_macToString
    _ARP_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_ENC424J600_setRXTailPointer
    _ethernetController_getNextPacketPointer->_ENC424J600_getNextPacketPointer
    _ENC424J600_setERXDATAReadPointer->_ENC424J600_writeSPI
    _ethernetController_updateLinkStatus->_ENC424J600_readPHYRegister
    _ENC424J600_readPHYRegister->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_readPHYRegister->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfig->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_setLEDConfig->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_ENC424J600_getInterruptFlags
    _ENC424J600_getInterruptFlags->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_ENC424J600_getPacketCount
    _ethernetController_clearInterruptFlag->_ENC424J600_clearInterruptFlag
    _ENC424J600_clearInterruptFlag->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_clearInterruptFlag->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_softReset->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_checkDeviceId->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_setRXTailPointer->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_setRXBufferStartAddress->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_enableReception->_ENC424J600_writeSingleByte
    _ENC424J600_writeSingleByte->_ENC424J600_writeSPI
    _ENC424J600_enableAutoMACInsertion->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_enableAutoMACInsertion->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_writeControlRegisterUnbanked->_ENC424J600_writeSPI
    _ethernetController_getCurrentPacketCount->_ENC424J600_getPacketCount
    _ENC424J600_getPacketCount->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_readControlRegisterUnbanked->_ENC424J600_readSPI
    _ENC424J600_readControlRegisterUnbanked->_ENC424J600_writeSPI
    _ARP_initTable->_ARP_setNewEntry
    _ARP_setNewEntry->_getMillis

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame
    _ipv4_setIPSourceAddress->_ARP_probe
    _ARP_probe->_ARP_sendRequest
    _ethernet_rxGetNewFrame->_ARP_handleNewPacket
    _ARP_handleNewPacket->_ARP_sendReply

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0  540194
                                            138 BANK1      2     2      0
                                              0 BANK2     17    17      0
                      _ARP_initTable
                           _UARTInit
                   _UARTTransmitText
   _ethernetController_checkDeviceId
_ethernetController_getCurrentPacket
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
            _ethernetController_init
    _ethernetController_setLEDConfig
         _handleStackBackgroundTasks
                        _macToString
                  _printErrorMessage
                 _printEthernetState
                   _sevenSegmentInit
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     121
                                             26 BANK0      2     0      2
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15   10526
                                             58 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    5     2      3   18117
                                             58 BANK0      5     2      3
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                           4     2      2  420044
                                            134 BANK1      4     2      2
                   _UARTTransmitText
_ethernetController_clearInterruptFl
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
    _ethernetController_setLEDConfig
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                   _ipAdressToString
                     _ipv4_sendFrame
            _ipv4_setIPSourceAddress
 ---------------------------------------------------------------------------------
 (2) _ipv4_setIPSourceAddress                              8     4      4   88412
                                             75 BANK1      7     3      4
                          _ARP_probe
 ---------------------------------------------------------------------------------
 (3) _ARP_probe                                           27    23      4   88288
                                            156 BANK0      4     0      4
                                             52 BANK1     23    23      0
                    _ARP_sendRequest
                   _UARTTransmitText
                            ___awmod
                          _getMillis
                        _intToString
                  _ipv4_setToAllZero
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 2     0      2    2076
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     613
                                             14 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) _ARP_sendRequest                                     52    44      8   66986
                                              0 BANK1     52    44      8
                           _ARP_send
   _ethernetController_getMacAddress
            _ipv4_getIPSourceAddress
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (2) _ipv4_sendFrame                                      70     4     66     161
                                              0 BANK0     69     3     66
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              14    11      3  262394
                                            120 BANK1     14    11      3
                _ARP_handleNewPacket
                    _UARTTransmitInt
                   _UARTTransmitText
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
_ethernetController_updateNextPacket
                          _getMillis
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                36    34      2   62235
                                             85 BANK0     36    34      2
                   _UARTTransmitText
      _ethernetController_dropPacket
                        _intToString
                   _ipAdressToString
                 _ipProtocolToString
           _ipv4_checkHeaderChecksum
                   _ipv4_parseHeader
 ---------------------------------------------------------------------------------
 (4) _ipv4_parseHeader                                    50    27     23   19707
                                             23 BANK0     50    27     23
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (4) _ipv4_checkHeaderChecksum                            27    25      2   12178
                                             58 BANK0     27    25      2
                   _UARTTransmitText
                        _hexToString
       _ipv4_calculateHeaderChecksum
 ---------------------------------------------------------------------------------
 (5) _ipv4_calculateHeaderChecksum                        18    16      2     839
                                              0 BANK0     18    16      2
 ---------------------------------------------------------------------------------
 (4) _ipProtocolToString                                   3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_updateNextPacketPointer          11    11      0    7269
                                             15 BANK0     11    11      0
    _ENC424J600_getNextPacketPointer
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
    _ENC424J600_setNextPacketPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    8464
                                             17 BANK0      7     2      5
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
_ENC424J600_updateReceiveStatusVecto
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_updateReceiveStatusVector                17    12      5    1356
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                18     9      9    7182
                                             15 BANK0     18     9      9
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     121
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _UARTTransmitInt                                      4     0      4   18046
                                             58 BANK0      4     0      4
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (2) _intToString                                         30    26      4    7780
                                             25 BANK0     30    26      4
                            ___lldiv
                            ___llmod
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    2076
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     592
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1321
                                             12 BANK0     13     5      8
                             ___lmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _ARP_handleNewPacket                                 36    34      2  129692
                                            156 BANK0      4     2      2
                                             88 BANK1     32    32      0
              _ARP_parseFromRXBuffer
                      _ARP_sendReply
                    _ARP_setNewEntry
                   _UARTTransmitText
      _ethernetController_dropPacket
                          _getMillis
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (4) _getMillis                                            4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                        2     0      2    8834
                                             18 BANK0      2     0      2
        _ENC424J600_setRXTailPointer
         _ENC424J600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (4) _ARP_sendReply                                       88    56     32   82315
                                              0 BANK1     88    56     32
                           _ARP_send
                   _UARTTransmitText
   _ethernetController_getMacAddress
                   _ipAdressToString
                           _ipv4_cmp
            _ipv4_getIPSourceAddress
                        _macToString
 ---------------------------------------------------------------------------------
 (1) _macToString                                         30    24      6    1473
                                             26 BANK0     30    24      6
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (5) _ipv4_getIPSourceAddress                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _ipAdressToString                                    22    18      4    2986
                                              7 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     821
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getMacAddress                    12     6      6    6367
                                             14 BANK0     12     6      6
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _ARP_send                                            85    53     32   59635
                                             71 BANK0     85    53     32
                   _UARTTransmitText
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                        _hexToString
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (6) _mac_setToBroadcast                                   3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (6) _hexToString                                          9     5      4     812
                                              1 BANK0      9     5      4
                          _hexToChar
 ---------------------------------------------------------------------------------
 (7) _hexToChar                                            1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _ethernet_txFrameRequest                              5     3      2   18704
                                             66 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (7) _memory_txFrameRequest                               30    21      9    5819
                                             36 BANK0     30    21      9
                             ___wmul
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (8) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _checkForOverlap                                     18     0     18    2268
                                             18 BANK0     18     0     18
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (9) _checkForOverlapSwitched                             18     0     18    1072
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1312
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (7) _ethernetController_writeEtherTypeFieldToBuffer      14     3     11    6059
                                             15 BANK0     14     3     11
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (7) _ethernetController_writeDestinationMACAddress       24     9     15    6257
                                             15 BANK0     24     9     15
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _ethernetController_streamToTransmitBuffer           15     6      9    6981
                                             15 BANK0     15     6      9
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (8) _ENC424J600_setGPDATAWritePointer                     5     3      2    3059
                                             10 BANK0      5     3      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _ethernetController_sendPacket                        9     0      9   13618
                                             18 BANK0      9     0      9
             _ENC424J600_setTXLength
       _ENC424J600_setTXStartAddress
         _ENC424J600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (7) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _ENC424J600_setTXStartAddress                         4     2      2    5374
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (7) _ENC424J600_setTXLength                               4     2      2    5374
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (6) _ethernetController_getSourceMACAddress              18     9      9    7244
                                             15 BANK0     18     9      9
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _UARTTransmitText                                     2     0      2   10145
                                             56 BANK0      2     0      2
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
   _ethernetController_getMacAddress (ARG)
                        _hexToString (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                 _ipProtocolToString (ARG)
                        _macToString (ARG)
 ---------------------------------------------------------------------------------
 (4) _ARP_parseFromRXBuffer                               73    41     32   22455
                                             23 BANK0     73    41     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_isAllZero                                        3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     372
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ipv4_isAllZero                                       3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _ipv4_cmp                                             7     3      4     912
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamFromRXBuffer                5     3      2   18102
                                             18 BANK0      5     3      2
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
        _ENC424J600_setRXTailPointer
                _ENC424J600_writeSPI
         _ENC424J600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (6) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _ENC424J600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (7) _ENC424J600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (7) _ENC424J600_setERXDATAReadPointer                     5     3      2    3329
                                             10 BANK0      5     3      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  4     2      2   18510
                                             32 BANK0      4     2      2
_ENC424J600_readControlRegisterUnban
         _ENC424J600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_readPHYRegister                          18    16      2   11923
                                             14 BANK0     18    16      2
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfig                      3     2      1   12237
                                             14 BANK0      3     2      1
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags                7     5      2    6716
                                             24 BANK0      7     5      2
       _ENC424J600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_getInterruptFlags                        10     8      2    6280
                                             14 BANK0     10     8      2
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    6215
          _ENC424J600_getPacketCount
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   11558
                                             18 BANK0      1     1      0
      _ENC424J600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_clearInterruptFlag                        4     4      0   11527
                                             14 BANK0      4     4      0
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (1) _ethernetController_init                              6     3      3   46456
                                             26 BANK0      6     3      3
  _ENC424J600_enableAutoMACInsertion
         _ENC424J600_enableReception
                 _ENC424J600_initSPI
    _ENC424J600_setNextPacketPointer
 _ENC424J600_setRXBufferStartAddress
        _ENC424J600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (2) _ethernetController_softReset                        12     9      3   14613
                                             14 BANK0     12     9      3
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
         _ENC424J600_writeSingleByte
 ---------------------------------------------------------------------------------
 (2) _ethernetController_checkDeviceId                     7     4      3    6360
                                             14 BANK0      7     4      3
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (6) _ENC424J600_setRXTailPointer                          4     2      2    5734
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
_ethernetController_getNextPacketPoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_setRXBufferStartAddress                   4     2      2    5374
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setNextPacketPointer                      2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_enableReception                           0     0      0    2650
         _ENC424J600_writeSingleByte
 ---------------------------------------------------------------------------------
 (7) _ENC424J600_writeSingleByte                           1     1      0    2650
                                             10 BANK0      1     1      0
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_enableAutoMACInsertion                    1     1      0   11369
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (8) _ENC424J600_writeControlRegisterUnbanked              4     2      2    5148
                                             10 BANK0      4     2      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getCurrentPacketCount             0     0      0    6215
          _ENC424J600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_getPacketCount                            1     1      0    6215
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (6) _ENC424J600_readControlRegisterUnbanked               4     2      2    6144
                                             10 BANK0      4     2      2
                 _ENC424J600_readSPI
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (7) _ENC424J600_writeSPI                                 10     8      2    2616
                                              0 BANK0     10     8      2
                 _ENC424J600_initSPI
 ---------------------------------------------------------------------------------
 (7) _ENC424J600_readSPI                                  10     8      2     906
                                              0 BANK0     10     8      2
                 _ENC424J600_initSPI
 ---------------------------------------------------------------------------------
 (8) _ENC424J600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ARP_initTable                                       11    11      0    1720
                                             28 BANK0     11    11      0
                    _ARP_setNewEntry
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_setAllZero                                       3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _ipv4_setToAllZero                                    3     1      2     279
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _ARP_setNewEntry                                     24    10     14     930
                                              4 BANK0     24    10     14
                          _getMillis (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                19    19      0    1062
                                             21 COMRAM    19    19      0
                      _buttonHandler
                 _sevenSegmentUpdate
                         _updateTime
 ---------------------------------------------------------------------------------
 (12) _updateTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _sevenSegmentUpdate                                  7     5      2     875
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (13) _parseNumber                                         7     4      3     641
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _buttonHandler                                       6     4      2     187
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ARP_initTable
     _ARP_setNewEntry
       _getMillis (ARG)
     _ipv4_setToAllZero
     _mac_setAllZero
   _UARTInit
   _UARTTransmitText
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _hexToString (ARG)
       _hexToChar
     _intToString (ARG)
       ___lldiv
         ___lmul (ARG)
         ___wmul (ARG)
       ___llmod
       ___lmul
       ___wmul
     _ipAdressToString (ARG)
       ___lwdiv
       ___lwmod
     _ipProtocolToString (ARG)
     _macToString (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
   _ethernetController_checkDeviceId
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_getCurrentPacketCount
     _ENC424J600_getPacketCount
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_init
     _ENC424J600_enableAutoMACInsertion
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_enableReception
       _ENC424J600_writeSingleByte
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_initSPI
     _ENC424J600_setNextPacketPointer
     _ENC424J600_setRXBufferStartAddress
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_setRXTailPointer
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_getNextPacketPointer (ARG)
         _ENC424J600_getNextPacketPointer
     _ethernetController_checkDeviceId
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_softReset
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeSingleByte
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _ethernetController_setLEDConfig
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
     _ENC424J600_writeControlRegisterUnbanked
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _handleStackBackgroundTasks
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___lldiv
           ___lmul (ARG)
           ___wmul (ARG)
         ___llmod
         ___lmul
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ethernetController_clearInterruptFlag
       _ENC424J600_clearInterruptFlag
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeControlRegisterUnbanked
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_newPacketAvailable
       _ENC424J600_getPacketCount
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_pollInterruptFlags
       _ENC424J600_getInterruptFlags
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_setLEDConfig
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_updateLinkStatus
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_readPHYRegister
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeControlRegisterUnbanked
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernet_rxGetNewFrame
       _ARP_handleNewPacket
         _ARP_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_setRXTailPointer
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_getNextPacketPointer (ARG)
                 _ENC424J600_getNextPacketPointer
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer
               _ENC424J600_getNextPacketPointer
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _ARP_sendReply
           _ARP_send
             _UARTTransmitText
               _etherTypeToString (ARG)
               _ethernetController_getDeviceName (ARG)
               _ethernetController_getMacAddress (ARG)
                 _ENC424J600_readControlRegisterUnbanked
                   _ENC424J600_readSPI
                     _ENC424J600_initSPI
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _hexToString (ARG)
                 _hexToChar
               _intToString (ARG)
                 ___lldiv
                   ___lmul (ARG)
                   ___wmul (ARG)
                 ___llmod
                 ___lmul
                 ___wmul
               _ipAdressToString (ARG)
                 ___lwdiv
                 ___lwmod
               _ipProtocolToString (ARG)
               _macToString (ARG)
                 _ethernetController_getMacAddress (ARG)
                   _ENC424J600_readControlRegisterUnbanked
                     _ENC424J600_readSPI
                       _ENC424J600_initSPI
                     _ENC424J600_writeSPI
                       _ENC424J600_initSPI
             _ethernetController_getSourceMACAddress
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_setERXDATAReadPointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_sendPacket
               _ENC424J600_setTXLength
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_setTXStartAddress
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_writeSingleByte
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _hexToString
               _hexToChar
             _mac_setToBroadcast
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               ___lldiv
                 ___lmul (ARG)
                 ___wmul (ARG)
               ___llmod
               ___lmul
               ___wmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
             _ipProtocolToString (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _ENC424J600_readControlRegisterUnbanked
                   _ENC424J600_readSPI
                     _ENC424J600_initSPI
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
           _ethernetController_getMacAddress
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _ipAdressToString
             ___lwdiv
             ___lwmod
           _ipv4_cmp
           _ipv4_getIPSourceAddress
           _macToString
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ARP_setNewEntry
           _getMillis (ARG)
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___lldiv
               ___lmul (ARG)
               ___wmul (ARG)
             ___llmod
             ___lmul
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_dropPacket
           _ENC424J600_setRXTailPointer
             _ENC424J600_writeControlRegisterUnbanked
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _ENC424J600_getNextPacketPointer
           _ENC424J600_writeSingleByte
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer
             _ENC424J600_getNextPacketPointer
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
         _macToString
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _UARTTransmitInt
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___lldiv
               ___lmul (ARG)
               ___wmul (ARG)
             ___llmod
             ___lmul
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _intToString
           ___lldiv
             ___lmul (ARG)
             ___wmul (ARG)
           ___llmod
           ___lmul
           ___wmul
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___lldiv
             ___lmul (ARG)
             ___wmul (ARG)
           ___llmod
           ___lmul
           ___wmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
         _ipProtocolToString (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _etherTypeToString
       _ethernetController_dropPacket
         _ENC424J600_setRXTailPointer
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer (ARG)
             _ENC424J600_getNextPacketPointer
         _ENC424J600_writeSingleByte
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ethernetController_getNextPacketPointer
           _ENC424J600_getNextPacketPointer
       _ethernetController_getEtherTypeField
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_getNextPacketPointer
         _ENC424J600_getNextPacketPointer
       _ethernetController_getRSV
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_updateReceiveStatusVector
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_updateNextPacketPointer
         _ENC424J600_getNextPacketPointer
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_setNextPacketPointer
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _getMillis
       _intToString
         ___lldiv
           ___lmul (ARG)
           ___wmul (ARG)
         ___llmod
         ___lmul
         ___wmul
       _ipv4_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___lldiv
               ___lmul (ARG)
               ___wmul (ARG)
             ___llmod
             ___lmul
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_dropPacket
           _ENC424J600_setRXTailPointer
             _ENC424J600_writeControlRegisterUnbanked
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _ENC424J600_getNextPacketPointer
           _ENC424J600_writeSingleByte
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer
             _ENC424J600_getNextPacketPointer
         _intToString
           ___lldiv
             ___lmul (ARG)
             ___wmul (ARG)
           ___llmod
           ___lmul
           ___wmul
         _ipAdressToString
           ___lwdiv
           ___lwmod
         _ipProtocolToString
         _ipv4_checkHeaderChecksum
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               ___lldiv
                 ___lmul (ARG)
                 ___wmul (ARG)
               ___llmod
               ___lmul
               ___wmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
             _ipProtocolToString (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _ENC424J600_readControlRegisterUnbanked
                   _ENC424J600_readSPI
                     _ENC424J600_initSPI
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
           _hexToString
             _hexToChar
           _ipv4_calculateHeaderChecksum
         _ipv4_parseHeader
           _ethernetController_streamFromRXBuffer
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_setRXTailPointer
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_getNextPacketPointer (ARG)
                 _ENC424J600_getNextPacketPointer
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer
               _ENC424J600_getNextPacketPointer
       _macToString
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ipAdressToString
       ___lwdiv
       ___lwmod
     _ipv4_sendFrame
     _ipv4_setIPSourceAddress
       _ARP_probe
         _ARP_sendRequest
           _ARP_send
             _UARTTransmitText
               _etherTypeToString (ARG)
               _ethernetController_getDeviceName (ARG)
               _ethernetController_getMacAddress (ARG)
                 _ENC424J600_readControlRegisterUnbanked
                   _ENC424J600_readSPI
                     _ENC424J600_initSPI
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _hexToString (ARG)
                 _hexToChar
               _intToString (ARG)
                 ___lldiv
                   ___lmul (ARG)
                   ___wmul (ARG)
                 ___llmod
                 ___lmul
                 ___wmul
               _ipAdressToString (ARG)
                 ___lwdiv
                 ___lwmod
               _ipProtocolToString (ARG)
               _macToString (ARG)
                 _ethernetController_getMacAddress (ARG)
                   _ENC424J600_readControlRegisterUnbanked
                     _ENC424J600_readSPI
                       _ENC424J600_initSPI
                     _ENC424J600_writeSPI
                       _ENC424J600_initSPI
             _ethernetController_getSourceMACAddress
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_setERXDATAReadPointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_sendPacket
               _ENC424J600_setTXLength
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_setTXStartAddress
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_writeSingleByte
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _hexToString
               _hexToChar
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _ipv4_getIPSourceAddress
           _mac_setAllZero
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___lldiv
               ___lmul (ARG)
               ___wmul (ARG)
             ___llmod
             ___lmul
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         ___awmod
           _rand (ARG)
             ___lmul
         _getMillis
         _intToString
           ___lldiv
             ___lmul (ARG)
             ___wmul (ARG)
           ___llmod
           ___lmul
           ___wmul
         _ipv4_setToAllZero
         _rand
           ___lmul
   _macToString
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _printErrorMessage
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___lldiv
           ___lmul (ARG)
           ___wmul (ARG)
         ___llmod
         ___lmul
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _intToString
       ___lldiv
         ___lmul (ARG)
         ___wmul (ARG)
       ___llmod
       ___lmul
       ___wmul
   _printEthernetState
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___lldiv
           ___lmul (ARG)
           ___wmul (ARG)
         ___llmod
         ___lmul
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
   _sevenSegmentInit
   _srand
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      7A      12       47.7%
BITBANK2           100      0       0       9        0.0%
BANK2              100     11      F0      10       93.8%
BITBANK1           100      0       0       7        0.0%
BANK1              100     8C      F4       8       95.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     34E       6        0.0%
DATA                 0      0     34E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 12 22:46:29 2019

                                            main@IPsource 02E8  
                                            ?_hexToString 0061  
                __end_of_ethernetController_getMacAddress 405A  
               __size_of_ethernetController_getMacAddress 0074  
                      ??_ethernetController_getMacAddress 0074  
                       ?_ethernetController_getMacAddress 006E  
                        _ethernetController_getMacAddress 3FE6  
                                                      l90 45EA  
                                                      l82 3126  
                                                      l84 3108  
                                                      l86 3120  
                                                      l87 313C  
                        __end_of_ipv4_checkHeaderChecksum 36E6  
                 ethernetController_getSourceMACAddress@i 0080  
                                     ___wmul@multiplicand 0062  
                                      i2___lwdiv@dividend 0001  
                      ipv4_calculateHeaderChecksum@header 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                 ??_memory_txFrameRequest 008D  
                                  __size_of_ARP_sendReply 016C  
                                                     l210 3B08  
                                                     l204 3B26  
                                                     l132 3F26  
                                                     l140 3D66  
                                                     l213 3B46  
                                                     l205 3B10  
                                                     l133 3F6C  
                                                     l214 3B2E  
                                                     l206 3AFC  
                                                     l232 4374  
                                                     l216 3B5C  
                                                     l241 4234  
                                                     l217 3B36  
                                                     l209 3B04  
                                                     l153 41E2  
                                                     l218 3B3C  
                                                     l138 3D1E  
                                                     l163 3FA6  
                                                     l180 3A70  
                                                     l420 4862  
                                                     l245 427A  
                                                     l317 3C3E  
                                                     l181 3A84  
                                                     l182 3AA4  
                                                     l414 489A  
                                                     l422 4884  
                                                     l263 303E  
                                                     l183 3ABA  
                                                     l440 32F0  
                                                     l416 48BC  
                                                     l177 3AC4  
                                                     l441 32EC  
                                                     l361 35B0  
                                                     l521 22CC  
                                                     l258 2F86  
                                                     l178 3A4C  
                                                     l450 38BC  
                                                     l434 32B8  
                                                     l370 0900  
                                                     l195 3B8E  
                                                     l187 47BE  
                                                     l371 0A78  
                                                     l460 3904  
                                                     l188 47D4  
                                                     l372 094C  
                                                     l524 23AC  
                                                     l197 3BBE  
                                                     l445 332C  
                                                     l381 4AEC  
                                                     l373 0ABC  
                                                     l525 23F4  
                                                     l438 3330  
                                                     l366 07E0  
                                                     l526 2456  
                                                     l199 3BE4  
                                                     l455 38F4  
                                                     l439 331A  
                                                     l471 0C4C  
                                                     l359 3590  
                                                     l375 0968  
                                                     l367 0824  
                                                     l527 2438  
                                                     l631 1FF0  
                                                     l392 472A  
                                                     l464 0BC6  
                                                     l368 08C0  
                                                     l528 2450  
                                                     l624 1E00  
                                                     l457 38F0  
                                                     l377 0984  
                                                     l369 08E0  
                                                     l641 3928  
                                                     l625 1E70  
                                                     l394 4756  
                                                     l386 493E  
                                                     l490 104A  
                                                     l474 0C80  
                                                     l466 0BEA  
                                                     l650 3996  
                                                     l626 1EA8  
                                                     l491 106C  
                                                     l483 0E48  
                                                     l803 46B6  
                                                     l811 467C  
                                                     l643 393C  
                                                     l627 1FA6  
                                                     l388 4958  
                                                     l484 0EF8  
                                                     l476 0C88  
                                                     l468 0C16  
                                                     l804 4696  
                                                     l812 4652  
                                                     l660 2D1A  
                                                     l645 3958  
                                                     l629 1FE6  
                                                     l398 4B12  
                                                     l910 1210  
                                                     l478 0EA6  
                                                     l822 24BC  
                                                     l902 287A  
                                                     l806 46A2  
                                                     l814 465E  
                                                     l662 2D8A  
                                                     l654 2D2A  
                                                     l479 0DC2  
                                                     l807 46AC  
                                                     l815 4668  
                                                     l663 2D4E  
                                                     l655 2CDA  
                                                     l647 396C  
                                                     l912 12AE  
                                                     l824 25DC  
                                                     l904 28BA  
                                                     l816 4672  
                                                     l664 2DBC  
                                                     l648 3982  
                                                     l921 13A0  
                                                     l913 1266  
                                                     l489 0F6A  
                                                     l825 2630  
                                                     l905 2998  
                                                     l665 2D5C  
                                                     l657 2CEA  
                                                     l906 29AC  
                                                     l770 018A  
                                                     l666 2D6C  
                                                     l658 2CFA  
                                                     l923 13D6  
                                                     l915 1304  
                                                     l771 021A  
                                                     l667 2D7A  
                                                     l659 2D0A  
                                                     l916 12BC  
                                                     l940 1C90  
                                                     l828 2676  
                                                     l772 02F0  
                                                     l925 1418  
                                                     l909 1258  
                                                     l757 446A  
                                                     l773 03EA  
                                                     l926 141A  
                                                     l918 135A  
                                                     l782 4BB2  
                                                     l942 1D06  
                                                     l774 050A  
                                                     l927 1450  
                                                     l919 1312  
                                                     l759 4492  
                                                     l943 1CD2  
                                                     l775 0646  
                                                     l936 1C82  
                                                     l960 2CB4  
                                                     l945 1D48  
                                                     l937 1C4E  
                                                     l793 317A  
                                                     l961 2B72  
                                                     l946 1D14  
                                                     l794 3248  
                                                     l779 4BA6  
                                                     l787 33CA  
                                                     l939 1CC4  
                                                     l795 31CA  
                                                     l963 2BD2  
                                                     l964 2C9C  
                                                     l981 34C2  
                                                     l797 31FE  
                                                     l965 2CA6  
                                                     l799 323A  
                                                     l985 431A  
                                                     l979 346A  
                                            __CFG_CPB$OFF 000000  
                                            __CFG_CPD$OFF 000000  
                                                     _ISR 0008  
           ENC424J600_writeControlRegisterUnbanked@opcode 006D  
                __end_of_ethernetController_getDeviceName 4B72  
               __size_of_ethernetController_getDeviceName 0024  
                      ??_ethernetController_getDeviceName 0062  
                       ?_ethernetController_getDeviceName 0060  
                        _ethernetController_getDeviceName 4B4E  
                                memory_txFrameClear@index 0060  
                    ENC424J600_readPHYRegister@unusedBits 0078  
                     ethernetController_getMacAddress@mac 0074  
                          memory_txFrameRequest@freeIndex 00A1  
                                            ___awmod@sign 0073  
                            ??_ENC424J600_enableReception 006B  
                                                     prod 000FF3  
                                            hexToChar@val 0060  
           ethernetController_streamFromRXBuffer@startEnd 0074  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                      _sevenSegmentUpdate 36E6  
               ethernetController_getEtherTypeField@field 006F  
                                  _numberOfOccupiedFields 004A  
                      ethernetController_setLEDConfig@LED 006F  
                      __size_of_ethernetController_getRSV 0074  
                            ipv4_sendFrame@requestCounter 0046  
                                                    ?_ISR 0001  
                          ?_ethernetController_sendPacket 0072  
                                                    l1100 43E0  
                                                    l1040 26C0  
                                                    l1042 2842  
                                                    l1052 366A  
                                                    l1045 21C4  
                                                    l1071 496E  
                                                    l1047 220A  
                                                    l1065 476C  
                                                    l1073 4988  
                                                    l1067 4798  
                                                    l1077 4BC4  
                                                    l1501 46F0  
                                                    l1502 46E8  
                                                    l1271 4092  
                                                    l1272 408A  
                                                    l1505 4708  
                                                    l1506 4712  
                                                    l1442 3CE4  
                                                    l1443 3CF2  
                                                    l1099 43CC  
                                                    l1275 40AA  
                                                    l1452 42D0  
                                                    l1276 40B4  
                                                    l1268 4070  
                                                    l1453 42DE  
                                                    l1277 40C2  
                                                    l1269 407C  
                                                    l1438 3CB0  
                                                    l1439 3CA4  
                                                    l1448 42A8  
                                                    l1449 429C  
                                                    l1491 44DE  
                                                    l1492 44D6  
                                                    l1495 44FE  
                                                    l1496 4508  
                                                    l7135 4892  
                                                    l7049 43A2  
                                                    l7323 4262  
                                                    l7155 485A  
                                                    l8231 1448  
                                                    l7265 3D16  
                                                    l7283 3D5E  
                                                    l8411 366A  
                                                    l7429 0EF0  
                                                    l9143 4312  
                                                    l8337 4BBC  
                                                    l7529 3F6C  
                                                    l9065 23AC  
                                                    l7539 41DA  
                                                    l7395 0DBA  
                                                    l7811 24B4  
                                                    l7731 31DE  
                                                    l8371 21BC  
                                                    l7741 3212  
                                                    l7591 4AE4  
                                                    l8383 2202  
                                                    l8289 3462  
                                                    l7753 3248  
                                                    l7851 4966  
                                                    l8483 3F9E  
         ethernetController_streamToTransmitBuffer@opcode 007D  
                                                    l7749 323A  
                                                    l8567 2FB8  
                                                    l7871 4764  
                                                    l7759 4936  
                                                    l8761 3112  
                                                    l7779 4722  
                                                    l9547 0A9E  
                                                    l9549 0AB4  
                                                    l7799 4B0A  
                                                    STR_1 7FCE  
                                                    STR_2 7FFA  
                                                    STR_3 7F5E  
                                                    STR_4 7F7F  
                                                    STR_5 7EFD  
                           ?_ethernetController_softReset 006E  
                                                    STR_6 7FCE  
                                                    STR_7 7FFA  
                                                    STR_8 7FC0  
                                                    STR_9 7FB9  
               ethernetController_clearInterruptFlag@flag 0072  
               ENC424J600_setRXBufferStartAddress@lowByte 0070  
                                                    u8010 38B8  
                                                    _RCIE 007CED  
                                                    _RCIF 007CF5  
                                                    u8200 32B4  
                                                    u8120 4888  
                                                    u8130 3262  
                                                    u9011 3154  
                                                    u8140 3270  
                                                    u8310 3D46  
                                                    u8150 327E  
                                                    _RCIP 007CFD  
                                                    u9120 475A  
                                                    u8160 328C  
                                                    u9200 267A  
                                                    u8401 0BE0  
                                                    u8330 3D80  
                                                    u8090 48C0  
                                                    u9050 3224  
                                                    u8251 32FA  
                                                    u9060 3248  
                                                    u8261 330C  
                                                    u8350 4262  
                                                    u9230 498C  
                                                    u8431 0C0C  
                                                    u9311 1B80  
                                                    u8360 4272  
                                                    u8281 333A  
                                                    u8521 0DE0  
                                                    u8441 0C42  
                                                    u9321 1B9A  
                                                    u9090 495C  
                                                    u8291 334C  
                                                    u8531 0DFE  
                                                    u9411 1C9A  
                                                    u9331 1BB4  
                                                    u9260 479C  
                                                    u9180 2608  
                                                    u9500 1A0E  
                                                    u8621 0F34  
                                                    u8381 0BBC  
                                                    u9341 1BCE  
                                                    u8631 0F52  
                                                    u9431 1CDC  
                                                    u9351 1BE8  
                                                    u9271 1ABA  
                                                    u7920 43A2  
                                                    u8561 0E3E  
                                                    u9361 1C02  
                                                    u9281 1ACC  
                                                    u9505 1A04  
                                                    u7930 43B2  
                                                    u8650 0F70  
                                                    u8570 0E4E  
                                                    u9610 14EC  
                                                    u8811 35C2  
                                                    u9451 1D1E  
                                                    u9371 1C1C  
                                                    u9291 1ADE  
                                                    u7940 3866  
                                                    u8900 336C  
                                                    u9540 3CB4  
                                                    u8581 0E9C  
                                                    u8821 35DC  
                                                    u9381 1C36  
                                                    u7950 3874  
                                                    u8910 339A  
                                                    u9710 15B2  
                                                    u9630 1512  
                                                    u8671 1040  
                                                    u8831 3610  
                                                    u9471 1D5A  
                                                    u9391 1C58  
                                                    u8840 448A  
                                                    u8760 4208  
                                                    u7960 3882  
                                                    u8920 33F8  
                                                    u9608 14CC  
                                                    u8850 4496  
                                                    u7970 3890  
                                                    u9570 42AC  
                                                    u9810 167C  
                                                    u9730 15DC  
                                                    u9650 153A  
                                                    u8771 4214  
                                                    u8691 1062  
                                                    u8915 3390  
                                                    u8860 44B6  
                                                    u8940 44E2  
                                                    u9708 158E  
                                                    u9628 14F0  
                                                    u8781 3568  
                                                    u8925 33EE  
                                                    u9485 17E2  
                                                    u9910 1740  
                                                    u9830 16A2  
                                                    u9750 1604  
                                                    u9670 1564  
                                                    u9590 14C8  
                                                    u8847 4480  
                                                    u9495 1890  
                                                    u9808 1656  
                                                    u9728 15B6  
                                                    u9648 1516  
                                                    u8970 46F4  
                                                    u9930 1766  
                                                    u9850 16CA  
                                                    u9770 162A  
                                                    u9690 158A  
                                                    u8867 44AC  
                                                    u9908 1720  
                                                    u9828 1680  
                                                    u9748 15E0  
                                                    u9668 153E  
                                                    u9870 16F4  
                                                    u9790 1652  
                                                    u8991 4050  
                                                    u9951 1782  
                                                    u9928 1744  
                                                    u9848 16A6  
                                                    u9768 1608  
                                                    u9688 1568  
                                                    u9970 0148  
                                                    u9890 171C  
                                                    u9980 019E  
                                                    u9948 176A  
                                                    u9868 16CE  
                                                    u9788 162E  
                                                    u9990 022C  
                                                    u9888 16F8  
                                                    _TRMT 007D61  
                                          mac_isAllZero@i 0062  
                                     ?_sevenSegmentUpdate 000F  
                                       _ipv4_setToAllZero 4BB6  
                                                    _main 1D68  
                                                    _rand 4412  
                                 printEthernetState@state 009A  
                                                    _time 0029  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                      i2___lwdiv@quotient 0005  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf1 000FE7  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                                    btemp 0051  
                                           __CFG_BORV$190 000000  
                                      intToString@pointer 0096  
                               __size_of_sevenSegmentInit 001A  
                                 _ethernetController_init 40CC  
                                      ?_ipv4_setToAllZero 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                     __size_of_handleStackBackgroundTasks 023C  
                                                    start 00E8  
          __end_of_ethernetController_getSourceMACAddress 421E  
         __size_of_ethernetController_getSourceMACAddress 0070  
                ??_ethernetController_getSourceMACAddress 0078  
                 ?_ethernetController_getSourceMACAddress 006F  
                  _ethernetController_getSourceMACAddress 41AE  
                                           __CFG_IESO$OFF 000000  
                                 __end_of_UARTTransmitInt 4B94  
                               _ENC424J600_getPacketCount 4C42  
                             __end_of_ENC424J600_writeSPI 43BA  
                                      __size_of_ARP_probe 0160  
                                         ??_mac_isAllZero 0062  
                                           __CFG_MCLRE$ON 000000  
                              memory_txFrameRequest@field 0098  
                                            ___param_bank 000000  
                           ethernet_rxGetNewFrame@counter 0039  
                                        ARP_setNewEntry@i 007B  
                                 _checkForOverlapSwitched 3856  
              ENC424J600_setRXBufferStartAddress@highByte 0071  
            __end_of_ethernetController_getEtherTypeField 41AE  
           __size_of_ethernetController_getEtherTypeField 0070  
                  ??_ethernetController_getEtherTypeField 0078  
                   ?_ethernetController_getEtherTypeField 006F  
                    _ethernetController_getEtherTypeField 413E  
                                                   ??_ISR 0016  
                                     ??_ipv4_setToAllZero 0062  
                     __size_of_ENC424J600_enableReception 0008  
                                    ARP_probe@waitingTime 0140  
                                          _ipv4_isAllZero 4960  
                     ethernetController_setLEDConfig@data 0070  
                                    ??_sevenSegmentUpdate 0011  
                                            ?_intToString 0079  
                                          ARP_probe@state 01D8  
                     ethernetController_setLEDConfig@conf 006E  
        __end_of_ethernetController_getCurrentPacketCount 4D1A  
       __size_of_ethernetController_getCurrentPacketCount 0006  
               ?_ethernetController_getCurrentPacketCount 0001  
              ??_ethernetController_getCurrentPacketCount 006F  
                _ethernetController_getCurrentPacketCount 4D14  
                                __size_of_ARP_setNewEntry 00EE  
                                        __end_of_ARP_send 1D68  
                                       _nextPacketPointer 0044  
                                __size_of_ARP_sendRequest 00B2  
                                                   ?_main 0001  
                                                   ?_rand 006C  
                                                   _CCPR1 000FBE  
                                                   STR_10 7FCE  
                                                   STR_11 7FF3  
                                                   STR_12 7FF6  
                                                   STR_20 7E94  
                                                   STR_21 7D04  
                                                   STR_13 7FDF  
                                                   STR_14 7FFA  
                                                   STR_30 7F92  
                                                   STR_22 7EB9  
                                                   STR_31 7FDB  
                                                   STR_15 7FCE  
                                                   STR_23 7FFC  
                                                   STR_16 7EF8  
                                                   STR_32 7F46  
                                                   STR_40 7E34  
                                                   STR_24 7CA3  
                                                   STR_17 7FF0  
                                                   STR_33 7E1D  
                                                   STR_41 7DB1  
                                                   STR_25 7CD6  
                                                   STR_26 7CA3  
                                                   STR_34 7FDB  
                                                   STR_18 7FF9  
                                                   STR_42 7DCE  
                                                   STR_50 7C6C  
                                                   STR_19 7D04  
                                                   STR_35 7CA3  
                                                   STR_43 7FA3  
                                                   STR_27 7E05  
                                                   STR_51 7D53  
                                                   STR_60 7FE8  
                                                   STR_28 7F52  
                                                   STR_44 7EDC  
                                                   STR_36 7DEB  
                                                   STR_52 7D93  
                                         __end_of___awmod 40CC  
                                                   STR_29 7E46  
                                                   STR_53 7F89  
                                                   STR_37 7F39  
                                                   STR_61 7ECB  
                                                   STR_45 7D75  
                                                   STR_70 7E45  
                                                   STR_54 7FDA  
                                                   STR_46 7E81  
                                                   STR_38 7E6E  
                                                   STR_62 7D07  
                                                   STR_71 7D04  
                                                   STR_63 7FCE  
                                                   STR_55 7FD0  
                                                   STR_47 7F2B  
                                                   STR_39 7E5B  
                                                   STR_64 7E45  
                                                   STR_80 7FF6  
                                                   STR_56 7FEC  
                                                   STR_48 7F1C  
                                                   STR_72 7EED  
                                                   STR_73 7E45  
                                                   STR_81 7FF6  
                                                   STR_65 7FCB  
                                                   STR_57 7EA7  
                                                   STR_49 7D2E  
                                                   STR_66 7E45  
                                                   STR_82 7FF6  
                                                   STR_74 7FFA  
                                                   STR_58 7FD5  
                                                   STR_83 7E45  
                                                   STR_67 7FFA  
                                                   STR_59 7FE4  
                                                   STR_75 7F9B  
                                                   STR_84 7FFA  
                                                   STR_76 7FB2  
                                                   STR_68 7F75  
                                                   STR_69 7F0D  
                                                   STR_85 7E48  
                                                   STR_78 7FCE  
                                                   STR_86 7F6A  
                                                   STR_79 7FC6  
                                                   STR_87 7FAB  
                                                   STR_88 7FFA  
                                                   u10000 0302  
                                                   u10010 03FA  
                                         __end_of___lldiv 3D04  
                                                   u10020 051A  
                                                   u11000 4CA6  
                                                   u10130 1414  
                                                   u10300 34C6  
                                                   u10221 2A42  
                                                   u10311 3504  
                                                   u10231 2A54  
                                                   u10241 2ABC  
                                                   u10321 37AE  
                                                   u10410 2244  
                                                   u10251 2ADE  
                                                   u11131 09A6  
                                                   u10331 3814  
                                                   u10180 1448  
                                                   u10261 2AF0  
                                                   u10421 2264  
                                                   u11141 09E0  
                                                   u10341 3836  
                                                   u11150 4B5C  
                                                   u10191 1466  
                                                   u10271 2B14  
                                                   u10431 362C  
                                                   u11071 070A  
                                                   u10351 3848  
                                                   u10600 286C  
                                                   u10520 3FC0  
                                                   u10611 288C  
                                                   u10531 3FDC  
                                                   u11091 0836  
                                                   u10701 26D4  
                                                   u11501 1FC0  
                                                   u10390 21FE  
                                                   u10631 28D2  
                                                   u10711 270E  
                                                   u11191 22F2  
                                                   u10800 2E10  
                                                   u10480 4096  
                                                   u10641 2930  
                                         __end_of___llmod 42F0  
                                                   u10554 3C22  
                                                   u11291 4324  
                                                   u10555 3C1E  
                                                   u10564 3C64  
                                                   u10900 2E96  
                                                   u10820 2E28  
                                                   u10580 2FB8  
                                                   u10565 3C60  
                                                   u10671 29B6  
                                                   u11391 39A0  
                                                   u10920 2EB2  
                                                   u10840 2E42  
                                                   u10681 29CC  
                                                   u11617 1DBA  
                                                   u10818 2E14  
                                                   u10690 26B2  
                                                   u11627 1F24  
                                                   u11491 1EC8  
                                                   u10940 2ED0  
                                                   u10860 2E5E  
                                                   u11637 2F80  
                                                   u10918 2E9A  
                                                   u10838 2E2C  
                                                   u11647 30C0  
                                                   u10960 2EEC  
                                                   u10880 2E7C  
                                                   u11657 30FC  
                                                   u10938 2EB6  
                                                   u10858 2E46  
                                                   u10980 2F04  
                                                   u10958 2ED4  
                                                   u10878 2E62  
                                                   u10978 2EF0  
                                                   u10898 2E80  
                                                   u10998 2F08  
                                         __end_of___lwdiv 4512  
                              __end_of_printEthernetState 39AA  
                                         __end_of___lwmod 471C  
                                           __CFG_WDTEN$ON 000000  
                                                   i2l721 3718  
                                                   i2l730 3E6A  
        ethernetController_streamToTransmitBuffer@pointer 0040  
                                                   i2l731 3E5A  
                                                   i2l723 3720  
                                                   i2l733 3E5E  
                                                   i2l734 3E62  
                                                   i2l726 373C  
                                                   i2l735 3E66  
                                                   i2l680 39F0  
                                                   i2l681 3A34  
                                                   i2l678 39E0  
                                                   i2l688 007A  
                                                   i2l689 0098  
                                                   _SPBRG 000FAF  
                                                   _PORTA 000F80  
                                                   _PORTB 000F81  
                                                   _PORTC 000F82  
                        __size_of_ethernet_txFrameRequest 00E8  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
                        ENC424J600_setTXStartAddress@addr 006E  
         __end_of_ENC424J600_writeControlRegisterUnbanked 48FA  
        __size_of_ENC424J600_writeControlRegisterUnbanked 0036  
               ??_ENC424J600_writeControlRegisterUnbanked 006C  
                ?_ENC424J600_writeControlRegisterUnbanked 006A  
                 _ENC424J600_writeControlRegisterUnbanked 48C4  
                                ARP_parseFromRXBuffer@arp 00A0  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0064  
                                           __CFG_WRT3$OFF 000000  
                                           _ARP_initTable 42F0  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                         __end_of_mac_cmp 475E  
                                     intToString@millions 0095  
                                        __end_of_UARTInit 4CBA  
                                     intToString@hundreds 0091  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          __CFG_EBTRB$OFF 000000  
                __end_of_ENC424J600_setGPDATAWritePointer 4818  
               __size_of_ENC424J600_setGPDATAWritePointer 003C  
                      ??_ENC424J600_setGPDATAWritePointer 006C  
                       ?_ENC424J600_setGPDATAWritePointer 006A  
                        _ENC424J600_setGPDATAWritePointer 47DC  
                                                   _randx 004B  
                               __end_of_ipv4_setToAllZero 4BD4  
                                                   _srand 4CBA  
                                                   _stack 0300  
           ethernetController_streamToTransmitBuffer@data 007C  
                       __end_of_ethernetController_getRSV 3FE6  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                            ethernet_txFrameRequest@frame 00A2  
                             ARP_parseFromRXBuffer@i_2962 009B  
                             ARP_parseFromRXBuffer@i_2963 009C  
                             ARP_parseFromRXBuffer@i_2964 009D  
                                        ?_checkForOverlap 0072  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                                  ENC424J600_readSPI@data 0060  
                             memory_txFrameRequest@i_1174 0097  
                                                   status 000FD8  
                                           _ARP_sendReply 29FE  
                                          __CFG_T3CMX$RC0 000000  
                                                   wtemp6 0052  
                       ENC424J600_clearInterruptFlag@flag 0070  
                             __size_of_mac_setToBroadcast 0026  
                                          __CFG_ICPRT$OFF 000000  
                       ENC424J600_clearInterruptFlag@temp 0071  
                                __end_of_UARTTransmitText 44BE  
                                             ARP_send@arp 00A7  
                                          __CFG_PBADEN$ON 000000  
                                          _ipv4_sendFrame 4BF0  
                                      __size_ofi2___lwdiv 0052  
                                            ?_parseNumber 0008  
                                         intToString@ones 008F  
                                        _ipAdressToString 24AA  
                                         intToString@tens 0090  
                             ARP_parseFromRXBuffer@offset 009E  
                             ?_ENC424J600_readPHYRegister 006E  
                                         __initialization 3D84  
                       ethernetController_softReset@F5850 004F  
                       ethernetController_softReset@F5852 0042  
                             memory_txFrameRequest@length 0084  
                                       ARP_setNewEntry@ip 006A  
                                            __end_of_main 2024  
                                  __end_of_ipv4_isAllZero 4990  
                                            __end_of_rand 4468  
                                ?_ipv4_getIPSourceAddress 0060  
                                  arpEntryToString@string 027F  
                                ?_ipv4_setIPSourceAddress 014B  
                                    _ipv4_handleNewPacket 2698  
                                          __CFG_PCLKEN$ON 000000  
                              _memory_txFrameRequest$1170 0093  
                                       ARP_sendReply@myIP 0134  
                                                  ??_main 018A  
                                                  ??_rand 006E  
                               __size_of_entireMemoryFull 0038  
                                           __activetblptr 000002  
                                          ?_ARP_initTable 0001  
                         handleStackBackgroundTasks@stack 0186  
                                          __CFG_SDOMX$RB3 000000  
                                         __CFG_CCP2MX$RC1 000000  
                                       __end_of_ARP_probe 2CCA  
       ethernetController_writeDestinationMACAddress@addr 006F  
       ethernetController_writeDestinationMACAddress@data 007E  
                ethernetController_pollInterruptFlags@reg 007D  
                                        ___llmod@dividend 0060  
                                    __size_of_macToString 0108  
                                                  ?_srand 007A  
                                                  _ANSELA 000F5B  
                                                  _ANSELB 000F5C  
                                                  _ANSELC 000F5D  
                              ethernetController_getRSV@i 0077  
                                    ipv4_parseHeader@temp 0091  
                       __size_of_ipv4_checkHeaderChecksum 00C8  
                              printEthernetState@oldState 0200  
                                                  i2l1491 4530  
                                                  i2l1492 4528  
                                                  i2l1495 4550  
                                                  i2l1496 455A  
                                  ARP_sendRequest@request 0114  
                                                  i2l6617 3734  
                               ??_ethernetController_init 007D  
                               ?_ipv4_checkHeaderChecksum 009A  
                                          ?_ARP_sendReply 0100  
       __end_of_ethernetController_streamToTransmitBuffer 3F72  
      __size_of_ethernetController_streamToTransmitBuffer 0078  
             ??_ethernetController_streamToTransmitBuffer 0078  
              ?_ethernetController_streamToTransmitBuffer 006F  
               _ethernetController_streamToTransmitBuffer 3EFA  
                            __size_of_ARP_handleNewPacket 01AE  
                                  __end_of_ipv4_sendFrame 4C0C  
                                                  _TXREG1 000FAD  
                             __size_of_ENC424J600_initSPI 001C  
                             __size_of_ENC424J600_readSPI 006A  
                                        mac_isAllZero@mac 0060  
                          ??_ethernetController_softReset 0071  
                               ??_checkForOverlapSwitched 0072  
                              ethernetController_init@err 007D  
                                  __size_of_buttonHandler 009C  
                                 ?_ethernet_rxGetNewFrame 0178  
                                        ?_UARTTransmitInt 009A  
                                    ARP_sendReply@request 0100  
                                          __CFG_XINST$OFF 000000  
                                                  ___lmul 43BA  
                                        __end_of_ipv4_cmp 47A0  
                                         ?_ipv4_isAllZero 0060  
                                                  ___wmul 4A66  
                                   ?_ipv4_handleNewPacket 00B5  
                      __end_of_handleStackBackgroundTasks 24AA  
                              _handleStackBackgroundTasks 226E  
                                          __CFG_STVREN$ON 000000  
                                               ??___awmod 0072  
                                   buttonHandler@oldState 0049  
                                               ??___lldiv 0074  
             ENC424J600_writeControlRegisterUnbanked@addr 006C  
                                   buttonHandler@newState 0048  
             ENC424J600_writeControlRegisterUnbanked@data 006A  
                                               ??___llmod 0068  
                                               ??___lwdiv 0064  
                                               ??___lwmod 0064  
                                    __size_of_hexToString 00EE  
                            buttonHandler@debounceCounter 0031  
                                                  clear_0 3DCA  
                                                  clear_1 3DD6  
                                                  clear_2 3DE2  
                                                  clear_3 3DEE  
                                         ___awmod@divisor 0070  
                              parseNumber@numberToDisplay 0008  
                          __size_of_ARP_parseFromRXBuffer 03FA  
                                         ___awmod@counter 0072  
                           __end_of_ARP_parseFromRXBuffer 1470  
  __end_of_ethernetController_writeEtherTypeFieldToBuffer 45B2  
 __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
        ??_ethernetController_writeEtherTypeFieldToBuffer 007A  
         ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
          _ethernetController_writeEtherTypeFieldToBuffer 4564  
                                               ??_mac_cmp 0064  
                                        ??_mac_setAllZero 0062  
                                           main@prescaler 02DF  
                      __end_of_ENC424J600_enableReception 4D0E  
                              _ENC424J600_enableReception 4D06  
          ethernetController_streamToTransmitBuffer@field 006F  
          __end_of_ENC424J600_readControlRegisterUnbanked 4930  
         __size_of_ENC424J600_readControlRegisterUnbanked 0036  
                ??_ENC424J600_readControlRegisterUnbanked 006C  
                 ?_ENC424J600_readControlRegisterUnbanked 006A  
                  _ENC424J600_readControlRegisterUnbanked 48FA  
                                            __pdataCOMRAM 004B  
                ethernetController_softReset@comFailCount 0072  
                                       __end_ofi2___lwdiv 4564  
                    __end_of_ENC424J600_setTXStartAddress 49E8  
                   __size_of_ENC424J600_setTXStartAddress 002A  
                            _ENC424J600_setTXStartAddress 49BE  
                                            __mediumconst 7C60  
                             __size_of_ipProtocolToString 0048  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                       ??_ARP_setNewEntry 0072  
                                                  srand@x 007A  
           __end_of_ethernetController_clearInterruptFlag 4CE4  
          __size_of_ethernetController_clearInterruptFlag 000E  
                  ?_ethernetController_clearInterruptFlag 0001  
                 ??_ethernetController_clearInterruptFlag 0072  
                   _ethernetController_clearInterruptFlag 4CD6  
                                       ??_ARP_sendRequest 00FC  
                                    intToString@thousands 0092  
                                     mac_setToBroadcast@i 0062  
                              __size_of_ipv4_setToAllZero 001E  
                         ethernetController_softReset@err 0077  
                                         _numberToDisplay 0035  
                                    __CFG_LS48MHZ$SYS24X4 000000  
                                 ipAdressToString@address 02CF  
      __end_of_ethernetController_updateNextPacketPointer 3EFA  
     __size_of_ethernetController_updateNextPacketPointer 007A  
             ?_ethernetController_updateNextPacketPointer 0001  
            ??_ethernetController_updateNextPacketPointer 006F  
              _ethernetController_updateNextPacketPointer 3E80  
                       sevenSegmentUpdate@digitsToDisplay 003D  
                                              __accesstop 0060  
                                 __end_of__initialization 3DF4  
                                       _printErrorMessage 2CCA  
           ethernetController_getEtherTypeField@ethertype 007C  
                                         ?_ipv4_sendFrame 0060  
                                 ?_ENC424J600_setTXLength 006E  
                                               ?_ARP_send 00A7  
                          __end_of_ethernet_rxGetNewFrame 0BA0  
                                        _sevenSegmentInit 4C28  
               ethernetController_updateLinkStatus@temp16 0083  
                                           ___rparam_used 000001  
                                      ?_printErrorMessage 009A  
              ethernetController_pollInterruptFlags@flags 007B  
                                      ARP_probe@timeStart 013C  
                                          __pcstackCOMRAM 0001  
                                            ARP_probe@err 0148  
                                        __CFG_nPWRTEN$OFF 000000  
                                 ipAdressToString@pointer 007B  
 ENC424J600_updateReceiveStatusVector@receiveStatusVector 006C  
                                            __pidataBANK2 4990  
                                       ipv4_parseHeader@i 008F  
                                               ?_UARTInit 0001  
                                      ARP_setNewEntry@mac 0064  
                                     ??_printErrorMessage 009D  
                         __end_of_ethernetController_init 413E  
                                           __end_of_srand 4CC8  
                         ??_ethernetController_dropPacket 0074  
                                               ARP_send@i 00CD  
     ethernetController_getSourceMACAddress@sourceAddress 0079  
                                         ??_ARP_initTable 007C  
                                 _ethernet_txFrameRequest 3536  
                    __end_of_ENC424J600_getInterruptFlags 464C  
                   __size_of_ENC424J600_getInterruptFlags 004C  
                            _ENC424J600_getInterruptFlags 4600  
                               __size_of_ipv4_parseHeader 024A  
                              ipProtocolToString@protocol 0062  
                                    __size_of_intToString 0592  
                         __end_of_checkForOverlapSwitched 3908  
                                      __size_of_getMillis 0012  
                                           _buttonHandler 39AA  
                      ethernetController_dropPacket@frame 0072  
                          __size_of_memory_txFrameRequest 04D6  
                           __end_of_memory_txFrameRequest 1076  
                                      ARP_sendReply@reply 0138  
                                      __size_of_hexToChar 0022  
                           ?_ENC424J600_setTXStartAddress 006E  
                                         ??_ARP_sendReply 00FC  
                                                 ??_srand 007C  
                               __end_of_printErrorMessage 2DF8  
                                              __pbssBANK1 018C  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                          __end_of_ENC424J600_setTXLength 4A12  
                             __end_of_memory_txFrameClear 4B4E  
                                              ??_ARP_send 00C7  
                                       _etherTypeToString 4694  
                                      ?_etherTypeToString 0060  
                                 ARP_sendRequest@ipSender 0100  
                                 ARP_sendRequest@ipTarget 0104  
                                       __CFG_PLLSEL$PLL4X 000000  
                                  ??_ipv4_handleNewPacket 00B7  
                         ??_ethernetController_sendPacket 007B  
                                                 ?___lmul 0060  
                                                 ?___wmul 0060  
                                              ??_UARTInit 0060  
                                    __size_of_parseNumber 007E  
                                          hexToString@val 0061  
                                          ___lmul@product 0068  
                                   macToString@firstDigit 0093  
                                     ??_etherTypeToString 0062  
          ethernetController_writeDestinationMACAddress@i 0086  
                                        _entireMemoryFull 4854  
                                   ipv4_parseHeader@field 0077  
                                          ?_buttonHandler 0001  
                              etherTypeToString@ethertype 0060  
                              ipv4_setIPSourceAddress@err 014F  
                 ENC424J600_updateReceiveStatusVector@rsv 0060  
                           ?_ENC424J600_getInterruptFlags 006E  
                       ENC424J600_readPHYRegister@lowByte 007D  
                                __end_of_ipAdressToString 2698  
                                         __CFG_WDTPS$1024 000000  
                ENC424J600_setERXDATAReadPointer@highByte 006E  
                                 ENC424J600_writeSPI@data 0060  
                                                 _SSP1BUF 000FC9  
                                       ipv4_sendFrame@err 00A2  
  ethernetController_writeEtherTypeFieldToBuffer@highByte 007B  
                                               ?_ipv4_cmp 0060  
                                        __CFG_CFGPLLEN$ON 000000  
                                      _printEthernetState 3908  
                            ?_ENC424J600_setRXTailPointer 006E  
                               __end_of_etherTypeToString 46D8  
                  ENC424J600_setRXBufferStartAddress@addr 006E  
           __end_of_ethernetController_streamFromRXBuffer 3ADE  
          __size_of_ethernetController_streamFromRXBuffer 0098  
                 ??_ethernetController_streamFromRXBuffer 0074  
                  ?_ethernetController_streamFromRXBuffer 0072  
                   _ethernetController_streamFromRXBuffer 3A46  
                          sevenSegmentUpdate@digitPointer 0047  
                                   ARP_sendReply@senderIP 012C  
                                   ARP_sendReply@targetIP 0130  
                                       ?_UARTTransmitText 0098  
                                       __end_of_getMillis 4C86  
                                                 __Hparam 0000  
ethernetController_updateNextPacketPointer@nextPktPointer 0075  
                                                 __Lparam 0000  
                                         ipv4_isAllZero@i 0062  
                                     ?_printEthernetState 009A  
                                       __end_of_hexToChar 4BB6  
                                      ??_UARTTransmitText 009A  
                                checkForOverlapSwitched@a 0060  
                                checkForOverlapSwitched@b 0069  
                                      buttonHandler@state 0001  
                                   __end_of_mac_isAllZero 4960  
                                         __size_of___lmul 0058  
                                                 ___awmod 405A  
                                                 ___lldiv 3C80  
                                         __size_of___wmul 0028  
                                                 ___llmod 4288  
                                                 ___lwdiv 44BE  
                                                 ___lwmod 46D8  
                    ENC424J600_setGPDATAWritePointer@addr 006A  
                               ??_ethernet_txFrameRequest 00A4  
                                     sevenSegmentUpdate@i 0015  
                                                 __pcinit 3D84  
                             __size_of_sevenSegmentUpdate 00BE  
                                     parseNumber@hundreds 000E  
                                                 __ramtop 0800  
                            __size_of_ENC424J600_writeSPI 0064  
                                     _ARP_handleNewPacket 2850  
                                                 __ptext0 1D68  
                                                 __ptext1 4CBA  
                                                 __ptext2 4C28  
                                                 __ptext3 3908  
                                                 __ptext4 2CCA  
                                                 __ptext5 226E  
                                                 __ptext6 4BD4  
                                                 __ptext7 2B6A  
                                                 __ptext8 4412  
                                                 __ptext9 405A  
                                                 _mac_cmp 471C  
                                  ipv4_handleNewPacket@ip 00C2  
                                               _T0CONbits 000FD5  
                            ??_handleStackBackgroundTasks 0188  
                                            __size_of_ISR 00E0  
                                               _T1CONbits 000FCD  
                  ENC424J600_setGPDATAWritePointer@opcode 006C  
                      ENC424J600_setRXTailPointer@lowByte 0070  
              __end_of_ENC424J600_setRXBufferStartAddress 4A66  
             __size_of_ENC424J600_setRXBufferStartAddress 002A  
                    ??_ENC424J600_setRXBufferStartAddress 0070  
                     ?_ENC424J600_setRXBufferStartAddress 006E  
                      _ENC424J600_setRXBufferStartAddress 4A3C  
                         ENC424J600_setRXTailPointer@addr 006E  
                   __end_of_ethernetController_dropPacket 47DC  
                  __size_of_ethernetController_dropPacket 003C  
                           _ethernetController_dropPacket 47A0  
                                        ___awmod@dividend 006E  
                                    ??_printEthernetState 00A9  
           __end_of_ethernetController_pollInterruptFlags 2F1E  
          __size_of_ethernetController_pollInterruptFlags 0126  
                 ??_ethernetController_pollInterruptFlags 007A  
                  ?_ethernetController_pollInterruptFlags 0078  
                   _ethernetController_pollInterruptFlags 2DF8  
                        __size_of_ipv4_getIPSourceAddress 0012  
                 ENC424J600_setGPDATAWritePointer@lowByte 006D  
                        __size_of_ipv4_setIPSourceAddress 001C  
                                                 main@err 02E5  
                            ??_ENC424J600_writeSingleByte 006A  
                                    end_of_initialization 3DF4  
                              __size_of_printErrorMessage 012E  
                                               _ARP_table 020F  
                                              ??_ipv4_cmp 0064  
                              __end_of_mac_setToBroadcast 4B04  
                                               _ARP_probe 2B6A  
                                    ?_ARP_handleNewPacket 00FC  
                              ?_ethernetController_getRSV 0071  
                                           __Lmediumconst 7C60  
                                        ??_ipv4_isAllZero 0062  
                         ipv4_calculateHeaderChecksum@sum 006E  
                                         mac_setAllZero@i 0062  
             ethernetController_streamFromRXBuffer@opcode 0075  
                                         ___lldiv@divisor 0070  
                                         ___lldiv@counter 0078  
                                      entireMemoryEmpty@i 0060  
                              ARP_setNewEntry@oldestIndex 007A  
                                __size_of_checkForOverlap 0108  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                         macToString@addr 007A  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                             ?_handleStackBackgroundTasks 0186  
                                         _ARP_setNewEntry 3448  
                   memory_txFrameRequest@fNoOverlapMarker 0095  
                    ENC424J600_readPHYRegister@PHYaddress 0077  
                                         _ARP_sendRequest 37A4  
                          ENC424J600_setTXLength@highByte 0071  
                                         ??_buttonHandler 0003  
                   __end_of_ethernetController_sendPacket 4AB6  
                  __size_of_ethernetController_sendPacket 0028  
                           _ethernetController_sendPacket 4A8E  
                                               _PORTBbits 000F81  
                                        _ipv4_parseHeader 2024  
                     __size_of_ENC424J600_writeSingleByte 0018  
                       sevenSegmentUpdate@numberToDisplay 000F  
                                __end_of_sevenSegmentInit 4C42  
                             ?_ENC424J600_enableReception 0001  
                                           ??_macToString 0080  
                  ethernetController_softReset@dataToSend 0073  
                                           ARP_send@field 00F3  
                                               _TRISBbits 000F93  
                                              _updateTime 4CE4  
         __end_of_ethernetController_getNextPacketPointer 4CD6  
        __size_of_ethernetController_getNextPacketPointer 000E  
               ??_ethernetController_getNextPacketPointer 0064  
                ?_ethernetController_getNextPacketPointer 0062  
                 _ethernetController_getNextPacketPointer 4CC8  
                                        ??_ipv4_sendFrame 00A2  
                                       i2___lwdiv@divisor 0003  
                         __end_of_ethernet_txFrameRequest 361E  
                        ethernetController_getRSV@address 0071  
                                               i2___lwdiv 4512  
                                       i2___lwdiv@counter 0007  
                                              ?_ARP_probe 00FC  
                                   ??_ARP_handleNewPacket 00FE  
                              __end_of_ENC424J600_initSPI 4C28  
                              __end_of_ENC424J600_readSPI 4288  
                              __size_of_etherTypeToString 0044  
                                     UARTTransmitText@str 0098  
                                             _CCP1CONbits 000FBD  
                    __end_of_ipv4_calculateHeaderChecksum 1A98  
                   __size_of_ipv4_calculateHeaderChecksum 030C  
                            _ipv4_calculateHeaderChecksum 178C  
                    ENC424J600_setTXStartAddress@highByte 0071  
                                  ARP_parseFromRXBuffer@i 009A  
                                       intToString@number 01E3  
                                ipAdressToString@hundreds 0077  
                                       __size_of_ARP_send 02D0  
                                           ??_hexToString 0065  
                                      ipv4_parseHeader@ip 0092  
                                          __end_of___lmul 4412  
        ethernetController_updateNextPacketPointer@opcode 0077  
                                          __end_of___wmul 4A8E  
                                           __pidataCOMRAM 4D0E  
                                        parseNumber@digit 000A  
                                __size_of_UARTTransmitInt 0022  
                                       __size_of_UARTInit 0010  
                    __size_of_ENC424J600_setRXTailPointer 002A  
                  ENC424J600_setERXDATAReadPointer@opcode 006C  
                              __end_of_ipProtocolToString 4694  
                                      hexToString@pointer 0069  
                      ipv4_checkHeaderChecksum@testHeader 009E  
                                   _ARP_parseFromRXBuffer 1076  
             __end_of_ethernetController_updateLinkStatus 3BF6  
            __size_of_ethernetController_updateLinkStatus 008A  
                   ??_ethernetController_updateLinkStatus 0082  
                    ?_ethernetController_updateLinkStatus 0080  
                     _ethernetController_updateLinkStatus 3B6C  
                                     start_initialization 3D84  
                              ARP_parseFromRXBuffer@frame 0077  
                                             __end_of_ISR 00E8  
                                          intToString@val 0079  
                          ipv4_checkHeaderChecksum@header 009A  
                                ?_ethernetController_init 007A  
                                _ipv4_checkHeaderChecksum 361E  
                         ipv4_handleNewPacket@headerField 00B9  
                                              ?i2___lwdiv 0001  
                                ?_checkForOverlapSwitched 0060  
                                     __end_of_macToString 3252  
                                         __CFG_nLPBOR$OFF 000000  
                                __end_of_entireMemoryFull 488C  
   __end_of_ethernetController_writeDestinationMACAddress 3D84  
  __size_of_ethernetController_writeDestinationMACAddress 0080  
         ??_ethernetController_writeDestinationMACAddress 007E  
          ?_ethernetController_writeDestinationMACAddress 006F  
           _ethernetController_writeDestinationMACAddress 3D04  
                                         ___llmod@divisor 0064  
                     ethernetController_checkDeviceId@err 0072  
                                         ___llmod@counter 0068  
                         ??_ENC424J600_clearInterruptFlag 006E  
                                 __end_of_ARP_setNewEntry 3536  
                           ?_ipv4_calculateHeaderChecksum 0060  
                           ethernetController_getRSV@temp 01ED  
                                 __end_of_ARP_sendRequest 3856  
                                ARP_setNewEntry@timestamp 006E  
                                    printErrorMessage@err 009A  
                                                ??___lmul 0068  
                                          _occupiedMemory 018C  
                                       ARP_probe@ipSender 0144  
                                       ARP_probe@ipTarget 00FC  
                                                ??___wmul 0064  
                        ENC424J600_getPacketCount@lowByte 006E  
                  ethernetController_getDeviceName@string 0062  
                                             __pdataBANK2 02B1  
                                           ??_intToString 007D  
                                        checkForOverlap@a 0072  
                                        checkForOverlap@b 007B  
                                       ??_checkForOverlap 0084  
                                     __end_of_hexToString 3448  
                                   __end_of_ARP_initTable 4356  
                                             __pbssCOMRAM 0029  
                                 _ipv4_getIPSourceAddress 4C86  
                                 _ipv4_setIPSourceAddress 4BD4  
                ethernetController_updateLinkStatus@state 0080  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK2 02DF  
                                             ?_updateTime 0001  
                                       ?_ipAdressToString 0067  
                      __end_of_ENC424J600_writeSingleByte 4C74  
                              _ENC424J600_writeSingleByte 4C5C  
                                   _memory_txFrameRequest 0BA0  
           __end_of_ethernetController_newPacketAvailable 4CAA  
          __size_of_ethernetController_newPacketAvailable 0012  
                  ?_ethernetController_newPacketAvailable 0001  
                 ??_ethernetController_newPacketAvailable 006F  
                   _ethernetController_newPacketAvailable 4C98  
                ethernetController_softReset@receivedData 0075  
                                      ??_ipAdressToString 006B  
                                             ??_ARP_probe 0134  
                                 __size_of_mac_setAllZero 0026  
                                   __end_of_ARP_sendReply 2B6A  
                                     _ENC424J600_writeSPI 4356  
                                       __size_of_ipv4_cmp 0042  
                              buttonHandler@debounceValue 0003  
                                           ??_parseNumber 000B  
                                               _main$2355 02E3  
                                        ___lwdiv@dividend 0060  
                                      _sevenSegCharacters 02C3  
              ethernetController_getEtherTypeField@opcode 007E  
                                               __pintcode 0008  
                            ??_ENC424J600_readPHYRegister 0070  
                            __size_of_memory_txFrameClear 0024  
                                           __pmediumconst 7C60  
                                               _getMillis 4C74  
                                               __ptext100 36E6  
                                               __ptext101 3E02  
                                               __ptext102 4512  
                                               __ptext103 39AA  
                                                ?___awmod 006E  
                                                ?___lldiv 006C  
                                                ?___llmod 0060  
                           __size_of_ipv4_handleNewPacket 01B8  
                                                ?___lwdiv 0060  
                                                ?___lwmod 0060  
     ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                               _hexToChar 4B94  
                                    ?_ENC424J600_writeSPI 0060  
                                     ipv4_setToAllZero@ip 0060  
                                                ?_mac_cmp 0060  
                               ARP_setNewEntry@maxSeconds 0076  
                                  ?_ARP_parseFromRXBuffer 0077  
                               __size_of_UARTTransmitText 0056  
              ethernetController_getSourceMACAddress@temp 007F  
                    ENC424J600_setERXDATAReadPointer@addr 006A  
                      __size_of_ENC424J600_getPacketCount 001A  
                 ENC424J600_setERXDATAReadPointer@lowByte 006D  
               __end_of_ENC424J600_enableAutoMACInsertion 4ADE  
              __size_of_ENC424J600_enableAutoMACInsertion 0028  
                      ?_ENC424J600_enableAutoMACInsertion 0001  
                     ??_ENC424J600_enableAutoMACInsertion 006E  
                       _ENC424J600_enableAutoMACInsertion 4AB6  
                                  ipv4_parseHeader@i_3594 0090  
                                      ipAdressToString@ip 0067  
                                     __end_of_intToString 067E  
                              ?_ENC424J600_getPacketCount 0001  
                                             _macToString 314A  
                                       ??_UARTTransmitInt 009E  
                                        ___lwdiv@quotient 0065  
                                       _entireMemoryEmpty 488C  
                                ??_ethernet_rxGetNewFrame 017B  
                                             ??i2___lwdiv 0005  
                                ARP_sendRequest@senderMAC 0108  
                                          __size_of_srand 000E  
                                ARP_sendRequest@targetMAC 010E  
                      ENC424J600_readPHYRegister@highByte 007E  
                                      ?_entireMemoryEmpty 0001  
                     __size_of_ENC424J600_readPHYRegister 0122  
                             ??_ethernetController_getRSV 0076  
                                          ___wmul@product 0064  
                             ethernet_rxGetNewFrame@frame 0178  
                                __end_of_ipv4_parseHeader 226E  
                                                _ARP_send 1A98  
                                                _PIE1bits 000F9D  
                       ENC424J600_writeSPI@timeoutCounter 0066  
                                        ?_ARP_setNewEntry 0064  
                                     ??_entireMemoryEmpty 0060  
                                                _PIR1bits 000F9E  
                                        ARP_initTable@mac 007C  
                                        ?_ARP_sendRequest 0100  
                                       entireMemoryFull@i 0060  
                                                i2u750_40 3A08  
                                                i2u751_40 3A0A  
                                                i2u680_40 4534  
                                                i2u754_44 36F6  
                                                i2u754_45 36F2  
                                                i2u780_40 0060  
                                                i2u780_46 0062  
                                                i2u758_40 3762  
                                                i2u759_44 3772  
                                                i2u759_45 376E  
                                                _RCONbits 000FD0  
                                     __size_of_updateTime 000E  
                                             _hexToString 335A  
                                      _mac_setToBroadcast 4ADE  
                              __end_of_sevenSegmentUpdate 37A4  
                                              ?_getMillis 0060  
                   __end_of_ENC424J600_clearInterruptFlag 3C80  
                  __size_of_ENC424J600_clearInterruptFlag 008A  
                           _ENC424J600_clearInterruptFlag 3BF6  
                                                _UARTInit 4CAA  
                          ??_ipv4_calculateHeaderChecksum 0062  
                                   ??_ENC424J600_writeSPI 0062  
                                      UARTTransmitInt@val 009A  
                                              ?_hexToChar 0001  
                                     __end_of_parseNumber 3E80  
                           ENC424J600_setTXLength@lowByte 0070  
                                       main@IPdestination 02EC  
                               ??_ipv4_getIPSourceAddress 0064  
                                       ___wmul@multiplier 0060  
                               ??_ipv4_setIPSourceAddress 0100  
                                     ?_mac_setToBroadcast 0060  
   ethernetController_updateNextPacketPointer@newPointerH 0079  
   ethernetController_updateNextPacketPointer@newPointerL 0078  
                                       ?_sevenSegmentInit 0001  
                               __end_of_entireMemoryEmpty 48C4  
                                  ?_memory_txFrameRequest 0084  
                                ??_ENC424J600_setTXLength 0070  
                    ethernetController_checkDeviceId@data 0071  
                             __size_of_printEthernetState 00A2  
                       __end_of_ENC424J600_getPacketCount 4C5C  
                                      ??_sevenSegmentInit 0060  
                     ENC424J600_setTXStartAddress@lowByte 0070  
                                               ipv4_cmp@a 0060  
                                               ipv4_cmp@b 0062  
                                               ipv4_cmp@i 0066  
                                       ___lmul@multiplier 0060  
                                             _INTCON3bits 000FF0  
                                               copy_data0 3D98  
                                               copy_data1 3DB8  
                                         parseNumber@ones 000C  
                                         parseNumber@tens 000D  
                                  ARP_sendReply@senderMAC 0120  
                                       hexToString@number 01D9  
                                  __size_of_mac_isAllZero 0030  
                                  ARP_sendReply@targetMAC 0126  
                                      macToString@address 0081  
                                    ipAdressToString@ones 006F  
                                    ipAdressToString@tens 0073  
                                    ??_mac_setToBroadcast 0062  
                __end_of_ethernetController_checkDeviceId 4600  
               __size_of_ethernetController_checkDeviceId 004E  
                      ??_ethernetController_checkDeviceId 0071  
                       ?_ethernetController_checkDeviceId 006E  
                        _ethernetController_checkDeviceId 45B2  
                                                __Hrparam 0000  
                                        ipv4_isAllZero@ip 0060  
                                ?_ethernet_txFrameRequest 00A2  
                                                __Lrparam 0000  
                                      __CFG_BOREN$SBORDIS 000000  
                                      _ENC424J600_initSPI 4C0C  
                                      _ENC424J600_readSPI 421E  
                                  macToString@secondDigit 0094  
                                        __size_of___awmod 0072  
                                  intToString@hundredthds 0094  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                                             _intToString 00EC  
                                        __size_of___lwdiv 0054  
                                        __size_of___lwmod 0044  
                 ethernetController_updateLinkStatus@temp 0082  
                              ??_ipv4_checkHeaderChecksum 009C  
                               _ethernetController_getRSV 3F72  
                 __end_of_ethernetController_setLEDConfig 3B6C  
                __size_of_ethernetController_setLEDConfig 008E  
                       ??_ethernetController_setLEDConfig 006F  
                        ?_ethernetController_setLEDConfig 006E  
                         _ethernetController_setLEDConfig 3ADE  
            ethernetController_getEtherTypeField@highByte 0080  
                                              _ANSELBbits 000F5C  
                               ENC424J600_setTXLength@len 006E  
                                   __end_of_buttonHandler 3A46  
                                     ?_ENC424J600_initSPI 0001  
                                     ?_ENC424J600_readSPI 0060  
                                        __size_of_mac_cmp 0042  
                                 intToString@tenthousands 0093  
       ethernetController_streamFromRXBuffer@startAddress 0072  
                                             _buttonState 01F3  
                     ENC424J600_setRXTailPointer@highByte 0071  
                                  memory_txFrameRequest@i 0096  
                             __end_of_ARP_handleNewPacket 29FE  
                                         ___lwdiv@divisor 0062  
                                         ___lwdiv@counter 0064  
                                       mac_setAllZero@mac 0060  
                                                __ptext10 37A4  
                                                __ptext11 4BF0  
                                                __ptext20 1470  
                                                __ptext12 067E  
                                                __ptext21 413E  
                                                __ptext13 2698  
                                                __ptext30 47A0  
                                                __ptext22 4694  
                                                __ptext14 2024  
                                                __ptext31 29FE  
                                                __ptext23 4B72  
                                                __ptext15 361E  
                                                __ptext40 335A  
                                                __ptext32 314A  
                                                __ptext24 00EC  
                                                __ptext16 178C  
                                                __ptext41 4B94  
                                                __ptext33 4C86  
                                                __ptext25 43BA  
                                                __ptext17 464C  
                                                __ptext50 3D04  
                                                __ptext42 3536  
                                                __ptext34 24AA  
                                                __ptext26 4288  
                                                __ptext18 3E80  
                                                __ptext51 3EFA  
                                                __ptext43 0BA0  
                                                __ptext35 46D8  
                                                __ptext27 3C80  
                                                __ptext19 3F72  
                                                __ptext60 4930  
                                                __ptext52 47DC  
                                                __ptext44 4854  
                                                __ptext36 44BE  
                                                __ptext28 2850  
                                                __ptext61 471C  
                                                __ptext53 4A8E  
                                                __ptext45 488C  
                                                __ptext37 3FE6  
                                                __ptext29 4C74  
                                                __ptext70 3ADE  
                                                __ptext62 4960  
                                                __ptext54 4B2A  
                                                __ptext46 3252  
                                                __ptext38 1A98  
                                                __ptext71 2DF8  
                                                __ptext63 475E  
                                                __ptext55 49BE  
                                                __ptext47 3856  
                                                __ptext39 4ADE  
                                                __ptext80 4A3C  
                                                __ptext72 4600  
                                                __ptext64 3A46  
                                                __ptext56 49E8  
                                                __ptext48 4A66  
                                                __ptext81 4CFC  
                                                __ptext73 4C98  
                                                __ptext65 4CC8  
                                                __ptext57 41AE  
                                                __ptext49 4564  
                                                __ptext90 4356  
                                                __ptext82 4D06  
                                                __ptext74 4CD6  
                                                __ptext66 4CF2  
                                                __ptext58 4468  
                                                __ptext91 421E  
                                                __ptext83 4C5C  
                                                __ptext75 3BF6  
                                                __ptext67 4818  
                                                __ptext59 1076  
                                                __ptext92 4C0C  
                                                __ptext84 4AB6  
                                                __ptext76 40CC  
                                                __ptext68 3B6C  
                                                __ptext93 4CAA  
                                                __ptext85 48C4  
                                                __ptext77 3040  
                                                __ptext69 2F1E  
                                                __ptext94 42F0  
                                                __ptext86 4B4E  
                                                __ptext78 45B2  
                                                __ptext95 4B04  
                                                __ptext87 4D14  
                                                __ptext79 4A12  
                                                __ptext96 4BB6  
                                                __ptext88 4C42  
                                                __ptext97 3448  
                                                __ptext89 48FA  
                                                __ptext99 4CE4  
                                            _SSP1CON1bits 000FC6  
                   ENC424J600_enableAutoMACInsertion@temp 006E  
                                      ipv4_setToAllZero@i 0062  
                         __size_of_ethernet_rxGetNewFrame 0522  
                                          _mac_setAllZero 4B04  
                                                _ipv4_cmp 475E  
                                                _ipSource 01D4  
                     __end_of_ENC424J600_setRXTailPointer 4A3C  
                             _ENC424J600_setRXTailPointer 4A12  
                                             _OSCCON2bits 000FD2  
                                       ipAdressToString@i 007C  
                                      _ipProtocolToString 464C  
                         __end_of_ipv4_getIPSourceAddress 4C98  
                ENC424J600_setGPDATAWritePointer@highByte 006E  
                         __end_of_ipv4_setIPSourceAddress 4BF0  
                                           __size_of_main 02BC  
                                           __size_of_rand 0056  
                                    ??_ENC424J600_initSPI 0060  
                                    ??_ENC424J600_readSPI 0062  
                                ARP_handleNewPacket@frame 00FC  
                                       ?_entireMemoryFull 0001  
     ethernetController_writeDestinationMACAddress@opcode 0084  
                          ??_ENC424J600_setTXStartAddress 0070  
                        __size_of_ethernetController_init 0072  
                                         _checkForOverlap 3252  
                                     ?_ipProtocolToString 0060  
                      __end_of_ENC424J600_readPHYRegister 3040  
                              _ENC424J600_readPHYRegister 2F1E  
                                      ??_entireMemoryFull 0060  
                                             _parseNumber 3E02  
                                         ARP_initTable@ip 0082  
                           ??_ENC424J600_setRXTailPointer 0070  
                                             ??_getMillis 0064  
                                                int$flags 0051  
                                                mac_cmp@a 0060  
                        __size_of_checkForOverlapSwitched 00B2  
                                                mac_cmp@b 0062  
                                                mac_cmp@i 0066  
            ENC424J600_readControlRegisterUnbanked@opcode 006D  
                                           _mac_isAllZero 4930  
                                            _SSP1STATbits 000FC7  
                                             ??_hexToChar 0060  
                              ethernet_txFrameRequest@err 00A4  
                                 __size_of_ipv4_isAllZero 0030  
                               ipv4_setIPSourceAddress@ip 014B  
                               ethernet_rxGetNewFrame@err 0183  
                          ?_ENC424J600_clearInterruptFlag 0001  
                                        _UARTTransmitText 4468  
                                              _INTCONbits 000FF2  
                                    ??_ipProtocolToString 0062  
                                  ipv4_sendFrame@ipPacket 0060  
                __end_of_ENC424J600_setERXDATAReadPointer 4854  
               __size_of_ENC424J600_setERXDATAReadPointer 003C  
                      ??_ENC424J600_setERXDATAReadPointer 006C  
                       ?_ENC424J600_setERXDATAReadPointer 006A  
                        _ENC424J600_setERXDATAReadPointer 4818  
                              __size_of_entireMemoryEmpty 0038  
                                            ??_updateTime 0001  
   ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
   ethernetController_writeEtherTypeFieldToBuffer@lowByte 007A  
                         __size_of_ENC424J600_setTXLength 002A  
                                  __end_of_mac_setAllZero 4B2A  
                             ?_ENC424J600_writeSingleByte 0001  
                                     _memory_txFrameClear 4B2A  
                        ENC424J600_readSPI@timeoutCounter 0066  
                                                intlevel2 0000  
                                        ___lwmod@dividend 0060  
                          ??_ENC424J600_getInterruptFlags 0070  
                                        ___lldiv@dividend 006C  
             ethernetController_getEtherTypeField@lowByte 007F  
      ethernetController_writeDestinationMACAddress@i_634 0085  
               ethernetController_streamFromRXBuffer@temp 0076  
                        ENC424J600_writeSingleByte@opcode 006A  
                                              _RCSTA1bits 000FAB  
                                        macToString@F5817 02B1  
      ethernetController_writeDestinationMACAddress@field 0075  
                                              _OSCCONbits 000FD3  
                                 __size_of_ipv4_sendFrame 001C  
                 __end_of_ENC424J600_getNextPacketPointer 4CFC  
                __size_of_ENC424J600_getNextPacketPointer 000A  
                       ??_ENC424J600_getNextPacketPointer 0062  
                        ?_ENC424J600_getNextPacketPointer 0060  
                         _ENC424J600_getNextPacketPointer 4CF2  
                               __size_of_ipAdressToString 01EE  
                                          ARP_initTable@i 0086  
                                            macToString@i 0095  
                                            macToString@j 0097  
                ENC424J600_readPHYRegister@timeoutCounter 0079  
                 __end_of_ENC424J600_setNextPacketPointer 4D06  
                __size_of_ENC424J600_setNextPacketPointer 000A  
                       ??_ENC424J600_setNextPacketPointer 0062  
                        ?_ENC424J600_setNextPacketPointer 0060  
                         _ENC424J600_setNextPacketPointer 4CFC  
                                    ?_memory_txFrameClear 0001  
                                     ARP_send@destination 00C7  
                                          ?_mac_isAllZero 0060  
                                  _ethernet_rxGetNewFrame 067E  
                                      __end_of_updateTime 4CF2  
                                    __CFG_CPUDIV$NOCLKDIV 000000  
                        ENC424J600_getInterruptFlags@high 0077  
                                 ??_ARP_parseFromRXBuffer 0097  
                                         _UARTTransmitInt 4B72  
                      ethernetController_sendPacket@field 0072  
            ethernetController_getSourceMACAddress@opcode 0078  
    ethernetController_writeEtherTypeFieldToBuffer@opcode 007C  
            __end_of_ENC424J600_updateReceiveStatusVector 178C  
           __size_of_ENC424J600_updateReceiveStatusVector 031C  
                  ??_ENC424J600_updateReceiveStatusVector 0065  
                   ?_ENC424J600_updateReceiveStatusVector 0060  
                    _ENC424J600_updateReceiveStatusVector 1470  
                                   mac_setToBroadcast@mac 0060  
                               ipv4_handleNewPacket@frame 00B5  
                                   ipv4_sendFrame@oldTime 002D  
                                        ___lldiv@quotient 0074  
                                         ___lwmod@divisor 0062  
                      ENC424J600_setNextPacketPointer@ptr 0060  
                                         ___lwmod@counter 0064  
                                  ARP_handleNewPacket@arp 0158  
                                            ?_macToString 007A  
                             ??_ENC424J600_getPacketCount 006E  
              ENC424J600_readControlRegisterUnbanked@addr 006C  
              ENC424J600_readControlRegisterUnbanked@data 006A  
                         ethernetController_getRSV@opcode 0076  
                    __end_of_ethernetController_softReset 314A  
                   __size_of_ethernetController_softReset 010A  
                            _ethernetController_softReset 3040  
                                         ?_mac_setAllZero 0060  
                            __end_of_ipv4_handleNewPacket 2850  
             ethernetController_getSourceMACAddress@field 006F  
                         ENC424J600_getInterruptFlags@low 0076  
                                      __CFG_FOSC$INTOSCIO 000000  
                                 __end_of_checkForOverlap 335A  
           __end_ofethernetController_getDeviceName@F5862 7C6C  
                   ethernetController_getDeviceName@F5862 7C61  
                                          ARP_send@i_3040 00CF  
                                          ARP_send@i_3041 00D0  
                                          ARP_send@i_3039 00CE  
                          ?_ethernetController_dropPacket 0072  
                                       ?_ipv4_parseHeader 0077  
                                        ARP_send@ethFrame 00D1  
                                 _sevenSegmentUpdate$2439 0013  
                          ENC424J600_readPHYRegister@addr 0076  
                          ENC424J600_readPHYRegister@data 006E  
                                  _ENC424J600_setTXLength 49E8  
                                  __size_of_ARP_initTable 0066  
                                      ??_ipv4_parseHeader 008E  
                                   ??_memory_txFrameClear 0060  
                          ENC424J600_readPHYRegister@temp 007F  
