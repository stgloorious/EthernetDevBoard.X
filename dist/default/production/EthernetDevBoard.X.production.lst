

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 07 20:14:39 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   128                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   129                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   130  0000                     
   131                           ; Version 1.45
   132                           ; Generated 16/11/2017 GMT
   133                           ; 
   134                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   135                           ; All rights reserved.
   136                           ; 
   137                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   138                           ; 
   139                           ; Redistribution and use in source and binary forms, with or without modification, are
   140                           ; permitted provided that the following conditions are met:
   141                           ; 
   142                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   143                           ;        conditions and the following disclaimer.
   144                           ; 
   145                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   146                           ;        of conditions and the following disclaimer in the documentation and/or other
   147                           ;        materials provided with the distribution.
   148                           ; 
   149                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   150                           ;        software without specific prior written permission.
   151                           ; 
   152                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   153                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   154                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   155                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   156                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   157                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   158                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   159                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   160                           ; 
   161                           ; 
   162                           ; Code-generator required, PIC18F25K50 Definitions
   163                           ; 
   164                           ; SFR Addresses
   165  0000                     
   166                           	psect	idataCOMRAM
   167  004F00                     __pidataCOMRAM:
   168                           	opt stack 0
   169                           
   170                           ;initializer for ethernetController_softReset@F5848
   171  004F00  12                 	db	18
   172  004F01  34                 	db	52
   173                           
   174                           	psect	idataBANK1
   175  004D88                     __pidataBANK1:
   176                           	opt stack 0
   177                           
   178                           ;initializer for _sevenSegCharacters
   179  004D88  3F                 	db	63
   180  004D89  06                 	db	6
   181  004D8A  5B                 	db	91
   182  004D8B  4F                 	db	79
   183  004D8C  66                 	db	102
   184  004D8D  6D                 	db	109
   185  004D8E  7D                 	db	125
   186  004D8F  07                 	db	7
   187  004D90  7F                 	db	127
   188  004D91  6F                 	db	111
   189  004D92  00                 	db	0
   190  004D93  40                 	db	64
   191                           
   192                           ;initializer for _randx
   193  004D94  0001               	dw	1
   194  004D96  0000               	dw	0
   195                           
   196                           ;initializer for ipAdressToString@address
   197  004D98  3F                 	db	63
   198  004D99  3F                 	db	63
   199  004D9A  3F                 	db	63
   200  004D9B  2E                 	db	46
   201  004D9C  3F                 	db	63
   202  004D9D  3F                 	db	63
   203  004D9E  3F                 	db	63
   204  004D9F  2E                 	db	46
   205  004DA0  3F                 	db	63
   206  004DA1  3F                 	db	63
   207  004DA2  3F                 	db	63
   208  004DA3  2E                 	db	46
   209  004DA4  3F                 	db	63
   210  004DA5  3F                 	db	63
   211  004DA6  3F                 	db	63
   212  004DA7  00                 	db	0
   213                           
   214                           	psect	idataBANK2
   215  004E4C                     __pidataBANK2:
   216                           	opt stack 0
   217                           
   218                           ;initializer for macToString@F5813
   219  004E4C  3F                 	db	63
   220  004E4D  3F                 	db	63
   221  004E4E  3A                 	db	58
   222  004E4F  3F                 	db	63
   223  004E50  3F                 	db	63
   224  004E51  3A                 	db	58
   225  004E52  3F                 	db	63
   226  004E53  3F                 	db	63
   227  004E54  3A                 	db	58
   228  004E55  3F                 	db	63
   229  004E56  3F                 	db	63
   230  004E57  3A                 	db	58
   231  004E58  3F                 	db	63
   232  004E59  3F                 	db	63
   233  004E5A  3A                 	db	58
   234  004E5B  3F                 	db	63
   235  004E5C  3F                 	db	63
   236  004E5D  00                 	db	0
   237                           
   238                           	psect	mediumconst
   239  007C1E                     __pmediumconst:
   240                           	opt stack 0
   241  007C1E  00                 	db	0
   242  007C1F                     ethernetController_getDeviceName@F5860:
   243                           	opt stack 0
   244  007C1F  45                 	db	69
   245  007C20  4E                 	db	78
   246  007C21  43                 	db	67
   247  007C22  34                 	db	52
   248  007C23  32                 	db	50
   249  007C24  34                 	db	52
   250  007C25  4A                 	db	74
   251  007C26  36                 	db	54
   252  007C27  30                 	db	48
   253  007C28  30                 	db	48
   254  007C29  00                 	db	0
   255  007C2A                     __end_ofethernetController_getDeviceName@F5860:
   256                           	opt stack 0
   257  0000                     _ANSELC	set	3933
   258  0000                     _ANSELA	set	3931
   259  0000                     _ANSELB	set	3932
   260  0000                     _ANSELBbits	set	3932
   261  0000                     _CCPR1	set	4030
   262  0000                     _TXREG1	set	4013
   263  0000                     _SPBRG	set	4015
   264  0000                     _RCSTA1bits	set	4011
   265  0000                     _TXSTA1bits	set	4012
   266  0000                     _PORTA	set	3968
   267  0000                     _TRISA	set	3986
   268  0000                     _TRISC	set	3988
   269  0000                     _PORTC	set	3970
   270  0000                     _PIR1bits	set	3998
   271  0000                     _PORTB	set	3969
   272  0000                     _TRISB	set	3987
   273  0000                     _RCONbits	set	4048
   274  0000                     _PIE1bits	set	3997
   275  0000                     _CCP1CONbits	set	4029
   276  0000                     _T1CONbits	set	4045
   277  0000                     _T0CONbits	set	4053
   278  0000                     _INTCON3bits	set	4080
   279  0000                     _INTCONbits	set	4082
   280  0000                     _OSCCON2bits	set	4050
   281  0000                     _OSCCONbits	set	4051
   282  0000                     _SSP1BUF	set	4041
   283  0000                     _TRISBbits	set	3987
   284  0000                     _SSP1STATbits	set	4039
   285  0000                     _SSP1CON1bits	set	4038
   286  0000                     _PORTBbits	set	3969
   287  0000                     _TRMT	set	32097
   288  0000                     _RCIF	set	31989
   289  0000                     _RCIE	set	31981
   290  0000                     _RCIP	set	31997
   291  007C2A                     STR_55:
   292  007C2A  45                 	db	69	;'E'
   293  007C2B  74                 	db	116	;'t'
   294  007C2C  68                 	db	104	;'h'
   295  007C2D  65                 	db	101	;'e'
   296  007C2E  72                 	db	114	;'r'
   297  007C2F  6E                 	db	110	;'n'
   298  007C30  65                 	db	101	;'e'
   299  007C31  74                 	db	116	;'t'
   300  007C32  20                 	db	32
   301  007C33  63                 	db	99	;'c'
   302  007C34  6F                 	db	111	;'o'
   303  007C35  6E                 	db	110	;'n'
   304  007C36  74                 	db	116	;'t'
   305  007C37  72                 	db	114	;'r'
   306  007C38  6F                 	db	111	;'o'
   307  007C39  6C                 	db	108	;'l'
   308  007C3A  6C                 	db	108	;'l'
   309  007C3B  65                 	db	101	;'e'
   310  007C3C  72                 	db	114	;'r'
   311  007C3D  20                 	db	32
   312  007C3E  68                 	db	104	;'h'
   313  007C3F  61                 	db	97	;'a'
   314  007C40  73                 	db	115	;'s'
   315  007C41  20                 	db	32
   316  007C42  72                 	db	114	;'r'
   317  007C43  65                 	db	101	;'e'
   318  007C44  74                 	db	116	;'t'
   319  007C45  75                 	db	117	;'u'
   320  007C46  72                 	db	114	;'r'
   321  007C47  6E                 	db	110	;'n'
   322  007C48  65                 	db	101	;'e'
   323  007C49  64                 	db	100	;'d'
   324  007C4A  20                 	db	32
   325  007C4B  61                 	db	97	;'a'
   326  007C4C  6E                 	db	110	;'n'
   327  007C4D  20                 	db	32
   328  007C4E  75                 	db	117	;'u'
   329  007C4F  6E                 	db	110	;'n'
   330  007C50  6B                 	db	107	;'k'
   331  007C51  6E                 	db	110	;'n'
   332  007C52  6F                 	db	111	;'o'
   333  007C53  77                 	db	119	;'w'
   334  007C54  6E                 	db	110	;'n'
   335  007C55  20                 	db	32
   336  007C56  64                 	db	100	;'d'
   337  007C57  65                 	db	101	;'e'
   338  007C58  76                 	db	118	;'v'
   339  007C59  69                 	db	105	;'i'
   340  007C5A  63                 	db	99	;'c'
   341  007C5B  65                 	db	101	;'e'
   342  007C5C  20                 	db	32
   343  007C5D  49                 	db	73	;'I'
   344  007C5E  44                 	db	68	;'D'
   345  007C5F  2E                 	db	46
   346  007C60  00                 	db	0
   347  007C61                     STR_24:
   348  007C61  2D                 	db	45
   349  007C62  2D                 	db	45
   350  007C63  2D                 	db	45
   351  007C64  2D                 	db	45
   352  007C65  2D                 	db	45
   353  007C66  2D                 	db	45
   354  007C67  2D                 	db	45
   355  007C68  2D                 	db	45
   356  007C69  2D                 	db	45
   357  007C6A  2D                 	db	45
   358  007C6B  2D                 	db	45
   359  007C6C  2D                 	db	45
   360  007C6D  2D                 	db	45
   361  007C6E  2D                 	db	45
   362  007C6F  2D                 	db	45
   363  007C70  2D                 	db	45
   364  007C71  2D                 	db	45
   365  007C72  2D                 	db	45
   366  007C73  2D                 	db	45
   367  007C74  2D                 	db	45
   368  007C75  2D                 	db	45
   369  007C76  2D                 	db	45
   370  007C77  2D                 	db	45
   371  007C78  2D                 	db	45
   372  007C79  2D                 	db	45
   373  007C7A  2D                 	db	45
   374  007C7B  2D                 	db	45
   375  007C7C  2D                 	db	45
   376  007C7D  2D                 	db	45
   377  007C7E  2D                 	db	45
   378  007C7F  2D                 	db	45
   379  007C80  2D                 	db	45
   380  007C81  2D                 	db	45
   381  007C82  2D                 	db	45
   382  007C83  2D                 	db	45
   383  007C84  2D                 	db	45
   384  007C85  2D                 	db	45
   385  007C86  2D                 	db	45
   386  007C87  2D                 	db	45
   387  007C88  2D                 	db	45
   388  007C89  2D                 	db	45
   389  007C8A  2D                 	db	45
   390  007C8B  2D                 	db	45
   391  007C8C  2D                 	db	45
   392  007C8D  2D                 	db	45
   393  007C8E  2D                 	db	45
   394  007C8F  2D                 	db	45
   395  007C90  2D                 	db	45
   396  007C91  0A                 	db	10
   397  007C92  0D                 	db	13
   398  007C93  00                 	db	0
   399  007C94                     STR_25:
   400  007C94  07                 	db	7
   401  007C95  2A                 	db	42
   402  007C96  2A                 	db	42
   403  007C97  2A                 	db	42
   404  007C98  20                 	db	32
   405  007C99  43                 	db	67	;'C'
   406  007C9A  52                 	db	82	;'R'
   407  007C9B  49                 	db	73	;'I'
   408  007C9C  54                 	db	84	;'T'
   409  007C9D  49                 	db	73	;'I'
   410  007C9E  43                 	db	67	;'C'
   411  007C9F  41                 	db	65	;'A'
   412  007CA0  4C                 	db	76	;'L'
   413  007CA1  20                 	db	32
   414  007CA2  45                 	db	69	;'E'
   415  007CA3  52                 	db	82	;'R'
   416  007CA4  52                 	db	82	;'R'
   417  007CA5  4F                 	db	79	;'O'
   418  007CA6  52                 	db	82	;'R'
   419  007CA7  3A                 	db	58	;':'
   420  007CA8  20                 	db	32
   421  007CA9  57                 	db	87	;'W'
   422  007CAA  41                 	db	65	;'A'
   423  007CAB  54                 	db	84	;'T'
   424  007CAC  43                 	db	67	;'C'
   425  007CAD  48                 	db	72	;'H'
   426  007CAE  44                 	db	68	;'D'
   427  007CAF  4F                 	db	79	;'O'
   428  007CB0  47                 	db	71	;'G'
   429  007CB1  20                 	db	32
   430  007CB2  43                 	db	67	;'C'
   431  007CB3  41                 	db	65	;'A'
   432  007CB4  55                 	db	85	;'U'
   433  007CB5  53                 	db	83	;'S'
   434  007CB6  45                 	db	69	;'E'
   435  007CB7  44                 	db	68	;'D'
   436  007CB8  20                 	db	32
   437  007CB9  52                 	db	82	;'R'
   438  007CBA  45                 	db	69	;'E'
   439  007CBB  53                 	db	83	;'S'
   440  007CBC  45                 	db	69	;'E'
   441  007CBD  54                 	db	84	;'T'
   442  007CBE  20                 	db	32
   443  007CBF  2A                 	db	42
   444  007CC0  2A                 	db	42
   445  007CC1  2A                 	db	42
   446  007CC2  0A                 	db	10
   447  007CC3  0D                 	db	13
   448  007CC4  00                 	db	0
   449  007CC5                     STR_67:
   450  007CC5  5B                 	db	91	;'['
   451  007CC6  49                 	db	73	;'I'
   452  007CC7  6E                 	db	110	;'n'
   453  007CC8  76                 	db	118	;'v'
   454  007CC9  61                 	db	97	;'a'
   455  007CCA  6C                 	db	108	;'l'
   456  007CCB  69                 	db	105	;'i'
   457  007CCC  64                 	db	100	;'d'
   458  007CCD  20                 	db	32
   459  007CCE  41                 	db	65	;'A'
   460  007CCF  52                 	db	82	;'R'
   461  007CD0  50                 	db	80	;'P'
   462  007CD1  20                 	db	32
   463  007CD2  4D                 	db	77	;'M'
   464  007CD3  65                 	db	101	;'e'
   465  007CD4  73                 	db	115	;'s'
   466  007CD5  73                 	db	115	;'s'
   467  007CD6  61                 	db	97	;'a'
   468  007CD7  67                 	db	103	;'g'
   469  007CD8  65                 	db	101	;'e'
   470  007CD9  20                 	db	32
   471  007CDA  77                 	db	119	;'w'
   472  007CDB  61                 	db	97	;'a'
   473  007CDC  73                 	db	115	;'s'
   474  007CDD  20                 	db	32
   475  007CDE  64                 	db	100	;'d'
   476  007CDF  69                 	db	105	;'i'
   477  007CE0  73                 	db	115	;'s'
   478  007CE1  63                 	db	99	;'c'
   479  007CE2  61                 	db	97	;'a'
   480  007CE3  72                 	db	114	;'r'
   481  007CE4  64                 	db	100	;'d'
   482  007CE5  65                 	db	101	;'e'
   483  007CE6  64                 	db	100	;'d'
   484  007CE7  2E                 	db	46
   485  007CE8  5D                 	db	93	;']'
   486  007CE9  0D                 	db	13
   487  007CEA  0A                 	db	10
   488  007CEB  00                 	db	0
   489  007CEC                     STR_32:
   490  007CEC  49                 	db	73	;'I'
   491  007CED  6E                 	db	110	;'n'
   492  007CEE  69                 	db	105	;'i'
   493  007CEF  74                 	db	116	;'t'
   494  007CF0  69                 	db	105	;'i'
   495  007CF1  61                 	db	97	;'a'
   496  007CF2  6C                 	db	108	;'l'
   497  007CF3  69                 	db	105	;'i'
   498  007CF4  73                 	db	115	;'s'
   499  007CF5  69                 	db	105	;'i'
   500  007CF6  6E                 	db	110	;'n'
   501  007CF7  67                 	db	103	;'g'
   502  007CF8  20                 	db	32
   503  007CF9  45                 	db	69	;'E'
   504  007CFA  74                 	db	116	;'t'
   505  007CFB  68                 	db	104	;'h'
   506  007CFC  65                 	db	101	;'e'
   507  007CFD  72                 	db	114	;'r'
   508  007CFE  6E                 	db	110	;'n'
   509  007CFF  65                 	db	101	;'e'
   510  007D00  74                 	db	116	;'t'
   511  007D01  20                 	db	32
   512  007D02  43                 	db	67	;'C'
   513  007D03  6F                 	db	111	;'o'
   514  007D04  6E                 	db	110	;'n'
   515  007D05  74                 	db	116	;'t'
   516  007D06  72                 	db	114	;'r'
   517  007D07  6F                 	db	111	;'o'
   518  007D08  6C                 	db	108	;'l'
   519  007D09  6C                 	db	108	;'l'
   520  007D0A  65                 	db	101	;'e'
   521  007D0B  72                 	db	114	;'r'
   522  007D0C  2E                 	db	46
   523  007D0D  2E                 	db	46
   524  007D0E  2E                 	db	46
   525  007D0F  0A                 	db	10
   526  007D10  0D                 	db	13
   527  007D11  00                 	db	0
   528  007D12                     STR_54:
   529  007D12  45                 	db	69	;'E'
   530  007D13  74                 	db	116	;'t'
   531  007D14  68                 	db	104	;'h'
   532  007D15  65                 	db	101	;'e'
   533  007D16  72                 	db	114	;'r'
   534  007D17  6E                 	db	110	;'n'
   535  007D18  65                 	db	101	;'e'
   536  007D19  74                 	db	116	;'t'
   537  007D1A  20                 	db	32
   538  007D1B  63                 	db	99	;'c'
   539  007D1C  6F                 	db	111	;'o'
   540  007D1D  6E                 	db	110	;'n'
   541  007D1E  74                 	db	116	;'t'
   542  007D1F  72                 	db	114	;'r'
   543  007D20  6F                 	db	111	;'o'
   544  007D21  6C                 	db	108	;'l'
   545  007D22  6C                 	db	108	;'l'
   546  007D23  65                 	db	101	;'e'
   547  007D24  72                 	db	114	;'r'
   548  007D25  20                 	db	32
   549  007D26  69                 	db	105	;'i'
   550  007D27  73                 	db	115	;'s'
   551  007D28  20                 	db	32
   552  007D29  75                 	db	117	;'u'
   553  007D2A  6E                 	db	110	;'n'
   554  007D2B  72                 	db	114	;'r'
   555  007D2C  65                 	db	101	;'e'
   556  007D2D  73                 	db	115	;'s'
   557  007D2E  70                 	db	112	;'p'
   558  007D2F  6F                 	db	111	;'o'
   559  007D30  6E                 	db	110	;'n'
   560  007D31  73                 	db	115	;'s'
   561  007D32  69                 	db	105	;'i'
   562  007D33  76                 	db	118	;'v'
   563  007D34  65                 	db	101	;'e'
   564  007D35  2E                 	db	46
   565  007D36  00                 	db	0
   566  007D37                     STR_56:
   567  007D37  49                 	db	73	;'I'
   568  007D38  50                 	db	80	;'P'
   569  007D39  20                 	db	32
   570  007D3A  61                 	db	97	;'a'
   571  007D3B  64                 	db	100	;'d'
   572  007D3C  64                 	db	100	;'d'
   573  007D3D  72                 	db	114	;'r'
   574  007D3E  65                 	db	101	;'e'
   575  007D3F  73                 	db	115	;'s'
   576  007D40  73                 	db	115	;'s'
   577  007D41  20                 	db	32
   578  007D42  63                 	db	99	;'c'
   579  007D43  6F                 	db	111	;'o'
   580  007D44  75                 	db	117	;'u'
   581  007D45  6C                 	db	108	;'l'
   582  007D46  64                 	db	100	;'d'
   583  007D47  20                 	db	32
   584  007D48  6E                 	db	110	;'n'
   585  007D49  6F                 	db	111	;'o'
   586  007D4A  74                 	db	116	;'t'
   587  007D4B  20                 	db	32
   588  007D4C  62                 	db	98	;'b'
   589  007D4D  65                 	db	101	;'e'
   590  007D4E  20                 	db	32
   591  007D4F  72                 	db	114	;'r'
   592  007D50  65                 	db	101	;'e'
   593  007D51  73                 	db	115	;'s'
   594  007D52  6F                 	db	111	;'o'
   595  007D53  6C                 	db	108	;'l'
   596  007D54  76                 	db	118	;'v'
   597  007D55  65                 	db	101	;'e'
   598  007D56  64                 	db	100	;'d'
   599  007D57  2E                 	db	46
   600  007D58  00                 	db	0
   601  007D59                     STR_50:
   602  007D59  20                 	db	32
   603  007D5A  45                 	db	69	;'E'
   604  007D5B  54                 	db	84	;'T'
   605  007D5C  48                 	db	72	;'H'
   606  007D5D  45                 	db	69	;'E'
   607  007D5E  52                 	db	82	;'R'
   608  007D5F  4E                 	db	78	;'N'
   609  007D60  45                 	db	69	;'E'
   610  007D61  54                 	db	84	;'T'
   611  007D62  20                 	db	32
   612  007D63  43                 	db	67	;'C'
   613  007D64  4F                 	db	79	;'O'
   614  007D65  4E                 	db	78	;'N'
   615  007D66  54                 	db	84	;'T'
   616  007D67  52                 	db	82	;'R'
   617  007D68  4F                 	db	79	;'O'
   618  007D69  4C                 	db	76	;'L'
   619  007D6A  4C                 	db	76	;'L'
   620  007D6B  45                 	db	69	;'E'
   621  007D6C  52                 	db	82	;'R'
   622  007D6D  20                 	db	32
   623  007D6E  4D                 	db	77	;'M'
   624  007D6F  4F                 	db	79	;'O'
   625  007D70  44                 	db	68	;'D'
   626  007D71  55                 	db	85	;'U'
   627  007D72  4C                 	db	76	;'L'
   628  007D73  45                 	db	69	;'E'
   629  007D74  3A                 	db	58	;':'
   630  007D75  20                 	db	32
   631  007D76  00                 	db	0
   632  007D77                     STR_57:
   633  007D77  41                 	db	65	;'A'
   634  007D78  6E                 	db	110	;'n'
   635  007D79  20                 	db	32
   636  007D7A  75                 	db	117	;'u'
   637  007D7B  6E                 	db	110	;'n'
   638  007D7C  6B                 	db	107	;'k'
   639  007D7D  6E                 	db	110	;'n'
   640  007D7E  6F                 	db	111	;'o'
   641  007D7F  77                 	db	119	;'w'
   642  007D80  6E                 	db	110	;'n'
   643  007D81  20                 	db	32
   644  007D82  65                 	db	101	;'e'
   645  007D83  72                 	db	114	;'r'
   646  007D84  72                 	db	114	;'r'
   647  007D85  6F                 	db	111	;'o'
   648  007D86  72                 	db	114	;'r'
   649  007D87  20                 	db	32
   650  007D88  68                 	db	104	;'h'
   651  007D89  61                 	db	97	;'a'
   652  007D8A  73                 	db	115	;'s'
   653  007D8B  20                 	db	32
   654  007D8C  6F                 	db	111	;'o'
   655  007D8D  63                 	db	99	;'c'
   656  007D8E  63                 	db	99	;'c'
   657  007D8F  75                 	db	117	;'u'
   658  007D90  72                 	db	114	;'r'
   659  007D91  65                 	db	101	;'e'
   660  007D92  64                 	db	100	;'d'
   661  007D93  2E                 	db	46
   662  007D94  00                 	db	0
   663  007D95                     STR_46:
   664  007D95  63                 	db	99	;'c'
   665  007D96  6F                 	db	111	;'o'
   666  007D97  6E                 	db	110	;'n'
   667  007D98  6E                 	db	110	;'n'
   668  007D99  65                 	db	101	;'e'
   669  007D9A  63                 	db	99	;'c'
   670  007D9B  74                 	db	116	;'t'
   671  007D9C  69                 	db	105	;'i'
   672  007D9D  6F                 	db	111	;'o'
   673  007D9E  6E                 	db	110	;'n'
   674  007D9F  20                 	db	32
   675  007DA0  69                 	db	105	;'i'
   676  007DA1  73                 	db	115	;'s'
   677  007DA2  20                 	db	32
   678  007DA3  48                 	db	72	;'H'
   679  007DA4  61                 	db	97	;'a'
   680  007DA5  6C                 	db	108	;'l'
   681  007DA6  66                 	db	102	;'f'
   682  007DA7  20                 	db	32
   683  007DA8  44                 	db	68	;'D'
   684  007DA9  75                 	db	117	;'u'
   685  007DAA  70                 	db	112	;'p'
   686  007DAB  6C                 	db	108	;'l'
   687  007DAC  65                 	db	101	;'e'
   688  007DAD  78                 	db	120	;'x'
   689  007DAE  2E                 	db	46
   690  007DAF  0A                 	db	10
   691  007DB0  0D                 	db	13
   692  007DB1  00                 	db	0
   693  007DB2                     STR_47:
   694  007DB2  63                 	db	99	;'c'
   695  007DB3  6F                 	db	111	;'o'
   696  007DB4  6E                 	db	110	;'n'
   697  007DB5  6E                 	db	110	;'n'
   698  007DB6  65                 	db	101	;'e'
   699  007DB7  63                 	db	99	;'c'
   700  007DB8  74                 	db	116	;'t'
   701  007DB9  69                 	db	105	;'i'
   702  007DBA  6F                 	db	111	;'o'
   703  007DBB  6E                 	db	110	;'n'
   704  007DBC  20                 	db	32
   705  007DBD  69                 	db	105	;'i'
   706  007DBE  73                 	db	115	;'s'
   707  007DBF  20                 	db	32
   708  007DC0  46                 	db	70	;'F'
   709  007DC1  75                 	db	117	;'u'
   710  007DC2  6C                 	db	108	;'l'
   711  007DC3  6C                 	db	108	;'l'
   712  007DC4  20                 	db	32
   713  007DC5  44                 	db	68	;'D'
   714  007DC6  75                 	db	117	;'u'
   715  007DC7  70                 	db	112	;'p'
   716  007DC8  6C                 	db	108	;'l'
   717  007DC9  65                 	db	101	;'e'
   718  007DCA  78                 	db	120	;'x'
   719  007DCB  2E                 	db	46
   720  007DCC  0A                 	db	10
   721  007DCD  0D                 	db	13
   722  007DCE  00                 	db	0
   723  007DCF                     STR_38:
   724  007DCF  49                 	db	73	;'I'
   725  007DD0  6E                 	db	110	;'n'
   726  007DD1  69                 	db	105	;'i'
   727  007DD2  74                 	db	116	;'t'
   728  007DD3  69                 	db	105	;'i'
   729  007DD4  61                 	db	97	;'a'
   730  007DD5  6C                 	db	108	;'l'
   731  007DD6  69                 	db	105	;'i'
   732  007DD7  73                 	db	115	;'s'
   733  007DD8  61                 	db	97	;'a'
   734  007DD9  74                 	db	116	;'t'
   735  007DDA  69                 	db	105	;'i'
   736  007DDB  6F                 	db	111	;'o'
   737  007DDC  6E                 	db	110	;'n'
   738  007DDD  20                 	db	32
   739  007DDE  63                 	db	99	;'c'
   740  007DDF  6F                 	db	111	;'o'
   741  007DE0  6D                 	db	109	;'m'
   742  007DE1  70                 	db	112	;'p'
   743  007DE2  6C                 	db	108	;'l'
   744  007DE3  65                 	db	101	;'e'
   745  007DE4  74                 	db	116	;'t'
   746  007DE5  65                 	db	101	;'e'
   747  007DE6  64                 	db	100	;'d'
   748  007DE7  2E                 	db	46
   749  007DE8  0A                 	db	10
   750  007DE9  0D                 	db	13
   751  007DEA  00                 	db	0
   752  007DEB                     STR_27:
   753  007DEB  46                 	db	70	;'F'
   754  007DEC  49                 	db	73	;'I'
   755  007DED  52                 	db	82	;'R'
   756  007DEE  4D                 	db	77	;'M'
   757  007DEF  57                 	db	87	;'W'
   758  007DF0  41                 	db	65	;'A'
   759  007DF1  52                 	db	82	;'R'
   760  007DF2  45                 	db	69	;'E'
   761  007DF3  20                 	db	32
   762  007DF4  42                 	db	66	;'B'
   763  007DF5  55                 	db	85	;'U'
   764  007DF6  49                 	db	73	;'I'
   765  007DF7  4C                 	db	76	;'L'
   766  007DF8  44                 	db	68	;'D'
   767  007DF9  20                 	db	32
   768  007DFA  44                 	db	68	;'D'
   769  007DFB  41                 	db	65	;'A'
   770  007DFC  54                 	db	84	;'T'
   771  007DFD  45                 	db	69	;'E'
   772  007DFE  20                 	db	32
   773  007DFF  49                 	db	73	;'I'
   774  007E00  53                 	db	83	;'S'
   775  007E01  20                 	db	32
   776  007E02  00                 	db	0
   777  007E03                     STR_36:
   778  007E03  53                 	db	83	;'S'
   779  007E04  6F                 	db	111	;'o'
   780  007E05  75                 	db	117	;'u'
   781  007E06  72                 	db	114	;'r'
   782  007E07  63                 	db	99	;'c'
   783  007E08  65                 	db	101	;'e'
   784  007E09  20                 	db	32
   785  007E0A  4D                 	db	77	;'M'
   786  007E0B  41                 	db	65	;'A'
   787  007E0C  43                 	db	67	;'C'
   788  007E0D  20                 	db	32
   789  007E0E  61                 	db	97	;'a'
   790  007E0F  64                 	db	100	;'d'
   791  007E10  64                 	db	100	;'d'
   792  007E11  72                 	db	114	;'r'
   793  007E12  65                 	db	101	;'e'
   794  007E13  73                 	db	115	;'s'
   795  007E14  73                 	db	115	;'s'
   796  007E15  20                 	db	32
   797  007E16  69                 	db	105	;'i'
   798  007E17  73                 	db	115	;'s'
   799  007E18  20                 	db	32
   800  007E19  00                 	db	0
   801  007E1A                     STR_34:
   802  007E1A  53                 	db	83	;'S'
   803  007E1B  69                 	db	105	;'i'
   804  007E1C  6C                 	db	108	;'l'
   805  007E1D  69                 	db	105	;'i'
   806  007E1E  63                 	db	99	;'c'
   807  007E1F  6F                 	db	111	;'o'
   808  007E20  6E                 	db	110	;'n'
   809  007E21  20                 	db	32
   810  007E22  72                 	db	114	;'r'
   811  007E23  65                 	db	101	;'e'
   812  007E24  76                 	db	118	;'v'
   813  007E25  69                 	db	105	;'i'
   814  007E26  73                 	db	115	;'s'
   815  007E27  69                 	db	105	;'i'
   816  007E28  6F                 	db	111	;'o'
   817  007E29  6E                 	db	110	;'n'
   818  007E2A  20                 	db	32
   819  007E2B  69                 	db	105	;'i'
   820  007E2C  73                 	db	115	;'s'
   821  007E2D  20                 	db	32
   822  007E2E  00                 	db	0
   823  007E2F                     STR_45:
   824  007E2F  53                 	db	83	;'S'
   825  007E30  70                 	db	112	;'p'
   826  007E31  65                 	db	101	;'e'
   827  007E32  65                 	db	101	;'e'
   828  007E33  64                 	db	100	;'d'
   829  007E34  20                 	db	32
   830  007E35  69                 	db	105	;'i'
   831  007E36  73                 	db	115	;'s'
   832  007E37  20                 	db	32
   833  007E38  31                 	db	49	;'1'
   834  007E39  30                 	db	48	;'0'
   835  007E3A  30                 	db	48	;'0'
   836  007E3B  20                 	db	32
   837  007E3C  4D                 	db	77	;'M'
   838  007E3D  62                 	db	98	;'b'
   839  007E3E  70                 	db	112	;'p'
   840  007E3F  73                 	db	115	;'s'
   841  007E40  2C                 	db	44
   842  007E41  20                 	db	32
   843  007E42  00                 	db	0
   844  007E43                     STR_90:
   845  007E43  5B                 	db	91	;'['
   846  007E44  49                 	db	73	;'I'
   847  007E45  4E                 	db	78	;'N'
   848  007E46  56                 	db	86	;'V'
   849  007E47  41                 	db	65	;'A'
   850  007E48  4C                 	db	76	;'L'
   851  007E49  49                 	db	73	;'I'
   852  007E4A  44                 	db	68	;'D'
   853  007E4B  20                 	db	32
   854  007E4C  43                 	db	67	;'C'
   855  007E4D  48                 	db	72	;'H'
   856  007E4E  45                 	db	69	;'E'
   857  007E4F  43                 	db	67	;'C'
   858  007E50  4B                 	db	75	;'K'
   859  007E51  53                 	db	83	;'S'
   860  007E52  55                 	db	85	;'U'
   861  007E53  4D                 	db	77	;'M'
   862  007E54  5D                 	db	93	;']'
   863  007E55  00                 	db	0
   864  007E56                     STR_44:
   865  007E56  53                 	db	83	;'S'
   866  007E57  70                 	db	112	;'p'
   867  007E58  65                 	db	101	;'e'
   868  007E59  65                 	db	101	;'e'
   869  007E5A  64                 	db	100	;'d'
   870  007E5B  20                 	db	32
   871  007E5C  69                 	db	105	;'i'
   872  007E5D  73                 	db	115	;'s'
   873  007E5E  20                 	db	32
   874  007E5F  31                 	db	49	;'1'
   875  007E60  30                 	db	48	;'0'
   876  007E61  20                 	db	32
   877  007E62  4D                 	db	77	;'M'
   878  007E63  62                 	db	98	;'b'
   879  007E64  70                 	db	112	;'p'
   880  007E65  73                 	db	115	;'s'
   881  007E66  2C                 	db	44
   882  007E67  20                 	db	32
   883  007E68  00                 	db	0
   884  007E69                     STR_43:
   885  007E69  4C                 	db	76	;'L'
   886  007E6A  69                 	db	105	;'i'
   887  007E6B  6E                 	db	110	;'n'
   888  007E6C  6B                 	db	107	;'k'
   889  007E6D  20                 	db	32
   890  007E6E  65                 	db	101	;'e'
   891  007E6F  73                 	db	115	;'s'
   892  007E70  74                 	db	116	;'t'
   893  007E71  61                 	db	97	;'a'
   894  007E72  62                 	db	98	;'b'
   895  007E73  6C                 	db	108	;'l'
   896  007E74  69                 	db	105	;'i'
   897  007E75  73                 	db	115	;'s'
   898  007E76  68                 	db	104	;'h'
   899  007E77  65                 	db	101	;'e'
   900  007E78  64                 	db	100	;'d'
   901  007E79  2E                 	db	46
   902  007E7A  20                 	db	32
   903  007E7B  00                 	db	0
   904  007E7C                     STR_51:
   905  007E7C  20                 	db	32
   906  007E7D  45                 	db	69	;'E'
   907  007E7E  54                 	db	84	;'T'
   908  007E7F  48                 	db	72	;'H'
   909  007E80  45                 	db	69	;'E'
   910  007E81  52                 	db	82	;'R'
   911  007E82  4E                 	db	78	;'N'
   912  007E83  45                 	db	69	;'E'
   913  007E84  54                 	db	84	;'T'
   914  007E85  20                 	db	32
   915  007E86  4D                 	db	77	;'M'
   916  007E87  4F                 	db	79	;'O'
   917  007E88  44                 	db	68	;'D'
   918  007E89  55                 	db	85	;'U'
   919  007E8A  4C                 	db	76	;'L'
   920  007E8B  45                 	db	69	;'E'
   921  007E8C  3A                 	db	58	;':'
   922  007E8D  20                 	db	32
   923  007E8E  00                 	db	0
   924  007E8F                     STR_20:
   925  007E8F  43                 	db	67	;'C'
   926  007E90  6F                 	db	111	;'o'
   927  007E91  75                 	db	117	;'u'
   928  007E92  6C                 	db	108	;'l'
   929  007E93  64                 	db	100	;'d'
   930  007E94  20                 	db	32
   931  007E95  6E                 	db	110	;'n'
   932  007E96  6F                 	db	111	;'o'
   933  007E97  74                 	db	116	;'t'
   934  007E98  20                 	db	32
   935  007E99  72                 	db	114	;'r'
   936  007E9A  65                 	db	101	;'e'
   937  007E9B  73                 	db	115	;'s'
   938  007E9C  6F                 	db	111	;'o'
   939  007E9D  6C                 	db	108	;'l'
   940  007E9E  76                 	db	118	;'v'
   941  007E9F  65                 	db	101	;'e'
   942  007EA0  20                 	db	32
   943  007EA1  00                 	db	0
   944  007EA2                     STR_62:
   945  007EA2  55                 	db	85	;'U'
   946  007EA3  6E                 	db	110	;'n'
   947  007EA4  6B                 	db	107	;'k'
   948  007EA5  6E                 	db	110	;'n'
   949  007EA6  6F                 	db	111	;'o'
   950  007EA7  77                 	db	119	;'w'
   951  007EA8  6E                 	db	110	;'n'
   952  007EA9  20                 	db	32
   953  007EAA  45                 	db	69	;'E'
   954  007EAB  74                 	db	116	;'t'
   955  007EAC  68                 	db	104	;'h'
   956  007EAD  65                 	db	101	;'e'
   957  007EAE  72                 	db	114	;'r'
   958  007EAF  54                 	db	84	;'T'
   959  007EB0  79                 	db	121	;'y'
   960  007EB1  70                 	db	112	;'p'
   961  007EB2  65                 	db	101	;'e'
   962  007EB3  00                 	db	0
   963  007EB4                     STR_22:
   964  007EB4  49                 	db	73	;'I'
   965  007EB5  50                 	db	80	;'P'
   966  007EB6  20                 	db	32
   967  007EB7  70                 	db	112	;'p'
   968  007EB8  61                 	db	97	;'a'
   969  007EB9  63                 	db	99	;'c'
   970  007EBA  6B                 	db	107	;'k'
   971  007EBB  65                 	db	101	;'e'
   972  007EBC  74                 	db	116	;'t'
   973  007EBD  20                 	db	32
   974  007EBE  73                 	db	115	;'s'
   975  007EBF  65                 	db	101	;'e'
   976  007EC0  6E                 	db	110	;'n'
   977  007EC1  74                 	db	116	;'t'
   978  007EC2  2E                 	db	46
   979  007EC3  0A                 	db	10
   980  007EC4  0D                 	db	13
   981  007EC5  00                 	db	0
   982  007EC6                     STR_66:
   983  007EC6  55                 	db	85	;'U'
   984  007EC7  6E                 	db	110	;'n'
   985  007EC8  6B                 	db	107	;'k'
   986  007EC9  6E                 	db	110	;'n'
   987  007ECA  6F                 	db	111	;'o'
   988  007ECB  77                 	db	119	;'w'
   989  007ECC  6E                 	db	110	;'n'
   990  007ECD  20                 	db	32
   991  007ECE  50                 	db	80	;'P'
   992  007ECF  72                 	db	114	;'r'
   993  007ED0  6F                 	db	111	;'o'
   994  007ED1  74                 	db	116	;'t'
   995  007ED2  6F                 	db	111	;'o'
   996  007ED3  63                 	db	99	;'c'
   997  007ED4  6F                 	db	111	;'o'
   998  007ED5  6C                 	db	108	;'l'
   999  007ED6  00                 	db	0
  1000  007ED7                     STR_49:
  1001  007ED7  20                 	db	32
  1002  007ED8  4D                 	db	77	;'M'
  1003  007ED9  45                 	db	69	;'E'
  1004  007EDA  4D                 	db	77	;'M'
  1005  007EDB  4F                 	db	79	;'O'
  1006  007EDC  52                 	db	82	;'R'
  1007  007EDD  59                 	db	89	;'Y'
  1008  007EDE  20                 	db	32
  1009  007EDF  4D                 	db	77	;'M'
  1010  007EE0  4F                 	db	79	;'O'
  1011  007EE1  44                 	db	68	;'D'
  1012  007EE2  55                 	db	85	;'U'
  1013  007EE3  4C                 	db	76	;'L'
  1014  007EE4  45                 	db	69	;'E'
  1015  007EE5  3A                 	db	58	;':'
  1016  007EE6  20                 	db	32
  1017  007EE7  00                 	db	0
  1018  007EE8                     STR_77:
  1019  007EE8  5B                 	db	91	;'['
  1020  007EE9  52                 	db	82	;'R'
  1021  007EEA  65                 	db	101	;'e'
  1022  007EEB  70                 	db	112	;'p'
  1023  007EEC  6C                 	db	108	;'l'
  1024  007EED  79                 	db	121	;'y'
  1025  007EEE  20                 	db	32
  1026  007EEF  73                 	db	115	;'s'
  1027  007EF0  65                 	db	101	;'e'
  1028  007EF1  6E                 	db	110	;'n'
  1029  007EF2  74                 	db	116	;'t'
  1030  007EF3  20                 	db	32
  1031  007EF4  74                 	db	116	;'t'
  1032  007EF5  6F                 	db	111	;'o'
  1033  007EF6  20                 	db	32
  1034  007EF7  00                 	db	0
  1035  007EF8                     STR_5:
  1036  007EF8  5B                 	db	91	;'['
  1037  007EF9  53                 	db	83	;'S'
  1038  007EFA  79                 	db	121	;'y'
  1039  007EFB  6D                 	db	109	;'m'
  1040  007EFC  62                 	db	98	;'b'
  1041  007EFD  6F                 	db	111	;'o'
  1042  007EFE  6C                 	db	108	;'l'
  1043  007EFF  20                 	db	32
  1044  007F00  45                 	db	69	;'E'
  1045  007F01  72                 	db	114	;'r'
  1046  007F02  72                 	db	114	;'r'
  1047  007F03  6F                 	db	111	;'o'
  1048  007F04  72                 	db	114	;'r'
  1049  007F05  73                 	db	115	;'s'
  1050  007F06  5D                 	db	93	;']'
  1051  007F07  00                 	db	0
  1052  007F08                     STR_74:
  1053  007F08  5B                 	db	91	;'['
  1054  007F09  49                 	db	73	;'I'
  1055  007F0A  73                 	db	115	;'s'
  1056  007F0B  47                 	db	71	;'G'
  1057  007F0C  72                 	db	114	;'r'
  1058  007F0D  61                 	db	97	;'a'
  1059  007F0E  74                 	db	116	;'t'
  1060  007F0F  75                 	db	117	;'u'
  1061  007F10  69                 	db	105	;'i'
  1062  007F11  74                 	db	116	;'t'
  1063  007F12  6F                 	db	111	;'o'
  1064  007F13  75                 	db	117	;'u'
  1065  007F14  73                 	db	115	;'s'
  1066  007F15  5D                 	db	93	;']'
  1067  007F16  00                 	db	0
  1068  007F17                     STR_53:
  1069  007F17  20                 	db	32
  1070  007F18  49                 	db	73	;'I'
  1071  007F19  50                 	db	80	;'P'
  1072  007F1A  76                 	db	118	;'v'
  1073  007F1B  34                 	db	52	;'4'
  1074  007F1C  20                 	db	32
  1075  007F1D  4D                 	db	77	;'M'
  1076  007F1E  4F                 	db	79	;'O'
  1077  007F1F  44                 	db	68	;'D'
  1078  007F20  55                 	db	85	;'U'
  1079  007F21  4C                 	db	76	;'L'
  1080  007F22  45                 	db	69	;'E'
  1081  007F23  3A                 	db	58	;':'
  1082  007F24  20                 	db	32
  1083  007F25  00                 	db	0
  1084  007F26                     STR_52:
  1085  007F26  20                 	db	32
  1086  007F27  41                 	db	65	;'A'
  1087  007F28  52                 	db	82	;'R'
  1088  007F29  50                 	db	80	;'P'
  1089  007F2A  20                 	db	32
  1090  007F2B  4D                 	db	77	;'M'
  1091  007F2C  4F                 	db	79	;'O'
  1092  007F2D  44                 	db	68	;'D'
  1093  007F2E  55                 	db	85	;'U'
  1094  007F2F  4C                 	db	76	;'L'
  1095  007F30  45                 	db	69	;'E'
  1096  007F31  3A                 	db	58	;':'
  1097  007F32  20                 	db	32
  1098  007F33  00                 	db	0
  1099  007F34                     STR_42:
  1100  007F34  4C                 	db	76	;'L'
  1101  007F35  69                 	db	105	;'i'
  1102  007F36  6E                 	db	110	;'n'
  1103  007F37  6B                 	db	107	;'k'
  1104  007F38  20                 	db	32
  1105  007F39  6C                 	db	108	;'l'
  1106  007F3A  6F                 	db	111	;'o'
  1107  007F3B  73                 	db	115	;'s'
  1108  007F3C  74                 	db	116	;'t'
  1109  007F3D  2E                 	db	46
  1110  007F3E  0A                 	db	10
  1111  007F3F  0D                 	db	13
  1112  007F40  00                 	db	0
  1113  007F41  20                 	db	32
  1114  007F42  73                 	db	115	;'s'
  1115  007F43  65                 	db	101	;'e'
  1116  007F44  63                 	db	99	;'c'
  1117  007F45  6F                 	db	111	;'o'
  1118  007F46  6E                 	db	110	;'n'
  1119  007F47  64                 	db	100	;'d'
  1120  007F48  73                 	db	115	;'s'
  1121  007F49  2E                 	db	46
  1122  007F4A  0A                 	db	10
  1123  007F4B  0D                 	db	13
  1124  007F4C  00                 	db	0
  1125  007F4D                     STR_33:
  1126  007F4D  20                 	db	32
  1127  007F4E  64                 	db	100	;'d'
  1128  007F4F  65                 	db	101	;'e'
  1129  007F50  74                 	db	116	;'t'
  1130  007F51  65                 	db	101	;'e'
  1131  007F52  63                 	db	99	;'c'
  1132  007F53  74                 	db	116	;'t'
  1133  007F54  65                 	db	101	;'e'
  1134  007F55  64                 	db	100	;'d'
  1135  007F56  2E                 	db	46
  1136  007F57  20                 	db	32
  1137  007F58  00                 	db	0
  1138  007F59                     STR_28:
  1139  007F59  4D                 	db	77	;'M'
  1140  007F5A  61                 	db	97	;'a'
  1141  007F5B  72                 	db	114	;'r'
  1142  007F5C  20                 	db	32
  1143  007F5D  30                 	db	48	;'0'
  1144  007F5E  37                 	db	55	;'7'
  1145  007F5F  20                 	db	32
  1146  007F60  32                 	db	50	;'2'
  1147  007F61  30                 	db	48	;'0'
  1148  007F62  31                 	db	49	;'1'
  1149  007F63  39                 	db	57	;'9'
  1150  007F64  00                 	db	0
  1151  007F65                     STR_3:
  1152  007F65  5B                 	db	91	;'['
  1153  007F66  42                 	db	66	;'B'
  1154  007F67  72                 	db	114	;'r'
  1155  007F68  6F                 	db	111	;'o'
  1156  007F69  61                 	db	97	;'a'
  1157  007F6A  64                 	db	100	;'d'
  1158  007F6B  63                 	db	99	;'c'
  1159  007F6C  61                 	db	97	;'a'
  1160  007F6D  73                 	db	115	;'s'
  1161  007F6E  74                 	db	116	;'t'
  1162  007F6F  5D                 	db	93	;']'
  1163  007F70  00                 	db	0
  1164  007F71                     STR_91:
  1165  007F71  5B                 	db	91	;'['
  1166  007F72  45                 	db	69	;'E'
  1167  007F73  78                 	db	120	;'x'
  1168  007F74  70                 	db	112	;'p'
  1169  007F75  65                 	db	101	;'e'
  1170  007F76  63                 	db	99	;'c'
  1171  007F77  74                 	db	116	;'t'
  1172  007F78  65                 	db	101	;'e'
  1173  007F79  64                 	db	100	;'d'
  1174  007F7A  20                 	db	32
  1175  007F7B  00                 	db	0
  1176  007F7C                     STR_73:
  1177  007F7C  5B                 	db	91	;'['
  1178  007F7D  49                 	db	73	;'I'
  1179  007F7E  73                 	db	115	;'s'
  1180  007F7F  50                 	db	80	;'P'
  1181  007F80  72                 	db	114	;'r'
  1182  007F81  6F                 	db	111	;'o'
  1183  007F82  62                 	db	98	;'b'
  1184  007F83  65                 	db	101	;'e'
  1185  007F84  5D                 	db	93	;']'
  1186  007F85  00                 	db	0
  1187  007F86                     STR_4:
  1188  007F86  5B                 	db	91	;'['
  1189  007F87  55                 	db	85	;'U'
  1190  007F88  6E                 	db	110	;'n'
  1191  007F89  69                 	db	105	;'i'
  1192  007F8A  63                 	db	99	;'c'
  1193  007F8B  61                 	db	97	;'a'
  1194  007F8C  73                 	db	115	;'s'
  1195  007F8D  74                 	db	116	;'t'
  1196  007F8E  5D                 	db	93	;']'
  1197  007F8F  00                 	db	0
  1198  007F90                     STR_58:
  1199  007F90  20                 	db	32
  1200  007F91  28                 	db	40
  1201  007F92  43                 	db	67	;'C'
  1202  007F93  6F                 	db	111	;'o'
  1203  007F94  64                 	db	100	;'d'
  1204  007F95  65                 	db	101	;'e'
  1205  007F96  3A                 	db	58	;':'
  1206  007F97  20                 	db	32
  1207  007F98  00                 	db	0
  1208  007F99                     STR_30:
  1209  007F99  32                 	db	50	;'2'
  1210  007F9A  30                 	db	48	;'0'
  1211  007F9B  3A                 	db	58	;':'
  1212  007F9C  31                 	db	49	;'1'
  1213  007F9D  34                 	db	52	;'4'
  1214  007F9E  3A                 	db	58	;':'
  1215  007F9F  33                 	db	51	;'3'
  1216  007FA0  30                 	db	48	;'0'
  1217  007FA1  00                 	db	0
  1218  007FA2  57                 	db	87	;'W'
  1219  007FA3  61                 	db	97	;'a'
  1220  007FA4  69                 	db	105	;'i'
  1221  007FA5  74                 	db	116	;'t'
  1222  007FA6  65                 	db	101	;'e'
  1223  007FA7  64                 	db	100	;'d'
  1224  007FA8  20                 	db	32
  1225  007FA9  00                 	db	0
  1226  007FAA                     STR_48:
  1227  007FAA  5B                 	db	91	;'['
  1228  007FAB  45                 	db	69	;'E'
  1229  007FAC  52                 	db	82	;'R'
  1230  007FAD  52                 	db	82	;'R'
  1231  007FAE  4F                 	db	79	;'O'
  1232  007FAF  52                 	db	82	;'R'
  1233  007FB0  5D                 	db	93	;']'
  1234  007FB1  00                 	db	0
  1235  007FB2                     STR_92:
  1236  007FB2  2C                 	db	44
  1237  007FB3  20                 	db	32
  1238  007FB4  67                 	db	103	;'g'
  1239  007FB5  6F                 	db	111	;'o'
  1240  007FB6  74                 	db	116	;'t'
  1241  007FB7  20                 	db	32
  1242  007FB8  00                 	db	0
  1243  007FB9                     STR_9:
  1244  007FB9  5B                 	db	91	;'['
  1245  007FBA  49                 	db	73	;'I'
  1246  007FBB  50                 	db	80	;'P'
  1247  007FBC  76                 	db	118	;'v'
  1248  007FBD  34                 	db	52	;'4'
  1249  007FBE  5D                 	db	93	;']'
  1250  007FBF  00                 	db	0
  1251  007FC0                     STR_8:
  1252  007FC0  5B                 	db	91	;'['
  1253  007FC1  41                 	db	65	;'A'
  1254  007FC2  52                 	db	82	;'R'
  1255  007FC3  50                 	db	80	;'P'
  1256  007FC4  5D                 	db	93	;']'
  1257  007FC5  00                 	db	0
  1258  007FC6                     STR_84:
  1259  007FC6  20                 	db	32
  1260  007FC7  2D                 	db	45
  1261  007FC8  3E                 	db	62	;'>'
  1262  007FC9  20                 	db	32
  1263  007FCA  00                 	db	0
  1264  007FCB                     STR_70:
  1265  007FCB  5D                 	db	93	;']'
  1266  007FCC  2D                 	db	45
  1267  007FCD  3E                 	db	62	;'>'
  1268  007FCE  5B                 	db	91	;'['
  1269  007FCF  00                 	db	0
  1270  007FD0                     STR_60:
  1271  007FD0  49                 	db	73	;'I'
  1272  007FD1  50                 	db	80	;'P'
  1273  007FD2  76                 	db	118	;'v'
  1274  007FD3  34                 	db	52	;'4'
  1275  007FD4  00                 	db	0
  1276  007FD5                     STR_63:
  1277  007FD5  49                 	db	73	;'I'
  1278  007FD6  43                 	db	67	;'C'
  1279  007FD7  4D                 	db	77	;'M'
  1280  007FD8  50                 	db	80	;'P'
  1281  007FD9  00                 	db	0
  1282  007FDA                     STR_59:
  1283  007FDA  29                 	db	41
  1284  007FDB  2E                 	db	46
  1285  007FDC  0A                 	db	10
  1286  007FDD  0D                 	db	13
  1287  007FDE  00                 	db	0
  1288  007FDF                     STR_13:
  1289  007FDF  5D                 	db	93	;']'
  1290  007FE0  5B                 	db	91	;'['
  1291  007FE1  4C                 	db	76	;'L'
  1292  007FE2  3D                 	db	61	;'='
  1293  007FE3  00                 	db	0
  1294  007FE4                     STR_64:
  1295  007FE4  54                 	db	84	;'T'
  1296  007FE5  43                 	db	67	;'C'
  1297  007FE6  50                 	db	80	;'P'
  1298  007FE7  00                 	db	0
  1299  007FE8                     STR_65:
  1300  007FE8  55                 	db	85	;'U'
  1301  007FE9  44                 	db	68	;'D'
  1302  007FEA  50                 	db	80	;'P'
  1303  007FEB  00                 	db	0
  1304  007FEC                     STR_61:
  1305  007FEC  41                 	db	65	;'A'
  1306  007FED  52                 	db	82	;'R'
  1307  007FEE  50                 	db	80	;'P'
  1308  007FEF  00                 	db	0
  1309  007FF0                     STR_17:
  1310  007FF0  20                 	db	32
  1311  007FF1  28                 	db	40
  1312  007FF2  00                 	db	0
  1313  007FF3                     STR_11:
  1314  007FF3  2D                 	db	45
  1315  007FF4  3E                 	db	62	;'>'
  1316  007FF5  00                 	db	0
  1317  007FF6                     STR_12:
  1318  007FF6  5D                 	db	93	;']'
  1319  007FF7  5B                 	db	91	;'['
  1320  007FF8  00                 	db	0
  1321  007FF9                     STR_18:
  1322  007FF9  29                 	db	41
  1323  007FFA  5D                 	db	93	;']'
  1324  007FFB  00                 	db	0
  1325  007FFC                     STR_23:
  1326  007FFC  12                 	db	18
  1327  007FFD  00                 	db	0
  1328  0000                     
  1329                           ; #config settings
  1330  007FFE  00                 	db	0	; dummy byte at the end
  1331  0000                     
  1332                           	psect	cinit
  1333  003D16                     __pcinit:
  1334                           	opt stack 0
  1335  003D16                     start_initialization:
  1336                           	opt stack 0
  1337  003D16                     __initialization:
  1338                           	opt stack 0
  1339                           
  1340                           ; Initialize objects allocated to BANK2 (18 bytes)
  1341                           ; load TBLPTR registers with __pidataBANK2
  1342  003D16  0E4C               	movlw	low __pidataBANK2
  1343  003D18  6EF6               	movwf	tblptrl,c
  1344  003D1A  0E4E               	movlw	high __pidataBANK2
  1345  003D1C  6EF7               	movwf	tblptrh,c
  1346  003D1E  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1347  003D20  6EF8               	movwf	tblptru,c
  1348  003D22  EE02  F0D0         	lfsr	0,__pdataBANK2
  1349  003D26  EE10 F012          	lfsr	1,18
  1350  003D2A                     copy_data0:
  1351  003D2A  0009               	tblrd		*+
  1352  003D2C  CFF5 FFEE          	movff	tablat,postinc0
  1353  003D30  50E5               	movf	postdec1,w,c
  1354  003D32  50E1               	movf	fsr1l,w,c
  1355  003D34  E1FA               	bnz	copy_data0
  1356                           
  1357                           ; Initialize objects allocated to BANK1 (32 bytes)
  1358                           ; load TBLPTR registers with __pidataBANK1
  1359  003D36  0E88               	movlw	low __pidataBANK1
  1360  003D38  6EF6               	movwf	tblptrl,c
  1361  003D3A  0E4D               	movlw	high __pidataBANK1
  1362  003D3C  6EF7               	movwf	tblptrh,c
  1363  003D3E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1364  003D40  6EF8               	movwf	tblptru,c
  1365  003D42  EE01  F0B6         	lfsr	0,__pdataBANK1
  1366  003D46  EE10 F020          	lfsr	1,32
  1367  003D4A                     copy_data1:
  1368  003D4A  0009               	tblrd		*+
  1369  003D4C  CFF5 FFEE          	movff	tablat,postinc0
  1370  003D50  50E5               	movf	postdec1,w,c
  1371  003D52  50E1               	movf	fsr1l,w,c
  1372  003D54  E1FA               	bnz	copy_data1
  1373                           
  1374                           ; Initialize objects allocated to COMRAM (2 bytes)
  1375                           ; load TBLPTR registers with __pidataCOMRAM
  1376  003D56  0E00               	movlw	low __pidataCOMRAM
  1377  003D58  6EF6               	movwf	tblptrl,c
  1378  003D5A  0E4F               	movlw	high __pidataCOMRAM
  1379  003D5C  6EF7               	movwf	tblptrh,c
  1380  003D5E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1381  003D60  6EF8               	movwf	tblptru,c
  1382  003D62  0009               	tblrd		*+	;fetch initializer
  1383  003D64  CFF5 F04D          	movff	tablat,__pdataCOMRAM
  1384  003D68  0009               	tblrd		*+	;fetch initializer
  1385  003D6A  CFF5 F04E          	movff	tablat,__pdataCOMRAM+1
  1386                           
  1387                           ; Clear objects allocated to BANK3 (162 bytes)
  1388  003D6E  EE03  F000         	lfsr	0,__pbssBANK3
  1389  003D72  0EA2               	movlw	162
  1390  003D74                     clear_0:
  1391  003D74  6AEE               	clrf	postinc0,c
  1392  003D76  06E8               	decf	wreg,f,c
  1393  003D78  E1FD               	bnz	clear_0
  1394                           
  1395                           ; Clear objects allocated to BANK2 (208 bytes)
  1396  003D7A  EE02  F000         	lfsr	0,__pbssBANK2
  1397  003D7E  0ED0               	movlw	208
  1398  003D80                     clear_1:
  1399  003D80  6AEE               	clrf	postinc0,c
  1400  003D82  06E8               	decf	wreg,f,c
  1401  003D84  E1FD               	bnz	clear_1
  1402                           
  1403                           ; Clear objects allocated to BANK1 (36 bytes)
  1404  003D86  EE01  F092         	lfsr	0,__pbssBANK1
  1405  003D8A  0E24               	movlw	36
  1406  003D8C                     clear_2:
  1407  003D8C  6AEE               	clrf	postinc0,c
  1408  003D8E  06E8               	decf	wreg,f,c
  1409  003D90  E1FD               	bnz	clear_2
  1410                           
  1411                           ; Clear objects allocated to COMRAM (36 bytes)
  1412  003D92  EE00  F029         	lfsr	0,__pbssCOMRAM
  1413  003D96  0E24               	movlw	36
  1414  003D98                     clear_3:
  1415  003D98  6AEE               	clrf	postinc0,c
  1416  003D9A  06E8               	decf	wreg,f,c
  1417  003D9C  E1FD               	bnz	clear_3
  1418  003D9E                     end_of_initialization:
  1419                           	opt stack 0
  1420  003D9E                     __end_of__initialization:
  1421                           	opt stack 0
  1422  003D9E  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1423  003DA0  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1424  003DA2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1425  003DA4  6EF8               	movwf	tblptru,c
  1426  003DA6  0100               	movlb	0
  1427  003DA8  EF72  F005         	goto	_main	;jump to C main() function
  1428                           tblptru	equ	0xFF8
  1429                           tblptrh	equ	0xFF7
  1430                           tblptrl	equ	0xFF6
  1431                           tablat	equ	0xFF5
  1432                           postinc0	equ	0xFEE
  1433                           wreg	equ	0xFE8
  1434                           postdec1	equ	0xFE5
  1435                           fsr1l	equ	0xFE1
  1436                           
  1437                           	psect	bssCOMRAM
  1438  000029                     __pbssCOMRAM:
  1439                           	opt stack 0
  1440  000029                     _time:
  1441                           	opt stack 0
  1442  000029                     	ds	4
  1443  00002D                     _sourceIPAddress:
  1444                           	opt stack 0
  1445  00002D                     	ds	4
  1446  000031                     buttonHandler@debounceCounter:
  1447                           	opt stack 0
  1448  000031                     	ds	4
  1449  000035                     _numberToDisplay:
  1450                           	opt stack 0
  1451  000035                     	ds	4
  1452  000039                     ethernet_rxGetNewFrame@counter:
  1453                           	opt stack 0
  1454  000039                     	ds	4
  1455  00003D                     sevenSegmentUpdate@digitsToDisplay:
  1456                           	opt stack 0
  1457  00003D                     	ds	3
  1458  000040                     ethernetController_streamToTransmitBuffer@pointer:
  1459                           	opt stack 0
  1460  000040                     	ds	2
  1461  000042                     ethernetController_softReset@F5850:
  1462                           	opt stack 0
  1463  000042                     	ds	2
  1464  000044                     _nextPacketPointer:
  1465                           	opt stack 0
  1466  000044                     	ds	2
  1467  000046                     ipv4_setIPSourceAddress@probeCounter:
  1468                           	opt stack 0
  1469  000046                     	ds	1
  1470  000047                     ipv4_setIPSourceAddress@state:
  1471                           	opt stack 0
  1472  000047                     	ds	1
  1473  000048                     ARP_probe@state:
  1474                           	opt stack 0
  1475  000048                     	ds	1
  1476  000049                     sevenSegmentUpdate@digitPointer:
  1477                           	opt stack 0
  1478  000049                     	ds	1
  1479  00004A                     buttonHandler@newState:
  1480                           	opt stack 0
  1481  00004A                     	ds	1
  1482  00004B                     buttonHandler@oldState:
  1483                           	opt stack 0
  1484  00004B                     	ds	1
  1485  00004C                     	ds	1
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           postinc0	equ	0xFEE
  1491                           wreg	equ	0xFE8
  1492                           postdec1	equ	0xFE5
  1493                           fsr1l	equ	0xFE1
  1494                           
  1495                           	psect	dataCOMRAM
  1496  00004D                     __pdataCOMRAM:
  1497                           	opt stack 0
  1498  00004D                     ethernetController_softReset@F5848:
  1499                           	opt stack 0
  1500  00004D                     	ds	2
  1501                           tblptru	equ	0xFF8
  1502                           tblptrh	equ	0xFF7
  1503                           tblptrl	equ	0xFF6
  1504                           tablat	equ	0xFF5
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           postdec1	equ	0xFE5
  1508                           fsr1l	equ	0xFE1
  1509                           
  1510                           	psect	bssBANK1
  1511  000192                     __pbssBANK1:
  1512                           	opt stack 0
  1513  000192                     ipv4_sendFrame@oldTime:
  1514                           	opt stack 0
  1515  000192                     	ds	4
  1516  000196                     	ds	4
  1517  00019A                     ipv4_sendFrame@requestCounter:
  1518                           	opt stack 0
  1519  00019A                     	ds	1
  1520  00019B                     hexToString@number:
  1521                           	opt stack 0
  1522  00019B                     	ds	10
  1523  0001A5                     intToString@number:
  1524                           	opt stack 0
  1525  0001A5                     	ds	10
  1526  0001AF                     ethernetController_getRSV@temp:
  1527                           	opt stack 0
  1528  0001AF                     	ds	6
  1529  0001B5                     _buttonState:
  1530                           	opt stack 0
  1531  0001B5                     	ds	1
  1532                           tblptru	equ	0xFF8
  1533                           tblptrh	equ	0xFF7
  1534                           tblptrl	equ	0xFF6
  1535                           tablat	equ	0xFF5
  1536                           postinc0	equ	0xFEE
  1537                           wreg	equ	0xFE8
  1538                           postdec1	equ	0xFE5
  1539                           fsr1l	equ	0xFE1
  1540                           
  1541                           	psect	dataBANK1
  1542  0001B6                     __pdataBANK1:
  1543                           	opt stack 0
  1544  0001B6                     _sevenSegCharacters:
  1545                           	opt stack 0
  1546  0001B6                     	ds	12
  1547  0001C2                     _randx:
  1548                           	opt stack 0
  1549  0001C2                     	ds	4
  1550  0001C6                     ipAdressToString@address:
  1551                           	opt stack 0
  1552  0001C6                     	ds	16
  1553                           tblptru	equ	0xFF8
  1554                           tblptrh	equ	0xFF7
  1555                           tblptrl	equ	0xFF6
  1556                           tablat	equ	0xFF5
  1557                           postinc0	equ	0xFEE
  1558                           wreg	equ	0xFE8
  1559                           postdec1	equ	0xFE5
  1560                           fsr1l	equ	0xFE1
  1561                           
  1562                           	psect	bssBANK2
  1563  000200                     __pbssBANK2:
  1564                           	opt stack 0
  1565  000200                     _occupiedMemory:
  1566                           	opt stack 0
  1567  000200                     	ds	72
  1568  000248                     printEthernetState@oldState:
  1569                           	opt stack 0
  1570  000248                     	ds	15
  1571  000257                     _stack:
  1572                           	opt stack 0
  1573  000257                     	ds	121
  1574                           tblptru	equ	0xFF8
  1575                           tblptrh	equ	0xFF7
  1576                           tblptrl	equ	0xFF6
  1577                           tablat	equ	0xFF5
  1578                           postinc0	equ	0xFEE
  1579                           wreg	equ	0xFE8
  1580                           postdec1	equ	0xFE5
  1581                           fsr1l	equ	0xFE1
  1582                           
  1583                           	psect	dataBANK2
  1584  0002D0                     __pdataBANK2:
  1585                           	opt stack 0
  1586  0002D0                     macToString@F5813:
  1587                           	opt stack 0
  1588  0002D0                     	ds	18
  1589                           tblptru	equ	0xFF8
  1590                           tblptrh	equ	0xFF7
  1591                           tblptrl	equ	0xFF6
  1592                           tablat	equ	0xFF5
  1593                           postinc0	equ	0xFEE
  1594                           wreg	equ	0xFE8
  1595                           postdec1	equ	0xFE5
  1596                           fsr1l	equ	0xFE1
  1597                           
  1598                           	psect	bssBANK3
  1599  000300                     __pbssBANK3:
  1600                           	opt stack 0
  1601  000300                     _ARP_table:
  1602                           	opt stack 0
  1603  000300                     	ds	112
  1604  000370                     arpEntryToString@string:
  1605                           	opt stack 0
  1606  000370                     	ds	50
  1607                           tblptru	equ	0xFF8
  1608                           tblptrh	equ	0xFF7
  1609                           tblptrl	equ	0xFF6
  1610                           tablat	equ	0xFF5
  1611                           postinc0	equ	0xFEE
  1612                           wreg	equ	0xFE8
  1613                           postdec1	equ	0xFE5
  1614                           fsr1l	equ	0xFE1
  1615                           
  1616                           	psect	cstackBANK3
  1617  0003A2                     __pcstackBANK3:
  1618                           	opt stack 0
  1619  0003A2                     main@prescaler:
  1620                           	opt stack 0
  1621                           
  1622                           ; 4 bytes @ 0x0
  1623  0003A2                     	ds	4
  1624  0003A6                     main@headerBuf:
  1625                           	opt stack 0
  1626                           
  1627                           ; 32 bytes @ 0x4
  1628  0003A6                     	ds	32
  1629  0003C6                     _main$2371:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x24
  1633  0003C6                     	ds	2
  1634  0003C8                     main@i:
  1635                           	opt stack 0
  1636                           
  1637                           ; 1 bytes @ 0x26
  1638  0003C8                     	ds	1
  1639  0003C9                     main@err:
  1640                           	opt stack 0
  1641                           
  1642                           ; 3 bytes @ 0x27
  1643  0003C9                     	ds	3
  1644  0003CC                     main@IPdestination:
  1645                           	opt stack 0
  1646                           
  1647                           ; 4 bytes @ 0x2A
  1648  0003CC                     	ds	4
  1649  0003D0                     main@IPsource:
  1650                           	opt stack 0
  1651                           
  1652                           ; 4 bytes @ 0x2E
  1653  0003D0                     	ds	4
  1654                           tblptru	equ	0xFF8
  1655                           tblptrh	equ	0xFF7
  1656                           tblptrl	equ	0xFF6
  1657                           tablat	equ	0xFF5
  1658                           postinc0	equ	0xFEE
  1659                           wreg	equ	0xFE8
  1660                           postdec1	equ	0xFE5
  1661                           fsr1l	equ	0xFE1
  1662                           
  1663                           	psect	cstackBANK1
  1664  000100                     __pcstackBANK1:
  1665                           	opt stack 0
  1666  000100                     ARP_sendRequest@ipSender:
  1667                           	opt stack 0
  1668  000100                     ARP_sendReply@request:
  1669                           	opt stack 0
  1670                           
  1671                           ; 32 bytes @ 0x0
  1672  000100                     	ds	4
  1673  000104                     ARP_sendRequest@ipTarget:
  1674                           	opt stack 0
  1675                           
  1676                           ; 4 bytes @ 0x4
  1677  000104                     	ds	4
  1678  000108                     ARP_sendRequest@senderMAC:
  1679                           	opt stack 0
  1680                           
  1681                           ; 6 bytes @ 0x8
  1682  000108                     	ds	6
  1683  00010E                     ARP_sendRequest@targetMAC:
  1684                           	opt stack 0
  1685                           
  1686                           ; 6 bytes @ 0xE
  1687  00010E                     	ds	6
  1688  000114                     ARP_sendRequest@request:
  1689                           	opt stack 0
  1690                           
  1691                           ; 32 bytes @ 0x14
  1692  000114                     	ds	12
  1693  000120                     ARP_sendReply@senderMAC:
  1694                           	opt stack 0
  1695                           
  1696                           ; 6 bytes @ 0x20
  1697  000120                     	ds	6
  1698  000126                     ARP_sendReply@targetMAC:
  1699                           	opt stack 0
  1700                           
  1701                           ; 6 bytes @ 0x26
  1702  000126                     	ds	6
  1703  00012C                     ARP_sendReply@senderIP:
  1704                           	opt stack 0
  1705                           
  1706                           ; 4 bytes @ 0x2C
  1707  00012C                     	ds	4
  1708  000130                     ARP_sendReply@targetIP:
  1709                           	opt stack 0
  1710                           
  1711                           ; 4 bytes @ 0x30
  1712  000130                     	ds	4
  1713  000134                     ?_ipv4_sendFrame:
  1714                           	opt stack 0
  1715  000134                     ARP_sendReply@myIP:
  1716                           	opt stack 0
  1717  000134                     ipv4_sendFrame@ipPacket:
  1718                           	opt stack 0
  1719                           
  1720                           ; 66 bytes @ 0x34
  1721  000134                     	ds	4
  1722  000138                     ARP_sendReply@reply:
  1723                           	opt stack 0
  1724                           
  1725                           ; 32 bytes @ 0x38
  1726  000138                     	ds	32
  1727  000158                     ARP_handleNewPacket@arp:
  1728                           	opt stack 0
  1729                           
  1730                           ; 32 bytes @ 0x58
  1731  000158                     	ds	30
  1732  000176                     ??_ipv4_sendFrame:
  1733                           
  1734                           ; 1 bytes @ 0x76
  1735  000176                     	ds	2
  1736  000178                     ?_ethernet_rxGetNewFrame:
  1737                           	opt stack 0
  1738  000178                     ethernet_rxGetNewFrame@frame:
  1739                           	opt stack 0
  1740                           
  1741                           ; 2 bytes @ 0x78
  1742  000178                     	ds	3
  1743  00017B                     ??_ethernet_rxGetNewFrame:
  1744                           
  1745                           ; 1 bytes @ 0x7B
  1746  00017B                     	ds	3
  1747  00017E                     ipv4_sendFrame@requestTimeout:
  1748                           	opt stack 0
  1749                           
  1750                           ; 4 bytes @ 0x7E
  1751  00017E                     	ds	4
  1752  000182                     _ipv4_sendFrame$4461:
  1753                           	opt stack 0
  1754                           
  1755                           ; 4 bytes @ 0x82
  1756  000182                     	ds	1
  1757  000183                     ethernet_rxGetNewFrame@err:
  1758                           	opt stack 0
  1759                           
  1760                           ; 3 bytes @ 0x83
  1761  000183                     	ds	3
  1762  000186                     ipv4_sendFrame@numberOfRequests:
  1763                           	opt stack 0
  1764                           
  1765                           ; 1 bytes @ 0x86
  1766  000186                     	ds	1
  1767  000187                     ipv4_sendFrame@index:
  1768                           	opt stack 0
  1769                           
  1770                           ; 1 bytes @ 0x87
  1771  000187                     	ds	1
  1772  000188                     ipv4_sendFrame@err:
  1773                           	opt stack 0
  1774                           
  1775                           ; 3 bytes @ 0x88
  1776  000188                     	ds	3
  1777  00018B                     handleStackBackgroundTasks@stack:
  1778                           	opt stack 0
  1779                           
  1780                           ; 2 bytes @ 0x8B
  1781  00018B                     	ds	2
  1782  00018D                     
  1783                           ; 1 bytes @ 0x8D
  1784  00018D                     	ds	2
  1785  00018F                     ??_main:
  1786                           
  1787                           ; 1 bytes @ 0x8F
  1788  00018F                     	ds	3
  1789                           tblptru	equ	0xFF8
  1790                           tblptrh	equ	0xFF7
  1791                           tblptrl	equ	0xFF6
  1792                           tablat	equ	0xFF5
  1793                           postinc0	equ	0xFEE
  1794                           wreg	equ	0xFE8
  1795                           postdec1	equ	0xFE5
  1796                           fsr1l	equ	0xFE1
  1797                           
  1798                           	psect	cstackBANK0
  1799  000060                     __pcstackBANK0:
  1800                           	opt stack 0
  1801  000060                     ?_ENC424J600_getNextPacketPointer:
  1802                           	opt stack 0
  1803  000060                     ?_ethernetController_getDeviceName:
  1804                           	opt stack 0
  1805  000060                     ?_etherTypeToString:
  1806                           	opt stack 0
  1807  000060                     ?_ipProtocolToString:
  1808                           	opt stack 0
  1809  000060                     ?___wmul:
  1810                           	opt stack 0
  1811  000060                     ?___lwdiv:
  1812                           	opt stack 0
  1813  000060                     ?___lwmod:
  1814                           	opt stack 0
  1815  000060                     ?_getMillis:
  1816                           	opt stack 0
  1817  000060                     ?_ipv4_getIPSourceAddress:
  1818                           	opt stack 0
  1819  000060                     ?___llmod:
  1820                           	opt stack 0
  1821  000060                     ?_ENC424J600_updateReceiveStatusVector:
  1822                           	opt stack 0
  1823  000060                     ?_ARP_getEntryFromTable:
  1824                           	opt stack 0
  1825  000060                     entireMemoryEmpty@i:
  1826                           	opt stack 0
  1827  000060                     entireMemoryFull@i:
  1828                           	opt stack 0
  1829  000060                     memory_txFrameClear@index:
  1830                           	opt stack 0
  1831  000060                     hexToChar@val:
  1832                           	opt stack 0
  1833  000060                     ENC424J600_writeSPI@data:
  1834                           	opt stack 0
  1835  000060                     ENC424J600_readSPI@data:
  1836                           	opt stack 0
  1837  000060                     ENC424J600_setNextPacketPointer@ptr:
  1838                           	opt stack 0
  1839  000060                     ENC424J600_updateReceiveStatusVector@rsv:
  1840                           	opt stack 0
  1841  000060                     mac_setToBroadcast@mac:
  1842                           	opt stack 0
  1843  000060                     mac_isAllZero@mac:
  1844                           	opt stack 0
  1845  000060                     mac_cmp@a:
  1846                           	opt stack 0
  1847  000060                     mac_setAllZero@mac:
  1848                           	opt stack 0
  1849  000060                     etherTypeToString@ethertype:
  1850                           	opt stack 0
  1851  000060                     ipv4_calculateHeaderChecksum@header:
  1852                           	opt stack 0
  1853  000060                     ipv4_cmp@a:
  1854                           	opt stack 0
  1855  000060                     ipv4_isAllZero@ip:
  1856                           	opt stack 0
  1857  000060                     ipv4_setToAllZero@ip:
  1858                           	opt stack 0
  1859  000060                     ___wmul@multiplier:
  1860                           	opt stack 0
  1861  000060                     ___lwdiv@dividend:
  1862                           	opt stack 0
  1863  000060                     ___lwmod@dividend:
  1864                           	opt stack 0
  1865  000060                     ___llmod@dividend:
  1866                           	opt stack 0
  1867  000060                     checkForOverlapSwitched@a:
  1868                           	opt stack 0
  1869  000060                     ipv4_writeHeaderIntoBuffer@header:
  1870                           	opt stack 0
  1871                           
  1872                           ; 23 bytes @ 0x0
  1873  000060                     	ds	1
  1874  000061                     ?_hexToString:
  1875                           	opt stack 0
  1876  000061                     hexToString@val:
  1877                           	opt stack 0
  1878                           
  1879                           ; 4 bytes @ 0x1
  1880  000061                     	ds	1
  1881  000062                     ??_ENC424J600_writeSPI:
  1882  000062                     ??_ENC424J600_readSPI:
  1883  000062                     ??_etherTypeToString:
  1884  000062                     ??_ipv4_calculateHeaderChecksum:
  1885  000062                     ?_ethernetController_getNextPacketPointer:
  1886                           	opt stack 0
  1887  000062                     mac_setToBroadcast@i:
  1888                           	opt stack 0
  1889  000062                     mac_isAllZero@i:
  1890                           	opt stack 0
  1891  000062                     mac_setAllZero@i:
  1892                           	opt stack 0
  1893  000062                     ipProtocolToString@protocol:
  1894                           	opt stack 0
  1895  000062                     ipv4_isAllZero@i:
  1896                           	opt stack 0
  1897  000062                     ipv4_setToAllZero@i:
  1898                           	opt stack 0
  1899  000062                     mac_cmp@b:
  1900                           	opt stack 0
  1901  000062                     ipv4_cmp@b:
  1902                           	opt stack 0
  1903  000062                     ___wmul@multiplicand:
  1904                           	opt stack 0
  1905  000062                     ___lwdiv@divisor:
  1906                           	opt stack 0
  1907  000062                     ___lwmod@divisor:
  1908                           	opt stack 0
  1909  000062                     ethernetController_getDeviceName@string:
  1910                           	opt stack 0
  1911                           
  1912                           ; 11 bytes @ 0x2
  1913  000062                     	ds	2
  1914  000064                     ___lwdiv@counter:
  1915                           	opt stack 0
  1916  000064                     ___lwmod@counter:
  1917                           	opt stack 0
  1918  000064                     ___wmul@product:
  1919                           	opt stack 0
  1920  000064                     ___llmod@divisor:
  1921                           	opt stack 0
  1922  000064                     ARP_setNewEntry@mac:
  1923                           	opt stack 0
  1924                           
  1925                           ; 6 bytes @ 0x4
  1926  000064                     	ds	1
  1927  000065                     ??_ENC424J600_updateReceiveStatusVector:
  1928  000065                     ??_hexToString:
  1929  000065                     ___lwdiv@quotient:
  1930                           	opt stack 0
  1931                           
  1932                           ; 2 bytes @ 0x5
  1933  000065                     	ds	1
  1934  000066                     ?___lldiv:
  1935                           	opt stack 0
  1936  000066                     mac_cmp@i:
  1937                           	opt stack 0
  1938  000066                     ipv4_cmp@i:
  1939                           	opt stack 0
  1940  000066                     ENC424J600_writeSPI@timeoutCounter:
  1941                           	opt stack 0
  1942  000066                     ENC424J600_readSPI@timeoutCounter:
  1943                           	opt stack 0
  1944  000066                     ___lldiv@dividend:
  1945                           	opt stack 0
  1946                           
  1947                           ; 4 bytes @ 0x6
  1948  000066                     	ds	1
  1949  000067                     ?_ipAdressToString:
  1950                           	opt stack 0
  1951  000067                     ARP_getEntryFromTable@index:
  1952                           	opt stack 0
  1953  000067                     ipAdressToString@ip:
  1954                           	opt stack 0
  1955  000067                     ARP_checkForEntry@ip:
  1956                           	opt stack 0
  1957                           
  1958                           ; 4 bytes @ 0x7
  1959  000067                     	ds	1
  1960  000068                     ___llmod@counter:
  1961                           	opt stack 0
  1962                           
  1963                           ; 1 bytes @ 0x8
  1964  000068                     	ds	1
  1965  000069                     hexToString@pointer:
  1966                           	opt stack 0
  1967  000069                     checkForOverlapSwitched@b:
  1968                           	opt stack 0
  1969                           
  1970                           ; 9 bytes @ 0x9
  1971  000069                     	ds	1
  1972  00006A                     ENC424J600_writeSingleByte@opcode:
  1973                           	opt stack 0
  1974  00006A                     ENC424J600_writeControlRegisterUnbanked@data:
  1975                           	opt stack 0
  1976  00006A                     ENC424J600_readControlRegisterUnbanked@data:
  1977                           	opt stack 0
  1978  00006A                     ENC424J600_setGPDATAWritePointer@addr:
  1979                           	opt stack 0
  1980  00006A                     ENC424J600_setERXDATAReadPointer@addr:
  1981                           	opt stack 0
  1982  00006A                     ARP_setNewEntry@ip:
  1983                           	opt stack 0
  1984  00006A                     ___lldiv@divisor:
  1985                           	opt stack 0
  1986                           
  1987                           ; 4 bytes @ 0xA
  1988  00006A                     	ds	1
  1989  00006B                     ??_ipAdressToString:
  1990  00006B                     ARP_checkForEntry@index:
  1991                           	opt stack 0
  1992                           
  1993                           ; 2 bytes @ 0xB
  1994  00006B                     	ds	1
  1995  00006C                     ENC424J600_writeControlRegisterUnbanked@addr:
  1996                           	opt stack 0
  1997  00006C                     ENC424J600_readControlRegisterUnbanked@addr:
  1998                           	opt stack 0
  1999  00006C                     ENC424J600_setGPDATAWritePointer@opcode:
  2000                           	opt stack 0
  2001  00006C                     ENC424J600_setERXDATAReadPointer@opcode:
  2002                           	opt stack 0
  2003  00006C                     ENC424J600_updateReceiveStatusVector@receiveStatusVector:
  2004                           	opt stack 0
  2005                           
  2006                           ; 5 bytes @ 0xC
  2007  00006C                     	ds	1
  2008  00006D                     ??_ARP_checkForEntry:
  2009  00006D                     ENC424J600_writeControlRegisterUnbanked@opcode:
  2010                           	opt stack 0
  2011  00006D                     ENC424J600_readControlRegisterUnbanked@opcode:
  2012                           	opt stack 0
  2013  00006D                     ENC424J600_setGPDATAWritePointer@lowByte:
  2014                           	opt stack 0
  2015  00006D                     ENC424J600_setERXDATAReadPointer@lowByte:
  2016                           	opt stack 0
  2017                           
  2018                           ; 1 bytes @ 0xD
  2019  00006D                     	ds	1
  2020  00006E                     ??_ENC424J600_clearInterruptFlag:
  2021  00006E                     ?_ENC424J600_getInterruptFlags:
  2022                           	opt stack 0
  2023  00006E                     ?_ethernetController_softReset:
  2024                           	opt stack 0
  2025  00006E                     ?_ethernetController_checkDeviceId:
  2026                           	opt stack 0
  2027  00006E                     ?_ethernetController_getMacAddress:
  2028                           	opt stack 0
  2029  00006E                     ethernetController_getSiliconRevision@data:
  2030                           	opt stack 0
  2031  00006E                     ethernetController_setLEDConfig@conf:
  2032                           	opt stack 0
  2033  00006E                     ENC424J600_getPacketCount@lowByte:
  2034                           	opt stack 0
  2035  00006E                     ENC424J600_setGPDATAWritePointer@highByte:
  2036                           	opt stack 0
  2037  00006E                     ENC424J600_setERXDATAReadPointer@highByte:
  2038                           	opt stack 0
  2039  00006E                     ENC424J600_enableAutoMACInsertion@temp:
  2040                           	opt stack 0
  2041  00006E                     ENC424J600_readPHYRegister@data:
  2042                           	opt stack 0
  2043  00006E                     ENC424J600_setTXLength@len:
  2044                           	opt stack 0
  2045  00006E                     ENC424J600_setTXStartAddress@addr:
  2046                           	opt stack 0
  2047  00006E                     ENC424J600_setRXBufferStartAddress@addr:
  2048                           	opt stack 0
  2049  00006E                     ENC424J600_setRXTailPointer@addr:
  2050                           	opt stack 0
  2051  00006E                     ARP_setNewEntry@timestamp:
  2052                           	opt stack 0
  2053  00006E                     ipv4_calculateHeaderChecksum@sum:
  2054                           	opt stack 0
  2055  00006E                     ___lldiv@quotient:
  2056                           	opt stack 0
  2057                           
  2058                           ; 4 bytes @ 0xE
  2059  00006E                     	ds	1
  2060  00006F                     ??_ethernetController_updateNextPacketPointer:
  2061  00006F                     ?_ethernetController_getEtherTypeField:
  2062                           	opt stack 0
  2063  00006F                     ?_ethernetController_getSourceMACAddress:
  2064                           	opt stack 0
  2065  00006F                     ethernetController_setLEDConfig@LED:
  2066                           	opt stack 0
  2067  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  2068                           	opt stack 0
  2069  00006F                     ipAdressToString@ones:
  2070                           	opt stack 0
  2071  00006F                     ethernetController_writeDestinationMACAddress@addr:
  2072                           	opt stack 0
  2073  00006F                     ethernetController_streamToTransmitBuffer@field:
  2074                           	opt stack 0
  2075  00006F                     ethernetController_getSourceMACAddress@field:
  2076                           	opt stack 0
  2077  00006F                     ethernetController_getEtherTypeField@field:
  2078                           	opt stack 0
  2079                           
  2080                           ; 9 bytes @ 0xF
  2081  00006F                     	ds	1
  2082  000070                     ??_ENC424J600_getInterruptFlags:
  2083  000070                     ??_ENC424J600_readPHYRegister:
  2084  000070                     ethernetController_setLEDConfig@data:
  2085                           	opt stack 0
  2086  000070                     ENC424J600_setTXLength@lowByte:
  2087                           	opt stack 0
  2088  000070                     ENC424J600_setTXStartAddress@lowByte:
  2089                           	opt stack 0
  2090  000070                     ENC424J600_setRXBufferStartAddress@lowByte:
  2091                           	opt stack 0
  2092  000070                     ENC424J600_setRXTailPointer@lowByte:
  2093                           	opt stack 0
  2094  000070                     ENC424J600_clearInterruptFlag@flag:
  2095                           	opt stack 0
  2096                           
  2097                           ; 1 bytes @ 0x10
  2098  000070                     	ds	1
  2099  000071                     ??_ethernetController_softReset:
  2100  000071                     ?_ethernetController_getRSV:
  2101                           	opt stack 0
  2102  000071                     ethernetController_checkDeviceId@data:
  2103                           	opt stack 0
  2104  000071                     ENC424J600_setTXLength@highByte:
  2105                           	opt stack 0
  2106  000071                     ENC424J600_setTXStartAddress@highByte:
  2107                           	opt stack 0
  2108  000071                     ENC424J600_setRXBufferStartAddress@highByte:
  2109                           	opt stack 0
  2110  000071                     ENC424J600_setRXTailPointer@highByte:
  2111                           	opt stack 0
  2112  000071                     ENC424J600_clearInterruptFlag@temp:
  2113                           	opt stack 0
  2114  000071                     ethernetController_getRSV@address:
  2115                           	opt stack 0
  2116  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  2117                           	opt stack 0
  2118                           
  2119                           ; 9 bytes @ 0x11
  2120  000071                     	ds	1
  2121  000072                     ethernetController_softReset@comFailCount:
  2122                           	opt stack 0
  2123  000072                     ethernetController_clearInterruptFlag@flag:
  2124                           	opt stack 0
  2125  000072                     ___lldiv@counter:
  2126                           	opt stack 0
  2127  000072                     ethernetController_streamFromRXBuffer@startAddress:
  2128                           	opt stack 0
  2129  000072                     ethernetController_dropPacket@frame:
  2130                           	opt stack 0
  2131  000072                     ethernetController_checkDeviceId@err:
  2132                           	opt stack 0
  2133  000072                     ethernetController_sendPacket@field:
  2134                           	opt stack 0
  2135  000072                     checkForOverlap@a:
  2136                           	opt stack 0
  2137                           
  2138                           ; 9 bytes @ 0x12
  2139  000072                     	ds	1
  2140  000073                     ?_intToString:
  2141                           	opt stack 0
  2142  000073                     ethernetController_softReset@dataToSend:
  2143                           	opt stack 0
  2144  000073                     intToString@val:
  2145                           	opt stack 0
  2146  000073                     ipAdressToString@tens:
  2147                           	opt stack 0
  2148                           
  2149                           ; 4 bytes @ 0x13
  2150  000073                     	ds	1
  2151  000074                     ethernetController_streamFromRXBuffer@startEnd:
  2152                           	opt stack 0
  2153  000074                     ethernetController_getMacAddress@mac:
  2154                           	opt stack 0
  2155                           
  2156                           ; 6 bytes @ 0x14
  2157  000074                     	ds	1
  2158  000075                     ethernetController_streamFromRXBuffer@opcode:
  2159                           	opt stack 0
  2160  000075                     ARP_checkForEntry@i:
  2161                           	opt stack 0
  2162  000075                     ethernetController_softReset@receivedData:
  2163                           	opt stack 0
  2164  000075                     ethernetController_updateNextPacketPointer@nextPktPointer:
  2165                           	opt stack 0
  2166  000075                     ethernetController_writeDestinationMACAddress@field:
  2167                           	opt stack 0
  2168                           
  2169                           ; 9 bytes @ 0x15
  2170  000075                     	ds	1
  2171  000076                     ethernetController_getRSV@opcode:
  2172                           	opt stack 0
  2173  000076                     ethernetController_streamFromRXBuffer@temp:
  2174                           	opt stack 0
  2175  000076                     ENC424J600_readPHYRegister@addr:
  2176                           	opt stack 0
  2177  000076                     ENC424J600_getInterruptFlags@low:
  2178                           	opt stack 0
  2179  000076                     ARP_setNewEntry@maxSeconds:
  2180                           	opt stack 0
  2181  000076                     ipv4_setIPSourceAddress@ip:
  2182                           	opt stack 0
  2183                           
  2184                           ; 4 bytes @ 0x16
  2185  000076                     	ds	1
  2186  000077                     ??_intToString:
  2187  000077                     ?_ipv4_parseHeader:
  2188                           	opt stack 0
  2189  000077                     ?_ARP_parseFromRXBuffer:
  2190                           	opt stack 0
  2191  000077                     ethernetController_getRSV@i:
  2192                           	opt stack 0
  2193  000077                     ethernetController_updateNextPacketPointer@opcode:
  2194                           	opt stack 0
  2195  000077                     ENC424J600_readPHYRegister@PHYaddress:
  2196                           	opt stack 0
  2197  000077                     ENC424J600_getInterruptFlags@high:
  2198                           	opt stack 0
  2199  000077                     ARP_parseFromRXBuffer@frame:
  2200                           	opt stack 0
  2201  000077                     ipv4_writeHeaderIntoBuffer@ptr:
  2202                           	opt stack 0
  2203  000077                     ipv4_parseHeader@field:
  2204                           	opt stack 0
  2205  000077                     ethernetController_softReset@err:
  2206                           	opt stack 0
  2207  000077                     ipAdressToString@hundreds:
  2208                           	opt stack 0
  2209                           
  2210                           ; 4 bytes @ 0x17
  2211  000077                     	ds	1
  2212  000078                     ??_ethernetController_streamToTransmitBuffer:
  2213  000078                     ??_ethernetController_getEtherTypeField:
  2214  000078                     ?_ethernetController_pollInterruptFlags:
  2215                           	opt stack 0
  2216  000078                     ethernetController_getSourceMACAddress@opcode:
  2217                           	opt stack 0
  2218  000078                     ethernetController_updateNextPacketPointer@newPointerL:
  2219                           	opt stack 0
  2220  000078                     ENC424J600_readPHYRegister@unusedBits:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x18
  2224  000078                     	ds	1
  2225  000079                     ??_ipv4_writeHeaderIntoBuffer:
  2226  000079                     ethernetController_updateNextPacketPointer@newPointerH:
  2227                           	opt stack 0
  2228  000079                     ENC424J600_readPHYRegister@timeoutCounter:
  2229                           	opt stack 0
  2230  000079                     ethernetController_getSourceMACAddress@sourceAddress:
  2231                           	opt stack 0
  2232                           
  2233                           ; 6 bytes @ 0x19
  2234  000079                     	ds	1
  2235  00007A                     ??_ethernetController_pollInterruptFlags:
  2236  00007A                     ?_macToString:
  2237                           	opt stack 0
  2238  00007A                     ?_ethernetController_init:
  2239                           	opt stack 0
  2240  00007A                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  2241                           	opt stack 0
  2242  00007A                     ARP_setNewEntry@oldestIndex:
  2243                           	opt stack 0
  2244  00007A                     ipv4_setIPSourceAddress@numberOfProbes:
  2245                           	opt stack 0
  2246  00007A                     srand@x:
  2247                           	opt stack 0
  2248  00007A                     macToString@addr:
  2249                           	opt stack 0
  2250                           
  2251                           ; 6 bytes @ 0x1A
  2252  00007A                     	ds	1
  2253  00007B                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  2254                           	opt stack 0
  2255  00007B                     ipAdressToString@pointer:
  2256                           	opt stack 0
  2257  00007B                     ARP_setNewEntry@i:
  2258                           	opt stack 0
  2259  00007B                     ipv4_setIPSourceAddress@timeBetweenProbes:
  2260                           	opt stack 0
  2261  00007B                     ethernetController_pollInterruptFlags@flags:
  2262                           	opt stack 0
  2263  00007B                     checkForOverlap@b:
  2264                           	opt stack 0
  2265                           
  2266                           ; 9 bytes @ 0x1B
  2267  00007B                     	ds	1
  2268  00007C                     ethernetController_streamToTransmitBuffer@data:
  2269                           	opt stack 0
  2270  00007C                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  2271                           	opt stack 0
  2272  00007C                     ipAdressToString@i:
  2273                           	opt stack 0
  2274  00007C                     ipv4_setIPSourceAddress@index:
  2275                           	opt stack 0
  2276  00007C                     ethernetController_getEtherTypeField@ethertype:
  2277                           	opt stack 0
  2278  00007C                     ARP_initTable@mac:
  2279                           	opt stack 0
  2280                           
  2281                           ; 6 bytes @ 0x1C
  2282  00007C                     	ds	1
  2283  00007D                     ethernetController_streamToTransmitBuffer@opcode:
  2284                           	opt stack 0
  2285  00007D                     ENC424J600_readPHYRegister@lowByte:
  2286                           	opt stack 0
  2287  00007D                     ethernetController_pollInterruptFlags@reg:
  2288                           	opt stack 0
  2289  00007D                     ethernetController_init@err:
  2290                           	opt stack 0
  2291  00007D                     ipv4_setIPSourceAddress@err:
  2292                           	opt stack 0
  2293                           
  2294                           ; 3 bytes @ 0x1D
  2295  00007D                     	ds	1
  2296  00007E                     ethernetController_getEtherTypeField@opcode:
  2297                           	opt stack 0
  2298  00007E                     ENC424J600_readPHYRegister@highByte:
  2299                           	opt stack 0
  2300  00007E                     ethernetController_writeDestinationMACAddress@data:
  2301                           	opt stack 0
  2302  00007E                     ipv4_streamToTransmissionBuffer@packet:
  2303                           	opt stack 0
  2304                           
  2305                           ; 66 bytes @ 0x1E
  2306  00007E                     	ds	1
  2307  00007F                     ethernetController_getSourceMACAddress@temp:
  2308                           	opt stack 0
  2309  00007F                     ethernetController_getEtherTypeField@lowByte:
  2310                           	opt stack 0
  2311  00007F                     ENC424J600_readPHYRegister@temp:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x1F
  2315  00007F                     	ds	1
  2316  000080                     ??_macToString:
  2317  000080                     ethernetController_getSourceMACAddress@i:
  2318                           	opt stack 0
  2319  000080                     ethernetController_getEtherTypeField@highByte:
  2320                           	opt stack 0
  2321  000080                     ethernetController_updateLinkStatus@state:
  2322                           	opt stack 0
  2323                           
  2324                           ; 2 bytes @ 0x20
  2325  000080                     	ds	1
  2326  000081                     intToString@tens:
  2327                           	opt stack 0
  2328  000081                     macToString@address:
  2329                           	opt stack 0
  2330                           
  2331                           ; 18 bytes @ 0x21
  2332  000081                     	ds	1
  2333  000082                     ethernetController_updateLinkStatus@temp:
  2334                           	opt stack 0
  2335  000082                     intToString@ones:
  2336                           	opt stack 0
  2337  000082                     ARP_initTable@ip:
  2338                           	opt stack 0
  2339                           
  2340                           ; 4 bytes @ 0x22
  2341  000082                     	ds	1
  2342  000083                     ethernetController_updateLinkStatus@temp16:
  2343                           	opt stack 0
  2344  000083                     intToString@hundreds:
  2345                           	opt stack 0
  2346                           
  2347                           ; 1 bytes @ 0x23
  2348  000083                     	ds	1
  2349  000084                     ?_memory_txFrameRequest:
  2350                           	opt stack 0
  2351  000084                     ethernetController_writeDestinationMACAddress@opcode:
  2352                           	opt stack 0
  2353  000084                     intToString@thousands:
  2354                           	opt stack 0
  2355  000084                     memory_txFrameRequest@length:
  2356                           	opt stack 0
  2357                           
  2358                           ; 2 bytes @ 0x24
  2359  000084                     	ds	1
  2360  000085                     ethernetController_writeDestinationMACAddress@i_630:
  2361                           	opt stack 0
  2362  000085                     intToString@tenthousands:
  2363                           	opt stack 0
  2364                           
  2365                           ; 1 bytes @ 0x25
  2366  000085                     	ds	1
  2367  000086                     ethernetController_writeDestinationMACAddress@i:
  2368                           	opt stack 0
  2369  000086                     intToString@pointer:
  2370                           	opt stack 0
  2371  000086                     ARP_initTable@i:
  2372                           	opt stack 0
  2373                           
  2374                           ; 1 bytes @ 0x26
  2375  000086                     	ds	7
  2376  00008D                     ??_memory_txFrameRequest:
  2377                           
  2378                           ; 1 bytes @ 0x2D
  2379  00008D                     	ds	1
  2380  00008E                     ??_ipv4_parseHeader:
  2381                           
  2382                           ; 1 bytes @ 0x2E
  2383  00008E                     	ds	1
  2384  00008F                     ipv4_parseHeader@i:
  2385                           	opt stack 0
  2386                           
  2387                           ; 1 bytes @ 0x2F
  2388  00008F                     	ds	1
  2389  000090                     ipv4_parseHeader@i_3618:
  2390                           	opt stack 0
  2391                           
  2392                           ; 1 bytes @ 0x30
  2393  000090                     	ds	1
  2394  000091                     ipv4_parseHeader@temp:
  2395                           	opt stack 0
  2396                           
  2397                           ; 1 bytes @ 0x31
  2398  000091                     	ds	1
  2399  000092                     ipv4_parseHeader@ip:
  2400                           	opt stack 0
  2401                           
  2402                           ; 23 bytes @ 0x32
  2403  000092                     	ds	1
  2404  000093                     macToString@firstDigit:
  2405                           	opt stack 0
  2406  000093                     _memory_txFrameRequest$1163:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x33
  2410  000093                     	ds	1
  2411  000094                     macToString@secondDigit:
  2412                           	opt stack 0
  2413                           
  2414                           ; 1 bytes @ 0x34
  2415  000094                     	ds	1
  2416  000095                     memory_txFrameRequest@fNoOverlapMarker:
  2417                           	opt stack 0
  2418  000095                     macToString@i:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x35
  2422  000095                     	ds	1
  2423  000096                     memory_txFrameRequest@i:
  2424                           	opt stack 0
  2425                           
  2426                           ; 1 bytes @ 0x36
  2427  000096                     	ds	1
  2428  000097                     ??_ARP_parseFromRXBuffer:
  2429  000097                     memory_txFrameRequest@i_1167:
  2430                           	opt stack 0
  2431  000097                     macToString@j:
  2432                           	opt stack 0
  2433                           
  2434                           ; 1 bytes @ 0x37
  2435  000097                     	ds	1
  2436  000098                     UARTTransmitText@str:
  2437                           	opt stack 0
  2438  000098                     memory_txFrameRequest@field:
  2439                           	opt stack 0
  2440                           
  2441                           ; 9 bytes @ 0x38
  2442  000098                     	ds	2
  2443  00009A                     ARP_parseFromRXBuffer@i:
  2444                           	opt stack 0
  2445  00009A                     ipv4_checkHeaderChecksum@header:
  2446                           	opt stack 0
  2447  00009A                     printErrorMessage@err:
  2448                           	opt stack 0
  2449  00009A                     UARTTransmitInt@val:
  2450                           	opt stack 0
  2451  00009A                     printEthernetState@state:
  2452                           	opt stack 0
  2453                           
  2454                           ; 15 bytes @ 0x3A
  2455  00009A                     	ds	1
  2456  00009B                     ARP_parseFromRXBuffer@i_2971:
  2457                           	opt stack 0
  2458                           
  2459                           ; 1 bytes @ 0x3B
  2460  00009B                     	ds	1
  2461  00009C                     ??_ipv4_checkHeaderChecksum:
  2462  00009C                     ARP_parseFromRXBuffer@i_2972:
  2463                           	opt stack 0
  2464                           
  2465                           ; 1 bytes @ 0x3C
  2466  00009C                     	ds	1
  2467  00009D                     ??_printErrorMessage:
  2468  00009D                     ARP_parseFromRXBuffer@i_2973:
  2469                           	opt stack 0
  2470                           
  2471                           ; 1 bytes @ 0x3D
  2472  00009D                     	ds	1
  2473  00009E                     ARP_parseFromRXBuffer@offset:
  2474                           	opt stack 0
  2475  00009E                     ipv4_checkHeaderChecksum@testHeader:
  2476                           	opt stack 0
  2477                           
  2478                           ; 23 bytes @ 0x3E
  2479  00009E                     	ds	2
  2480  0000A0                     ARP_parseFromRXBuffer@arp:
  2481                           	opt stack 0
  2482                           
  2483                           ; 32 bytes @ 0x40
  2484  0000A0                     	ds	1
  2485  0000A1                     memory_txFrameRequest@freeIndex:
  2486                           	opt stack 0
  2487                           
  2488                           ; 1 bytes @ 0x41
  2489  0000A1                     	ds	1
  2490  0000A2                     ethernet_txFrameRequest@frame:
  2491                           	opt stack 0
  2492                           
  2493                           ; 2 bytes @ 0x42
  2494  0000A2                     	ds	2
  2495  0000A4                     ethernet_txFrameRequest@err:
  2496                           	opt stack 0
  2497                           
  2498                           ; 3 bytes @ 0x44
  2499  0000A4                     	ds	3
  2500  0000A7                     ipv4_txFrameRequest@packet:
  2501                           	opt stack 0
  2502  0000A7                     ARP_send@arp:
  2503                           	opt stack 0
  2504                           
  2505                           ; 32 bytes @ 0x47
  2506  0000A7                     	ds	2
  2507  0000A9                     ??_ipv4_txFrameRequest:
  2508                           
  2509                           ; 1 bytes @ 0x49
  2510  0000A9                     	ds	12
  2511  0000B5                     ipv4_handleNewPacket@frame:
  2512                           	opt stack 0
  2513                           
  2514                           ; 2 bytes @ 0x55
  2515  0000B5                     	ds	2
  2516  0000B7                     ??_ipv4_handleNewPacket:
  2517                           
  2518                           ; 1 bytes @ 0x57
  2519  0000B7                     	ds	2
  2520  0000B9                     ipv4_handleNewPacket@headerField:
  2521                           	opt stack 0
  2522                           
  2523                           ; 9 bytes @ 0x59
  2524  0000B9                     	ds	7
  2525  0000C0                     ipv4_streamToTransmissionBuffer@ethernetPacketLength:
  2526                           	opt stack 0
  2527                           
  2528                           ; 2 bytes @ 0x60
  2529  0000C0                     	ds	2
  2530  0000C2                     ipv4_streamToTransmissionBuffer@data:
  2531                           	opt stack 0
  2532  0000C2                     ipv4_handleNewPacket@ip:
  2533                           	opt stack 0
  2534                           
  2535                           ; 23 bytes @ 0x62
  2536  0000C2                     	ds	5
  2537  0000C7                     ARP_send@destination:
  2538                           	opt stack 0
  2539                           
  2540                           ; 6 bytes @ 0x67
  2541  0000C7                     	ds	6
  2542  0000CD                     ARP_send@i:
  2543                           	opt stack 0
  2544                           
  2545                           ; 1 bytes @ 0x6D
  2546  0000CD                     	ds	1
  2547  0000CE                     ARP_send@i_3048:
  2548                           	opt stack 0
  2549                           
  2550                           ; 1 bytes @ 0x6E
  2551  0000CE                     	ds	1
  2552  0000CF                     ARP_send@i_3049:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x6F
  2556  0000CF                     	ds	1
  2557  0000D0                     ARP_send@i_3050:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x70
  2561  0000D0                     	ds	1
  2562  0000D1                     ARP_send@ethFrame:
  2563                           	opt stack 0
  2564                           
  2565                           ; 34 bytes @ 0x71
  2566  0000D1                     	ds	34
  2567  0000F3                     ARP_send@field:
  2568                           	opt stack 0
  2569                           
  2570                           ; 9 bytes @ 0x93
  2571  0000F3                     	ds	9
  2572  0000FC                     ARP_handleNewPacket@frame:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x9C
  2576  0000FC                     	ds	2
  2577  0000FE                     
  2578                           ; 1 bytes @ 0x9E
  2579  0000FE                     	ds	2
  2580                           tblptru	equ	0xFF8
  2581                           tblptrh	equ	0xFF7
  2582                           tblptrl	equ	0xFF6
  2583                           tablat	equ	0xFF5
  2584                           postinc0	equ	0xFEE
  2585                           wreg	equ	0xFE8
  2586                           postdec1	equ	0xFE5
  2587                           fsr1l	equ	0xFE1
  2588                           
  2589                           	psect	cstackCOMRAM
  2590  000001                     __pcstackCOMRAM:
  2591                           	opt stack 0
  2592  000001                     ?i2___lwdiv:
  2593                           	opt stack 0
  2594  000001                     buttonHandler@state:
  2595                           	opt stack 0
  2596  000001                     i2___lwdiv@dividend:
  2597                           	opt stack 0
  2598                           
  2599                           ; 2 bytes @ 0x0
  2600  000001                     	ds	2
  2601  000003                     i2___lwdiv@divisor:
  2602                           	opt stack 0
  2603  000003                     buttonHandler@debounceValue:
  2604                           	opt stack 0
  2605                           
  2606                           ; 4 bytes @ 0x2
  2607  000003                     	ds	2
  2608  000005                     i2___lwdiv@quotient:
  2609                           	opt stack 0
  2610                           
  2611                           ; 2 bytes @ 0x4
  2612  000005                     	ds	2
  2613  000007                     i2___lwdiv@counter:
  2614                           	opt stack 0
  2615                           
  2616                           ; 1 bytes @ 0x6
  2617  000007                     	ds	1
  2618  000008                     parseNumber@numberToDisplay:
  2619                           	opt stack 0
  2620                           
  2621                           ; 2 bytes @ 0x7
  2622  000008                     	ds	2
  2623  00000A                     parseNumber@digit:
  2624                           	opt stack 0
  2625                           
  2626                           ; 1 bytes @ 0x9
  2627  00000A                     	ds	1
  2628  00000B                     ??_parseNumber:
  2629                           
  2630                           ; 1 bytes @ 0xA
  2631  00000B                     	ds	1
  2632  00000C                     parseNumber@ones:
  2633                           	opt stack 0
  2634                           
  2635                           ; 1 bytes @ 0xB
  2636  00000C                     	ds	1
  2637  00000D                     parseNumber@tens:
  2638                           	opt stack 0
  2639                           
  2640                           ; 1 bytes @ 0xC
  2641  00000D                     	ds	1
  2642  00000E                     parseNumber@hundreds:
  2643                           	opt stack 0
  2644                           
  2645                           ; 1 bytes @ 0xD
  2646  00000E                     	ds	1
  2647  00000F                     sevenSegmentUpdate@numberToDisplay:
  2648                           	opt stack 0
  2649                           
  2650                           ; 2 bytes @ 0xE
  2651  00000F                     	ds	2
  2652  000011                     ??_sevenSegmentUpdate:
  2653                           
  2654                           ; 1 bytes @ 0x10
  2655  000011                     	ds	2
  2656  000013                     _sevenSegmentUpdate$2455:
  2657                           	opt stack 0
  2658                           
  2659                           ; 2 bytes @ 0x12
  2660  000013                     	ds	2
  2661  000015                     sevenSegmentUpdate@i:
  2662                           	opt stack 0
  2663                           
  2664                           ; 1 bytes @ 0x14
  2665  000015                     	ds	1
  2666  000016                     ??_ISR:
  2667                           
  2668                           ; 1 bytes @ 0x15
  2669  000016                     	ds	19
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           postinc0	equ	0xFEE
  2675                           wreg	equ	0xFE8
  2676                           postdec1	equ	0xFE5
  2677                           fsr1l	equ	0xFE1
  2678                           
  2679 ;;
  2680 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2681 ;;
  2682 ;; *************** function _main *****************
  2683 ;; Defined at:
  2684 ;;		line 33 in file "src/system/main.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;		None
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;  i               1   38[BANK3 ] unsigned char 
  2689 ;;  headerBuf      32    4[BANK3 ] unsigned char [32]
  2690 ;;  IPsource        4   46[BANK3 ] struct ipv4_address
  2691 ;;  IPdestinatio    4   42[BANK3 ] struct ipv4_address
  2692 ;;  prescaler       4    0[BANK3 ] unsigned long 
  2693 ;;  err             3   39[BANK3 ] struct error
  2694 ;;  oldState        1    0        unsigned char 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2704 ;;      Params:         0       0       0       0       0       0       0       0       0
  2705 ;;      Locals:         0       0       0       0      50       0       0       0       0
  2706 ;;      Temps:          0       0       3       0       0       0       0       0       0
  2707 ;;      Totals:         0       0       3       0      50       0       0       0       0
  2708 ;;Total ram usage:       53 bytes
  2709 ;; Hardware stack levels required when called:   14
  2710 ;; This function calls:
  2711 ;;		_ARP_initTable
  2712 ;;		_UARTInit
  2713 ;;		_UARTTransmitInt
  2714 ;;		_UARTTransmitText
  2715 ;;		_ethernetController_checkDeviceId
  2716 ;;		_ethernetController_getCurrentPacketCount
  2717 ;;		_ethernetController_getDeviceName
  2718 ;;		_ethernetController_getMacAddress
  2719 ;;		_ethernetController_getSiliconRevision
  2720 ;;		_ethernetController_init
  2721 ;;		_ethernetController_setLEDConfig
  2722 ;;		_handleStackBackgroundTasks
  2723 ;;		_hexToString
  2724 ;;		_ipv4_calculateHeaderChecksum
  2725 ;;		_ipv4_setIPSourceAddress
  2726 ;;		_ipv4_streamToTransmissionBuffer
  2727 ;;		_ipv4_txFrameRequest
  2728 ;;		_ipv4_writeHeaderIntoBuffer
  2729 ;;		_macToString
  2730 ;;		_printErrorMessage
  2731 ;;		_printEthernetState
  2732 ;;		_sevenSegmentInit
  2733 ;;		_srand
  2734 ;; This function is called by:
  2735 ;;		Startup code after reset
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           	psect	text0
  2740  000AE4                     __ptext0:
  2741                           	opt stack 0
  2742  000AE4                     _main:
  2743                           	opt stack 17
  2744                           
  2745                           ;main.c: 36: OSCCONbits.SCS = 0b00;
  2746                           
  2747                           ;incstack = 0
  2748  000AE4  0EFC               	movlw	-4
  2749  000AE6  16D3               	andwf	4051,f,c	;volatile
  2750                           
  2751                           ;main.c: 37: OSCCONbits.IRCF = 0b1110;
  2752  000AE8  50D3               	movf	4051,w,c	;volatile
  2753  000AEA  0B8F               	andlw	-113
  2754  000AEC  0960               	iorlw	96
  2755  000AEE  6ED3               	movwf	4051,c	;volatile
  2756                           
  2757                           ;main.c: 38: OSCCON2bits.PLLEN = 0b1;
  2758  000AF0  88D2               	bsf	4050,4,c	;volatile
  2759                           
  2760                           ;main.c: 41: INTCONbits.GIE = 0;
  2761  000AF2  9EF2               	bcf	intcon,7,c	;volatile
  2762                           
  2763                           ;main.c: 42: INTCONbits.TMR0IE = 1;
  2764  000AF4  8AF2               	bsf	intcon,5,c	;volatile
  2765                           
  2766                           ;main.c: 43: INTCON3bits.INT2IE = 1;
  2767  000AF6  88F0               	bsf	intcon3,4,c	;volatile
  2768                           
  2769                           ;main.c: 44: RCIP = 0;
  2770  000AF8  9A9F               	bcf	3999,5,c	;volatile
  2771                           
  2772                           ;main.c: 45: RCIE = 1;
  2773  000AFA  8A9D               	bsf	3997,5,c	;volatile
  2774                           
  2775                           ;main.c: 46: INTCONbits.PEIE = 1;
  2776  000AFC  8CF2               	bsf	intcon,6,c	;volatile
  2777                           
  2778                           ;main.c: 50: T0CONbits.TMR0ON = 1;
  2779  000AFE  8ED5               	bsf	4053,7,c	;volatile
  2780                           
  2781                           ;main.c: 51: T0CONbits.T08BIT = 1;
  2782  000B00  8CD5               	bsf	4053,6,c	;volatile
  2783                           
  2784                           ;main.c: 52: T0CONbits.T0CS = 0;
  2785  000B02  9AD5               	bcf	4053,5,c	;volatile
  2786                           
  2787                           ;main.c: 53: T0CONbits.PSA = 0;
  2788  000B04  96D5               	bcf	4053,3,c	;volatile
  2789                           
  2790                           ;main.c: 54: T0CONbits.T0PS = 0b101;
  2791  000B06  50D5               	movf	4053,w,c	;volatile
  2792  000B08  0BF8               	andlw	-8
  2793  000B0A  0905               	iorlw	5
  2794  000B0C  6ED5               	movwf	4053,c	;volatile
  2795                           
  2796                           ;main.c: 58: T1CONbits.TMR1ON = 1;
  2797  000B0E  80CD               	bsf	4045,0,c	;volatile
  2798                           
  2799                           ;main.c: 59: CCP1CONbits.CCP1M = 0b1011;
  2800  000B10  50BD               	movf	4029,w,c	;volatile
  2801  000B12  0BF0               	andlw	-16
  2802  000B14  090B               	iorlw	11
  2803  000B16  6EBD               	movwf	4029,c	;volatile
  2804                           
  2805                           ;main.c: 60: CCPR1 = 8000;
  2806  000B18  0E1F               	movlw	31
  2807  000B1A  6EBF               	movwf	4031,c	;volatile
  2808  000B1C  0E40               	movlw	64
  2809  000B1E  6EBE               	movwf	4030,c	;volatile
  2810                           
  2811                           ;main.c: 61: PIE1bits.CCP1IE = 1;
  2812  000B20  849D               	bsf	3997,2,c	;volatile
  2813                           
  2814                           ;main.c: 62: INTCONbits.PEIE = 1;
  2815  000B22  8CF2               	bsf	intcon,6,c	;volatile
  2816                           
  2817                           ;main.c: 64: TRISBbits.RB6 = 0;
  2818  000B24  9C93               	bcf	3987,6,c	;volatile
  2819                           
  2820                           ;main.c: 67: UARTInit();
  2821  000B26  EC52  F027         	call	_UARTInit	;wreg free
  2822                           
  2823                           ;main.c: 68: sevenSegmentInit();
  2824  000B2A  EC00  F027         	call	_sevenSegmentInit	;wreg free
  2825                           
  2826                           ;main.c: 69: _delay((unsigned long)((10)*(32000000UL/4000.0)));
  2827  000B2E  0E68               	movlw	104
  2828  000B30  0101               	movlb	1	; () banked
  2829  000B32  6F8F               	movwf	??_main& (0+255),b
  2830  000B34  0EE4               	movlw	228
  2831  000B36                     u11737:
  2832  000B36  2EE8               	decfsz	wreg,f,c
  2833  000B38  D7FE               	bra	u11737
  2834  000B3A  2F8F               	decfsz	??_main& (0+255),f,b
  2835  000B3C  D7FC               	bra	u11737
  2836  000B3E  F000               	nop	
  2837                           
  2838                           ;main.c: 70: UARTTransmitText("\x12");
  2839  000B40  0EFC               	movlw	low STR_23
  2840  000B42  0100               	movlb	0	; () banked
  2841  000B44  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2842  000B46  0E7F               	movlw	high STR_23
  2843  000B48  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2844  000B4A  EC09  F023         	call	_UARTTransmitText	;wreg free
  2845                           
  2846                           ;main.c: 71: if (!RCONbits.TO) {
  2847  000B4E  B6D0               	btfsc	4048,3,c	;volatile
  2848  000B50  D015               	goto	l626
  2849                           
  2850                           ;main.c: 72: UARTTransmitText("------------------------------------------------\n\r");
  2851  000B52  0E61               	movlw	low STR_24
  2852  000B54  0100               	movlb	0	; () banked
  2853  000B56  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2854  000B58  0E7C               	movlw	high STR_24
  2855  000B5A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2856  000B5C  EC09  F023         	call	_UARTTransmitText	;wreg free
  2857                           
  2858                           ;main.c: 73: UARTTransmitText("\a*** CRITICAL ERROR: WATCHDOG CAUSED RESET ***\n\r");
  2859  000B60  0E94               	movlw	low STR_25
  2860  000B62  0100               	movlb	0	; () banked
  2861  000B64  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2862  000B66  0E7C               	movlw	high STR_25
  2863  000B68  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2864  000B6A  EC09  F023         	call	_UARTTransmitText	;wreg free
  2865                           
  2866                           ;main.c: 74: UARTTransmitText("------------------------------------------------\n\r");
  2867  000B6E  0E61               	movlw	low STR_24
  2868  000B70  0100               	movlb	0	; () banked
  2869  000B72  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2870  000B74  0E7C               	movlw	high STR_24
  2871  000B76  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2872  000B78  EC09  F023         	call	_UARTTransmitText	;wreg free
  2873  000B7C                     l626:
  2874                           
  2875                           ;main.c: 75: }
  2876                           ;main.c: 76: UARTTransmitText("FIRMWARE BUILD DATE IS ");
  2877  000B7C  0EEB               	movlw	low STR_27
  2878  000B7E  0100               	movlb	0	; () banked
  2879  000B80  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2880  000B82  0E7D               	movlw	high STR_27
  2881  000B84  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2882  000B86  EC09  F023         	call	_UARTTransmitText	;wreg free
  2883                           
  2884                           ;main.c: 77: UARTTransmitText("Mar 07 2019");
  2885  000B8A  0E59               	movlw	low STR_28
  2886  000B8C  0100               	movlb	0	; () banked
  2887  000B8E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2888  000B90  0E7F               	movlw	high STR_28
  2889  000B92  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2890  000B94  EC09  F023         	call	_UARTTransmitText	;wreg free
  2891                           
  2892                           ;main.c: 78: UARTTransmitText(" ");
  2893  000B98  0E41               	movlw	low (STR_45+18)
  2894  000B9A  0100               	movlb	0	; () banked
  2895  000B9C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2896  000B9E  0E7E               	movlw	high (STR_45+18)
  2897  000BA0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2898  000BA2  EC09  F023         	call	_UARTTransmitText	;wreg free
  2899                           
  2900                           ;main.c: 79: UARTTransmitText("20:14:30");
  2901  000BA6  0E99               	movlw	low STR_30
  2902  000BA8  0100               	movlb	0	; () banked
  2903  000BAA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2904  000BAC  0E7F               	movlw	high STR_30
  2905  000BAE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2906  000BB0  EC09  F023         	call	_UARTTransmitText	;wreg free
  2907                           
  2908                           ;main.c: 80: UARTTransmitText("\n\r");
  2909  000BB4  0EC2               	movlw	low (STR_25+46)
  2910  000BB6  0100               	movlb	0	; () banked
  2911  000BB8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2912  000BBA  0E7C               	movlw	high (STR_25+46)
  2913  000BBC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2914  000BBE  EC09  F023         	call	_UARTTransmitText	;wreg free
  2915                           
  2916                           ;main.c: 81: UARTTransmitText("Initialising Ethernet Controller...\n\r");
  2917  000BC2  0EEC               	movlw	low STR_32
  2918  000BC4  0100               	movlb	0	; () banked
  2919  000BC6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2920  000BC8  0E7C               	movlw	high STR_32
  2921  000BCA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2922  000BCC  EC09  F023         	call	_UARTTransmitText	;wreg free
  2923                           
  2924                           ;main.c: 82: error_t err;
  2925                           ;main.c: 83: err = ethernetController_init();
  2926  000BD0  EC92  F021         	call	_ethernetController_init	;wreg free
  2927  000BD4  C07A  F3C9         	movff	?_ethernetController_init,main@err
  2928  000BD8  C07B  F3CA         	movff	?_ethernetController_init+1,main@err+1
  2929  000BDC  C07C  F3CB         	movff	?_ethernetController_init+2,main@err+2
  2930                           
  2931                           ;main.c: 84: if (err.code != (uint16_t)0)
  2932  000BE0  0103               	movlb	3	; () banked
  2933  000BE2  51CA               	movf	(main@err+1)& (0+255),w,b
  2934  000BE4  11CB               	iorwf	(main@err+2)& (0+255),w,b
  2935  000BE6  B4D8               	btfsc	status,2,c
  2936  000BE8  D008               	goto	l627
  2937                           
  2938                           ; BSR set to: 3
  2939                           ;main.c: 85: printErrorMessage(err);
  2940  000BEA  C3C9  F09A         	movff	main@err,printErrorMessage@err
  2941  000BEE  C3CA  F09B         	movff	main@err+1,printErrorMessage@err+1
  2942  000BF2  C3CB  F09C         	movff	main@err+2,printErrorMessage@err+2
  2943  000BF6  EC28  F017         	call	_printErrorMessage	;wreg free
  2944  000BFA                     l627:
  2945                           
  2946                           ;main.c: 86: err = ethernetController_checkDeviceId();
  2947  000BFA  ECAE  F023         	call	_ethernetController_checkDeviceId	;wreg free
  2948  000BFE  C06E  F3C9         	movff	?_ethernetController_checkDeviceId,main@err
  2949  000C02  C06F  F3CA         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  2950  000C06  C070  F3CB         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  2951                           
  2952                           ;main.c: 87: if (err.code == (uint16_t)0) {
  2953  000C0A  0103               	movlb	3	; () banked
  2954  000C0C  51CA               	movf	(main@err+1)& (0+255),w,b
  2955  000C0E  11CB               	iorwf	(main@err+2)& (0+255),w,b
  2956  000C10  A4D8               	btfss	status,2,c
  2957  000C12  D00F               	goto	l628
  2958                           
  2959                           ; BSR set to: 3
  2960                           ;main.c: 88: UARTTransmitText(ethernetController_getDeviceName());
  2961  000C14  EC90  F026         	call	_ethernetController_getDeviceName	;wreg free
  2962  000C18  C060  F098         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  2963  000C1C  C061  F099         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  2964  000C20  EC09  F023         	call	_UARTTransmitText	;wreg free
  2965                           
  2966                           ;main.c: 89: UARTTransmitText(" detected. ");
  2967  000C24  0E4D               	movlw	low STR_33
  2968  000C26  0100               	movlb	0	; () banked
  2969  000C28  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2970  000C2A  0E7F               	movlw	high STR_33
  2971  000C2C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2972  000C2E  EC09  F023         	call	_UARTTransmitText	;wreg free
  2973  000C32                     l628:
  2974                           
  2975                           ;main.c: 90: }
  2976                           ;main.c: 91: UARTTransmitText("Silicon revision is ");
  2977  000C32  0E1A               	movlw	low STR_34
  2978  000C34  0100               	movlb	0	; () banked
  2979  000C36  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2980  000C38  0E7E               	movlw	high STR_34
  2981  000C3A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2982  000C3C  EC09  F023         	call	_UARTTransmitText	;wreg free
  2983                           
  2984                           ;main.c: 92: UARTTransmitInt(ethernetController_getSiliconRevision());
  2985  000C40  ECD4  F026         	call	_ethernetController_getSiliconRevision	;wreg free
  2986  000C44  0101               	movlb	1	; () banked
  2987  000C46  6F8F               	movwf	??_main& (0+255),b
  2988  000C48  518F               	movf	??_main& (0+255),w,b
  2989  000C4A  0100               	movlb	0	; () banked
  2990  000C4C  6F9A               	movwf	UARTTransmitInt@val& (0+255),b
  2991  000C4E  6B9B               	clrf	(UARTTransmitInt@val+1)& (0+255),b
  2992  000C50  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  2993  000C52  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  2994  000C54  ECA2  F026         	call	_UARTTransmitInt	;wreg free
  2995                           
  2996                           ;main.c: 93: UARTTransmitText(".\n\r");
  2997  000C58  0EDB               	movlw	low (STR_59+1)
  2998  000C5A  0100               	movlb	0	; () banked
  2999  000C5C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3000  000C5E  0E7F               	movlw	high (STR_59+1)
  3001  000C60  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3002  000C62  EC09  F023         	call	_UARTTransmitText	;wreg free
  3003                           
  3004                           ;main.c: 94: UARTTransmitText("Source MAC address is ");
  3005  000C66  0E03               	movlw	low STR_36
  3006  000C68  0100               	movlb	0	; () banked
  3007  000C6A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3008  000C6C  0E7E               	movlw	high STR_36
  3009  000C6E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3010  000C70  EC09  F023         	call	_UARTTransmitText	;wreg free
  3011                           
  3012                           ;main.c: 95: UARTTransmitText(macToString(ethernetController_getMacAddress()));
  3013  000C74  EC58  F021         	call	_ethernetController_getMacAddress	;wreg free
  3014  000C78  CFE9 FFD9          	movff	fsr0l,fsr2l
  3015  000C7C  CFEA FFDA          	movff	fsr0h,fsr2h
  3016  000C80  EE00  F07A         	lfsr	0,macToString@addr
  3017  000C84  0E05               	movlw	5
  3018  000C86                     u11601:
  3019  000C86  CFDB FFEB          	movff	plusw2,plusw0
  3020  000C8A  06E8               	decf	wreg,f,c
  3021  000C8C  E2FC               	bc	u11601
  3022  000C8E  EC68  F019         	call	_macToString	;wreg free
  3023  000C92  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  3024  000C96  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  3025  000C9A  EC09  F023         	call	_UARTTransmitText	;wreg free
  3026                           
  3027                           ;main.c: 96: UARTTransmitText(".\n\r");
  3028  000C9E  0EDB               	movlw	low (STR_59+1)
  3029  000CA0  0100               	movlb	0	; () banked
  3030  000CA2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3031  000CA4  0E7F               	movlw	high (STR_59+1)
  3032  000CA6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3033  000CA8  EC09  F023         	call	_UARTTransmitText	;wreg free
  3034                           
  3035                           ;main.c: 97: UARTTransmitText("Initialisation completed.\n\r");
  3036  000CAC  0ECF               	movlw	low STR_38
  3037  000CAE  0100               	movlb	0	; () banked
  3038  000CB0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3039  000CB2  0E7D               	movlw	high STR_38
  3040  000CB4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3041  000CB6  EC09  F023         	call	_UARTTransmitText	;wreg free
  3042                           
  3043                           ;main.c: 98: UARTTransmitText("------------------------------------------------\n\r");
  3044  000CBA  0E61               	movlw	low STR_24
  3045  000CBC  0100               	movlb	0	; () banked
  3046  000CBE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3047  000CC0  0E7C               	movlw	high STR_24
  3048  000CC2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3049  000CC4  EC09  F023         	call	_UARTTransmitText	;wreg free
  3050                           
  3051                           ;main.c: 100: ARP_initTable();
  3052  000CC8  ECA4  F022         	call	_ARP_initTable	;wreg free
  3053                           
  3054                           ;main.c: 102: ethernetController_setLEDConfig(LEDA, LED_ON);
  3055  000CCC  0E00               	movlw	0
  3056  000CCE  0100               	movlb	0	; () banked
  3057  000CD0  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3058  000CD2  0E00               	movlw	0
  3059  000CD4  ECD6  F01E         	call	_ethernetController_setLEDConfig
  3060                           
  3061                           ;main.c: 103: ethernetController_setLEDConfig(LEDA, LED_ON);
  3062  000CD8  0E00               	movlw	0
  3063  000CDA  0100               	movlb	0	; () banked
  3064  000CDC  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3065  000CDE  0E00               	movlw	0
  3066  000CE0  ECD6  F01E         	call	_ethernetController_setLEDConfig
  3067                           
  3068                           ;main.c: 104: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  3069  000CE4  0E15               	movlw	21
  3070  000CE6  0101               	movlb	1	; () banked
  3071  000CE8  6F90               	movwf	(??_main+1)& (0+255),b
  3072  000CEA  0E4B               	movlw	75
  3073  000CEC  6F8F               	movwf	??_main& (0+255),b
  3074  000CEE  0EBE               	movlw	190
  3075  000CF0                     u11747:
  3076  000CF0  2EE8               	decfsz	wreg,f,c
  3077  000CF2  D7FE               	bra	u11747
  3078  000CF4  2F8F               	decfsz	??_main& (0+255),f,b
  3079  000CF6  D7FC               	bra	u11747
  3080  000CF8  2F90               	decfsz	(??_main+1)& (0+255),f,b
  3081  000CFA  D7FA               	bra	u11747
  3082  000CFC  F000               	nop	
  3083                           
  3084                           ;main.c: 106: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3085  000CFE  0E01               	movlw	1
  3086  000D00  0100               	movlb	0	; () banked
  3087  000D02  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3088  000D04  0E00               	movlw	0
  3089  000D06  ECD6  F01E         	call	_ethernetController_setLEDConfig
  3090                           
  3091                           ;main.c: 107: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3092  000D0A  0E01               	movlw	1
  3093  000D0C  0100               	movlb	0	; () banked
  3094  000D0E  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3095  000D10  0E00               	movlw	0
  3096  000D12  ECD6  F01E         	call	_ethernetController_setLEDConfig
  3097                           
  3098                           ;main.c: 110: uint32_t prescaler = 0;
  3099  000D16  0E00               	movlw	0
  3100  000D18  0103               	movlb	3	; () banked
  3101  000D1A  6FA2               	movwf	main@prescaler& (0+255),b
  3102  000D1C  0E00               	movlw	0
  3103  000D1E  6FA3               	movwf	(main@prescaler+1)& (0+255),b
  3104  000D20  0E00               	movlw	0
  3105  000D22  6FA4               	movwf	(main@prescaler+2)& (0+255),b
  3106  000D24  0E00               	movlw	0
  3107  000D26  6FA5               	movwf	(main@prescaler+3)& (0+255),b
  3108                           
  3109                           ; BSR set to: 3
  3110                           ;main.c: 112: ANSELB &= ~(1<<5);
  3111  000D28  010F               	movlb	15	; () banked
  3112  000D2A  9B5C               	bcf	92,5,b	;volatile
  3113                           
  3114                           ; BSR set to: 15
  3115                           ;main.c: 113: TRISB |= (1<<5);
  3116  000D2C  8A93               	bsf	3987,5,c	;volatile
  3117                           
  3118                           ; BSR set to: 15
  3119                           ;main.c: 115: uint8_t oldState;
  3120                           ;main.c: 117: ipv4_address_t IPsource;
  3121                           ;main.c: 118: IPsource.address[0] = 192;
  3122  000D2E  0EC0               	movlw	192
  3123  000D30  0103               	movlb	3	; () banked
  3124  000D32  6FD0               	movwf	main@IPsource& (0+255),b
  3125                           
  3126                           ; BSR set to: 3
  3127                           ;main.c: 119: IPsource.address[1] = 168;
  3128  000D34  0EA8               	movlw	168
  3129  000D36  6FD1               	movwf	(main@IPsource+1)& (0+255),b
  3130                           
  3131                           ; BSR set to: 3
  3132                           ;main.c: 120: IPsource.address[2] = 0;
  3133  000D38  0E00               	movlw	0
  3134  000D3A  6FD2               	movwf	(main@IPsource+2)& (0+255),b
  3135                           
  3136                           ; BSR set to: 3
  3137                           ;main.c: 121: IPsource.address[3] = 4;
  3138  000D3C  0E04               	movlw	4
  3139  000D3E  6FD3               	movwf	(main@IPsource+3)& (0+255),b
  3140                           
  3141                           ; BSR set to: 3
  3142                           ;main.c: 123: ipv4_address_t IPdestination;
  3143                           ;main.c: 124: IPdestination.address[0] = 192;
  3144  000D40  0EC0               	movlw	192
  3145  000D42  6FCC               	movwf	main@IPdestination& (0+255),b
  3146                           
  3147                           ; BSR set to: 3
  3148                           ;main.c: 125: IPdestination.address[1] = 168;
  3149  000D44  0EA8               	movlw	168
  3150  000D46  6FCD               	movwf	(main@IPdestination+1)& (0+255),b
  3151                           
  3152                           ; BSR set to: 3
  3153                           ;main.c: 126: IPdestination.address[2] = 0;
  3154  000D48  0E00               	movlw	0
  3155  000D4A  6FCE               	movwf	(main@IPdestination+2)& (0+255),b
  3156                           
  3157                           ; BSR set to: 3
  3158                           ;main.c: 127: IPdestination.address[3] = 5;
  3159  000D4C  0E05               	movlw	5
  3160  000D4E  6FCF               	movwf	(main@IPdestination+3)& (0+255),b
  3161                           
  3162                           ; BSR set to: 3
  3163                           ;main.c: 130: ipv4_setIPSourceAddress(IPsource);
  3164  000D50  C3D0  F076         	movff	main@IPsource,ipv4_setIPSourceAddress@ip
  3165  000D54  C3D1  F077         	movff	main@IPsource+1,ipv4_setIPSourceAddress@ip+1
  3166  000D58  C3D2  F078         	movff	main@IPsource+2,ipv4_setIPSourceAddress@ip+2
  3167  000D5C  C3D3  F079         	movff	main@IPsource+3,ipv4_setIPSourceAddress@ip+3
  3168  000D60  EC68  F020         	call	_ipv4_setIPSourceAddress	;wreg free
  3169                           
  3170                           ;main.c: 134: INTCONbits.GIE = 1;
  3171  000D64  8EF2               	bsf	intcon,7,c	;volatile
  3172                           
  3173                           ;main.c: 135: INTCONbits.PEIE = 1;
  3174  000D66  8CF2               	bsf	intcon,6,c	;volatile
  3175                           
  3176                           ;main.c: 137: srand(ethernetController_getMacAddress().address[5]);
  3177  000D68  EC58  F021         	call	_ethernetController_getMacAddress	;wreg free
  3178  000D6C  0E05               	movlw	5
  3179  000D6E  26E9               	addwf	fsr0l,f,c
  3180  000D70  0E00               	movlw	0
  3181  000D72  22EA               	addwfc	fsr0h,f,c
  3182  000D74  50EF               	movf	indf0,w,c
  3183  000D76  0101               	movlb	1	; () banked
  3184  000D78  6F8F               	movwf	??_main& (0+255),b
  3185  000D7A  518F               	movf	??_main& (0+255),w,b
  3186  000D7C  0100               	movlb	0	; () banked
  3187  000D7E  6F7A               	movwf	srand@x& (0+255),b
  3188  000D80  6B7B               	clrf	(srand@x+1)& (0+255),b
  3189  000D82  EC4A  F027         	call	_srand	;wreg free
  3190  000D86                     l629:
  3191  000D86  0004               	clrwdt		;# 
  3192                           
  3193                           ;main.c: 143: handleStackBackgroundTasks(&stack);
  3194  000D88  0E57               	movlw	low _stack
  3195  000D8A  0101               	movlb	1	; () banked
  3196  000D8C  6F8B               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  3197  000D8E  0E02               	movlw	high _stack
  3198  000D90  6F8C               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  3199  000D92  ECA0  F011         	call	_handleStackBackgroundTasks	;wreg free
  3200                           
  3201                           ;main.c: 145: printEthernetState(stack.ethernet);
  3202  000D96  EE22  F057         	lfsr	2,_stack	;volatile
  3203  000D9A  EE00  F09A         	lfsr	0,printEthernetState@state
  3204  000D9E  0E0E               	movlw	14
  3205  000DA0                     u11611:
  3206  000DA0  CFDB FFEB          	movff	plusw2,plusw0
  3207  000DA4  06E8               	decf	wreg,f,c
  3208  000DA6  E2FC               	bc	u11611
  3209  000DA8  ECA0  F01D         	call	_printEthernetState	;wreg free
  3210                           
  3211                           ;main.c: 146: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000 : ethernetContro
      +                          ller_getCurrentPacketCount();
  3212  000DAC  0102               	movlb	2	; () banked
  3213  000DAE  5157               	movf	_stack& (0+255),w,b	;volatile
  3214  000DB0  B4D8               	btfsc	status,2,c
  3215  000DB2  D009               	goto	l631
  3216                           
  3217                           ; BSR set to: 2
  3218  000DB4  EC7D  F027         	call	_ethernetController_getCurrentPacketCount	;wreg free
  3219  000DB8  0101               	movlb	1	; () banked
  3220  000DBA  6F8F               	movwf	??_main& (0+255),b
  3221  000DBC  518F               	movf	??_main& (0+255),w,b
  3222  000DBE  0103               	movlb	3	; () banked
  3223  000DC0  6FC6               	movwf	_main$2371& (0+255),b
  3224  000DC2  6BC7               	clrf	(_main$2371+1)& (0+255),b
  3225  000DC4  D005               	goto	l633
  3226  000DC6                     l631:
  3227                           
  3228                           ; BSR set to: 3
  3229  000DC6  0E03               	movlw	3
  3230  000DC8  0103               	movlb	3	; () banked
  3231  000DCA  6FC7               	movwf	(_main$2371+1)& (0+255),b
  3232  000DCC  0EE8               	movlw	232
  3233  000DCE  6FC6               	movwf	_main$2371& (0+255),b
  3234  000DD0                     l633:
  3235                           
  3236                           ; BSR set to: 3
  3237                           
  3238                           ; BSR set to: 3
  3239  000DD0  C3C6  F035         	movff	_main$2371,_numberToDisplay	;volatile
  3240  000DD4  C3C7  F036         	movff	_main$2371+1,_numberToDisplay+1	;volatile
  3241  000DD8  0E00               	movlw	0
  3242  000DDA  BE36               	btfsc	_numberToDisplay+1,7,c	;volatile
  3243  000DDC  0EFF               	movlw	-1
  3244  000DDE  6E37               	movwf	_numberToDisplay+2,c	;volatile
  3245  000DE0  6E38               	movwf	_numberToDisplay+3,c	;volatile
  3246                           
  3247                           ; BSR set to: 3
  3248                           ;main.c: 148: if (buttonState) {
  3249  000DE2  0101               	movlb	1	; () banked
  3250  000DE4  51B5               	movf	_buttonState& (0+255),w,b	;volatile
  3251  000DE6  B4D8               	btfsc	status,2,c
  3252  000DE8  D7CE               	goto	l629
  3253                           
  3254                           ; BSR set to: 1
  3255                           ;main.c: 149: buttonState = 0;
  3256  000DEA  0E00               	movlw	0
  3257  000DEC  6FB5               	movwf	_buttonState& (0+255),b	;volatile
  3258                           
  3259                           ; BSR set to: 1
  3260                           ;main.c: 151: if (stack.ethernet.link == LINK_ESTABLISHED) {
  3261  000DEE  0102               	movlb	2	; () banked
  3262  000DF0  0557               	decf	_stack& (0+255),w,b	;volatile
  3263  000DF2  A4D8               	btfss	status,2,c
  3264  000DF4  D7C8               	goto	l629
  3265                           
  3266                           ; BSR set to: 2
  3267                           ;main.c: 154: uint8_t headerBuf[32];
  3268                           ;main.c: 155: stack.pendingPacketToSend.ipv4Header.destination = IPdestination;
  3269  000DF6  C3CC  F2A1         	movff	main@IPdestination,_stack+74	;volatile
  3270  000DFA  C3CD  F2A2         	movff	main@IPdestination+1,_stack+75	;volatile
  3271  000DFE  C3CE  F2A3         	movff	main@IPdestination+2,_stack+76	;volatile
  3272  000E02  C3CF  F2A4         	movff	main@IPdestination+3,_stack+77	;volatile
  3273                           
  3274                           ;main.c: 156: stack.pendingPacketToSend.ipv4Header.source = IPsource;
  3275  000E06  C3D0  F29D         	movff	main@IPsource,_stack+70	;volatile
  3276  000E0A  C3D1  F29E         	movff	main@IPsource+1,_stack+71	;volatile
  3277  000E0E  C3D2  F29F         	movff	main@IPsource+2,_stack+72	;volatile
  3278  000E12  C3D3  F2A0         	movff	main@IPsource+3,_stack+73	;volatile
  3279                           
  3280                           ; BSR set to: 2
  3281                           ;main.c: 157: stack.pendingPacketToSend.ipv4Header.totalLength = 120;
  3282  000E16  0E00               	movlw	0
  3283  000E18  6F93               	movwf	(_stack+60)& (0+255),b	;volatile
  3284  000E1A  0E78               	movlw	120
  3285  000E1C  6F92               	movwf	(_stack+59)& (0+255),b	;volatile
  3286                           
  3287                           ; BSR set to: 2
  3288                           ;main.c: 158: stack.pendingPacketToSend.ipv4Header.timeToLive = 255;
  3289  000E1E  6999               	setf	(_stack+66)& (0+255),b	;volatile
  3290                           
  3291                           ;main.c: 159: stack.pendingPacketToSend.ipv4Header.version = 4;
  3292  000E20  0E04               	movlw	4
  3293  000E22  6F8E               	movwf	(_stack+55)& (0+255),b	;volatile
  3294                           
  3295                           ; BSR set to: 2
  3296                           ;main.c: 160: ipv4_calculateHeaderChecksum(&stack.pendingPacketToSend.ipv4Header);
  3297  000E24  0E8E               	movlw	low (_stack+55)
  3298  000E26  0100               	movlb	0	; () banked
  3299  000E28  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  3300  000E2A  0E02               	movlw	high (_stack+55)
  3301  000E2C  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  3302  000E2E  EC33  F00B         	call	_ipv4_calculateHeaderChecksum	;wreg free
  3303                           
  3304                           ;main.c: 161: ipv4_writeHeaderIntoBuffer(stack.pendingPacketToSend.ipv4Header, headerBuf
      +                          );
  3305  000E32  EE22  F08E         	lfsr	2,_stack+55	;volatile
  3306  000E36  EE00  F060         	lfsr	0,ipv4_writeHeaderIntoBuffer@header
  3307  000E3A  0E16               	movlw	22
  3308  000E3C                     u11651:
  3309  000E3C  CFDB FFEB          	movff	plusw2,plusw0
  3310  000E40  06E8               	decf	wreg,f,c
  3311  000E42  E2FC               	bc	u11651
  3312  000E44  0EA6               	movlw	low main@headerBuf
  3313  000E46  0100               	movlb	0	; () banked
  3314  000E48  6F77               	movwf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),b
  3315  000E4A  0E03               	movlw	high main@headerBuf
  3316  000E4C  6F78               	movwf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),b
  3317  000E4E  EC20  F015         	call	_ipv4_writeHeaderIntoBuffer	;wreg free
  3318                           
  3319                           ;main.c: 163: ipv4_txFrameRequest(&stack.pendingPacketToSend);
  3320  000E52  0E8E               	movlw	low (_stack+55)
  3321  000E54  0100               	movlb	0	; () banked
  3322  000E56  6FA7               	movwf	ipv4_txFrameRequest@packet& (0+255),b
  3323  000E58  0E02               	movlw	high (_stack+55)
  3324  000E5A  6FA8               	movwf	(ipv4_txFrameRequest@packet+1)& (0+255),b
  3325  000E5C  EC8D  F016         	call	_ipv4_txFrameRequest	;wreg free
  3326                           
  3327                           ;main.c: 165: for (uint8_t i = 0; i < stack.pendingPacketToSend.ipv4Header.totalLength; 
      +                          i++) {
  3328  000E60  0E00               	movlw	0
  3329  000E62  0103               	movlb	3	; () banked
  3330  000E64  6FC8               	movwf	main@i& (0+255),b
  3331  000E66  D036               	goto	l636
  3332  000E68                     
  3333                           ;main.c: 166: if (i < stack.pendingPacketToSend.ipv4Header.headerLength * 4) {
  3334                           
  3335                           ; BSR set to: 3
  3336  000E68  0102               	movlb	2	; () banked
  3337  000E6A  518F               	movf	(_stack+56)& (0+255),w,b	;volatile
  3338  000E6C  0D04               	mullw	4
  3339  000E6E  0103               	movlb	3	; () banked
  3340  000E70  51C8               	movf	main@i& (0+255),w,b
  3341  000E72  0101               	movlb	1	; () banked
  3342  000E74  6F8F               	movwf	??_main& (0+255),b
  3343  000E76  6B90               	clrf	(??_main+1)& (0+255),b
  3344  000E78  50F3               	movf	prodl,w,c
  3345  000E7A  5D8F               	subwf	??_main& (0+255),w,b
  3346  000E7C  5190               	movf	(??_main+1)& (0+255),w,b
  3347  000E7E  0A80               	xorlw	128
  3348  000E80  6F91               	movwf	(??_main+2)& (0+255),b
  3349  000E82  50F4               	movf	prodh,w,c
  3350  000E84  0A80               	xorlw	128
  3351  000E86  5991               	subwfb	(??_main+2)& (0+255),w,b
  3352  000E88  B0D8               	btfsc	status,0,c
  3353  000E8A  D016               	goto	l638
  3354                           
  3355                           ; BSR set to: 1
  3356                           ;main.c: 167: ipv4_streamToTransmissionBuffer(headerBuf[i], stack.pendingPacketToSend);
  3357  000E8C  EE22  F08E         	lfsr	2,_stack+55	;volatile
  3358  000E90  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  3359  000E94  0E41               	movlw	65
  3360  000E96                     u11671:
  3361  000E96  CFDB FFEB          	movff	plusw2,plusw0
  3362  000E9A  06E8               	decf	wreg,f,c
  3363  000E9C  E2FC               	bc	u11671
  3364  000E9E  0103               	movlb	3	; () banked
  3365  000EA0  51C8               	movf	main@i& (0+255),w,b
  3366  000EA2  0D01               	mullw	1
  3367  000EA4  0EA6               	movlw	low main@headerBuf
  3368  000EA6  24F3               	addwf	prodl,w,c
  3369  000EA8  6ED9               	movwf	fsr2l,c
  3370  000EAA  0E03               	movlw	high main@headerBuf
  3371  000EAC  20F4               	addwfc	prodh,w,c
  3372  000EAE  6EDA               	movwf	fsr2h,c
  3373  000EB0  50DF               	movf	indf2,w,c
  3374  000EB2  EC08  F026         	call	_ipv4_streamToTransmissionBuffer
  3375                           
  3376                           ;main.c: 168: } else
  3377  000EB6  D00C               	goto	l639
  3378  000EB8                     l638:
  3379                           
  3380                           ;main.c: 169: ipv4_streamToTransmissionBuffer(0, stack.pendingPacketToSend);
  3381  000EB8  EE22  F08E         	lfsr	2,_stack+55	;volatile
  3382  000EBC  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  3383  000EC0  0E41               	movlw	65
  3384  000EC2                     u11681:
  3385  000EC2  CFDB FFEB          	movff	plusw2,plusw0
  3386  000EC6  06E8               	decf	wreg,f,c
  3387  000EC8  E2FC               	bc	u11681
  3388  000ECA  0E00               	movlw	0
  3389  000ECC  EC08  F026         	call	_ipv4_streamToTransmissionBuffer
  3390  000ED0                     l639:
  3391  000ED0  0103               	movlb	3	; () banked
  3392  000ED2  2BC8               	incf	main@i& (0+255),f,b
  3393  000ED4                     l636:
  3394                           
  3395                           ; BSR set to: 3
  3396                           
  3397                           ; BSR set to: 3
  3398  000ED4  51C8               	movf	main@i& (0+255),w,b
  3399  000ED6  0101               	movlb	1	; () banked
  3400  000ED8  6F8F               	movwf	??_main& (0+255),b
  3401  000EDA  6B90               	clrf	(??_main+1)& (0+255),b
  3402  000EDC  0102               	movlb	2	; () banked
  3403  000EDE  5192               	movf	(_stack+59)& (0+255),w,b	;volatile
  3404  000EE0  0101               	movlb	1	; () banked
  3405  000EE2  5D8F               	subwf	??_main& (0+255),w,b
  3406  000EE4  0102               	movlb	2	; () banked
  3407  000EE6  5193               	movf	(_stack+60)& (0+255),w,b	;volatile
  3408  000EE8  0101               	movlb	1	; () banked
  3409  000EEA  5990               	subwfb	(??_main+1)& (0+255),w,b
  3410  000EEC  A0D8               	btfss	status,0,c
  3411  000EEE  D7BC               	goto	l637
  3412                           
  3413                           ; BSR set to: 1
  3414                           ;main.c: 170: }
  3415                           ;main.c: 172: stack.background.fPacketPending = 1;
  3416                           
  3417                           ; BSR set to: 1
  3418  000EF0  0E01               	movlw	1
  3419  000EF2  0102               	movlb	2	; () banked
  3420  000EF4  6F6B               	movwf	(_stack+20)& (0+255),b	;volatile
  3421                           
  3422                           ; BSR set to: 2
  3423                           ;main.c: 174: UARTTransmitText(hexToString(stack.pendingPacketToSend.memory.start));
  3424  000EF6  C2A5  F061         	movff	_stack+78,hexToString@val	;volatile
  3425  000EFA  C2A6  F062         	movff	_stack+79,hexToString@val+1	;volatile
  3426  000EFE  0100               	movlb	0	; () banked
  3427  000F00  6B63               	clrf	(hexToString@val+2)& (0+255),b
  3428  000F02  6B64               	clrf	(hexToString@val+3)& (0+255),b
  3429  000F04  EC70  F01A         	call	_hexToString	;wreg free
  3430  000F08  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  3431  000F0C  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  3432  000F10  EC09  F023         	call	_UARTTransmitText	;wreg free
  3433                           
  3434                           ;main.c: 175: UARTTransmitText(", ");
  3435  000F14  0E40               	movlw	low (STR_45+17)
  3436  000F16  0100               	movlb	0	; () banked
  3437  000F18  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3438  000F1A  0E7E               	movlw	high (STR_45+17)
  3439  000F1C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3440  000F1E  EC09  F023         	call	_UARTTransmitText	;wreg free
  3441                           
  3442                           ;main.c: 176: UARTTransmitText(hexToString(stack.pendingPacketToSend.memory.end));
  3443  000F22  C2A7  F061         	movff	_stack+80,hexToString@val	;volatile
  3444  000F26  C2A8  F062         	movff	_stack+81,hexToString@val+1	;volatile
  3445  000F2A  0100               	movlb	0	; () banked
  3446  000F2C  6B63               	clrf	(hexToString@val+2)& (0+255),b
  3447  000F2E  6B64               	clrf	(hexToString@val+3)& (0+255),b
  3448  000F30  EC70  F01A         	call	_hexToString	;wreg free
  3449  000F34  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  3450  000F38  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  3451  000F3C  EC09  F023         	call	_UARTTransmitText	;wreg free
  3452                           
  3453                           ;main.c: 177: UARTTransmitText("\n\r");
  3454  000F40  0EC2               	movlw	low (STR_25+46)
  3455  000F42  0100               	movlb	0	; () banked
  3456  000F44  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3457  000F46  0E7C               	movlw	high (STR_25+46)
  3458  000F48  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3459  000F4A  EC09  F023         	call	_UARTTransmitText	;wreg free
  3460  000F4E  D71B               	goto	l629
  3461  000F50                     __end_of_main:
  3462                           	opt stack 0
  3463                           tblptru	equ	0xFF8
  3464                           tblptrh	equ	0xFF7
  3465                           tblptrl	equ	0xFF6
  3466                           tablat	equ	0xFF5
  3467                           prodh	equ	0xFF4
  3468                           prodl	equ	0xFF3
  3469                           intcon	equ	0xFF2
  3470                           intcon3	equ	0xFF0
  3471                           indf0	equ	0xFEF
  3472                           postinc0	equ	0xFEE
  3473                           plusw0	equ	0xFEB
  3474                           fsr0h	equ	0xFEA
  3475                           fsr0l	equ	0xFE9
  3476                           wreg	equ	0xFE8
  3477                           postdec1	equ	0xFE5
  3478                           fsr1l	equ	0xFE1
  3479                           indf2	equ	0xFDF
  3480                           plusw2	equ	0xFDB
  3481                           fsr2h	equ	0xFDA
  3482                           fsr2l	equ	0xFD9
  3483                           status	equ	0xFD8
  3484                           
  3485 ;; *************** function _srand *****************
  3486 ;; Defined at:
  3487 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;  x               2   26[BANK0 ] unsigned int 
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;		None
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  1    wreg      void 
  3494 ;; Registers used:
  3495 ;;		status,2
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3501 ;;      Params:         0       2       0       0       0       0       0       0       0
  3502 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3503 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3504 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3505 ;;Total ram usage:        2 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    4
  3508 ;; This function calls:
  3509 ;;		Nothing
  3510 ;; This function is called by:
  3511 ;;		_main
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text1
  3516  004E94                     __ptext1:
  3517                           	opt stack 0
  3518  004E94                     _srand:
  3519                           	opt stack 26
  3520                           
  3521                           ;incstack = 0
  3522  004E94  C07A  F1C2         	movff	srand@x,_randx
  3523  004E98  C07B  F1C3         	movff	srand@x+1,_randx+1
  3524  004E9C  0101               	movlb	1	; () banked
  3525  004E9E  6BC4               	clrf	(_randx+2)& (0+255),b
  3526  004EA0  6BC5               	clrf	(_randx+3)& (0+255),b
  3527                           
  3528                           ; BSR set to: 1
  3529  004EA2  0012               	return		;funcret
  3530  004EA4                     __end_of_srand:
  3531                           	opt stack 0
  3532                           tblptru	equ	0xFF8
  3533                           tblptrh	equ	0xFF7
  3534                           tblptrl	equ	0xFF6
  3535                           tablat	equ	0xFF5
  3536                           prodh	equ	0xFF4
  3537                           prodl	equ	0xFF3
  3538                           intcon	equ	0xFF2
  3539                           intcon3	equ	0xFF0
  3540                           indf0	equ	0xFEF
  3541                           postinc0	equ	0xFEE
  3542                           plusw0	equ	0xFEB
  3543                           fsr0h	equ	0xFEA
  3544                           fsr0l	equ	0xFE9
  3545                           wreg	equ	0xFE8
  3546                           postdec1	equ	0xFE5
  3547                           fsr1l	equ	0xFE1
  3548                           indf2	equ	0xFDF
  3549                           plusw2	equ	0xFDB
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function _sevenSegmentInit *****************
  3555 ;; Defined at:
  3556 ;;		line 28 in file "src/system/sevenseg.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;		None
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;		None
  3561 ;; Return value:  Size  Location     Type
  3562 ;;                  1    wreg      void 
  3563 ;; Registers used:
  3564 ;;		wreg, status,2, status,0
  3565 ;; Tracked objects:
  3566 ;;		On entry : 0/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3570 ;;      Params:         0       0       0       0       0       0       0       0       0
  3571 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3572 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3573 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3574 ;;Total ram usage:        0 bytes
  3575 ;; Hardware stack levels used:    1
  3576 ;; Hardware stack levels required when called:    4
  3577 ;; This function calls:
  3578 ;;		Nothing
  3579 ;; This function is called by:
  3580 ;;		_main
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text2
  3585  004E00                     __ptext2:
  3586                           	opt stack 0
  3587  004E00                     _sevenSegmentInit:
  3588                           	opt stack 26
  3589                           
  3590                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  3591                           
  3592                           ; BSR set to: 1
  3593                           ;incstack = 0
  3594  004E00  0EF8               	movlw	248
  3595  004E02  1682               	andwf	3970,f,c	;volatile
  3596                           
  3597                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  3598  004E04  0EF8               	movlw	248
  3599  004E06  1694               	andwf	3988,f,c	;volatile
  3600                           
  3601                           ;sevenseg.c: 33: TRISA &=~0xff;;
  3602  004E08  0E00               	movlw	0
  3603  004E0A  6E92               	movwf	3986,c	;volatile
  3604                           
  3605                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  3606  004E0C  0E00               	movlw	0
  3607  004E0E  010F               	movlb	15	; () banked
  3608  004E10  6F5B               	movwf	91,b	;volatile
  3609                           
  3610                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  3611  004E12  0EF8               	movlw	248
  3612  004E14  175D               	andwf	93,f,b	;volatile
  3613                           
  3614                           ; BSR set to: 15
  3615                           ;sevenseg.c: 38: PORTA = 0xff;
  3616  004E16  6880               	setf	3968,c	;volatile
  3617                           
  3618                           ; BSR set to: 15
  3619  004E18  0012               	return		;funcret
  3620  004E1A                     __end_of_sevenSegmentInit:
  3621                           	opt stack 0
  3622                           tblptru	equ	0xFF8
  3623                           tblptrh	equ	0xFF7
  3624                           tblptrl	equ	0xFF6
  3625                           tablat	equ	0xFF5
  3626                           prodh	equ	0xFF4
  3627                           prodl	equ	0xFF3
  3628                           intcon	equ	0xFF2
  3629                           intcon3	equ	0xFF0
  3630                           indf0	equ	0xFEF
  3631                           postinc0	equ	0xFEE
  3632                           plusw0	equ	0xFEB
  3633                           fsr0h	equ	0xFEA
  3634                           fsr0l	equ	0xFE9
  3635                           wreg	equ	0xFE8
  3636                           postdec1	equ	0xFE5
  3637                           fsr1l	equ	0xFE1
  3638                           indf2	equ	0xFDF
  3639                           plusw2	equ	0xFDB
  3640                           fsr2h	equ	0xFDA
  3641                           fsr2l	equ	0xFD9
  3642                           status	equ	0xFD8
  3643                           
  3644 ;; *************** function _printEthernetState *****************
  3645 ;; Defined at:
  3646 ;;		line 183 in file "src/system/main.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;  state          15   58[BANK0 ] struct ethernetConnectio
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;		None
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  1    wreg      void 
  3653 ;; Registers used:
  3654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3660 ;;      Params:         0      15       0       0       0       0       0       0       0
  3661 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3662 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3663 ;;      Totals:         0      15       0       0       0       0       0       0       0
  3664 ;;Total ram usage:       15 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; Hardware stack levels required when called:    5
  3667 ;; This function calls:
  3668 ;;		_UARTTransmitText
  3669 ;; This function is called by:
  3670 ;;		_main
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           	psect	text3
  3675  003B40                     __ptext3:
  3676                           	opt stack 0
  3677  003B40                     _printEthernetState:
  3678                           	opt stack 25
  3679                           
  3680                           ;main.c: 184: static ethernetConnection_t oldState;
  3681                           ;main.c: 185: if (state.link != oldState.link) {
  3682                           
  3683                           ; BSR set to: 15
  3684                           ;incstack = 0
  3685  003B40  0102               	movlb	2	; () banked
  3686  003B42  5148               	movf	printEthernetState@oldState& (0+255),w,b
  3687  003B44  0100               	movlb	0	; () banked
  3688  003B46  199A               	xorwf	printEthernetState@state& (0+255),w,b
  3689  003B48  B4D8               	btfsc	status,2,c
  3690  003B4A  D041               	goto	l658
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;main.c: 186: if (state.link == NO_LINK) {
  3694  003B4C  519A               	movf	printEthernetState@state& (0+255),w,b
  3695  003B4E  A4D8               	btfss	status,2,c
  3696  003B50  D007               	goto	l649
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;main.c: 187: UARTTransmitText("Link lost.\n\r");
  3700  003B52  0E34               	movlw	low STR_42
  3701  003B54  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3702  003B56  0E7F               	movlw	high STR_42
  3703  003B58  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3704  003B5A  EC09  F023         	call	_UARTTransmitText	;wreg free
  3705                           
  3706                           ;main.c: 188: } else if (state.link == LINK_ESTABLISHED) {
  3707  003B5E  D00A               	goto	l651
  3708  003B60                     l649:
  3709  003B60  0100               	movlb	0	; () banked
  3710  003B62  059A               	decf	printEthernetState@state& (0+255),w,b
  3711  003B64  A4D8               	btfss	status,2,c
  3712  003B66  D006               	goto	l651
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;main.c: 189: UARTTransmitText("Link established. ");
  3716  003B68  0E69               	movlw	low STR_43
  3717  003B6A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3718  003B6C  0E7E               	movlw	high STR_43
  3719  003B6E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3720  003B70  EC09  F023         	call	_UARTTransmitText	;wreg free
  3721  003B74                     l651:
  3722                           
  3723                           ;main.c: 190: }
  3724                           ;main.c: 192: if (state.link == LINK_ESTABLISHED) {
  3725  003B74  0100               	movlb	0	; () banked
  3726  003B76  059A               	decf	printEthernetState@state& (0+255),w,b
  3727  003B78  A4D8               	btfss	status,2,c
  3728  003B7A  D029               	goto	l658
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;main.c: 193: if (state.speed == TEN_MBIT) {
  3732  003B7C  519B               	movf	(printEthernetState@state+1)& (0+255),w,b
  3733  003B7E  A4D8               	btfss	status,2,c
  3734  003B80  D007               	goto	l653
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;main.c: 194: UARTTransmitText("Speed is 10 Mbps, ");
  3738  003B82  0E56               	movlw	low STR_44
  3739  003B84  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3740  003B86  0E7E               	movlw	high STR_44
  3741  003B88  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3742  003B8A  EC09  F023         	call	_UARTTransmitText	;wreg free
  3743                           
  3744                           ;main.c: 195: } else if (state.speed == HUNDRED_MBIT) {
  3745  003B8E  D00A               	goto	l655
  3746  003B90                     l653:
  3747  003B90  0100               	movlb	0	; () banked
  3748  003B92  059B               	decf	(printEthernetState@state+1)& (0+255),w,b
  3749  003B94  A4D8               	btfss	status,2,c
  3750  003B96  D006               	goto	l655
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;main.c: 196: UARTTransmitText("Speed is 100 Mbps, ");
  3754  003B98  0E2F               	movlw	low STR_45
  3755  003B9A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3756  003B9C  0E7E               	movlw	high STR_45
  3757  003B9E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3758  003BA0  EC09  F023         	call	_UARTTransmitText	;wreg free
  3759  003BA4                     l655:
  3760                           
  3761                           ;main.c: 197: }
  3762                           ;main.c: 198: if (state.duplex == HALF_DUPLEX) {
  3763  003BA4  0100               	movlb	0	; () banked
  3764  003BA6  519C               	movf	(printEthernetState@state+2)& (0+255),w,b
  3765  003BA8  A4D8               	btfss	status,2,c
  3766  003BAA  D007               	goto	l656
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;main.c: 199: UARTTransmitText("connection is Half Duplex.\n\r");
  3770  003BAC  0E95               	movlw	low STR_46
  3771  003BAE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3772  003BB0  0E7D               	movlw	high STR_46
  3773  003BB2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3774  003BB4  EC09  F023         	call	_UARTTransmitText	;wreg free
  3775                           
  3776                           ;main.c: 200: } else if (state.duplex == FULL_DUPLEX) {
  3777  003BB8  D00A               	goto	l658
  3778  003BBA                     l656:
  3779  003BBA  0100               	movlb	0	; () banked
  3780  003BBC  059C               	decf	(printEthernetState@state+2)& (0+255),w,b
  3781  003BBE  A4D8               	btfss	status,2,c
  3782  003BC0  D006               	goto	l658
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;main.c: 202: UARTTransmitText("connection is Full Duplex.\n\r");
  3786  003BC2  0EB2               	movlw	low STR_47
  3787  003BC4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3788  003BC6  0E7D               	movlw	high STR_47
  3789  003BC8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3790  003BCA  EC09  F023         	call	_UARTTransmitText	;wreg free
  3791  003BCE                     l658:
  3792                           
  3793                           ;main.c: 203: }
  3794                           ;main.c: 204: }
  3795                           ;main.c: 205: }
  3796                           ;main.c: 206: oldState = state;
  3797  003BCE  EE20  F09A         	lfsr	2,printEthernetState@state
  3798  003BD2  EE12  F048         	lfsr	1,printEthernetState@oldState
  3799  003BD6  0E0E               	movlw	14
  3800  003BD8                     u11491:
  3801  003BD8  CFDB FFE3          	movff	plusw2,plusw1
  3802  003BDC  06E8               	decf	wreg,f,c
  3803  003BDE  E2FC               	bc	u11491
  3804  003BE0  0012               	return		;funcret
  3805  003BE2                     __end_of_printEthernetState:
  3806                           	opt stack 0
  3807                           tblptru	equ	0xFF8
  3808                           tblptrh	equ	0xFF7
  3809                           tblptrl	equ	0xFF6
  3810                           tablat	equ	0xFF5
  3811                           prodh	equ	0xFF4
  3812                           prodl	equ	0xFF3
  3813                           intcon	equ	0xFF2
  3814                           intcon3	equ	0xFF0
  3815                           indf0	equ	0xFEF
  3816                           postinc0	equ	0xFEE
  3817                           plusw0	equ	0xFEB
  3818                           fsr0h	equ	0xFEA
  3819                           fsr0l	equ	0xFE9
  3820                           wreg	equ	0xFE8
  3821                           postdec1	equ	0xFE5
  3822                           plusw1	equ	0xFE3
  3823                           fsr1l	equ	0xFE1
  3824                           indf2	equ	0xFDF
  3825                           plusw2	equ	0xFDB
  3826                           fsr2h	equ	0xFDA
  3827                           fsr2l	equ	0xFD9
  3828                           status	equ	0xFD8
  3829                           
  3830 ;; *************** function _printErrorMessage *****************
  3831 ;; Defined at:
  3832 ;;		line 209 in file "src/system/main.c"
  3833 ;; Parameters:    Size  Location     Type
  3834 ;;  err             3   58[BANK0 ] struct error
  3835 ;; Auto vars:     Size  Location     Type
  3836 ;;		None
  3837 ;; Return value:  Size  Location     Type
  3838 ;;                  1    wreg      void 
  3839 ;; Registers used:
  3840 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3846 ;;      Params:         0       3       0       0       0       0       0       0       0
  3847 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3848 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3849 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3850 ;;Total ram usage:        5 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; Hardware stack levels required when called:    6
  3853 ;; This function calls:
  3854 ;;		_UARTTransmitText
  3855 ;;		_intToString
  3856 ;; This function is called by:
  3857 ;;		_main
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           	psect	text4
  3862  002E50                     __ptext4:
  3863                           	opt stack 0
  3864  002E50                     _printErrorMessage:
  3865                           	opt stack 24
  3866                           
  3867                           ;main.c: 210: UARTTransmitText("[ERROR]");
  3868                           
  3869                           ;incstack = 0
  3870  002E50  0EAA               	movlw	low STR_48
  3871  002E52  0100               	movlb	0	; () banked
  3872  002E54  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3873  002E56  0E7F               	movlw	high STR_48
  3874  002E58  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3875  002E5A  EC09  F023         	call	_UARTTransmitText	;wreg free
  3876                           
  3877                           ;main.c: 211: switch (err.module) {
  3878  002E5E  D028               	goto	l662
  3879  002E60                     
  3880                           ;main.c: 213: UARTTransmitText(" MEMORY MODULE: ");
  3881  002E60  0ED7               	movlw	low STR_49
  3882  002E62  0100               	movlb	0	; () banked
  3883  002E64  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3884  002E66  0E7E               	movlw	high STR_49
  3885  002E68  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3886  002E6A  EC09  F023         	call	_UARTTransmitText	;wreg free
  3887                           
  3888                           ;main.c: 214: break;
  3889  002E6E  D050               	goto	l670
  3890  002E70                     
  3891                           ;main.c: 216: UARTTransmitText(" ETHERNET CONTROLLER MODULE: ");
  3892  002E70  0E59               	movlw	low STR_50
  3893  002E72  0100               	movlb	0	; () banked
  3894  002E74  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3895  002E76  0E7D               	movlw	high STR_50
  3896  002E78  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3897  002E7A  EC09  F023         	call	_UARTTransmitText	;wreg free
  3898                           
  3899                           ;main.c: 217: break;
  3900  002E7E  D048               	goto	l670
  3901  002E80                     
  3902                           ;main.c: 219: UARTTransmitText(" ETHERNET MODULE: ");
  3903  002E80  0E7C               	movlw	low STR_51
  3904  002E82  0100               	movlb	0	; () banked
  3905  002E84  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3906  002E86  0E7E               	movlw	high STR_51
  3907  002E88  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3908  002E8A  EC09  F023         	call	_UARTTransmitText	;wreg free
  3909                           
  3910                           ;main.c: 220: break;
  3911  002E8E  D040               	goto	l670
  3912  002E90                     
  3913                           ;main.c: 222: UARTTransmitText(" ARP MODULE: ");
  3914  002E90  0E26               	movlw	low STR_52
  3915  002E92  0100               	movlb	0	; () banked
  3916  002E94  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3917  002E96  0E7F               	movlw	high STR_52
  3918  002E98  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3919  002E9A  EC09  F023         	call	_UARTTransmitText	;wreg free
  3920                           
  3921                           ;main.c: 223: break;
  3922  002E9E  D038               	goto	l670
  3923  002EA0                     
  3924                           ;main.c: 225: UARTTransmitText(" IPv4 MODULE: ");
  3925  002EA0  0E17               	movlw	low STR_53
  3926  002EA2  0100               	movlb	0	; () banked
  3927  002EA4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3928  002EA6  0E7F               	movlw	high STR_53
  3929  002EA8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3930  002EAA  EC09  F023         	call	_UARTTransmitText	;wreg free
  3931                           
  3932                           ;main.c: 228: }
  3933                           
  3934                           ;main.c: 227: break;
  3935                           
  3936                           ;main.c: 226: default:
  3937  002EAE  D030               	goto	l670
  3938  002EB0                     l662:
  3939  002EB0  0100               	movlb	0	; () banked
  3940  002EB2  519A               	movf	printErrorMessage@err& (0+255),w,b
  3941                           
  3942                           ; Switch size 1, requested type "space"
  3943                           ; Number of cases is 5, Range of values is 0 to 4
  3944                           ; switch strategies available:
  3945                           ; Name         Instructions Cycles
  3946                           ; simple_byte           16     9 (average)
  3947                           ;	Chosen strategy is simple_byte
  3948  002EB4  0A00               	xorlw	0	; case 0
  3949  002EB6  B4D8               	btfsc	status,2,c
  3950  002EB8  D7D3               	goto	l663
  3951  002EBA  0A01               	xorlw	1	; case 1
  3952  002EBC  B4D8               	btfsc	status,2,c
  3953  002EBE  D7D8               	goto	l665
  3954  002EC0  0A03               	xorlw	3	; case 2
  3955  002EC2  B4D8               	btfsc	status,2,c
  3956  002EC4  D7DD               	goto	l666
  3957  002EC6  0A01               	xorlw	1	; case 3
  3958  002EC8  B4D8               	btfsc	status,2,c
  3959  002ECA  D7E2               	goto	l667
  3960  002ECC  0A07               	xorlw	7	; case 4
  3961  002ECE  B4D8               	btfsc	status,2,c
  3962  002ED0  D7E7               	goto	l668
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;main.c: 229: switch (err.code) {
  3966  002ED2  D01E               	goto	l670
  3967  002ED4                     
  3968                           ; BSR set to: 0
  3969                           ;main.c: 231: UARTTransmitText("Ethernet controller is unresponsive.");
  3970                           
  3971                           ; BSR set to: 0
  3972  002ED4  0E12               	movlw	low STR_54
  3973  002ED6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3974  002ED8  0E7D               	movlw	high STR_54
  3975  002EDA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3976  002EDC  EC09  F023         	call	_UARTTransmitText	;wreg free
  3977                           
  3978                           ;main.c: 232: break;
  3979  002EE0  D030               	goto	l672
  3980  002EE2                     
  3981                           ;main.c: 234: UARTTransmitText("Ethernet controller has returned an unknown device ID.")
      +                          ;
  3982  002EE2  0E2A               	movlw	low STR_55
  3983  002EE4  0100               	movlb	0	; () banked
  3984  002EE6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3985  002EE8  0E7C               	movlw	high STR_55
  3986  002EEA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3987  002EEC  EC09  F023         	call	_UARTTransmitText	;wreg free
  3988                           
  3989                           ;main.c: 235: break;
  3990  002EF0  D028               	goto	l672
  3991  002EF2                     
  3992                           ;main.c: 237: UARTTransmitText("IP address could not be resolved.");
  3993  002EF2  0E37               	movlw	low STR_56
  3994  002EF4  0100               	movlb	0	; () banked
  3995  002EF6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3996  002EF8  0E7D               	movlw	high STR_56
  3997  002EFA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3998  002EFC  EC09  F023         	call	_UARTTransmitText	;wreg free
  3999  002F00                     
  4000                           ;main.c: 240: UARTTransmitText("An unknown error has occured.");
  4001                           
  4002                           ;main.c: 239: case ERROR_ETHERNET_CONTROLLER_UNKNOWN:
  4003  002F00  0E77               	movlw	low STR_57
  4004  002F02  0100               	movlb	0	; () banked
  4005  002F04  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4006  002F06  0E7D               	movlw	high STR_57
  4007  002F08  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4008  002F0A  EC09  F023         	call	_UARTTransmitText	;wreg free
  4009                           
  4010                           ;main.c: 242: }
  4011                           
  4012                           ;main.c: 241: break;
  4013  002F0E  D019               	goto	l672
  4014  002F10                     l670:
  4015  002F10  EE20  F09B         	lfsr	2,printErrorMessage@err+1
  4016  002F14  CFDE F09D          	movff	postinc2,??_printErrorMessage
  4017  002F18  CFDD F09E          	movff	postdec2,??_printErrorMessage+1
  4018                           
  4019                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4020                           ; Switch size 1, requested type "space"
  4021                           ; Number of cases is 1, Range of values is 1 to 1
  4022                           ; switch strategies available:
  4023                           ; Name         Instructions Cycles
  4024                           ; simple_byte            4     3 (average)
  4025                           ;	Chosen strategy is simple_byte
  4026  002F1C  0100               	movlb	0	; () banked
  4027  002F1E  519E               	movf	(??_printErrorMessage+1)& (0+255),w,b
  4028  002F20  0A01               	xorlw	1	; case 1
  4029  002F22  A4D8               	btfss	status,2,c
  4030  002F24  D7ED               	goto	l675
  4031                           
  4032                           ; BSR set to: 0
  4033                           ; Switch size 1, requested type "space"
  4034                           ; Number of cases is 4, Range of values is 45 to 146
  4035                           ; switch strategies available:
  4036                           ; Name         Instructions Cycles
  4037                           ; simple_byte           13     7 (average)
  4038                           ;	Chosen strategy is simple_byte
  4039  002F26  519D               	movf	??_printErrorMessage& (0+255),w,b
  4040  002F28  0A2D               	xorlw	45	; case 45
  4041  002F2A  B4D8               	btfsc	status,2,c
  4042  002F2C  D7DA               	goto	l673
  4043  002F2E  0A03               	xorlw	3	; case 46
  4044  002F30  B4D8               	btfsc	status,2,c
  4045  002F32  D7D0               	goto	l671
  4046  002F34  0AA1               	xorlw	161	; case 143
  4047  002F36  B4D8               	btfsc	status,2,c
  4048  002F38  D7E3               	goto	l675
  4049  002F3A  0A1D               	xorlw	29	; case 146
  4050  002F3C  B4D8               	btfsc	status,2,c
  4051  002F3E  D7D9               	goto	l674
  4052  002F40  D7DF               	goto	l675
  4053  002F42                     l672:
  4054                           
  4055                           ;main.c: 244: UARTTransmitText(" (Code: ");
  4056                           
  4057                           ; BSR set to: 0
  4058  002F42  0E90               	movlw	low STR_58
  4059  002F44  0100               	movlb	0	; () banked
  4060  002F46  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4061  002F48  0E7F               	movlw	high STR_58
  4062  002F4A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4063  002F4C  EC09  F023         	call	_UARTTransmitText	;wreg free
  4064                           
  4065                           ;main.c: 245: UARTTransmitText(intToString(err.code));
  4066  002F50  C09B  F073         	movff	printErrorMessage@err+1,intToString@val
  4067  002F54  C09C  F074         	movff	printErrorMessage@err+2,intToString@val+1
  4068  002F58  0100               	movlb	0	; () banked
  4069  002F5A  6B75               	clrf	(intToString@val+2)& (0+255),b
  4070  002F5C  6B76               	clrf	(intToString@val+3)& (0+255),b
  4071  002F5E  EC21  F00E         	call	_intToString	;wreg free
  4072  002F62  C073  F098         	movff	?_intToString,UARTTransmitText@str
  4073  002F66  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  4074  002F6A  EC09  F023         	call	_UARTTransmitText	;wreg free
  4075                           
  4076                           ;main.c: 246: UARTTransmitText(").\n\r");
  4077  002F6E  0EDA               	movlw	low STR_59
  4078  002F70  0100               	movlb	0	; () banked
  4079  002F72  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4080  002F74  0E7F               	movlw	high STR_59
  4081  002F76  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4082  002F78  EC09  F023         	call	_UARTTransmitText	;wreg free
  4083  002F7C  0012               	return		;funcret
  4084  002F7E                     __end_of_printErrorMessage:
  4085                           	opt stack 0
  4086                           tblptru	equ	0xFF8
  4087                           tblptrh	equ	0xFF7
  4088                           tblptrl	equ	0xFF6
  4089                           tablat	equ	0xFF5
  4090                           prodh	equ	0xFF4
  4091                           prodl	equ	0xFF3
  4092                           intcon	equ	0xFF2
  4093                           intcon3	equ	0xFF0
  4094                           indf0	equ	0xFEF
  4095                           postinc0	equ	0xFEE
  4096                           plusw0	equ	0xFEB
  4097                           fsr0h	equ	0xFEA
  4098                           fsr0l	equ	0xFE9
  4099                           wreg	equ	0xFE8
  4100                           postdec1	equ	0xFE5
  4101                           plusw1	equ	0xFE3
  4102                           fsr1l	equ	0xFE1
  4103                           indf2	equ	0xFDF
  4104                           postinc2	equ	0xFDE
  4105                           postdec2	equ	0xFDD
  4106                           plusw2	equ	0xFDB
  4107                           fsr2h	equ	0xFDA
  4108                           fsr2l	equ	0xFD9
  4109                           status	equ	0xFD8
  4110                           
  4111 ;; *************** function _ipv4_writeHeaderIntoBuffer *****************
  4112 ;; Defined at:
  4113 ;;		line 110 in file "src/stack/protocols/ipv4.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;  header         23    0[BANK0 ] struct ipv4_header
  4116 ;;  ptr             2   23[BANK0 ] PTR unsigned char 
  4117 ;;		 -> main@headerBuf(32), 
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;		None
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  1    wreg      void 
  4122 ;; Registers used:
  4123 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4129 ;;      Params:         0      25       0       0       0       0       0       0       0
  4130 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4131 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4132 ;;      Totals:         0      27       0       0       0       0       0       0       0
  4133 ;;Total ram usage:       27 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    4
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_main
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           	psect	text5
  4144  002A40                     __ptext5:
  4145                           	opt stack 0
  4146  002A40                     _ipv4_writeHeaderIntoBuffer:
  4147                           	opt stack 26
  4148                           
  4149                           ;ipv4.c: 111: *ptr = (header.version << 4) | (header.headerLength);
  4150                           
  4151                           ;incstack = 0
  4152  002A40  0100               	movlb	0	; () banked
  4153  002A42  3960               	swapf	ipv4_writeHeaderIntoBuffer@header& (0+255),w,b
  4154  002A44  0BF0               	andlw	240
  4155  002A46  1161               	iorwf	(ipv4_writeHeaderIntoBuffer@header+1)& (0+255),w,b
  4156  002A48  C077  FFD9         	movff	ipv4_writeHeaderIntoBuffer@ptr,fsr2l
  4157  002A4C  C078  FFDA         	movff	ipv4_writeHeaderIntoBuffer@ptr+1,fsr2h
  4158  002A50  6EDF               	movwf	indf2,c
  4159                           
  4160                           ;ipv4.c: 112: *(ptr + 1) = (header.dscp << 2) | (header.ecn & 0x03);
  4161  002A52  EE20 F001          	lfsr	2,1
  4162  002A56  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4163  002A58  26D9               	addwf	fsr2l,f,c
  4164  002A5A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4165  002A5C  22DA               	addwfc	fsr2h,f,c
  4166  002A5E  C063  F079         	movff	ipv4_writeHeaderIntoBuffer@header+3,??_ipv4_writeHeaderIntoBuffer
  4167  002A62  0E03               	movlw	3
  4168  002A64  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  4169  002A66  4562               	rlncf	(ipv4_writeHeaderIntoBuffer@header+2)& (0+255),w,b
  4170  002A68  46E8               	rlncf	wreg,f,c
  4171  002A6A  0BFC               	andlw	252
  4172  002A6C  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  4173  002A6E  6EDF               	movwf	indf2,c
  4174                           
  4175                           ;ipv4.c: 113: *(ptr + 2) = (header.totalLength & 0xff00) >> 8;
  4176  002A70  EE20 F002          	lfsr	2,2
  4177  002A74  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4178  002A76  26D9               	addwf	fsr2l,f,c
  4179  002A78  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4180  002A7A  22DA               	addwfc	fsr2h,f,c
  4181  002A7C  5165               	movf	(ipv4_writeHeaderIntoBuffer@header+5)& (0+255),w,b
  4182  002A7E  6EDF               	movwf	indf2,c
  4183                           
  4184                           ;ipv4.c: 114: *(ptr + 3) = header.totalLength & 0x00ff;
  4185  002A80  EE20 F003          	lfsr	2,3
  4186  002A84  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4187  002A86  26D9               	addwf	fsr2l,f,c
  4188  002A88  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4189  002A8A  22DA               	addwfc	fsr2h,f,c
  4190  002A8C  C064  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+4,indf2
  4191                           
  4192                           ;ipv4.c: 115: *(ptr + 4) = (header.identification & 0xff00) >> 8;
  4193  002A90  EE20 F004          	lfsr	2,4
  4194  002A94  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4195  002A96  26D9               	addwf	fsr2l,f,c
  4196  002A98  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4197  002A9A  22DA               	addwfc	fsr2h,f,c
  4198  002A9C  5167               	movf	(ipv4_writeHeaderIntoBuffer@header+7)& (0+255),w,b
  4199  002A9E  6EDF               	movwf	indf2,c
  4200                           
  4201                           ;ipv4.c: 116: *(ptr + 5) = header.identification & 0x00ff;
  4202  002AA0  EE20 F005          	lfsr	2,5
  4203  002AA4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4204  002AA6  26D9               	addwf	fsr2l,f,c
  4205  002AA8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4206  002AAA  22DA               	addwfc	fsr2h,f,c
  4207  002AAC  C066  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+6,indf2
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;ipv4.c: 117: *(ptr + 6) = (header.flags << 5) | ((header.fragmentOffset & 0x1f00) >> 8)
      +                          ;
  4211  002AB0  EE20 F006          	lfsr	2,6
  4212  002AB4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4213  002AB6  26D9               	addwf	fsr2l,f,c
  4214  002AB8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4215  002ABA  22DA               	addwfc	fsr2h,f,c
  4216  002ABC  EE10  F069         	lfsr	1,ipv4_writeHeaderIntoBuffer@header+9
  4217  002AC0  CFE6 F079          	movff	postinc1,??_ipv4_writeHeaderIntoBuffer
  4218  002AC4  CFE5 F07A          	movff	postdec1,??_ipv4_writeHeaderIntoBuffer+1
  4219  002AC8  C07A  F079         	movff	??_ipv4_writeHeaderIntoBuffer+1,??_ipv4_writeHeaderIntoBuffer
  4220  002ACC  6B7A               	clrf	(??_ipv4_writeHeaderIntoBuffer+1)& (0+255),b
  4221  002ACE  0E1F               	movlw	31
  4222  002AD0  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  4223  002AD2  3968               	swapf	(ipv4_writeHeaderIntoBuffer@header+8)& (0+255),w,b
  4224  002AD4  46E8               	rlncf	wreg,f,c
  4225  002AD6  0BE0               	andlw	224
  4226  002AD8  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  4227  002ADA  6EDF               	movwf	indf2,c
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;ipv4.c: 118: *(ptr + 7) = (header.fragmentOffset & 0x00ff);
  4231  002ADC  EE20 F007          	lfsr	2,7
  4232  002AE0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4233  002AE2  26D9               	addwf	fsr2l,f,c
  4234  002AE4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4235  002AE6  22DA               	addwfc	fsr2h,f,c
  4236  002AE8  C069  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+9,indf2
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;ipv4.c: 119: *(ptr + 8) = (header.timeToLive);
  4240  002AEC  EE20 F008          	lfsr	2,8
  4241  002AF0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4242  002AF2  26D9               	addwf	fsr2l,f,c
  4243  002AF4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4244  002AF6  22DA               	addwfc	fsr2h,f,c
  4245  002AF8  C06B  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+11,indf2
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;ipv4.c: 120: *(ptr + 9) = (header.protocol);
  4249  002AFC  EE20 F009          	lfsr	2,9
  4250  002B00  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4251  002B02  26D9               	addwf	fsr2l,f,c
  4252  002B04  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4253  002B06  22DA               	addwfc	fsr2h,f,c
  4254  002B08  C06C  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+12,indf2
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;ipv4.c: 121: *(ptr + 10) = (header.checksum & 0xff00) >> 8;
  4258  002B0C  EE20 F00A          	lfsr	2,10
  4259  002B10  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4260  002B12  26D9               	addwf	fsr2l,f,c
  4261  002B14  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4262  002B16  22DA               	addwfc	fsr2h,f,c
  4263  002B18  516E               	movf	(ipv4_writeHeaderIntoBuffer@header+14)& (0+255),w,b
  4264  002B1A  6EDF               	movwf	indf2,c
  4265                           
  4266                           ; BSR set to: 0
  4267                           ;ipv4.c: 122: *(ptr + 11) = (header.checksum & 0x00ff);
  4268  002B1C  EE20 F00B          	lfsr	2,11
  4269  002B20  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4270  002B22  26D9               	addwf	fsr2l,f,c
  4271  002B24  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4272  002B26  22DA               	addwfc	fsr2h,f,c
  4273  002B28  C06D  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+13,indf2
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;ipv4.c: 123: *(ptr + 12) = (header.source.address[0]);
  4277  002B2C  EE20 F00C          	lfsr	2,12
  4278  002B30  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4279  002B32  26D9               	addwf	fsr2l,f,c
  4280  002B34  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4281  002B36  22DA               	addwfc	fsr2h,f,c
  4282  002B38  C06F  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+15,indf2
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;ipv4.c: 124: *(ptr + 13) = (header.source.address[1]);
  4286  002B3C  EE20 F00D          	lfsr	2,13
  4287  002B40  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4288  002B42  26D9               	addwf	fsr2l,f,c
  4289  002B44  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4290  002B46  22DA               	addwfc	fsr2h,f,c
  4291  002B48  C070  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+16,indf2
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;ipv4.c: 125: *(ptr + 14) = (header.source.address[2]);
  4295  002B4C  EE20 F00E          	lfsr	2,14
  4296  002B50  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4297  002B52  26D9               	addwf	fsr2l,f,c
  4298  002B54  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4299  002B56  22DA               	addwfc	fsr2h,f,c
  4300  002B58  C071  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+17,indf2
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;ipv4.c: 126: *(ptr + 15) = (header.source.address[3]);
  4304  002B5C  EE20 F00F          	lfsr	2,15
  4305  002B60  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4306  002B62  26D9               	addwf	fsr2l,f,c
  4307  002B64  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4308  002B66  22DA               	addwfc	fsr2h,f,c
  4309  002B68  C072  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+18,indf2
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;ipv4.c: 127: *(ptr + 16) = (header.destination.address[0]);
  4313  002B6C  EE20 F010          	lfsr	2,16
  4314  002B70  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4315  002B72  26D9               	addwf	fsr2l,f,c
  4316  002B74  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4317  002B76  22DA               	addwfc	fsr2h,f,c
  4318  002B78  C073  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+19,indf2
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;ipv4.c: 128: *(ptr + 17) = (header.destination.address[1]);
  4322  002B7C  EE20 F011          	lfsr	2,17
  4323  002B80  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4324  002B82  26D9               	addwf	fsr2l,f,c
  4325  002B84  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4326  002B86  22DA               	addwfc	fsr2h,f,c
  4327  002B88  C074  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+20,indf2
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;ipv4.c: 129: *(ptr + 18) = (header.destination.address[2]);
  4331  002B8C  EE20 F012          	lfsr	2,18
  4332  002B90  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4333  002B92  26D9               	addwf	fsr2l,f,c
  4334  002B94  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4335  002B96  22DA               	addwfc	fsr2h,f,c
  4336  002B98  C075  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+21,indf2
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;ipv4.c: 130: *(ptr + 19) = (header.destination.address[3]);
  4340  002B9C  EE20 F013          	lfsr	2,19
  4341  002BA0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4342  002BA2  26D9               	addwf	fsr2l,f,c
  4343  002BA4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4344  002BA6  22DA               	addwfc	fsr2h,f,c
  4345  002BA8  C076  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+22,indf2
  4346                           
  4347                           ; BSR set to: 0
  4348  002BAC  0012               	return		;funcret
  4349  002BAE                     __end_of_ipv4_writeHeaderIntoBuffer:
  4350                           	opt stack 0
  4351                           tblptru	equ	0xFF8
  4352                           tblptrh	equ	0xFF7
  4353                           tblptrl	equ	0xFF6
  4354                           tablat	equ	0xFF5
  4355                           prodh	equ	0xFF4
  4356                           prodl	equ	0xFF3
  4357                           intcon	equ	0xFF2
  4358                           intcon3	equ	0xFF0
  4359                           indf0	equ	0xFEF
  4360                           postinc0	equ	0xFEE
  4361                           plusw0	equ	0xFEB
  4362                           fsr0h	equ	0xFEA
  4363                           fsr0l	equ	0xFE9
  4364                           wreg	equ	0xFE8
  4365                           postinc1	equ	0xFE6
  4366                           postdec1	equ	0xFE5
  4367                           plusw1	equ	0xFE3
  4368                           fsr1l	equ	0xFE1
  4369                           indf2	equ	0xFDF
  4370                           postinc2	equ	0xFDE
  4371                           postdec2	equ	0xFDD
  4372                           plusw2	equ	0xFDB
  4373                           fsr2h	equ	0xFDA
  4374                           fsr2l	equ	0xFD9
  4375                           status	equ	0xFD8
  4376                           
  4377 ;; *************** function _ipv4_txFrameRequest *****************
  4378 ;; Defined at:
  4379 ;;		line 29 in file "src/stack/protocols/ipv4.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  packet          2   71[BANK0 ] PTR struct ipv4_packet
  4382 ;;		 -> stack(121), 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;		None
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  1    wreg      void 
  4387 ;; Registers used:
  4388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4394 ;;      Params:         0       2       0       0       0       0       0       0       0
  4395 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4396 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4397 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4398 ;;Total ram usage:        6 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    9
  4401 ;; This function calls:
  4402 ;;		_ethernet_txFrameRequest
  4403 ;; This function is called by:
  4404 ;;		_main
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           	psect	text6
  4409  002D1A                     __ptext6:
  4410                           	opt stack 0
  4411  002D1A                     _ipv4_txFrameRequest:
  4412                           	opt stack 21
  4413                           
  4414                           ;ipv4.c: 30: packet->ethernet.length = packet->ipv4Header.totalLength + 8;
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;incstack = 0
  4418  002D1A  0100               	movlb	0	; () banked
  4419  002D1C  EE20 F004          	lfsr	2,4
  4420  002D20  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4421  002D22  26D9               	addwf	fsr2l,f,c
  4422  002D24  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4423  002D26  22DA               	addwfc	fsr2h,f,c
  4424  002D28  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  4425  002D2C  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  4426  002D30  0E08               	movlw	8
  4427  002D32  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  4428  002D34  0E00               	movlw	0
  4429  002D36  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  4430  002D38  EE20 F020          	lfsr	2,32
  4431  002D3C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4432  002D3E  26D9               	addwf	fsr2l,f,c
  4433  002D40  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4434  002D42  22DA               	addwfc	fsr2h,f,c
  4435  002D44  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  4436  002D48  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  4437                           
  4438                           ;ipv4.c: 31: packet->ethernet.ethertype = ETHERTYPE_IPv4;
  4439  002D4C  EE20 F02E          	lfsr	2,46
  4440  002D50  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4441  002D52  26D9               	addwf	fsr2l,f,c
  4442  002D54  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4443  002D56  22DA               	addwfc	fsr2h,f,c
  4444  002D58  0E00               	movlw	0
  4445  002D5A  6EDE               	movwf	postinc2,c
  4446  002D5C  0E08               	movlw	8
  4447  002D5E  6EDD               	movwf	postdec2,c
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;ipv4.c: 32: ethernet_txFrameRequest(&packet->ethernet);
  4451  002D60  0E20               	movlw	32
  4452  002D62  25A7               	addwf	ipv4_txFrameRequest@packet& (0+255),w,b
  4453  002D64  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
  4454  002D66  0E00               	movlw	0
  4455  002D68  21A8               	addwfc	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4456  002D6A  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
  4457  002D6C  EC5E  F01B         	call	_ethernet_txFrameRequest	;wreg free
  4458                           
  4459                           ;ipv4.c: 34: packet->memory.fIsAssigned = packet->ethernet.memory.fIsAssigned;
  4460  002D70  0100               	movlb	0	; () banked
  4461  002D72  EE20 F036          	lfsr	2,54
  4462  002D76  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4463  002D78  26D9               	addwf	fsr2l,f,c
  4464  002D7A  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4465  002D7C  22DA               	addwfc	fsr2h,f,c
  4466  002D7E  EE10 F01D          	lfsr	1,29
  4467  002D82  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4468  002D84  26E1               	addwf	fsr1l,f,c
  4469  002D86  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4470  002D88  22E2               	addwfc	fsr1h,f,c
  4471  002D8A  CFDF FFE7          	movff	indf2,indf1
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;ipv4.c: 35: packet->memory.fOutOfMemory = packet->ethernet.memory.fOutOfMemory;
  4475  002D8E  EE20 F037          	lfsr	2,55
  4476  002D92  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4477  002D94  26D9               	addwf	fsr2l,f,c
  4478  002D96  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4479  002D98  22DA               	addwfc	fsr2h,f,c
  4480  002D9A  EE10 F01E          	lfsr	1,30
  4481  002D9E  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4482  002DA0  26E1               	addwf	fsr1l,f,c
  4483  002DA2  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4484  002DA4  22E2               	addwfc	fsr1h,f,c
  4485  002DA6  CFDF FFE7          	movff	indf2,indf1
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;ipv4.c: 36: packet->memory.index = packet->ethernet.memory.index;
  4489  002DAA  EE20 F038          	lfsr	2,56
  4490  002DAE  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4491  002DB0  26D9               	addwf	fsr2l,f,c
  4492  002DB2  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4493  002DB4  22DA               	addwfc	fsr2h,f,c
  4494  002DB6  EE10 F01F          	lfsr	1,31
  4495  002DBA  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4496  002DBC  26E1               	addwf	fsr1l,f,c
  4497  002DBE  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4498  002DC0  22E2               	addwfc	fsr1h,f,c
  4499  002DC2  CFDF FFE7          	movff	indf2,indf1
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;ipv4.c: 37: packet->memory.start = packet->ethernet.memory.start + 8;
  4503  002DC6  EE20 F030          	lfsr	2,48
  4504  002DCA  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4505  002DCC  26D9               	addwf	fsr2l,f,c
  4506  002DCE  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4507  002DD0  22DA               	addwfc	fsr2h,f,c
  4508  002DD2  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  4509  002DD6  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  4510  002DDA  0E08               	movlw	8
  4511  002DDC  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  4512  002DDE  0E00               	movlw	0
  4513  002DE0  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  4514  002DE2  EE20 F017          	lfsr	2,23
  4515  002DE6  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4516  002DE8  26D9               	addwf	fsr2l,f,c
  4517  002DEA  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4518  002DEC  22DA               	addwfc	fsr2h,f,c
  4519  002DEE  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  4520  002DF2  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;ipv4.c: 38: packet->memory.end = packet->ethernet.memory.end;
  4524  002DF6  EE20 F032          	lfsr	2,50
  4525  002DFA  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4526  002DFC  26D9               	addwf	fsr2l,f,c
  4527  002DFE  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4528  002E00  22DA               	addwfc	fsr2h,f,c
  4529  002E02  EE10 F019          	lfsr	1,25
  4530  002E06  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4531  002E08  26E1               	addwf	fsr1l,f,c
  4532  002E0A  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4533  002E0C  22E2               	addwfc	fsr1h,f,c
  4534  002E0E  CFDE FFE6          	movff	postinc2,postinc1
  4535  002E12  CFDD FFE5          	movff	postdec2,postdec1
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;ipv4.c: 39: packet->memory.length = packet->ethernet.memory.length - 8;
  4539  002E16  0EF8               	movlw	248
  4540  002E18  6FA9               	movwf	??_ipv4_txFrameRequest& (0+255),b
  4541  002E1A  0EFF               	movlw	255
  4542  002E1C  6FAA               	movwf	(??_ipv4_txFrameRequest+1)& (0+255),b
  4543  002E1E  EE20 F034          	lfsr	2,52
  4544  002E22  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4545  002E24  26D9               	addwf	fsr2l,f,c
  4546  002E26  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4547  002E28  22DA               	addwfc	fsr2h,f,c
  4548  002E2A  CFDE F0AB          	movff	postinc2,??_ipv4_txFrameRequest+2
  4549  002E2E  CFDD F0AC          	movff	postdec2,??_ipv4_txFrameRequest+3
  4550  002E32  51A9               	movf	??_ipv4_txFrameRequest& (0+255),w,b
  4551  002E34  27AB               	addwf	(??_ipv4_txFrameRequest+2)& (0+255),f,b
  4552  002E36  51AA               	movf	(??_ipv4_txFrameRequest+1)& (0+255),w,b
  4553  002E38  23AC               	addwfc	(??_ipv4_txFrameRequest+3)& (0+255),f,b
  4554  002E3A  EE20 F01B          	lfsr	2,27
  4555  002E3E  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4556  002E40  26D9               	addwf	fsr2l,f,c
  4557  002E42  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4558  002E44  22DA               	addwfc	fsr2h,f,c
  4559  002E46  C0AB  FFDE         	movff	??_ipv4_txFrameRequest+2,postinc2
  4560  002E4A  C0AC  FFDD         	movff	??_ipv4_txFrameRequest+3,postdec2
  4561                           
  4562                           ; BSR set to: 0
  4563  002E4E  0012               	return		;funcret
  4564  002E50                     __end_of_ipv4_txFrameRequest:
  4565                           	opt stack 0
  4566                           tblptru	equ	0xFF8
  4567                           tblptrh	equ	0xFF7
  4568                           tblptrl	equ	0xFF6
  4569                           tablat	equ	0xFF5
  4570                           prodh	equ	0xFF4
  4571                           prodl	equ	0xFF3
  4572                           intcon	equ	0xFF2
  4573                           intcon3	equ	0xFF0
  4574                           indf0	equ	0xFEF
  4575                           postinc0	equ	0xFEE
  4576                           plusw0	equ	0xFEB
  4577                           fsr0h	equ	0xFEA
  4578                           fsr0l	equ	0xFE9
  4579                           wreg	equ	0xFE8
  4580                           indf1	equ	0xFE7
  4581                           postinc1	equ	0xFE6
  4582                           postdec1	equ	0xFE5
  4583                           plusw1	equ	0xFE3
  4584                           fsr1h	equ	0xFE2
  4585                           fsr1l	equ	0xFE1
  4586                           indf2	equ	0xFDF
  4587                           postinc2	equ	0xFDE
  4588                           postdec2	equ	0xFDD
  4589                           plusw2	equ	0xFDB
  4590                           fsr2h	equ	0xFDA
  4591                           fsr2l	equ	0xFD9
  4592                           status	equ	0xFD8
  4593                           
  4594 ;; *************** function _ipv4_streamToTransmissionBuffer *****************
  4595 ;; Defined at:
  4596 ;;		line 81 in file "src/stack/protocols/ipv4.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;  data            1    wreg     unsigned char 
  4599 ;;  packet         66   30[BANK0 ] struct ipv4_packet
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;  data            1   98[BANK0 ] unsigned char 
  4602 ;;  ethernetPack    2   96[BANK0 ] unsigned int 
  4603 ;;  remainingLen    2    0        unsigned int 
  4604 ;; Return value:  Size  Location     Type
  4605 ;;                  1    wreg      void 
  4606 ;; Registers used:
  4607 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  4608 ;; Tracked objects:
  4609 ;;		On entry : 0/0
  4610 ;;		On exit  : 0/0
  4611 ;;		Unchanged: 0/0
  4612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4613 ;;      Params:         0      66       0       0       0       0       0       0       0
  4614 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4615 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4616 ;;      Totals:         0      69       0       0       0       0       0       0       0
  4617 ;;Total ram usage:       69 bytes
  4618 ;; Hardware stack levels used:    1
  4619 ;; Hardware stack levels required when called:    8
  4620 ;; This function calls:
  4621 ;;		_ethernetController_streamToTransmitBuffer
  4622 ;; This function is called by:
  4623 ;;		_main
  4624 ;; This function uses a non-reentrant model
  4625 ;;
  4626                           
  4627                           	psect	text7
  4628  004C10                     __ptext7:
  4629                           	opt stack 0
  4630  004C10                     _ipv4_streamToTransmissionBuffer:
  4631                           	opt stack 22
  4632                           
  4633                           ; BSR set to: 0
  4634                           ;incstack = 0
  4635                           ;ipv4_streamToTransmissionBuffer@data stored from wreg
  4636  004C10  0100               	movlb	0	; () banked
  4637  004C12  6FC2               	movwf	ipv4_streamToTransmissionBuffer@data& (0+255),b
  4638                           
  4639                           ;ipv4.c: 82: uint16_t ethernetPacketLength = packet.ipv4Header.totalLength;
  4640  004C14  C082  F0C0         	movff	ipv4_streamToTransmissionBuffer@packet+4,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength
  4641  004C18  C083  F0C1         	movff	ipv4_streamToTransmissionBuffer@packet+5,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength+1
  4642                           
  4643                           ;ipv4.c: 83: uint16_t remainingLength;
  4644                           ;ipv4.c: 87: ethernetController_streamToTransmitBuffer(data, packet.memory);
  4645  004C1C  EE20  F095         	lfsr	2,ipv4_streamToTransmissionBuffer@packet+23
  4646  004C20  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
  4647  004C24  0E08               	movlw	8
  4648  004C26                     u11501:
  4649  004C26  CFDB FFEB          	movff	plusw2,plusw0
  4650  004C2A  06E8               	decf	wreg,f,c
  4651  004C2C  E2FC               	bc	u11501
  4652  004C2E  0100               	movlb	0	; () banked
  4653  004C30  51C2               	movf	ipv4_streamToTransmissionBuffer@data& (0+255),w,b
  4654  004C32  ECE2  F020         	call	_ethernetController_streamToTransmitBuffer
  4655  004C36  0012               	return		;funcret
  4656  004C38                     __end_of_ipv4_streamToTransmissionBuffer:
  4657                           	opt stack 0
  4658                           tblptru	equ	0xFF8
  4659                           tblptrh	equ	0xFF7
  4660                           tblptrl	equ	0xFF6
  4661                           tablat	equ	0xFF5
  4662                           prodh	equ	0xFF4
  4663                           prodl	equ	0xFF3
  4664                           intcon	equ	0xFF2
  4665                           intcon3	equ	0xFF0
  4666                           indf0	equ	0xFEF
  4667                           postinc0	equ	0xFEE
  4668                           plusw0	equ	0xFEB
  4669                           fsr0h	equ	0xFEA
  4670                           fsr0l	equ	0xFE9
  4671                           wreg	equ	0xFE8
  4672                           indf1	equ	0xFE7
  4673                           postinc1	equ	0xFE6
  4674                           postdec1	equ	0xFE5
  4675                           plusw1	equ	0xFE3
  4676                           fsr1h	equ	0xFE2
  4677                           fsr1l	equ	0xFE1
  4678                           indf2	equ	0xFDF
  4679                           postinc2	equ	0xFDE
  4680                           postdec2	equ	0xFDD
  4681                           plusw2	equ	0xFDB
  4682                           fsr2h	equ	0xFDA
  4683                           fsr2l	equ	0xFD9
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function _ipv4_setIPSourceAddress *****************
  4687 ;; Defined at:
  4688 ;;		line 228 in file "src/stack/protocols/ipv4.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  ip              4   22[BANK0 ] struct ipv4_address
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;  err             3   29[BANK0 ] struct error
  4693 ;;  index           1   28[BANK0 ] unsigned char 
  4694 ;;  timeBetweenP    1   27[BANK0 ] const unsigned char 
  4695 ;;  numberOfProb    1   26[BANK0 ] const unsigned char 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  3   22[BANK0 ] struct error
  4698 ;; Registers used:
  4699 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4705 ;;      Params:         0       4       0       0       0       0       0       0       0
  4706 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4708 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4709 ;;Total ram usage:       10 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:    6
  4712 ;; This function calls:
  4713 ;;		_ARP_checkForEntry
  4714 ;; This function is called by:
  4715 ;;		_main
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           	psect	text8
  4720  0040D0                     __ptext8:
  4721                           	opt stack 0
  4722  0040D0                     _ipv4_setIPSourceAddress:
  4723                           	opt stack 24
  4724                           
  4725                           ;ipv4.c: 229: uint8_t static state = 0;
  4726                           ;ipv4.c: 230: uint8_t const numberOfProbes = 3;
  4727                           
  4728                           ;incstack = 0
  4729  0040D0  0E03               	movlw	3
  4730  0040D2  0100               	movlb	0	; () banked
  4731  0040D4  6F7A               	movwf	ipv4_setIPSourceAddress@numberOfProbes& (0+255),b
  4732                           
  4733                           ;ipv4.c: 231: uint8_t const timeBetweenProbes = 1;
  4734  0040D6  0E01               	movlw	1
  4735  0040D8  6F7B               	movwf	ipv4_setIPSourceAddress@timeBetweenProbes& (0+255),b
  4736                           
  4737                           ;ipv4.c: 232: uint8_t static probeCounter = 0;
  4738                           ;ipv4.c: 233: uint8_t index;
  4739                           ;ipv4.c: 234: error_t err;
  4740                           ;ipv4.c: 235: err.module = ERROR_MODULE_IPv4;
  4741  0040DA  0E04               	movlw	4
  4742  0040DC  6F7D               	movwf	ipv4_setIPSourceAddress@err& (0+255),b
  4743                           
  4744                           ;ipv4.c: 236: switch (state) {
  4745  0040DE  D02D               	goto	l1082
  4746  0040E0                     
  4747                           ;ipv4.c: 238: if (ARP_checkForEntry(ip, &index)) {
  4748                           
  4749                           ; BSR set to: 0
  4750  0040E0  C076  F067         	movff	ipv4_setIPSourceAddress@ip,ARP_checkForEntry@ip
  4751  0040E4  C077  F068         	movff	ipv4_setIPSourceAddress@ip+1,ARP_checkForEntry@ip+1
  4752  0040E8  C078  F069         	movff	ipv4_setIPSourceAddress@ip+2,ARP_checkForEntry@ip+2
  4753  0040EC  C079  F06A         	movff	ipv4_setIPSourceAddress@ip+3,ARP_checkForEntry@ip+3
  4754  0040F0  0E7C               	movlw	low ipv4_setIPSourceAddress@index
  4755  0040F2  0100               	movlb	0	; () banked
  4756  0040F4  6F6B               	movwf	ARP_checkForEntry@index& (0+255),b
  4757  0040F6  0E00               	movlw	high ipv4_setIPSourceAddress@index
  4758  0040F8  6F6C               	movwf	(ARP_checkForEntry@index+1)& (0+255),b
  4759  0040FA  ECEE  F01C         	call	_ARP_checkForEntry	;wreg free
  4760  0040FE  0900               	iorlw	0
  4761  004100  B4D8               	btfsc	status,2,c
  4762  004102  D00F               	goto	l1084
  4763                           
  4764                           ;ipv4.c: 239: if (probeCounter == 0)
  4765  004104  5046               	movf	ipv4_setIPSourceAddress@probeCounter,w,c
  4766  004106  A4D8               	btfss	status,2,c
  4767  004108  D006               	goto	l1085
  4768                           
  4769                           ;ipv4.c: 241: err.code = ERROR_IPv4_ADDRESS_ALREADY_IN_USE;
  4770  00410A  0E01               	movlw	1
  4771  00410C  0100               	movlb	0	; () banked
  4772  00410E  6F7F               	movwf	(ipv4_setIPSourceAddress@err+2)& (0+255),b
  4773  004110  0EF5               	movlw	245
  4774  004112  6F7E               	movwf	(ipv4_setIPSourceAddress@err+1)& (0+255),b
  4775  004114  0012               	return	
  4776  004116                     l1085:
  4777                           
  4778                           ;ipv4.c: 242: else
  4779                           ;ipv4.c: 244: err.code = ERROR_IPv4_ADDRESS_CONFLICT_DETECTED;
  4780                           
  4781                           ; BSR set to: 0
  4782  004116  0E01               	movlw	1
  4783  004118  0100               	movlb	0	; () banked
  4784  00411A  6F7F               	movwf	(ipv4_setIPSourceAddress@err+2)& (0+255),b
  4785  00411C  0EF6               	movlw	246
  4786  00411E  6F7E               	movwf	(ipv4_setIPSourceAddress@err+1)& (0+255),b
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;ipv4.c: 245: return err;
  4790                           ;	Return value of _ipv4_setIPSourceAddress is never used
  4791                           
  4792                           ; BSR set to: 0
  4793  004120  0012               	return	
  4794  004122                     l1084:
  4795                           
  4796                           ;ipv4.c: 246: }
  4797                           ;ipv4.c: 247: state = 1;
  4798                           
  4799                           ; BSR set to: 0
  4800  004122  0E01               	movlw	1
  4801  004124  6E47               	movwf	ipv4_setIPSourceAddress@state,c
  4802                           
  4803                           ;ipv4.c: 248: break;
  4804  004126  0012               	return	
  4805  004128                     l1089:
  4806                           
  4807                           ;ipv4.c: 250: sourceIPAddress = ip;
  4808  004128  C076  F02D         	movff	ipv4_setIPSourceAddress@ip,_sourceIPAddress
  4809  00412C  C077  F02E         	movff	ipv4_setIPSourceAddress@ip+1,_sourceIPAddress+1
  4810  004130  C078  F02F         	movff	ipv4_setIPSourceAddress@ip+2,_sourceIPAddress+2
  4811  004134  C079  F030         	movff	ipv4_setIPSourceAddress@ip+3,_sourceIPAddress+3
  4812                           
  4813                           ;ipv4.c: 252: }
  4814                           
  4815                           ;ipv4.c: 251: break;
  4816  004138  0012               	return	
  4817  00413A                     l1082:
  4818  00413A  5047               	movf	ipv4_setIPSourceAddress@state,w,c
  4819                           
  4820                           ; Switch size 1, requested type "space"
  4821                           ; Number of cases is 2, Range of values is 0 to 1
  4822                           ; switch strategies available:
  4823                           ; Name         Instructions Cycles
  4824                           ; simple_byte            7     4 (average)
  4825                           ;	Chosen strategy is simple_byte
  4826  00413C  0A00               	xorlw	0	; case 0
  4827  00413E  B4D8               	btfsc	status,2,c
  4828  004140  D7CF               	goto	l1083
  4829  004142  0A01               	xorlw	1	; case 1
  4830  004144  A4D8               	btfss	status,2,c
  4831  004146  0012               	return	
  4832  004148  D7EF               	goto	l1089
  4833  00414A                     __end_of_ipv4_setIPSourceAddress:
  4834                           	opt stack 0
  4835                           tblptru	equ	0xFF8
  4836                           tblptrh	equ	0xFF7
  4837                           tblptrl	equ	0xFF6
  4838                           tablat	equ	0xFF5
  4839                           prodh	equ	0xFF4
  4840                           prodl	equ	0xFF3
  4841                           intcon	equ	0xFF2
  4842                           intcon3	equ	0xFF0
  4843                           indf0	equ	0xFEF
  4844                           postinc0	equ	0xFEE
  4845                           plusw0	equ	0xFEB
  4846                           fsr0h	equ	0xFEA
  4847                           fsr0l	equ	0xFE9
  4848                           wreg	equ	0xFE8
  4849                           indf1	equ	0xFE7
  4850                           postinc1	equ	0xFE6
  4851                           postdec1	equ	0xFE5
  4852                           plusw1	equ	0xFE3
  4853                           fsr1h	equ	0xFE2
  4854                           fsr1l	equ	0xFE1
  4855                           indf2	equ	0xFDF
  4856                           postinc2	equ	0xFDE
  4857                           postdec2	equ	0xFDD
  4858                           plusw2	equ	0xFDB
  4859                           fsr2h	equ	0xFDA
  4860                           fsr2l	equ	0xFD9
  4861                           status	equ	0xFD8
  4862                           
  4863 ;; *************** function _handleStackBackgroundTasks *****************
  4864 ;; Defined at:
  4865 ;;		line 26 in file "src/stack/backgroundTasks.c"
  4866 ;; Parameters:    Size  Location     Type
  4867 ;;  stack           2  139[BANK1 ] PTR volatile struct stac
  4868 ;;		 -> stack(121), 
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;		None
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      void 
  4873 ;; Registers used:
  4874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4880 ;;      Params:         0       0       2       0       0       0       0       0       0
  4881 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4882 ;;      Temps:          0       0       2       0       0       0       0       0       0
  4883 ;;      Totals:         0       0       4       0       0       0       0       0       0
  4884 ;;Total ram usage:        4 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:   13
  4887 ;; This function calls:
  4888 ;;		_UARTTransmitText
  4889 ;;		_ethernetController_clearInterruptFlag
  4890 ;;		_ethernetController_newPacketAvailable
  4891 ;;		_ethernetController_pollInterruptFlags
  4892 ;;		_ethernetController_setLEDConfig
  4893 ;;		_ethernetController_updateLinkStatus
  4894 ;;		_ethernet_rxGetNewFrame
  4895 ;;		_ipAdressToString
  4896 ;;		_ipv4_sendFrame
  4897 ;; This function is called by:
  4898 ;;		_main
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           	psect	text9
  4903  002340                     __ptext9:
  4904                           	opt stack 0
  4905  002340                     _handleStackBackgroundTasks:
  4906                           	opt stack 17
  4907                           
  4908                           ;backgroundTasks.c: 27: stack->background.interruptFlags = ethernetController_pollInterr
      +                          uptFlags();
  4909                           
  4910                           ;incstack = 0
  4911  002340  ECBF  F017         	call	_ethernetController_pollInterruptFlags	;wreg free
  4912  002344  0101               	movlb	1	; () banked
  4913  002346  EE20 F012          	lfsr	2,18
  4914  00234A  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4915  00234C  26D9               	addwf	fsr2l,f,c
  4916  00234E  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4917  002350  22DA               	addwfc	fsr2h,f,c
  4918  002352  0100               	movlb	0	; () banked
  4919  002354  C078  FFDE         	movff	?_ethernetController_pollInterruptFlags,postinc2
  4920  002358  C079  FFDD         	movff	?_ethernetController_pollInterruptFlags+1,postdec2
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;backgroundTasks.c: 28: if (stack->background.interruptFlags.PKTIF) {
  4924  00235C  0101               	movlb	1	; () banked
  4925  00235E  EE20 F012          	lfsr	2,18
  4926  002362  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4927  002364  26D9               	addwf	fsr2l,f,c
  4928  002366  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4929  002368  22DA               	addwfc	fsr2h,f,c
  4930  00236A  A8DF               	btfss	indf2,4,c
  4931  00236C  D018               	goto	l513
  4932                           
  4933                           ; BSR set to: 1
  4934                           ;backgroundTasks.c: 30: if (ethernetController_newPacketAvailable()) {
  4935  00236E  EC41  F027         	call	_ethernetController_newPacketAvailable	;wreg free
  4936  002372  0900               	iorlw	0
  4937  002374  B4D8               	btfsc	status,2,c
  4938  002376  D013               	goto	l513
  4939                           
  4940                           ;backgroundTasks.c: 31: stack->background.err = ethernet_rxGetNewFrame(&stack->ethernet)
      +                          ;
  4941  002378  C18B  F178         	movff	handleStackBackgroundTasks@stack,ethernet_rxGetNewFrame@frame
  4942  00237C  C18C  F179         	movff	handleStackBackgroundTasks@stack+1,ethernet_rxGetNewFrame@frame+1
  4943  002380  EC76  F000         	call	_ethernet_rxGetNewFrame	;wreg free
  4944  002384  0101               	movlb	1	; () banked
  4945  002386  EE20 F00F          	lfsr	2,15
  4946  00238A  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4947  00238C  26D9               	addwf	fsr2l,f,c
  4948  00238E  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4949  002390  22DA               	addwfc	fsr2h,f,c
  4950  002392  C178  FFDE         	movff	?_ethernet_rxGetNewFrame,postinc2
  4951  002396  C179  FFDE         	movff	?_ethernet_rxGetNewFrame+1,postinc2
  4952  00239A  C17A  FFDE         	movff	?_ethernet_rxGetNewFrame+2,postinc2
  4953  00239E                     l513:
  4954                           
  4955                           ;backgroundTasks.c: 32: }
  4956                           ;backgroundTasks.c: 33: }
  4957                           ;backgroundTasks.c: 39: if (stack->background.fPacketPending) {
  4958                           
  4959                           ; BSR set to: 1
  4960                           
  4961                           ; BSR set to: 1
  4962  00239E  0101               	movlb	1	; () banked
  4963  0023A0  EE20 F014          	lfsr	2,20
  4964  0023A4  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4965  0023A6  26D9               	addwf	fsr2l,f,c
  4966  0023A8  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4967  0023AA  22DA               	addwfc	fsr2h,f,c
  4968  0023AC  50DF               	movf	indf2,w,c
  4969  0023AE  B4D8               	btfsc	status,2,c
  4970  0023B0  D08A               	goto	l517
  4971                           
  4972                           ; BSR set to: 1
  4973                           ;backgroundTasks.c: 42: stack->background.err = ipv4_sendFrame(stack->pendingPacketToSen
      +                          d);
  4974  0023B2  EE20 F037          	lfsr	2,55
  4975  0023B6  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4976  0023B8  26D9               	addwf	fsr2l,f,c
  4977  0023BA  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4978  0023BC  22DA               	addwfc	fsr2h,f,c
  4979  0023BE  EE01  F034         	lfsr	0,ipv4_sendFrame@ipPacket
  4980  0023C2  0E41               	movlw	65
  4981  0023C4                     u11291:
  4982  0023C4  CFDB FFEB          	movff	plusw2,plusw0
  4983  0023C8  06E8               	decf	wreg,f,c
  4984  0023CA  E2FC               	bc	u11291
  4985  0023CC  EC71  F013         	call	_ipv4_sendFrame	;wreg free
  4986  0023D0  0101               	movlb	1	; () banked
  4987  0023D2  EE20 F00F          	lfsr	2,15
  4988  0023D6  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4989  0023D8  26D9               	addwf	fsr2l,f,c
  4990  0023DA  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4991  0023DC  22DA               	addwfc	fsr2h,f,c
  4992  0023DE  C134  FFDE         	movff	?_ipv4_sendFrame,postinc2
  4993  0023E2  C135  FFDE         	movff	?_ipv4_sendFrame+1,postinc2
  4994  0023E6  C136  FFDE         	movff	?_ipv4_sendFrame+2,postinc2
  4995                           
  4996                           ; BSR set to: 1
  4997                           ;backgroundTasks.c: 43: if (stack->background.err.code == ERROR_ARP_WAITING_FOR_REPLY) {
  4998  0023EA  EE20 F010          	lfsr	2,16
  4999  0023EE  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5000  0023F0  26D9               	addwf	fsr2l,f,c
  5001  0023F2  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5002  0023F4  22DA               	addwfc	fsr2h,f,c
  5003                           
  5004                           ; BSR set to: 1
  5005                           ;backgroundTasks.c: 45: }
  5006                           ;backgroundTasks.c: 46: if (stack->background.err.module == ERROR_MODULE_ARP &&
  5007                           ;backgroundTasks.c: 47: stack->background.err.code == ERROR_ARP_MAXIMUM_NUMBER_OF_REQUES
      +                          TS_REACHED) {
  5008                           
  5009                           ; BSR set to: 1
  5010  0023F6  EE20 F00F          	lfsr	2,15
  5011  0023FA  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5012  0023FC  26D9               	addwf	fsr2l,f,c
  5013  0023FE  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5014  002400  22DA               	addwfc	fsr2h,f,c
  5015  002402  0E03               	movlw	3
  5016  002404  18DE               	xorwf	postinc2,w,c
  5017  002406  A4D8               	btfss	status,2,c
  5018  002408  D03A               	goto	l516
  5019                           
  5020                           ; BSR set to: 1
  5021  00240A  EE20 F010          	lfsr	2,16
  5022  00240E  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5023  002410  26D9               	addwf	fsr2l,f,c
  5024  002412  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5025  002414  22DA               	addwfc	fsr2h,f,c
  5026  002416  0E92               	movlw	146
  5027  002418  18DE               	xorwf	postinc2,w,c
  5028  00241A  E131               	bnz	l9189
  5029  00241C  04DE               	decf	postinc2,w,c
  5030  00241E  A4D8               	btfss	status,2,c
  5031  002420  D02E               	goto	l516
  5032                           
  5033                           ; BSR set to: 1
  5034                           ;backgroundTasks.c: 48: UARTTransmitText("Could not resolve ");
  5035  002422  0E8F               	movlw	low STR_20
  5036  002424  0100               	movlb	0	; () banked
  5037  002426  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5038  002428  0E7E               	movlw	high STR_20
  5039  00242A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5040  00242C  EC09  F023         	call	_UARTTransmitText	;wreg free
  5041                           
  5042                           ;backgroundTasks.c: 49: UARTTransmitText(ipAdressToString(stack->pendingPacketToSend.ipv
      +                          4Header.destination));
  5043  002430  0101               	movlb	1	; () banked
  5044  002432  EE20 F04A          	lfsr	2,74
  5045  002436  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5046  002438  26D9               	addwf	fsr2l,f,c
  5047  00243A  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5048  00243C  22DA               	addwfc	fsr2h,f,c
  5049  00243E  CFDE F067          	movff	postinc2,ipAdressToString@ip
  5050  002442  CFDE F068          	movff	postinc2,ipAdressToString@ip+1
  5051  002446  CFDE F069          	movff	postinc2,ipAdressToString@ip+2
  5052  00244A  CFDE F06A          	movff	postinc2,ipAdressToString@ip+3
  5053  00244E  ECA9  F010         	call	_ipAdressToString	;wreg free
  5054  002452  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5055  002456  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5056  00245A  EC09  F023         	call	_UARTTransmitText	;wreg free
  5057                           
  5058                           ;backgroundTasks.c: 50: UARTTransmitText("\n\r");
  5059  00245E  0EC2               	movlw	low (STR_25+46)
  5060  002460  0100               	movlb	0	; () banked
  5061  002462  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5062  002464  0E7C               	movlw	high (STR_25+46)
  5063  002466  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5064  002468  EC09  F023         	call	_UARTTransmitText	;wreg free
  5065                           
  5066                           ;backgroundTasks.c: 51: stack->background.fPacketPending = 0;
  5067  00246C  0101               	movlb	1	; () banked
  5068  00246E  EE20 F014          	lfsr	2,20
  5069  002472  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5070  002474  26D9               	addwf	fsr2l,f,c
  5071  002476  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5072  002478  22DA               	addwfc	fsr2h,f,c
  5073  00247A  0E00               	movlw	0
  5074  00247C  6EDF               	movwf	indf2,c
  5075  00247E                     l516:
  5076  00247E                     l9189:
  5077                           
  5078                           ; BSR set to: 1
  5079                           ;backgroundTasks.c: 52: }
  5080                           ;backgroundTasks.c: 53: if (stack->background.err.module == ERROR_MODULE_ARP &&
  5081                           ;backgroundTasks.c: 54: stack->background.err.code == (uint16_t)0) {
  5082  00247E  EE20 F00F          	lfsr	2,15
  5083  002482  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5084  002484  26D9               	addwf	fsr2l,f,c
  5085  002486  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5086  002488  22DA               	addwfc	fsr2h,f,c
  5087  00248A  0E03               	movlw	3
  5088  00248C  18DE               	xorwf	postinc2,w,c
  5089  00248E  A4D8               	btfss	status,2,c
  5090  002490  D01A               	goto	l517
  5091                           
  5092                           ; BSR set to: 1
  5093  002492  EE20 F010          	lfsr	2,16
  5094  002496  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5095  002498  26D9               	addwf	fsr2l,f,c
  5096  00249A  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5097  00249C  22DA               	addwfc	fsr2h,f,c
  5098  00249E  50DE               	movf	postinc2,w,c
  5099  0024A0  10DE               	iorwf	postinc2,w,c
  5100  0024A2  A4D8               	btfss	status,2,c
  5101  0024A4  D010               	goto	l517
  5102                           
  5103                           ; BSR set to: 1
  5104                           ;backgroundTasks.c: 55: UARTTransmitText("IP packet sent.\n\r");
  5105  0024A6  0EB4               	movlw	low STR_22
  5106  0024A8  0100               	movlb	0	; () banked
  5107  0024AA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5108  0024AC  0E7E               	movlw	high STR_22
  5109  0024AE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5110  0024B0  EC09  F023         	call	_UARTTransmitText	;wreg free
  5111                           
  5112                           ;backgroundTasks.c: 57: stack->background.fPacketPending = 0;
  5113  0024B4  0101               	movlb	1	; () banked
  5114  0024B6  EE20 F014          	lfsr	2,20
  5115  0024BA  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5116  0024BC  26D9               	addwf	fsr2l,f,c
  5117  0024BE  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5118  0024C0  22DA               	addwfc	fsr2h,f,c
  5119  0024C2  0E00               	movlw	0
  5120  0024C4  6EDF               	movwf	indf2,c
  5121  0024C6                     l517:
  5122                           
  5123                           ; BSR set to: 1
  5124                           ;backgroundTasks.c: 58: }
  5125                           ;backgroundTasks.c: 59: }
  5126                           ;backgroundTasks.c: 60: if (stack->background.interruptFlags.LINKIF) {
  5127                           
  5128                           ; BSR set to: 1
  5129                           
  5130                           ; BSR set to: 1
  5131  0024C6  EE20 F012          	lfsr	2,18
  5132  0024CA  518B               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5133  0024CC  26D9               	addwf	fsr2l,f,c
  5134  0024CE  518C               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5135  0024D0  22DA               	addwfc	fsr2h,f,c
  5136  0024D2  A6DF               	btfss	indf2,3,c
  5137  0024D4  0012               	return	
  5138                           
  5139                           ; BSR set to: 1
  5140                           ;backgroundTasks.c: 61: ethernetController_updateLinkStatus(&(stack->ethernet));
  5141  0024D6  C18B  F080         	movff	handleStackBackgroundTasks@stack,ethernetController_updateLinkStatus@state
  5142  0024DA  C18C  F081         	movff	handleStackBackgroundTasks@stack+1,ethernetController_updateLinkStatus@state+1
  5143  0024DE  EC1D  F01F         	call	_ethernetController_updateLinkStatus	;wreg free
  5144                           
  5145                           ;backgroundTasks.c: 63: if (stack->ethernet.link == LINK_ESTABLISHED) {
  5146  0024E2  C18B  FFD9         	movff	handleStackBackgroundTasks@stack,fsr2l
  5147  0024E6  C18C  FFDA         	movff	handleStackBackgroundTasks@stack+1,fsr2h
  5148  0024EA  04DE               	decf	postinc2,w,c
  5149  0024EC  A4D8               	btfss	status,2,c
  5150  0024EE  D00D               	goto	l519
  5151                           
  5152                           ;backgroundTasks.c: 64: ethernetController_setLEDConfig(LEDA, LED_ON);
  5153  0024F0  0E00               	movlw	0
  5154  0024F2  0100               	movlb	0	; () banked
  5155  0024F4  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5156  0024F6  0E00               	movlw	0
  5157  0024F8  ECD6  F01E         	call	_ethernetController_setLEDConfig
  5158                           
  5159                           ;backgroundTasks.c: 65: ethernetController_setLEDConfig(LEDB, LED_TRANSMIT_RECEIVE_EVENT
      +                          S);
  5160  0024FC  0E02               	movlw	2
  5161  0024FE  0100               	movlb	0	; () banked
  5162  002500  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5163  002502  0E01               	movlw	1
  5164  002504  ECD6  F01E         	call	_ethernetController_setLEDConfig
  5165                           
  5166                           ;backgroundTasks.c: 66: } else {
  5167  002508  D00C               	goto	l520
  5168  00250A                     l519:
  5169                           
  5170                           ;backgroundTasks.c: 67: ethernetController_setLEDConfig(LEDA, LED_OFF);
  5171  00250A  0E01               	movlw	1
  5172  00250C  0100               	movlb	0	; () banked
  5173  00250E  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5174  002510  0E00               	movlw	0
  5175  002512  ECD6  F01E         	call	_ethernetController_setLEDConfig
  5176                           
  5177                           ;backgroundTasks.c: 68: ethernetController_setLEDConfig(LEDB, LED_OFF);
  5178  002516  0E01               	movlw	1
  5179  002518  0100               	movlb	0	; () banked
  5180  00251A  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5181  00251C  0E01               	movlw	1
  5182  00251E  ECD6  F01E         	call	_ethernetController_setLEDConfig
  5183  002522                     l520:
  5184                           
  5185                           ;backgroundTasks.c: 69: }
  5186                           ;backgroundTasks.c: 70: ethernetController_clearInterruptFlag(LINKIF);
  5187  002522  0E0B               	movlw	11
  5188  002524  EC61  F027         	call	_ethernetController_clearInterruptFlag
  5189  002528  0012               	return	
  5190  00252A                     __end_of_handleStackBackgroundTasks:
  5191                           	opt stack 0
  5192                           tblptru	equ	0xFF8
  5193                           tblptrh	equ	0xFF7
  5194                           tblptrl	equ	0xFF6
  5195                           tablat	equ	0xFF5
  5196                           prodh	equ	0xFF4
  5197                           prodl	equ	0xFF3
  5198                           intcon	equ	0xFF2
  5199                           intcon3	equ	0xFF0
  5200                           indf0	equ	0xFEF
  5201                           postinc0	equ	0xFEE
  5202                           plusw0	equ	0xFEB
  5203                           fsr0h	equ	0xFEA
  5204                           fsr0l	equ	0xFE9
  5205                           wreg	equ	0xFE8
  5206                           indf1	equ	0xFE7
  5207                           postinc1	equ	0xFE6
  5208                           postdec1	equ	0xFE5
  5209                           plusw1	equ	0xFE3
  5210                           fsr1h	equ	0xFE2
  5211                           fsr1l	equ	0xFE1
  5212                           indf2	equ	0xFDF
  5213                           postinc2	equ	0xFDE
  5214                           postdec2	equ	0xFDD
  5215                           plusw2	equ	0xFDB
  5216                           fsr2h	equ	0xFDA
  5217                           fsr2l	equ	0xFD9
  5218                           status	equ	0xFD8
  5219                           
  5220 ;; *************** function _ipv4_sendFrame *****************
  5221 ;; Defined at:
  5222 ;;		line 42 in file "src/stack/protocols/ipv4.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  ipPacket       66   52[BANK1 ] struct ipv4_packet
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  requestTimeo    4  126[BANK1 ] const unsigned long 
  5227 ;;  err             3  136[BANK1 ] struct error
  5228 ;;  index           1  135[BANK1 ] unsigned char 
  5229 ;;  numberOfRequ    1  134[BANK1 ] const unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  3   52[BANK1 ] struct error
  5232 ;; Registers used:
  5233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5239 ;;      Params:         0       0      66       0       0       0       0       0       0
  5240 ;;      Locals:         0       0      13       0       0       0       0       0       0
  5241 ;;      Temps:          0       0       8       0       0       0       0       0       0
  5242 ;;      Totals:         0       0      87       0       0       0       0       0       0
  5243 ;;Total ram usage:       87 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:   11
  5246 ;; This function calls:
  5247 ;;		_ARP_checkForEntry
  5248 ;;		_ARP_getEntryFromTable
  5249 ;;		_ARP_sendRequest
  5250 ;;		_ethernetController_getMacAddress
  5251 ;;		_ethernetController_sendPacket
  5252 ;;		_ethernetController_writeDestinationMACAddress
  5253 ;;		_getMillis
  5254 ;;		_ipv4_getIPSourceAddress
  5255 ;; This function is called by:
  5256 ;;		_handleStackBackgroundTasks
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           	psect	text10
  5261  0026E2                     __ptext10:
  5262                           	opt stack 0
  5263  0026E2                     _ipv4_sendFrame:
  5264                           	opt stack 18
  5265                           
  5266                           ;ipv4.c: 43: error_t err;
  5267                           ;ipv4.c: 44: err.module = ERROR_MODULE_ARP;
  5268                           
  5269                           ;incstack = 0
  5270  0026E2  0E03               	movlw	3
  5271  0026E4  0101               	movlb	1	; () banked
  5272  0026E6  6F88               	movwf	ipv4_sendFrame@err& (0+255),b
  5273                           
  5274                           ;ipv4.c: 45: uint8_t index;
  5275                           ;ipv4.c: 46: uint8_t static requestCounter = 0;
  5276                           ;ipv4.c: 47: uint8_t const numberOfRequests = 3;
  5277  0026E8  0E03               	movlw	3
  5278  0026EA  6F86               	movwf	ipv4_sendFrame@numberOfRequests& (0+255),b
  5279                           
  5280                           ;ipv4.c: 48: time_t const requestTimeout = 2000;
  5281  0026EC  0ED0               	movlw	208
  5282  0026EE  6F7E               	movwf	ipv4_sendFrame@requestTimeout& (0+255),b
  5283  0026F0  0E07               	movlw	7
  5284  0026F2  6F7F               	movwf	(ipv4_sendFrame@requestTimeout+1)& (0+255),b
  5285  0026F4  0E00               	movlw	0
  5286  0026F6  6F80               	movwf	(ipv4_sendFrame@requestTimeout+2)& (0+255),b
  5287  0026F8  0E00               	movlw	0
  5288  0026FA  6F81               	movwf	(ipv4_sendFrame@requestTimeout+3)& (0+255),b
  5289                           
  5290                           ; BSR set to: 1
  5291                           ;ipv4.c: 49: time_t static oldTime = 0;
  5292                           ;ipv4.c: 52: if (ARP_checkForEntry(ipPacket.ipv4Header.destination, &index)) {
  5293  0026FC  C147  F067         	movff	ipv4_sendFrame@ipPacket+19,ARP_checkForEntry@ip
  5294  002700  C148  F068         	movff	ipv4_sendFrame@ipPacket+20,ARP_checkForEntry@ip+1
  5295  002704  C149  F069         	movff	ipv4_sendFrame@ipPacket+21,ARP_checkForEntry@ip+2
  5296  002708  C14A  F06A         	movff	ipv4_sendFrame@ipPacket+22,ARP_checkForEntry@ip+3
  5297  00270C  0E87               	movlw	low ipv4_sendFrame@index
  5298  00270E  0100               	movlb	0	; () banked
  5299  002710  6F6B               	movwf	ARP_checkForEntry@index& (0+255),b
  5300  002712  0E01               	movlw	high ipv4_sendFrame@index
  5301  002714  6F6C               	movwf	(ARP_checkForEntry@index+1)& (0+255),b
  5302  002716  ECEE  F01C         	call	_ARP_checkForEntry	;wreg free
  5303  00271A  0900               	iorlw	0
  5304  00271C  B4D8               	btfsc	status,2,c
  5305  00271E  D03F               	goto	l1042
  5306                           
  5307                           ;ipv4.c: 54: ipPacket.ethernet.destination = ARP_getEntryFromTable(index);
  5308  002720  0101               	movlb	1	; () banked
  5309  002722  5187               	movf	ipv4_sendFrame@index& (0+255),w,b
  5310  002724  EC9D  F025         	call	_ARP_getEntryFromTable
  5311  002728  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  5312  00272C  0E05               	movlw	5
  5313  00272E                     u11161:
  5314  00272E  CFEB FFDB          	movff	plusw0,plusw2
  5315  002732  06E8               	decf	wreg,f,c
  5316  002734  E2FC               	bc	u11161
  5317                           
  5318                           ;ipv4.c: 56: ipPacket.ethernet.source = ethernetController_getMacAddress();
  5319  002736  EC58  F021         	call	_ethernetController_getMacAddress	;wreg free
  5320  00273A  EE21  F056         	lfsr	2,ipv4_sendFrame@ipPacket+34
  5321  00273E  0E05               	movlw	5
  5322  002740                     u11171:
  5323  002740  CFEB FFDB          	movff	plusw0,plusw2
  5324  002744  06E8               	decf	wreg,f,c
  5325  002746  E2FC               	bc	u11171
  5326                           
  5327                           ;ipv4.c: 58: ethernetController_writeDestinationMACAddress(ipPacket.ethernet.destination
      +                          , ipPacket.ethernet.memory);
  5328  002748  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  5329  00274C  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
  5330  002750  0E05               	movlw	5
  5331  002752                     u11181:
  5332  002752  CFDB FFEB          	movff	plusw2,plusw0
  5333  002756  06E8               	decf	wreg,f,c
  5334  002758  E2FC               	bc	u11181
  5335  00275A  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  5336  00275E  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
  5337  002762  0E08               	movlw	8
  5338  002764                     u11191:
  5339  002764  CFDB FFEB          	movff	plusw2,plusw0
  5340  002768  06E8               	decf	wreg,f,c
  5341  00276A  E2FC               	bc	u11191
  5342  00276C  ECE9  F01F         	call	_ethernetController_writeDestinationMACAddress	;wreg free
  5343                           
  5344                           ;ipv4.c: 59: ethernetController_sendPacket(ipPacket.ethernet.memory);
  5345  002770  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  5346  002774  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
  5347  002778  0E08               	movlw	8
  5348  00277A                     u11201:
  5349  00277A  CFDB FFEB          	movff	plusw2,plusw0
  5350  00277E  06E8               	decf	wreg,f,c
  5351  002780  E2FC               	bc	u11201
  5352  002782  EC30  F026         	call	_ethernetController_sendPacket	;wreg free
  5353                           
  5354                           ;ipv4.c: 60: err.code = (uint16_t)0;
  5355  002786  0E00               	movlw	0
  5356  002788  0101               	movlb	1	; () banked
  5357  00278A  6F8A               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5358  00278C  0E00               	movlw	0
  5359  00278E  6F89               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5360                           
  5361                           ; BSR set to: 1
  5362                           ;ipv4.c: 61: return err;
  5363  002790  C188  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5364  002794  C189  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5365  002798  C18A  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5366                           
  5367                           ; BSR set to: 1
  5368  00279C  0012               	return	
  5369  00279E                     l1042:
  5370                           
  5371                           ;ipv4.c: 64: if (getMillis() - oldTime >= requestTimeout) {
  5372                           
  5373                           ; BSR set to: 1
  5374  00279E  C192  F176         	movff	ipv4_sendFrame@oldTime,??_ipv4_sendFrame
  5375  0027A2  C193  F177         	movff	ipv4_sendFrame@oldTime+1,??_ipv4_sendFrame+1
  5376  0027A6  C194  F178         	movff	ipv4_sendFrame@oldTime+2,??_ipv4_sendFrame+2
  5377  0027AA  C195  F179         	movff	ipv4_sendFrame@oldTime+3,??_ipv4_sendFrame+3
  5378  0027AE  0101               	movlb	1	; () banked
  5379  0027B0  1F76               	comf	??_ipv4_sendFrame& (0+255),f,b
  5380  0027B2  1F77               	comf	(??_ipv4_sendFrame+1)& (0+255),f,b
  5381  0027B4  1F78               	comf	(??_ipv4_sendFrame+2)& (0+255),f,b
  5382  0027B6  1F79               	comf	(??_ipv4_sendFrame+3)& (0+255),f,b
  5383  0027B8  2B76               	incf	??_ipv4_sendFrame& (0+255),f,b
  5384  0027BA  0E00               	movlw	0
  5385  0027BC  2377               	addwfc	(??_ipv4_sendFrame+1)& (0+255),f,b
  5386  0027BE  2378               	addwfc	(??_ipv4_sendFrame+2)& (0+255),f,b
  5387  0027C0  2379               	addwfc	(??_ipv4_sendFrame+3)& (0+255),f,b
  5388  0027C2  EC2F  F027         	call	_getMillis	;wreg free
  5389  0027C6  0101               	movlb	1	; () banked
  5390  0027C8  5176               	movf	??_ipv4_sendFrame& (0+255),w,b
  5391  0027CA  0100               	movlb	0	; () banked
  5392  0027CC  2560               	addwf	?_getMillis& (0+255),w,b
  5393  0027CE  0101               	movlb	1	; () banked
  5394  0027D0  6F7A               	movwf	(??_ipv4_sendFrame+4)& (0+255),b
  5395  0027D2  5177               	movf	(??_ipv4_sendFrame+1)& (0+255),w,b
  5396  0027D4  0100               	movlb	0	; () banked
  5397  0027D6  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
  5398  0027D8  0101               	movlb	1	; () banked
  5399  0027DA  6F7B               	movwf	(??_ipv4_sendFrame+5)& (0+255),b
  5400  0027DC  5178               	movf	(??_ipv4_sendFrame+2)& (0+255),w,b
  5401  0027DE  0100               	movlb	0	; () banked
  5402  0027E0  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
  5403  0027E2  0101               	movlb	1	; () banked
  5404  0027E4  6F7C               	movwf	(??_ipv4_sendFrame+6)& (0+255),b
  5405  0027E6  5179               	movf	(??_ipv4_sendFrame+3)& (0+255),w,b
  5406  0027E8  0100               	movlb	0	; () banked
  5407  0027EA  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
  5408  0027EC  0101               	movlb	1	; () banked
  5409  0027EE  6F7D               	movwf	(??_ipv4_sendFrame+7)& (0+255),b
  5410  0027F0  517E               	movf	ipv4_sendFrame@requestTimeout& (0+255),w,b
  5411  0027F2  5D7A               	subwf	(??_ipv4_sendFrame+4)& (0+255),w,b
  5412  0027F4  517F               	movf	(ipv4_sendFrame@requestTimeout+1)& (0+255),w,b
  5413  0027F6  597B               	subwfb	(??_ipv4_sendFrame+5)& (0+255),w,b
  5414  0027F8  5180               	movf	(ipv4_sendFrame@requestTimeout+2)& (0+255),w,b
  5415  0027FA  597C               	subwfb	(??_ipv4_sendFrame+6)& (0+255),w,b
  5416  0027FC  5181               	movf	(ipv4_sendFrame@requestTimeout+3)& (0+255),w,b
  5417  0027FE  597D               	subwfb	(??_ipv4_sendFrame+7)& (0+255),w,b
  5418  002800  A0D8               	btfss	status,0,c
  5419  002802  D03B               	goto	l1047
  5420                           
  5421                           ; BSR set to: 1
  5422                           ;ipv4.c: 65: oldTime = getMillis();
  5423  002804  EC2F  F027         	call	_getMillis	;wreg free
  5424  002808  C060  F192         	movff	?_getMillis,ipv4_sendFrame@oldTime
  5425  00280C  C061  F193         	movff	?_getMillis+1,ipv4_sendFrame@oldTime+1
  5426  002810  C062  F194         	movff	?_getMillis+2,ipv4_sendFrame@oldTime+2
  5427  002814  C063  F195         	movff	?_getMillis+3,ipv4_sendFrame@oldTime+3
  5428                           
  5429                           ;ipv4.c: 66: if (requestCounter < numberOfRequests) {
  5430  002818  0101               	movlb	1	; () banked
  5431  00281A  5186               	movf	ipv4_sendFrame@numberOfRequests& (0+255),w,b
  5432  00281C  5D9A               	subwf	ipv4_sendFrame@requestCounter& (0+255),w,b
  5433  00281E  B0D8               	btfsc	status,0,c
  5434  002820  D01E               	goto	l1046
  5435                           
  5436                           ; BSR set to: 1
  5437                           ;ipv4.c: 67: requestCounter++;
  5438  002822  2B9A               	incf	ipv4_sendFrame@requestCounter& (0+255),f,b
  5439                           
  5440                           ; BSR set to: 1
  5441                           ;ipv4.c: 68: ARP_sendRequest(ipv4_getIPSourceAddress(), ipPacket.ipv4Header.destination)
      +                          ;
  5442  002824  EC38  F027         	call	_ipv4_getIPSourceAddress	;wreg free
  5443  002828  C060  F182         	movff	?_ipv4_getIPSourceAddress,_ipv4_sendFrame$4461
  5444  00282C  C061  F183         	movff	?_ipv4_getIPSourceAddress+1,_ipv4_sendFrame$4461+1
  5445  002830  C062  F184         	movff	?_ipv4_getIPSourceAddress+2,_ipv4_sendFrame$4461+2
  5446  002834  C063  F185         	movff	?_ipv4_getIPSourceAddress+3,_ipv4_sendFrame$4461+3
  5447                           
  5448                           ;ipv4.c: 68: ARP_sendRequest(ipv4_getIPSourceAddress(), ipPacket.ipv4Header.destination)
      +                          ;
  5449  002838  C182  F100         	movff	_ipv4_sendFrame$4461,ARP_sendRequest@ipSender
  5450  00283C  C183  F101         	movff	_ipv4_sendFrame$4461+1,ARP_sendRequest@ipSender+1
  5451  002840  C184  F102         	movff	_ipv4_sendFrame$4461+2,ARP_sendRequest@ipSender+2
  5452  002844  C185  F103         	movff	_ipv4_sendFrame$4461+3,ARP_sendRequest@ipSender+3
  5453  002848  C147  F104         	movff	ipv4_sendFrame@ipPacket+19,ARP_sendRequest@ipTarget
  5454  00284C  C148  F105         	movff	ipv4_sendFrame@ipPacket+20,ARP_sendRequest@ipTarget+1
  5455  002850  C149  F106         	movff	ipv4_sendFrame@ipPacket+21,ARP_sendRequest@ipTarget+2
  5456  002854  C14A  F107         	movff	ipv4_sendFrame@ipPacket+22,ARP_sendRequest@ipTarget+3
  5457  002858  EC95  F01C         	call	_ARP_sendRequest	;wreg free
  5458                           
  5459                           ;ipv4.c: 69: } else {
  5460  00285C  D00E               	goto	l1047
  5461  00285E                     l1046:
  5462                           
  5463                           ;ipv4.c: 71: requestCounter = 0;
  5464  00285E  0E00               	movlw	0
  5465  002860  0101               	movlb	1	; () banked
  5466  002862  6F9A               	movwf	ipv4_sendFrame@requestCounter& (0+255),b
  5467                           
  5468                           ;ipv4.c: 72: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_REQUESTS_REACHED;
  5469  002864  0E01               	movlw	1
  5470  002866  6F8A               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5471  002868  0E92               	movlw	146
  5472  00286A  6F89               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5473                           
  5474                           ; BSR set to: 1
  5475                           ;ipv4.c: 73: return err;
  5476  00286C  C188  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5477  002870  C189  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5478  002874  C18A  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5479                           
  5480                           ; BSR set to: 1
  5481  002878  0012               	return	
  5482  00287A                     l1047:
  5483                           
  5484                           ;ipv4.c: 74: }
  5485                           ;ipv4.c: 75: }
  5486                           ;ipv4.c: 76: }
  5487                           ;ipv4.c: 77: err.code = ERROR_ARP_WAITING_FOR_REPLY;
  5488                           
  5489                           ; BSR set to: 1
  5490                           
  5491                           ; BSR set to: 1
  5492                           
  5493                           ; BSR set to: 1
  5494  00287A  0E01               	movlw	1
  5495  00287C  0101               	movlb	1	; () banked
  5496  00287E  6F8A               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5497  002880  0E91               	movlw	145
  5498  002882  6F89               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5499                           
  5500                           ; BSR set to: 1
  5501                           ;ipv4.c: 78: return err;
  5502  002884  C188  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5503  002888  C189  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5504  00288C  C18A  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5505  002890  0012               	return	
  5506  002892                     __end_of_ipv4_sendFrame:
  5507                           	opt stack 0
  5508                           tblptru	equ	0xFF8
  5509                           tblptrh	equ	0xFF7
  5510                           tblptrl	equ	0xFF6
  5511                           tablat	equ	0xFF5
  5512                           prodh	equ	0xFF4
  5513                           prodl	equ	0xFF3
  5514                           intcon	equ	0xFF2
  5515                           intcon3	equ	0xFF0
  5516                           indf0	equ	0xFEF
  5517                           postinc0	equ	0xFEE
  5518                           plusw0	equ	0xFEB
  5519                           fsr0h	equ	0xFEA
  5520                           fsr0l	equ	0xFE9
  5521                           wreg	equ	0xFE8
  5522                           indf1	equ	0xFE7
  5523                           postinc1	equ	0xFE6
  5524                           postdec1	equ	0xFE5
  5525                           plusw1	equ	0xFE3
  5526                           fsr1h	equ	0xFE2
  5527                           fsr1l	equ	0xFE1
  5528                           indf2	equ	0xFDF
  5529                           postinc2	equ	0xFDE
  5530                           postdec2	equ	0xFDD
  5531                           plusw2	equ	0xFDB
  5532                           fsr2h	equ	0xFDA
  5533                           fsr2l	equ	0xFD9
  5534                           status	equ	0xFD8
  5535                           
  5536 ;; *************** function _ARP_sendRequest *****************
  5537 ;; Defined at:
  5538 ;;		line 186 in file "src/stack/protocols/arp.c"
  5539 ;; Parameters:    Size  Location     Type
  5540 ;;  ipSender        4    0[BANK1 ] struct ipv4_address
  5541 ;;  ipTarget        4    4[BANK1 ] struct ipv4_address
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;  request        32   20[BANK1 ] struct ARP_message
  5544 ;;  targetMAC       6   14[BANK1 ] struct macaddress
  5545 ;;  senderMAC       6    8[BANK1 ] struct macaddress
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  1    wreg      void 
  5548 ;; Registers used:
  5549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5555 ;;      Params:         0       0       8       0       0       0       0       0       0
  5556 ;;      Locals:         0       0      44       0       0       0       0       0       0
  5557 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5558 ;;      Totals:         0       0      52       0       0       0       0       0       0
  5559 ;;Total ram usage:       52 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; Hardware stack levels required when called:   10
  5562 ;; This function calls:
  5563 ;;		_ARP_send
  5564 ;;		_ethernetController_getMacAddress
  5565 ;;		_ipv4_getIPSourceAddress
  5566 ;;		_mac_setAllZero
  5567 ;; This function is called by:
  5568 ;;		_ipv4_sendFrame
  5569 ;;		_ARP_probe
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text11
  5574  00392A                     __ptext11:
  5575                           	opt stack 0
  5576  00392A                     _ARP_sendRequest:
  5577                           	opt stack 18
  5578                           
  5579                           ;arp.c: 187: ARP_message_t request;
  5580                           ;arp.c: 188: macaddress_t senderMAC;
  5581                           ;arp.c: 189: macaddress_t targetMAC;
  5582                           ;arp.c: 191: senderMAC = ethernetController_getMacAddress();
  5583                           
  5584                           ; BSR set to: 1
  5585                           ;incstack = 0
  5586  00392A  EC58  F021         	call	_ethernetController_getMacAddress	;wreg free
  5587  00392E  EE21  F008         	lfsr	2,ARP_sendRequest@senderMAC
  5588  003932  0E05               	movlw	5
  5589  003934                     u10651:
  5590  003934  CFEB FFDB          	movff	plusw0,plusw2
  5591  003938  06E8               	decf	wreg,f,c
  5592  00393A  E2FC               	bc	u10651
  5593                           
  5594                           ;arp.c: 193: ipSender = ipv4_getIPSourceAddress();
  5595  00393C  EC38  F027         	call	_ipv4_getIPSourceAddress	;wreg free
  5596  003940  C060  F100         	movff	?_ipv4_getIPSourceAddress,ARP_sendRequest@ipSender
  5597  003944  C061  F101         	movff	?_ipv4_getIPSourceAddress+1,ARP_sendRequest@ipSender+1
  5598  003948  C062  F102         	movff	?_ipv4_getIPSourceAddress+2,ARP_sendRequest@ipSender+2
  5599  00394C  C063  F103         	movff	?_ipv4_getIPSourceAddress+3,ARP_sendRequest@ipSender+3
  5600                           
  5601                           ;arp.c: 194: mac_setAllZero(&targetMAC);
  5602  003950  0E0E               	movlw	low ARP_sendRequest@targetMAC
  5603  003952  0100               	movlb	0	; () banked
  5604  003954  6F60               	movwf	mac_setAllZero@mac& (0+255),b
  5605  003956  0E01               	movlw	high ARP_sendRequest@targetMAC
  5606  003958  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
  5607  00395A  EC6B  F026         	call	_mac_setAllZero	;wreg free
  5608                           
  5609                           ;arp.c: 196: request.hlen = 6;
  5610  00395E  0E06               	movlw	6
  5611  003960  0101               	movlb	1	; () banked
  5612  003962  6F18               	movwf	(ARP_sendRequest@request+4)& (0+255),b
  5613                           
  5614                           ; BSR set to: 1
  5615                           ;arp.c: 197: request.plen = 4;
  5616  003964  0E04               	movlw	4
  5617  003966  6F19               	movwf	(ARP_sendRequest@request+5)& (0+255),b
  5618                           
  5619                           ; BSR set to: 1
  5620                           ;arp.c: 198: request.htype = ARP_HTYPE_ETHERNET;
  5621  003968  0E00               	movlw	0
  5622  00396A  6F15               	movwf	(ARP_sendRequest@request+1)& (0+255),b
  5623  00396C  0E01               	movlw	1
  5624  00396E  6F14               	movwf	ARP_sendRequest@request& (0+255),b
  5625                           
  5626                           ; BSR set to: 1
  5627                           ;arp.c: 199: request.ptype = ARP_PTYPE_IPv4;
  5628  003970  0E08               	movlw	8
  5629  003972  6F17               	movwf	(ARP_sendRequest@request+3)& (0+255),b
  5630  003974  0E00               	movlw	0
  5631  003976  6F16               	movwf	(ARP_sendRequest@request+2)& (0+255),b
  5632                           
  5633                           ; BSR set to: 1
  5634                           ;arp.c: 200: request.operation = ARP_REQUEST;
  5635  003978  0E00               	movlw	0
  5636  00397A  6F1B               	movwf	(ARP_sendRequest@request+7)& (0+255),b
  5637  00397C  0E01               	movlw	1
  5638  00397E  6F1A               	movwf	(ARP_sendRequest@request+6)& (0+255),b
  5639                           
  5640                           ; BSR set to: 1
  5641                           ;arp.c: 201: request.senderIPAddress = ipSender;
  5642  003980  C100  F122         	movff	ARP_sendRequest@ipSender,ARP_sendRequest@request+14
  5643  003984  C101  F123         	movff	ARP_sendRequest@ipSender+1,ARP_sendRequest@request+15
  5644  003988  C102  F124         	movff	ARP_sendRequest@ipSender+2,ARP_sendRequest@request+16
  5645  00398C  C103  F125         	movff	ARP_sendRequest@ipSender+3,ARP_sendRequest@request+17
  5646                           
  5647                           ; BSR set to: 1
  5648                           ;arp.c: 202: request.senderMACAddress = senderMAC;
  5649  003990  EE21  F008         	lfsr	2,ARP_sendRequest@senderMAC
  5650  003994  EE11  F01C         	lfsr	1,ARP_sendRequest@request+8
  5651  003998  0E05               	movlw	5
  5652  00399A                     u10661:
  5653  00399A  CFDB FFE3          	movff	plusw2,plusw1
  5654  00399E  06E8               	decf	wreg,f,c
  5655  0039A0  E2FC               	bc	u10661
  5656                           
  5657                           ; BSR set to: 1
  5658                           ;arp.c: 203: request.targetIPAddress = ipTarget;
  5659  0039A2  C104  F12C         	movff	ARP_sendRequest@ipTarget,ARP_sendRequest@request+24
  5660  0039A6  C105  F12D         	movff	ARP_sendRequest@ipTarget+1,ARP_sendRequest@request+25
  5661  0039AA  C106  F12E         	movff	ARP_sendRequest@ipTarget+2,ARP_sendRequest@request+26
  5662  0039AE  C107  F12F         	movff	ARP_sendRequest@ipTarget+3,ARP_sendRequest@request+27
  5663                           
  5664                           ; BSR set to: 1
  5665                           ;arp.c: 204: request.targetMACAddress = targetMAC;
  5666  0039B2  EE21  F00E         	lfsr	2,ARP_sendRequest@targetMAC
  5667  0039B6  EE11  F026         	lfsr	1,ARP_sendRequest@request+18
  5668  0039BA  0E05               	movlw	5
  5669  0039BC                     u10671:
  5670  0039BC  CFDB FFE3          	movff	plusw2,plusw1
  5671  0039C0  06E8               	decf	wreg,f,c
  5672  0039C2  E2FC               	bc	u10671
  5673                           
  5674                           ; BSR set to: 1
  5675                           ;arp.c: 206: ARP_send(request);
  5676  0039C4  EE21  F014         	lfsr	2,ARP_sendRequest@request
  5677  0039C8  EE00  F0A7         	lfsr	0,ARP_send@arp
  5678  0039CC  0E1F               	movlw	31
  5679  0039CE                     u10681:
  5680  0039CE  CFDB FFEB          	movff	plusw2,plusw0
  5681  0039D2  06E8               	decf	wreg,f,c
  5682  0039D4  E2FC               	bc	u10681
  5683  0039D6  ECB9  F00C         	call	_ARP_send	;wreg free
  5684  0039DA  0012               	return		;funcret
  5685  0039DC                     __end_of_ARP_sendRequest:
  5686                           	opt stack 0
  5687                           tblptru	equ	0xFF8
  5688                           tblptrh	equ	0xFF7
  5689                           tblptrl	equ	0xFF6
  5690                           tablat	equ	0xFF5
  5691                           prodh	equ	0xFF4
  5692                           prodl	equ	0xFF3
  5693                           intcon	equ	0xFF2
  5694                           intcon3	equ	0xFF0
  5695                           indf0	equ	0xFEF
  5696                           postinc0	equ	0xFEE
  5697                           plusw0	equ	0xFEB
  5698                           fsr0h	equ	0xFEA
  5699                           fsr0l	equ	0xFE9
  5700                           wreg	equ	0xFE8
  5701                           indf1	equ	0xFE7
  5702                           postinc1	equ	0xFE6
  5703                           postdec1	equ	0xFE5
  5704                           plusw1	equ	0xFE3
  5705                           fsr1h	equ	0xFE2
  5706                           fsr1l	equ	0xFE1
  5707                           indf2	equ	0xFDF
  5708                           postinc2	equ	0xFDE
  5709                           postdec2	equ	0xFDD
  5710                           plusw2	equ	0xFDB
  5711                           fsr2h	equ	0xFDA
  5712                           fsr2l	equ	0xFD9
  5713                           status	equ	0xFD8
  5714                           
  5715 ;; *************** function _ARP_getEntryFromTable *****************
  5716 ;; Defined at:
  5717 ;;		line 287 in file "src/stack/protocols/arp.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;  index           1    wreg     unsigned char 
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;  index           1    7[BANK0 ] unsigned char 
  5722 ;; Return value:  Size  Location     Type
  5723 ;;                  6    0[BANK0 ] struct macaddress
  5724 ;; Registers used:
  5725 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5726 ;; Tracked objects:
  5727 ;;		On entry : 0/0
  5728 ;;		On exit  : 0/0
  5729 ;;		Unchanged: 0/0
  5730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5731 ;;      Params:         0       7       0       0       0       0       0       0       0
  5732 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5733 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5734 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5735 ;;Total ram usage:        8 bytes
  5736 ;; Hardware stack levels used:    1
  5737 ;; Hardware stack levels required when called:    4
  5738 ;; This function calls:
  5739 ;;		Nothing
  5740 ;; This function is called by:
  5741 ;;		_ipv4_sendFrame
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           	psect	text12
  5746  004B3A                     __ptext12:
  5747                           	opt stack 0
  5748  004B3A                     _ARP_getEntryFromTable:
  5749                           	opt stack 24
  5750                           
  5751                           ;incstack = 0
  5752                           ;ARP_getEntryFromTable@index stored from wreg
  5753  004B3A  0100               	movlb	0	; () banked
  5754  004B3C  6F67               	movwf	ARP_getEntryFromTable@index& (0+255),b
  5755                           
  5756                           ;arp.c: 288: return ARP_table[index].mac;
  5757  004B3E  0100               	movlb	0	; () banked
  5758  004B40  5167               	movf	ARP_getEntryFromTable@index& (0+255),w,b
  5759  004B42  0D0E               	mullw	14
  5760  004B44  0E04               	movlw	4
  5761  004B46  26F3               	addwf	prodl,f,c
  5762  004B48  0E00               	movlw	0
  5763  004B4A  22F4               	addwfc	prodh,f,c
  5764  004B4C  0E00               	movlw	low _ARP_table
  5765  004B4E  24F3               	addwf	prodl,w,c
  5766  004B50  6ED9               	movwf	fsr2l,c
  5767  004B52  0E03               	movlw	high _ARP_table
  5768  004B54  20F4               	addwfc	prodh,w,c
  5769  004B56  6EDA               	movwf	fsr2h,c
  5770  004B58  EE00  F060         	lfsr	0,?_ARP_getEntryFromTable
  5771  004B5C  0E05               	movlw	5
  5772  004B5E                     u10731:
  5773  004B5E  CFDB FFEB          	movff	plusw2,plusw0
  5774  004B62  06E8               	decf	wreg,f,c
  5775  004B64  E2FC               	bc	u10731
  5776  004B66  0012               	return	
  5777  004B68                     __end_of_ARP_getEntryFromTable:
  5778                           	opt stack 0
  5779                           tblptru	equ	0xFF8
  5780                           tblptrh	equ	0xFF7
  5781                           tblptrl	equ	0xFF6
  5782                           tablat	equ	0xFF5
  5783                           prodh	equ	0xFF4
  5784                           prodl	equ	0xFF3
  5785                           intcon	equ	0xFF2
  5786                           intcon3	equ	0xFF0
  5787                           indf0	equ	0xFEF
  5788                           postinc0	equ	0xFEE
  5789                           plusw0	equ	0xFEB
  5790                           fsr0h	equ	0xFEA
  5791                           fsr0l	equ	0xFE9
  5792                           wreg	equ	0xFE8
  5793                           indf1	equ	0xFE7
  5794                           postinc1	equ	0xFE6
  5795                           postdec1	equ	0xFE5
  5796                           plusw1	equ	0xFE3
  5797                           fsr1h	equ	0xFE2
  5798                           fsr1l	equ	0xFE1
  5799                           indf2	equ	0xFDF
  5800                           postinc2	equ	0xFDE
  5801                           postdec2	equ	0xFDD
  5802                           plusw2	equ	0xFDB
  5803                           fsr2h	equ	0xFDA
  5804                           fsr2l	equ	0xFD9
  5805                           status	equ	0xFD8
  5806                           
  5807 ;; *************** function _ARP_checkForEntry *****************
  5808 ;; Defined at:
  5809 ;;		line 274 in file "src/stack/protocols/arp.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;  ip              4    7[BANK0 ] struct ipv4_address
  5812 ;;  index           2   11[BANK0 ] PTR unsigned char 
  5813 ;;		 -> ipv4_setIPSourceAddress@index(1), ipv4_sendFrame@index(1), 
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;  i               1   21[BANK0 ] unsigned char 
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  1    wreg      unsigned char 
  5818 ;; Registers used:
  5819 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5825 ;;      Params:         0       6       0       0       0       0       0       0       0
  5826 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5827 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5828 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5829 ;;Total ram usage:       15 bytes
  5830 ;; Hardware stack levels used:    1
  5831 ;; Hardware stack levels required when called:    5
  5832 ;; This function calls:
  5833 ;;		_getMillis
  5834 ;;		_ipv4_cmp
  5835 ;; This function is called by:
  5836 ;;		_ipv4_sendFrame
  5837 ;;		_ipv4_setIPSourceAddress
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           	psect	text13
  5842  0039DC                     __ptext13:
  5843                           	opt stack 0
  5844  0039DC                     _ARP_checkForEntry:
  5845                           	opt stack 24
  5846                           
  5847                           ;arp.c: 275: for (uint8_t i = 0; i < 8; i++) {
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;incstack = 0
  5851  0039DC  0E00               	movlw	0
  5852  0039DE  0100               	movlb	0	; () banked
  5853  0039E0  6F75               	movwf	ARP_checkForEntry@i& (0+255),b
  5854  0039E2                     l8767:
  5855                           
  5856                           ; BSR set to: 0
  5857  0039E2  0E07               	movlw	7
  5858  0039E4  6575               	cpfsgt	ARP_checkForEntry@i& (0+255),b
  5859  0039E6  D001               	goto	l967
  5860  0039E8  D050               	goto	u10720
  5861  0039EA                     l967:
  5862                           
  5863                           ; BSR set to: 0
  5864                           ;arp.c: 276: if (ipv4_cmp(&ARP_table[i].ip, &ip)) {
  5865                           
  5866                           ; BSR set to: 0
  5867  0039EA  5175               	movf	ARP_checkForEntry@i& (0+255),w,b
  5868  0039EC  0D0E               	mullw	14
  5869  0039EE  0E00               	movlw	low _ARP_table
  5870  0039F0  24F3               	addwf	prodl,w,c
  5871  0039F2  6F60               	movwf	ipv4_cmp@a& (0+255),b
  5872  0039F4  0E03               	movlw	high _ARP_table
  5873  0039F6  20F4               	addwfc	prodh,w,c
  5874  0039F8  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
  5875  0039FA  0E67               	movlw	low ARP_checkForEntry@ip
  5876  0039FC  6F62               	movwf	ipv4_cmp@b& (0+255),b
  5877  0039FE  0E00               	movlw	high ARP_checkForEntry@ip
  5878  003A00  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
  5879  003A02  EC84  F024         	call	_ipv4_cmp	;wreg free
  5880  003A06  0100               	movlb	0	; () banked
  5881  003A08  A0D8               	btfss	status,0,c
  5882  003A0A  D03D               	goto	l970
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;arp.c: 277: if (getMillis() - ARP_table[i].timeCreated < 30000) {
  5886  003A0C  5175               	movf	ARP_checkForEntry@i& (0+255),w,b
  5887  003A0E  0D0E               	mullw	14
  5888  003A10  0E0A               	movlw	10
  5889  003A12  26F3               	addwf	prodl,f,c
  5890  003A14  0E00               	movlw	0
  5891  003A16  22F4               	addwfc	prodh,f,c
  5892  003A18  0E00               	movlw	low _ARP_table
  5893  003A1A  24F3               	addwf	prodl,w,c
  5894  003A1C  6ED9               	movwf	fsr2l,c
  5895  003A1E  0E03               	movlw	high _ARP_table
  5896  003A20  20F4               	addwfc	prodh,w,c
  5897  003A22  6EDA               	movwf	fsr2h,c
  5898  003A24  CFDE F06D          	movff	postinc2,??_ARP_checkForEntry
  5899  003A28  CFDE F06E          	movff	postinc2,??_ARP_checkForEntry+1
  5900  003A2C  CFDE F06F          	movff	postinc2,??_ARP_checkForEntry+2
  5901  003A30  CFDE F070          	movff	postinc2,??_ARP_checkForEntry+3
  5902  003A34  1F6D               	comf	??_ARP_checkForEntry& (0+255),f,b
  5903  003A36  1F6E               	comf	(??_ARP_checkForEntry+1)& (0+255),f,b
  5904  003A38  1F6F               	comf	(??_ARP_checkForEntry+2)& (0+255),f,b
  5905  003A3A  1F70               	comf	(??_ARP_checkForEntry+3)& (0+255),f,b
  5906  003A3C  2B6D               	incf	??_ARP_checkForEntry& (0+255),f,b
  5907  003A3E  0E00               	movlw	0
  5908  003A40  236E               	addwfc	(??_ARP_checkForEntry+1)& (0+255),f,b
  5909  003A42  236F               	addwfc	(??_ARP_checkForEntry+2)& (0+255),f,b
  5910  003A44  2370               	addwfc	(??_ARP_checkForEntry+3)& (0+255),f,b
  5911  003A46  EC2F  F027         	call	_getMillis	;wreg free
  5912  003A4A  0100               	movlb	0	; () banked
  5913  003A4C  516D               	movf	??_ARP_checkForEntry& (0+255),w,b
  5914  003A4E  2560               	addwf	?_getMillis& (0+255),w,b
  5915  003A50  6F71               	movwf	(??_ARP_checkForEntry+4)& (0+255),b
  5916  003A52  516E               	movf	(??_ARP_checkForEntry+1)& (0+255),w,b
  5917  003A54  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
  5918  003A56  6F72               	movwf	(??_ARP_checkForEntry+5)& (0+255),b
  5919  003A58  516F               	movf	(??_ARP_checkForEntry+2)& (0+255),w,b
  5920  003A5A  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
  5921  003A5C  6F73               	movwf	(??_ARP_checkForEntry+6)& (0+255),b
  5922  003A5E  5170               	movf	(??_ARP_checkForEntry+3)& (0+255),w,b
  5923  003A60  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
  5924  003A62  6F74               	movwf	(??_ARP_checkForEntry+7)& (0+255),b
  5925  003A64  5174               	movf	(??_ARP_checkForEntry+7)& (0+255),w,b
  5926  003A66  1173               	iorwf	(??_ARP_checkForEntry+6)& (0+255),w,b
  5927  003A68  E10E               	bnz	l8781
  5928  003A6A  0E30               	movlw	48
  5929  003A6C  5D71               	subwf	(??_ARP_checkForEntry+4)& (0+255),w,b
  5930  003A6E  0E75               	movlw	117
  5931  003A70  5972               	subwfb	(??_ARP_checkForEntry+5)& (0+255),w,b
  5932  003A72  B0D8               	btfsc	status,0,c
  5933  003A74  D008               	goto	l970
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;arp.c: 279: *index = i;
  5937  003A76  C06B  FFD9         	movff	ARP_checkForEntry@index,fsr2l
  5938  003A7A  C06C  FFDA         	movff	ARP_checkForEntry@index+1,fsr2h
  5939  003A7E  C075  FFDF         	movff	ARP_checkForEntry@i,indf2
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;arp.c: 280: return 1;
  5943  003A82  0E01               	movlw	1
  5944                           
  5945                           ; BSR set to: 0
  5946  003A84  0012               	return	
  5947  003A86                     l970:
  5948  003A86                     l8781:
  5949                           
  5950                           ; BSR set to: 0
  5951  003A86  2B75               	incf	ARP_checkForEntry@i& (0+255),f,b
  5952  003A88  D7AC               	goto	l8767
  5953  003A8A                     u10720:
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;arp.c: 281: }
  5957                           ;arp.c: 282: }
  5958                           ;arp.c: 283: }
  5959                           ;arp.c: 284: return 0;
  5960                           
  5961                           ; BSR set to: 0
  5962  003A8A  0E00               	movlw	0
  5963  003A8C  0012               	return	
  5964  003A8E                     __end_of_ARP_checkForEntry:
  5965                           	opt stack 0
  5966                           tblptru	equ	0xFF8
  5967                           tblptrh	equ	0xFF7
  5968                           tblptrl	equ	0xFF6
  5969                           tablat	equ	0xFF5
  5970                           prodh	equ	0xFF4
  5971                           prodl	equ	0xFF3
  5972                           intcon	equ	0xFF2
  5973                           intcon3	equ	0xFF0
  5974                           indf0	equ	0xFEF
  5975                           postinc0	equ	0xFEE
  5976                           plusw0	equ	0xFEB
  5977                           fsr0h	equ	0xFEA
  5978                           fsr0l	equ	0xFE9
  5979                           wreg	equ	0xFE8
  5980                           indf1	equ	0xFE7
  5981                           postinc1	equ	0xFE6
  5982                           postdec1	equ	0xFE5
  5983                           plusw1	equ	0xFE3
  5984                           fsr1h	equ	0xFE2
  5985                           fsr1l	equ	0xFE1
  5986                           indf2	equ	0xFDF
  5987                           postinc2	equ	0xFDE
  5988                           postdec2	equ	0xFDD
  5989                           plusw2	equ	0xFDB
  5990                           fsr2h	equ	0xFDA
  5991                           fsr2l	equ	0xFD9
  5992                           status	equ	0xFD8
  5993                           
  5994 ;; *************** function _ethernet_rxGetNewFrame *****************
  5995 ;; Defined at:
  5996 ;;		line 54 in file "src/eth/ethernet.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;  frame           2  120[BANK1 ] PTR struct ethernetFrame
  5999 ;;		 -> stack.ethernet(15), stack(121), 
  6000 ;; Auto vars:     Size  Location     Type
  6001 ;;  err             3  131[BANK1 ] struct error
  6002 ;; Return value:  Size  Location     Type
  6003 ;;                  3  120[BANK1 ] struct error
  6004 ;; Registers used:
  6005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6006 ;; Tracked objects:
  6007 ;;		On entry : 0/0
  6008 ;;		On exit  : 0/0
  6009 ;;		Unchanged: 0/0
  6010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6011 ;;      Params:         0       0       3       0       0       0       0       0       0
  6012 ;;      Locals:         0       0       3       0       0       0       0       0       0
  6013 ;;      Temps:          0       0       8       0       0       0       0       0       0
  6014 ;;      Totals:         0       0      14       0       0       0       0       0       0
  6015 ;;Total ram usage:       14 bytes
  6016 ;; Hardware stack levels used:    1
  6017 ;; Hardware stack levels required when called:   12
  6018 ;; This function calls:
  6019 ;;		_ARP_handleNewPacket
  6020 ;;		_UARTTransmitInt
  6021 ;;		_UARTTransmitText
  6022 ;;		_etherTypeToString
  6023 ;;		_ethernetController_dropPacket
  6024 ;;		_ethernetController_getEtherTypeField
  6025 ;;		_ethernetController_getNextPacketPointer
  6026 ;;		_ethernetController_getRSV
  6027 ;;		_ethernetController_updateNextPacketPointer
  6028 ;;		_getMillis
  6029 ;;		_intToString
  6030 ;;		_ipv4_handleNewPacket
  6031 ;;		_macToString
  6032 ;; This function is called by:
  6033 ;;		_handleStackBackgroundTasks
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           	psect	text14
  6038  0000EC                     __ptext14:
  6039                           	opt stack 0
  6040  0000EC                     _ethernet_rxGetNewFrame:
  6041                           	opt stack 17
  6042                           
  6043                           ;ethernet.c: 55: uint32_t static counter = 0;
  6044                           ;ethernet.c: 56: error_t err;
  6045                           ;ethernet.c: 57: err.module = ERROR_MODULE_ETHERNET;
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;incstack = 0
  6049  0000EC  0E02               	movlw	2
  6050  0000EE  0101               	movlb	1	; () banked
  6051  0000F0  6F83               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  6052                           
  6053                           ;ethernet.c: 58: err.code = (uint16_t)0;
  6054  0000F2  0E00               	movlw	0
  6055  0000F4  6F85               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  6056  0000F6  0E00               	movlw	0
  6057  0000F8  6F84               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  6058                           
  6059                           ; BSR set to: 1
  6060                           ;ethernet.c: 59: frame->tReceived = getMillis();
  6061  0000FA  EC2F  F027         	call	_getMillis	;wreg free
  6062  0000FE  0101               	movlb	1	; () banked
  6063  000100  EE20 F01E          	lfsr	2,30
  6064  000104  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6065  000106  26D9               	addwf	fsr2l,f,c
  6066  000108  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6067  00010A  22DA               	addwfc	fsr2h,f,c
  6068  00010C  0100               	movlb	0	; () banked
  6069  00010E  C060  FFDE         	movff	?_getMillis,postinc2
  6070  000112  C061  FFDE         	movff	?_getMillis+1,postinc2
  6071  000116  C062  FFDE         	movff	?_getMillis+2,postinc2
  6072  00011A  C063  FFDE         	movff	?_getMillis+3,postinc2
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;ethernet.c: 60: frame->memory.start = ethernetController_getNextPacketPointer();
  6076  00011E  EC5A  F027         	call	_ethernetController_getNextPacketPointer	;wreg free
  6077  000122  0101               	movlb	1	; () banked
  6078  000124  EE20 F010          	lfsr	2,16
  6079  000128  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6080  00012A  26D9               	addwf	fsr2l,f,c
  6081  00012C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6082  00012E  22DA               	addwfc	fsr2h,f,c
  6083  000130  0100               	movlb	0	; () banked
  6084  000132  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  6085  000136  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;ethernet.c: 62: ethernetController_updateNextPacketPointer();
  6089  00013A  ECA5  F020         	call	_ethernetController_updateNextPacketPointer	;wreg free
  6090                           
  6091                           ;ethernet.c: 65: frame->memory.fIsAssigned = 1;
  6092  00013E  0101               	movlb	1	; () banked
  6093  000140  EE20 F016          	lfsr	2,22
  6094  000144  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6095  000146  26D9               	addwf	fsr2l,f,c
  6096  000148  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6097  00014A  22DA               	addwfc	fsr2h,f,c
  6098  00014C  0E01               	movlw	1
  6099  00014E  6EDF               	movwf	indf2,c
  6100                           
  6101                           ; BSR set to: 1
  6102                           ;ethernet.c: 66: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  6103  000150  EE20 F010          	lfsr	2,16
  6104  000154  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6105  000156  26D9               	addwf	fsr2l,f,c
  6106  000158  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6107  00015A  22DA               	addwfc	fsr2h,f,c
  6108  00015C  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  6109  000160  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  6110  000164  EC1E  F021         	call	_ethernetController_getRSV	;wreg free
  6111  000168  0101               	movlb	1	; () banked
  6112  00016A  EE20 F019          	lfsr	2,25
  6113  00016E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6114  000170  26D9               	addwf	fsr2l,f,c
  6115  000172  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6116  000174  22DA               	addwfc	fsr2h,f,c
  6117  000176  0E04               	movlw	4
  6118  000178                     u11071:
  6119  000178  CFEB FFDB          	movff	plusw0,plusw2
  6120  00017C  06E8               	decf	wreg,f,c
  6121  00017E  E2FC               	bc	u11071
  6122                           
  6123                           ; BSR set to: 1
  6124                           ;ethernet.c: 67: frame->memory.length = frame->receiveStatusVector.length;
  6125  000180  EE20 F019          	lfsr	2,25
  6126  000184  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6127  000186  26D9               	addwf	fsr2l,f,c
  6128  000188  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6129  00018A  22DA               	addwfc	fsr2h,f,c
  6130  00018C  EE10 F014          	lfsr	1,20
  6131  000190  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6132  000192  26E1               	addwf	fsr1l,f,c
  6133  000194  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6134  000196  22E2               	addwfc	fsr1h,f,c
  6135  000198  CFDE FFE6          	movff	postinc2,postinc1
  6136  00019C  CFDD FFE5          	movff	postdec2,postdec1
  6137                           
  6138                           ; BSR set to: 1
  6139                           ;ethernet.c: 70: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  6140  0001A0  EE20 F014          	lfsr	2,20
  6141  0001A4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6142  0001A6  26D9               	addwf	fsr2l,f,c
  6143  0001A8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6144  0001AA  22DA               	addwfc	fsr2h,f,c
  6145  0001AC  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  6146  0001B0  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6147  0001B4  EE20 F010          	lfsr	2,16
  6148  0001B8  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6149  0001BA  26D9               	addwf	fsr2l,f,c
  6150  0001BC  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6151  0001BE  22DA               	addwfc	fsr2h,f,c
  6152  0001C0  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6153  0001C4  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6154  0001C8  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6155  0001CA  277D               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  6156  0001CC  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6157  0001CE  237E               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  6158  0001D0  0E60               	movlw	96
  6159  0001D2  5D7E               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6160  0001D4  A0D8               	btfss	status,0,c
  6161  0001D6  D03B               	goto	l362
  6162                           
  6163                           ; BSR set to: 1
  6164                           ;ethernet.c: 72: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  6165  0001D8  0E00               	movlw	0
  6166  0001DA  6F7B               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  6167  0001DC  0E30               	movlw	48
  6168  0001DE  6F7C               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  6169  0001E0  EE20 F014          	lfsr	2,20
  6170  0001E4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6171  0001E6  26D9               	addwf	fsr2l,f,c
  6172  0001E8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6173  0001EA  22DA               	addwfc	fsr2h,f,c
  6174  0001EC  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6175  0001F0  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6176  0001F4  0EFF               	movlw	255
  6177  0001F6  6F7F               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  6178  0001F8  0E2F               	movlw	47
  6179  0001FA  6F80               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  6180  0001FC  EE20 F010          	lfsr	2,16
  6181  000200  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6182  000202  26D9               	addwf	fsr2l,f,c
  6183  000204  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6184  000206  22DA               	addwfc	fsr2h,f,c
  6185  000208  CFDE F181          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  6186  00020C  CFDD F182          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  6187  000210  1F81               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6188  000212  1F82               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6189  000214  4B81               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6190  000216  2B82               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6191  000218  517F               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  6192  00021A  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6193  00021C  5180               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  6194  00021E  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6195  000220  1F81               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6196  000222  1F82               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6197  000224  4B81               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6198  000226  2B82               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6199  000228  517D               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  6200  00022A  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6201  00022C  517E               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6202  00022E  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6203  000230  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6204  000232  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6205  000234  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6206  000236  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6207  000238  EE20 F012          	lfsr	2,18
  6208  00023C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6209  00023E  26D9               	addwf	fsr2l,f,c
  6210  000240  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6211  000242  22DA               	addwfc	fsr2h,f,c
  6212  000244  C181  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  6213  000248  C182  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  6214                           
  6215                           ;ethernet.c: 73: } else {
  6216  00024C  D022               	goto	l363
  6217  00024E                     l362:
  6218                           
  6219                           ; BSR set to: 1
  6220                           ;ethernet.c: 74: frame->memory.end = frame->memory.start + frame->memory.length;
  6221                           
  6222                           ; BSR set to: 1
  6223  00024E  EE20 F014          	lfsr	2,20
  6224  000252  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6225  000254  26D9               	addwf	fsr2l,f,c
  6226  000256  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6227  000258  22DA               	addwfc	fsr2h,f,c
  6228  00025A  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  6229  00025E  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6230  000262  EE20 F010          	lfsr	2,16
  6231  000266  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6232  000268  26D9               	addwf	fsr2l,f,c
  6233  00026A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6234  00026C  22DA               	addwfc	fsr2h,f,c
  6235  00026E  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6236  000272  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6237  000276  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6238  000278  277D               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  6239  00027A  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6240  00027C  237E               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  6241  00027E  EE20 F012          	lfsr	2,18
  6242  000282  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6243  000284  26D9               	addwf	fsr2l,f,c
  6244  000286  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6245  000288  22DA               	addwfc	fsr2h,f,c
  6246  00028A  C17D  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  6247  00028E  C17E  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  6248  000292                     l363:
  6249                           
  6250                           ; BSR set to: 1
  6251                           ;ethernet.c: 75: }
  6252                           ;ethernet.c: 76: frame->ethertype = ethernetController_getEtherTypeField(frame->memory);
  6253                           
  6254                           ; BSR set to: 1
  6255  000292  EE20 F010          	lfsr	2,16
  6256  000296  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6257  000298  26D9               	addwf	fsr2l,f,c
  6258  00029A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6259  00029C  22DA               	addwfc	fsr2h,f,c
  6260  00029E  EE00  F06F         	lfsr	0,ethernetController_getEtherTypeField@field
  6261  0002A2  0E08               	movlw	8
  6262  0002A4                     u11091:
  6263  0002A4  CFDB FFEB          	movff	plusw2,plusw0
  6264  0002A8  06E8               	decf	wreg,f,c
  6265  0002AA  E2FC               	bc	u11091
  6266  0002AC  ECCB  F021         	call	_ethernetController_getEtherTypeField	;wreg free
  6267  0002B0  0101               	movlb	1	; () banked
  6268  0002B2  EE20 F00E          	lfsr	2,14
  6269  0002B6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6270  0002B8  26D9               	addwf	fsr2l,f,c
  6271  0002BA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6272  0002BC  22DA               	addwfc	fsr2h,f,c
  6273  0002BE  0100               	movlb	0	; () banked
  6274  0002C0  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  6275  0002C4  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;ethernet.c: 78: UARTTransmitText("[");
  6279  0002C8  0ECE               	movlw	low (STR_70+3)
  6280  0002CA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6281  0002CC  0E7F               	movlw	high (STR_70+3)
  6282  0002CE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6283  0002D0  EC09  F023         	call	_UARTTransmitText	;wreg free
  6284                           
  6285                           ;ethernet.c: 79: UARTTransmitText(intToString(counter++));
  6286  0002D4  C039  F073         	movff	ethernet_rxGetNewFrame@counter,intToString@val
  6287  0002D8  C03A  F074         	movff	ethernet_rxGetNewFrame@counter+1,intToString@val+1
  6288  0002DC  C03B  F075         	movff	ethernet_rxGetNewFrame@counter+2,intToString@val+2
  6289  0002E0  C03C  F076         	movff	ethernet_rxGetNewFrame@counter+3,intToString@val+3
  6290  0002E4  EC21  F00E         	call	_intToString	;wreg free
  6291  0002E8  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6292  0002EC  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6293  0002F0  EC09  F023         	call	_UARTTransmitText	;wreg free
  6294  0002F4  0E01               	movlw	1
  6295  0002F6  2639               	addwf	ethernet_rxGetNewFrame@counter,f,c
  6296  0002F8  0E00               	movlw	0
  6297  0002FA  223A               	addwfc	ethernet_rxGetNewFrame@counter+1,f,c
  6298  0002FC  223B               	addwfc	ethernet_rxGetNewFrame@counter+2,f,c
  6299  0002FE  223C               	addwfc	ethernet_rxGetNewFrame@counter+3,f,c
  6300                           
  6301                           ;ethernet.c: 80: UARTTransmitText("]");
  6302  000300  0EFA               	movlw	low (STR_18+1)
  6303  000302  0100               	movlb	0	; () banked
  6304  000304  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6305  000306  0E7F               	movlw	high (STR_18+1)
  6306  000308  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6307  00030A  EC09  F023         	call	_UARTTransmitText	;wreg free
  6308                           
  6309                           ;ethernet.c: 82: if (frame->receiveStatusVector.broadcast)
  6310  00030E  0101               	movlb	1	; () banked
  6311  000310  EE20 F01B          	lfsr	2,27
  6312  000314  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6313  000316  26D9               	addwf	fsr2l,f,c
  6314  000318  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6315  00031A  22DA               	addwfc	fsr2h,f,c
  6316  00031C  AEDF               	btfss	indf2,7,c
  6317  00031E  D007               	goto	l364
  6318                           
  6319                           ; BSR set to: 1
  6320                           ;ethernet.c: 83: UARTTransmitText("[Broadcast]");
  6321  000320  0E65               	movlw	low STR_3
  6322  000322  0100               	movlb	0	; () banked
  6323  000324  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6324  000326  0E7F               	movlw	high STR_3
  6325  000328  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6326  00032A  EC09  F023         	call	_UARTTransmitText	;wreg free
  6327  00032E                     l364:
  6328                           
  6329                           ;ethernet.c: 84: if (frame->receiveStatusVector.unicast)
  6330  00032E  0101               	movlb	1	; () banked
  6331  000330  EE20 F01D          	lfsr	2,29
  6332  000334  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6333  000336  26D9               	addwf	fsr2l,f,c
  6334  000338  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6335  00033A  22DA               	addwfc	fsr2h,f,c
  6336  00033C  A4DF               	btfss	indf2,2,c
  6337  00033E  D007               	goto	l365
  6338                           
  6339                           ; BSR set to: 1
  6340                           ;ethernet.c: 85: UARTTransmitText("[Unicast]");
  6341  000340  0E86               	movlw	low STR_4
  6342  000342  0100               	movlb	0	; () banked
  6343  000344  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6344  000346  0E7F               	movlw	high STR_4
  6345  000348  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6346  00034A  EC09  F023         	call	_UARTTransmitText	;wreg free
  6347  00034E                     l365:
  6348                           
  6349                           ;ethernet.c: 86: if (!frame->receiveStatusVector.receivedOk)
  6350  00034E  0101               	movlb	1	; () banked
  6351  000350  EE20 F01B          	lfsr	2,27
  6352  000354  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6353  000356  26D9               	addwf	fsr2l,f,c
  6354  000358  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6355  00035A  22DA               	addwfc	fsr2h,f,c
  6356  00035C  BADF               	btfsc	indf2,5,c
  6357  00035E  D007               	goto	l366
  6358                           
  6359                           ; BSR set to: 1
  6360                           ;ethernet.c: 87: UARTTransmitText("[Symbol Errors]");
  6361  000360  0EF8               	movlw	low STR_5
  6362  000362  0100               	movlb	0	; () banked
  6363  000364  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6364  000366  0E7E               	movlw	high STR_5
  6365  000368  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6366  00036A  EC09  F023         	call	_UARTTransmitText	;wreg free
  6367  00036E                     l366:
  6368                           
  6369                           ;ethernet.c: 89: UARTTransmitText("[");
  6370  00036E  0ECE               	movlw	low (STR_70+3)
  6371  000370  0100               	movlb	0	; () banked
  6372  000372  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6373  000374  0E7F               	movlw	high (STR_70+3)
  6374  000376  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6375  000378  EC09  F023         	call	_UARTTransmitText	;wreg free
  6376                           
  6377                           ;ethernet.c: 90: UARTTransmitText(intToString(frame->tReceived));
  6378  00037C  0101               	movlb	1	; () banked
  6379  00037E  EE20 F01E          	lfsr	2,30
  6380  000382  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6381  000384  26D9               	addwf	fsr2l,f,c
  6382  000386  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6383  000388  22DA               	addwfc	fsr2h,f,c
  6384  00038A  CFDE F073          	movff	postinc2,intToString@val
  6385  00038E  CFDE F074          	movff	postinc2,intToString@val+1
  6386  000392  CFDE F075          	movff	postinc2,intToString@val+2
  6387  000396  CFDE F076          	movff	postinc2,intToString@val+3
  6388  00039A  EC21  F00E         	call	_intToString	;wreg free
  6389  00039E  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6390  0003A2  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6391  0003A6  EC09  F023         	call	_UARTTransmitText	;wreg free
  6392                           
  6393                           ;ethernet.c: 91: UARTTransmitText("]");
  6394  0003AA  0EFA               	movlw	low (STR_18+1)
  6395  0003AC  0100               	movlb	0	; () banked
  6396  0003AE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6397  0003B0  0E7F               	movlw	high (STR_18+1)
  6398  0003B2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6399  0003B4  EC09  F023         	call	_UARTTransmitText	;wreg free
  6400                           
  6401                           ;ethernet.c: 93: switch (frame->ethertype) {
  6402  0003B8  D096               	goto	l367
  6403  0003BA                     
  6404                           ;ethernet.c: 95: UARTTransmitText("[ARP]");
  6405  0003BA  0EC0               	movlw	low STR_8
  6406  0003BC  0100               	movlb	0	; () banked
  6407  0003BE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6408  0003C0  0E7F               	movlw	high STR_8
  6409  0003C2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6410  0003C4  EC09  F023         	call	_UARTTransmitText	;wreg free
  6411                           
  6412                           ;ethernet.c: 96: ARP_handleNewPacket(frame);
  6413  0003C8  C178  F0FC         	movff	ethernet_rxGetNewFrame@frame,ARP_handleNewPacket@frame
  6414  0003CC  C179  F0FD         	movff	ethernet_rxGetNewFrame@frame+1,ARP_handleNewPacket@frame+1
  6415  0003D0  EC49  F014         	call	_ARP_handleNewPacket	;wreg free
  6416                           
  6417                           ;ethernet.c: 99: break;
  6418                           
  6419                           ;ethernet.c: 98: case ETHERTYPE_FLOW_CONTROL:
  6420                           
  6421                           ;ethernet.c: 97: break;
  6422  0003D4  D0AA               	goto	l369
  6423  0003D6                     
  6424                           ;ethernet.c: 101: UARTTransmitText("[IPv4]");
  6425  0003D6  0EB9               	movlw	low STR_9
  6426  0003D8  0100               	movlb	0	; () banked
  6427  0003DA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6428  0003DC  0E7F               	movlw	high STR_9
  6429  0003DE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6430  0003E0  EC09  F023         	call	_UARTTransmitText	;wreg free
  6431                           
  6432                           ;ethernet.c: 102: ipv4_handleNewPacket(frame);
  6433  0003E4  C178  F0B5         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  6434  0003E8  C179  F0B6         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  6435  0003EC  EC95  F012         	call	_ipv4_handleNewPacket	;wreg free
  6436                           
  6437                           ;ethernet.c: 105: break;
  6438                           
  6439                           ;ethernet.c: 104: case ETHERTYPE_WOL:
  6440                           
  6441                           ;ethernet.c: 103: break;
  6442  0003F0  D09C               	goto	l369
  6443  0003F2                     
  6444                           ;ethernet.c: 107: UARTTransmitText("[");
  6445  0003F2  0ECE               	movlw	low (STR_70+3)
  6446  0003F4  0100               	movlb	0	; () banked
  6447  0003F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6448  0003F8  0E7F               	movlw	high (STR_70+3)
  6449  0003FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6450  0003FC  EC09  F023         	call	_UARTTransmitText	;wreg free
  6451                           
  6452                           ;ethernet.c: 108: UARTTransmitText(macToString(frame->source));
  6453  000400  0101               	movlb	1	; () banked
  6454  000402  EE20 F002          	lfsr	2,2
  6455  000406  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6456  000408  26D9               	addwf	fsr2l,f,c
  6457  00040A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6458  00040C  22DA               	addwfc	fsr2h,f,c
  6459  00040E  EE00  F07A         	lfsr	0,macToString@addr
  6460  000412  0E05               	movlw	5
  6461  000414                     u11131:
  6462  000414  CFDB FFEB          	movff	plusw2,plusw0
  6463  000418  06E8               	decf	wreg,f,c
  6464  00041A  E2FC               	bc	u11131
  6465  00041C  EC68  F019         	call	_macToString	;wreg free
  6466  000420  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  6467  000424  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  6468  000428  EC09  F023         	call	_UARTTransmitText	;wreg free
  6469                           
  6470                           ;ethernet.c: 109: UARTTransmitText("->");
  6471  00042C  0EF3               	movlw	low STR_11
  6472  00042E  0100               	movlb	0	; () banked
  6473  000430  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6474  000432  0E7F               	movlw	high STR_11
  6475  000434  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6476  000436  EC09  F023         	call	_UARTTransmitText	;wreg free
  6477                           
  6478                           ;ethernet.c: 110: UARTTransmitText(macToString(frame->destination));
  6479  00043A  0101               	movlb	1	; () banked
  6480  00043C  EE20 F008          	lfsr	2,8
  6481  000440  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6482  000442  26D9               	addwf	fsr2l,f,c
  6483  000444  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6484  000446  22DA               	addwfc	fsr2h,f,c
  6485  000448  EE00  F07A         	lfsr	0,macToString@addr
  6486  00044C  0E05               	movlw	5
  6487  00044E                     u11141:
  6488  00044E  CFDB FFEB          	movff	plusw2,plusw0
  6489  000452  06E8               	decf	wreg,f,c
  6490  000454  E2FC               	bc	u11141
  6491  000456  EC68  F019         	call	_macToString	;wreg free
  6492  00045A  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  6493  00045E  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  6494  000462  EC09  F023         	call	_UARTTransmitText	;wreg free
  6495                           
  6496                           ;ethernet.c: 111: UARTTransmitText("][");
  6497  000466  0EF6               	movlw	low STR_12
  6498  000468  0100               	movlb	0	; () banked
  6499  00046A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6500  00046C  0E7F               	movlw	high STR_12
  6501  00046E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6502  000470  EC09  F023         	call	_UARTTransmitText	;wreg free
  6503                           
  6504                           ;ethernet.c: 112: UARTTransmitText(etherTypeToString(frame->ethertype));
  6505  000474  0101               	movlb	1	; () banked
  6506  000476  EE20 F00E          	lfsr	2,14
  6507  00047A  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6508  00047C  26D9               	addwf	fsr2l,f,c
  6509  00047E  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6510  000480  22DA               	addwfc	fsr2h,f,c
  6511  000482  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  6512  000486  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  6513  00048A  EC1F  F024         	call	_etherTypeToString	;wreg free
  6514  00048E  C060  F098         	movff	?_etherTypeToString,UARTTransmitText@str
  6515  000492  C061  F099         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  6516  000496  EC09  F023         	call	_UARTTransmitText	;wreg free
  6517                           
  6518                           ;ethernet.c: 113: UARTTransmitText("][L=");
  6519  00049A  0EDF               	movlw	low STR_13
  6520  00049C  0100               	movlb	0	; () banked
  6521  00049E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6522  0004A0  0E7F               	movlw	high STR_13
  6523  0004A2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6524  0004A4  EC09  F023         	call	_UARTTransmitText	;wreg free
  6525                           
  6526                           ;ethernet.c: 114: UARTTransmitInt(frame->length);
  6527  0004A8  C178  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  6528  0004AC  C179  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  6529  0004B0  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  6530  0004B4  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6531  0004B8  C17B  F09A         	movff	??_ethernet_rxGetNewFrame,UARTTransmitInt@val
  6532  0004BC  C17C  F09B         	movff	??_ethernet_rxGetNewFrame+1,UARTTransmitInt@val+1
  6533  0004C0  0100               	movlb	0	; () banked
  6534  0004C2  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  6535  0004C4  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  6536  0004C6  ECA2  F026         	call	_UARTTransmitInt	;wreg free
  6537                           
  6538                           ;ethernet.c: 115: UARTTransmitText("]");
  6539  0004CA  0EFA               	movlw	low (STR_18+1)
  6540  0004CC  0100               	movlb	0	; () banked
  6541  0004CE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6542  0004D0  0E7F               	movlw	high (STR_18+1)
  6543  0004D2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6544  0004D4  EC09  F023         	call	_UARTTransmitText	;wreg free
  6545                           
  6546                           ;ethernet.c: 116: ethernetController_dropPacket(frame);
  6547  0004D8  C178  F072         	movff	ethernet_rxGetNewFrame@frame,ethernetController_dropPacket@frame
  6548  0004DC  C179  F073         	movff	ethernet_rxGetNewFrame@frame+1,ethernetController_dropPacket@frame+1
  6549  0004E0  ECA5  F024         	call	_ethernetController_dropPacket	;wreg free
  6550                           
  6551                           ;ethernet.c: 117: break;
  6552  0004E4  D022               	goto	l369
  6553  0004E6                     l367:
  6554  0004E6  0101               	movlb	1	; () banked
  6555  0004E8  EE20 F00E          	lfsr	2,14
  6556  0004EC  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6557  0004EE  26D9               	addwf	fsr2l,f,c
  6558  0004F0  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6559  0004F2  22DA               	addwfc	fsr2h,f,c
  6560  0004F4  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  6561  0004F8  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6562                           
  6563                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6564                           ; Switch size 1, requested type "space"
  6565                           ; Number of cases is 2, Range of values is 8 to 136
  6566                           ; switch strategies available:
  6567                           ; Name         Instructions Cycles
  6568                           ; simple_byte            7     4 (average)
  6569                           ;	Chosen strategy is simple_byte
  6570  0004FC  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6571  0004FE  0A08               	xorlw	8	; case 8
  6572  000500  B4D8               	btfsc	status,2,c
  6573  000502  D004               	goto	l9767
  6574  000504  0A80               	xorlw	128	; case 136
  6575  000506  B4D8               	btfsc	status,2,c
  6576  000508  D00C               	goto	l9769
  6577  00050A  D773               	goto	l373
  6578  00050C                     l9767:
  6579                           
  6580                           ; BSR set to: 1
  6581                           ; Switch size 1, requested type "space"
  6582                           ; Number of cases is 3, Range of values is 0 to 66
  6583                           ; switch strategies available:
  6584                           ; Name         Instructions Cycles
  6585                           ; simple_byte           10     6 (average)
  6586                           ;	Chosen strategy is simple_byte
  6587  00050C  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6588  00050E  0A00               	xorlw	0	; case 0
  6589  000510  B4D8               	btfsc	status,2,c
  6590  000512  D761               	goto	l371
  6591  000514  0A06               	xorlw	6	; case 6
  6592  000516  B4D8               	btfsc	status,2,c
  6593  000518  D750               	goto	l368
  6594  00051A  0A44               	xorlw	68	; case 66
  6595  00051C  B4D8               	btfsc	status,2,c
  6596  00051E  D005               	goto	l369
  6597  000520  D768               	goto	l373
  6598  000522                     l9769:
  6599                           
  6600                           ; BSR set to: 1
  6601                           ; Switch size 1, requested type "space"
  6602                           ; Number of cases is 1, Range of values is 8 to 8
  6603                           ; switch strategies available:
  6604                           ; Name         Instructions Cycles
  6605                           ; simple_byte            4     3 (average)
  6606                           ;	Chosen strategy is simple_byte
  6607  000522  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6608  000524  0A08               	xorlw	8	; case 8
  6609  000526  A4D8               	btfss	status,2,c
  6610  000528  D764               	goto	l373
  6611  00052A                     l369:
  6612                           
  6613                           ;ethernet.c: 121: UARTTransmitText("[");
  6614                           
  6615                           ; BSR set to: 1
  6616  00052A  0ECE               	movlw	low (STR_70+3)
  6617  00052C  0100               	movlb	0	; () banked
  6618  00052E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6619  000530  0E7F               	movlw	high (STR_70+3)
  6620  000532  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6621  000534  EC09  F023         	call	_UARTTransmitText	;wreg free
  6622                           
  6623                           ;ethernet.c: 122: UARTTransmitText(intToString(frame->memory.start));
  6624  000538  0101               	movlb	1	; () banked
  6625  00053A  EE20 F010          	lfsr	2,16
  6626  00053E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6627  000540  26D9               	addwf	fsr2l,f,c
  6628  000542  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6629  000544  22DA               	addwfc	fsr2h,f,c
  6630  000546  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  6631  00054A  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6632  00054E  C17B  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6633  000552  C17C  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6634  000556  0100               	movlb	0	; () banked
  6635  000558  6B75               	clrf	(intToString@val+2)& (0+255),b
  6636  00055A  6B76               	clrf	(intToString@val+3)& (0+255),b
  6637  00055C  EC21  F00E         	call	_intToString	;wreg free
  6638  000560  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6639  000564  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6640  000568  EC09  F023         	call	_UARTTransmitText	;wreg free
  6641                           
  6642                           ;ethernet.c: 123: UARTTransmitText(" to ");
  6643  00056C  0EF3               	movlw	low (STR_77+11)
  6644  00056E  0100               	movlb	0	; () banked
  6645  000570  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6646  000572  0E7E               	movlw	high (STR_77+11)
  6647  000574  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6648  000576  EC09  F023         	call	_UARTTransmitText	;wreg free
  6649                           
  6650                           ;ethernet.c: 124: UARTTransmitText(intToString(frame->memory.end));
  6651  00057A  0101               	movlb	1	; () banked
  6652  00057C  EE20 F012          	lfsr	2,18
  6653  000580  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6654  000582  26D9               	addwf	fsr2l,f,c
  6655  000584  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6656  000586  22DA               	addwfc	fsr2h,f,c
  6657  000588  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  6658  00058C  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6659  000590  C17B  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6660  000594  C17C  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6661  000598  0100               	movlb	0	; () banked
  6662  00059A  6B75               	clrf	(intToString@val+2)& (0+255),b
  6663  00059C  6B76               	clrf	(intToString@val+3)& (0+255),b
  6664  00059E  EC21  F00E         	call	_intToString	;wreg free
  6665  0005A2  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6666  0005A6  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6667  0005AA  EC09  F023         	call	_UARTTransmitText	;wreg free
  6668                           
  6669                           ;ethernet.c: 125: UARTTransmitText(" (");
  6670  0005AE  0EF0               	movlw	low STR_17
  6671  0005B0  0100               	movlb	0	; () banked
  6672  0005B2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6673  0005B4  0E7F               	movlw	high STR_17
  6674  0005B6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6675  0005B8  EC09  F023         	call	_UARTTransmitText	;wreg free
  6676                           
  6677                           ;ethernet.c: 126: UARTTransmitText(intToString(frame->memory.length));
  6678  0005BC  0101               	movlb	1	; () banked
  6679  0005BE  EE20 F014          	lfsr	2,20
  6680  0005C2  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6681  0005C4  26D9               	addwf	fsr2l,f,c
  6682  0005C6  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6683  0005C8  22DA               	addwfc	fsr2h,f,c
  6684  0005CA  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  6685  0005CE  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6686  0005D2  C17B  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6687  0005D6  C17C  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6688  0005DA  0100               	movlb	0	; () banked
  6689  0005DC  6B75               	clrf	(intToString@val+2)& (0+255),b
  6690  0005DE  6B76               	clrf	(intToString@val+3)& (0+255),b
  6691  0005E0  EC21  F00E         	call	_intToString	;wreg free
  6692  0005E4  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6693  0005E8  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6694  0005EC  EC09  F023         	call	_UARTTransmitText	;wreg free
  6695                           
  6696                           ;ethernet.c: 127: UARTTransmitText(")]");
  6697  0005F0  0EF9               	movlw	low STR_18
  6698  0005F2  0100               	movlb	0	; () banked
  6699  0005F4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6700  0005F6  0E7F               	movlw	high STR_18
  6701  0005F8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6702  0005FA  EC09  F023         	call	_UARTTransmitText	;wreg free
  6703                           
  6704                           ;ethernet.c: 130: UARTTransmitText("\n\r");
  6705  0005FE  0EC2               	movlw	low (STR_25+46)
  6706  000600  0100               	movlb	0	; () banked
  6707  000602  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6708  000604  0E7C               	movlw	high (STR_25+46)
  6709  000606  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6710  000608  EC09  F023         	call	_UARTTransmitText	;wreg free
  6711  00060C  0012               	return		;funcret
  6712  00060E                     __end_of_ethernet_rxGetNewFrame:
  6713                           	opt stack 0
  6714                           tblptru	equ	0xFF8
  6715                           tblptrh	equ	0xFF7
  6716                           tblptrl	equ	0xFF6
  6717                           tablat	equ	0xFF5
  6718                           prodh	equ	0xFF4
  6719                           prodl	equ	0xFF3
  6720                           intcon	equ	0xFF2
  6721                           intcon3	equ	0xFF0
  6722                           indf0	equ	0xFEF
  6723                           postinc0	equ	0xFEE
  6724                           plusw0	equ	0xFEB
  6725                           fsr0h	equ	0xFEA
  6726                           fsr0l	equ	0xFE9
  6727                           wreg	equ	0xFE8
  6728                           indf1	equ	0xFE7
  6729                           postinc1	equ	0xFE6
  6730                           postdec1	equ	0xFE5
  6731                           plusw1	equ	0xFE3
  6732                           fsr1h	equ	0xFE2
  6733                           fsr1l	equ	0xFE1
  6734                           indf2	equ	0xFDF
  6735                           postinc2	equ	0xFDE
  6736                           postdec2	equ	0xFDD
  6737                           plusw2	equ	0xFDB
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742 ;; *************** function _ipv4_handleNewPacket *****************
  6743 ;; Defined at:
  6744 ;;		line 133 in file "src/stack/protocols/ipv4.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  frame           2   85[BANK0 ] PTR struct ethernetFrame
  6747 ;;		 -> stack.ethernet(15), stack(121), 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;  ip             23   98[BANK0 ] struct ipv4_header
  6750 ;;  headerField     9   89[BANK0 ] struct memoryField
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  1    wreg      void 
  6753 ;; Registers used:
  6754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6760 ;;      Params:         0       2       0       0       0       0       0       0       0
  6761 ;;      Locals:         0      32       0       0       0       0       0       0       0
  6762 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6763 ;;      Totals:         0      36       0       0       0       0       0       0       0
  6764 ;;Total ram usage:       36 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:   10
  6767 ;; This function calls:
  6768 ;;		_UARTTransmitText
  6769 ;;		_ethernetController_dropPacket
  6770 ;;		_intToString
  6771 ;;		_ipAdressToString
  6772 ;;		_ipProtocolToString
  6773 ;;		_ipv4_checkHeaderChecksum
  6774 ;;		_ipv4_parseHeader
  6775 ;; This function is called by:
  6776 ;;		_ethernet_rxGetNewFrame
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           	psect	text15
  6781  00252A                     __ptext15:
  6782                           	opt stack 0
  6783  00252A                     _ipv4_handleNewPacket:
  6784                           	opt stack 18
  6785                           
  6786                           ;ipv4.c: 134: ipv4_header_t ip;
  6787                           ;ipv4.c: 135: memoryField_t headerField;
  6788                           ;ipv4.c: 136: if (frame->ethertype != ETHERTYPE_IPv4) {
  6789                           
  6790                           ;incstack = 0
  6791  00252A  0100               	movlb	0	; () banked
  6792  00252C  EE20 F00E          	lfsr	2,14
  6793  002530  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  6794  002532  26D9               	addwf	fsr2l,f,c
  6795  002534  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  6796  002536  22DA               	addwfc	fsr2h,f,c
  6797  002538  50DE               	movf	postinc2,w,c
  6798  00253A  E104               	bnz	u10610
  6799  00253C  0E08               	movlw	8
  6800  00253E  18DE               	xorwf	postinc2,w,c
  6801  002540  B4D8               	btfsc	status,2,c
  6802  002542  D007               	goto	l1059
  6803  002544                     u10610:
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;ipv4.c: 137: ethernetController_dropPacket(frame);
  6807  002544  C0B5  F072         	movff	ipv4_handleNewPacket@frame,ethernetController_dropPacket@frame
  6808  002548  C0B6  F073         	movff	ipv4_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  6809  00254C  ECA5  F024         	call	_ethernetController_dropPacket	;wreg free
  6810                           
  6811                           ;ipv4.c: 138: return;
  6812  002550  0012               	return	
  6813  002552                     l1059:
  6814                           
  6815                           ;ipv4.c: 139: }
  6816                           ;ipv4.c: 140: headerField = frame->memory;
  6817  002552  0100               	movlb	0	; () banked
  6818  002554  EE20 F010          	lfsr	2,16
  6819  002558  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  6820  00255A  26D9               	addwf	fsr2l,f,c
  6821  00255C  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  6822  00255E  22DA               	addwfc	fsr2h,f,c
  6823  002560  EE10  F0B9         	lfsr	1,ipv4_handleNewPacket@headerField
  6824  002564  0E08               	movlw	8
  6825  002566                     u10621:
  6826  002566  CFDB FFE3          	movff	plusw2,plusw1
  6827  00256A  06E8               	decf	wreg,f,c
  6828  00256C  E2FC               	bc	u10621
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;ipv4.c: 141: headerField.start = frame->memory.start + 22;
  6832  00256E  EE20 F010          	lfsr	2,16
  6833  002572  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  6834  002574  26D9               	addwf	fsr2l,f,c
  6835  002576  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  6836  002578  22DA               	addwfc	fsr2h,f,c
  6837  00257A  CFDE F0B7          	movff	postinc2,??_ipv4_handleNewPacket
  6838  00257E  CFDD F0B8          	movff	postdec2,??_ipv4_handleNewPacket+1
  6839  002582  0E16               	movlw	22
  6840  002584  25B7               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  6841  002586  6FB9               	movwf	ipv4_handleNewPacket@headerField& (0+255),b
  6842  002588  0E00               	movlw	0
  6843  00258A  21B8               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  6844  00258C  6FBA               	movwf	(ipv4_handleNewPacket@headerField+1)& (0+255),b
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;ipv4.c: 143: ip = ipv4_parseHeader(&headerField);
  6848  00258E  0EB9               	movlw	low ipv4_handleNewPacket@headerField
  6849  002590  6F77               	movwf	ipv4_parseHeader@field& (0+255),b
  6850  002592  0E00               	movlw	high ipv4_handleNewPacket@headerField
  6851  002594  6F78               	movwf	(ipv4_parseHeader@field+1)& (0+255),b
  6852  002596  EC84  F00F         	call	_ipv4_parseHeader	;wreg free
  6853  00259A  EE20  F0C2         	lfsr	2,ipv4_handleNewPacket@ip
  6854  00259E  0E16               	movlw	22
  6855  0025A0                     u10631:
  6856  0025A0  CFEB FFDB          	movff	plusw0,plusw2
  6857  0025A4  06E8               	decf	wreg,f,c
  6858  0025A6  E2FC               	bc	u10631
  6859                           
  6860                           ;ipv4.c: 144: UARTTransmitText("[");
  6861  0025A8  0ECE               	movlw	low (STR_70+3)
  6862  0025AA  0100               	movlb	0	; () banked
  6863  0025AC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6864  0025AE  0E7F               	movlw	high (STR_70+3)
  6865  0025B0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6866  0025B2  EC09  F023         	call	_UARTTransmitText	;wreg free
  6867                           
  6868                           ;ipv4.c: 145: UARTTransmitText(ipAdressToString(ip.source));
  6869  0025B6  C0D1  F067         	movff	ipv4_handleNewPacket@ip+15,ipAdressToString@ip
  6870  0025BA  C0D2  F068         	movff	ipv4_handleNewPacket@ip+16,ipAdressToString@ip+1
  6871  0025BE  C0D3  F069         	movff	ipv4_handleNewPacket@ip+17,ipAdressToString@ip+2
  6872  0025C2  C0D4  F06A         	movff	ipv4_handleNewPacket@ip+18,ipAdressToString@ip+3
  6873  0025C6  ECA9  F010         	call	_ipAdressToString	;wreg free
  6874  0025CA  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6875  0025CE  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6876  0025D2  EC09  F023         	call	_UARTTransmitText	;wreg free
  6877                           
  6878                           ;ipv4.c: 146: UARTTransmitText(" -> ");
  6879  0025D6  0EC6               	movlw	low STR_84
  6880  0025D8  0100               	movlb	0	; () banked
  6881  0025DA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6882  0025DC  0E7F               	movlw	high STR_84
  6883  0025DE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6884  0025E0  EC09  F023         	call	_UARTTransmitText	;wreg free
  6885                           
  6886                           ;ipv4.c: 147: UARTTransmitText(ipAdressToString(ip.destination));
  6887  0025E4  C0D5  F067         	movff	ipv4_handleNewPacket@ip+19,ipAdressToString@ip
  6888  0025E8  C0D6  F068         	movff	ipv4_handleNewPacket@ip+20,ipAdressToString@ip+1
  6889  0025EC  C0D7  F069         	movff	ipv4_handleNewPacket@ip+21,ipAdressToString@ip+2
  6890  0025F0  C0D8  F06A         	movff	ipv4_handleNewPacket@ip+22,ipAdressToString@ip+3
  6891  0025F4  ECA9  F010         	call	_ipAdressToString	;wreg free
  6892  0025F8  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6893  0025FC  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6894  002600  EC09  F023         	call	_UARTTransmitText	;wreg free
  6895                           
  6896                           ;ipv4.c: 148: UARTTransmitText("][");
  6897  002604  0EF6               	movlw	low STR_12
  6898  002606  0100               	movlb	0	; () banked
  6899  002608  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6900  00260A  0E7F               	movlw	high STR_12
  6901  00260C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6902  00260E  EC09  F023         	call	_UARTTransmitText	;wreg free
  6903                           
  6904                           ;ipv4.c: 149: UARTTransmitText((ipProtocolToString(ip.protocol)));
  6905  002612  0100               	movlb	0	; () banked
  6906  002614  51CE               	movf	(ipv4_handleNewPacket@ip+12)& (0+255),w,b
  6907  002616  ECFB  F023         	call	_ipProtocolToString
  6908  00261A  C060  F098         	movff	?_ipProtocolToString,UARTTransmitText@str
  6909  00261E  C061  F099         	movff	?_ipProtocolToString+1,UARTTransmitText@str+1
  6910  002622  EC09  F023         	call	_UARTTransmitText	;wreg free
  6911                           
  6912                           ;ipv4.c: 150: UARTTransmitText("][");
  6913  002626  0EF6               	movlw	low STR_12
  6914  002628  0100               	movlb	0	; () banked
  6915  00262A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6916  00262C  0E7F               	movlw	high STR_12
  6917  00262E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6918  002630  EC09  F023         	call	_UARTTransmitText	;wreg free
  6919                           
  6920                           ;ipv4.c: 151: UARTTransmitText(intToString(ip.totalLength));
  6921  002634  C0C6  F073         	movff	ipv4_handleNewPacket@ip+4,intToString@val
  6922  002638  C0C7  F074         	movff	ipv4_handleNewPacket@ip+5,intToString@val+1
  6923  00263C  0100               	movlb	0	; () banked
  6924  00263E  6B75               	clrf	(intToString@val+2)& (0+255),b
  6925  002640  6B76               	clrf	(intToString@val+3)& (0+255),b
  6926  002642  EC21  F00E         	call	_intToString	;wreg free
  6927  002646  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6928  00264A  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6929  00264E  EC09  F023         	call	_UARTTransmitText	;wreg free
  6930                           
  6931                           ;ipv4.c: 152: UARTTransmitText("][");
  6932  002652  0EF6               	movlw	low STR_12
  6933  002654  0100               	movlb	0	; () banked
  6934  002656  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6935  002658  0E7F               	movlw	high STR_12
  6936  00265A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6937  00265C  EC09  F023         	call	_UARTTransmitText	;wreg free
  6938                           
  6939                           ;ipv4.c: 153: UARTTransmitText(intToString(ip.version));
  6940  002660  0100               	movlb	0	; () banked
  6941  002662  51C2               	movf	ipv4_handleNewPacket@ip& (0+255),w,b
  6942  002664  6F73               	movwf	intToString@val& (0+255),b
  6943  002666  6B74               	clrf	(intToString@val+1)& (0+255),b
  6944  002668  6B75               	clrf	(intToString@val+2)& (0+255),b
  6945  00266A  6B76               	clrf	(intToString@val+3)& (0+255),b
  6946  00266C  EC21  F00E         	call	_intToString	;wreg free
  6947  002670  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6948  002674  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6949  002678  EC09  F023         	call	_UARTTransmitText	;wreg free
  6950                           
  6951                           ;ipv4.c: 154: UARTTransmitText(", ");
  6952  00267C  0E40               	movlw	low (STR_45+17)
  6953  00267E  0100               	movlb	0	; () banked
  6954  002680  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6955  002682  0E7E               	movlw	high (STR_45+17)
  6956  002684  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6957  002686  EC09  F023         	call	_UARTTransmitText	;wreg free
  6958                           
  6959                           ;ipv4.c: 155: UARTTransmitText(intToString(ip.headerLength));
  6960  00268A  0100               	movlb	0	; () banked
  6961  00268C  51C3               	movf	(ipv4_handleNewPacket@ip+1)& (0+255),w,b
  6962  00268E  6F73               	movwf	intToString@val& (0+255),b
  6963  002690  6B74               	clrf	(intToString@val+1)& (0+255),b
  6964  002692  6B75               	clrf	(intToString@val+2)& (0+255),b
  6965  002694  6B76               	clrf	(intToString@val+3)& (0+255),b
  6966  002696  EC21  F00E         	call	_intToString	;wreg free
  6967  00269A  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6968  00269E  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6969  0026A2  EC09  F023         	call	_UARTTransmitText	;wreg free
  6970                           
  6971                           ;ipv4.c: 156: UARTTransmitText("]");
  6972  0026A6  0EFA               	movlw	low (STR_18+1)
  6973  0026A8  0100               	movlb	0	; () banked
  6974  0026AA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6975  0026AC  0E7F               	movlw	high (STR_18+1)
  6976  0026AE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6977  0026B0  EC09  F023         	call	_UARTTransmitText	;wreg free
  6978                           
  6979                           ;ipv4.c: 157: if (!ipv4_checkHeaderChecksum(&ip))
  6980  0026B4  0EC2               	movlw	low ipv4_handleNewPacket@ip
  6981  0026B6  0100               	movlb	0	; () banked
  6982  0026B8  6F9A               	movwf	ipv4_checkHeaderChecksum@header& (0+255),b
  6983  0026BA  0E00               	movlw	high ipv4_handleNewPacket@ip
  6984  0026BC  6F9B               	movwf	(ipv4_checkHeaderChecksum@header+1)& (0+255),b
  6985  0026BE  ECD2  F01B         	call	_ipv4_checkHeaderChecksum	;wreg free
  6986  0026C2  0100               	movlb	0	; () banked
  6987  0026C4  B0D8               	btfsc	status,0,c
  6988  0026C6  D006               	goto	l1061
  6989                           
  6990                           ; BSR set to: 0
  6991                           ;ipv4.c: 158: UARTTransmitText("[INVALID CHECKSUM]");
  6992  0026C8  0E43               	movlw	low STR_90
  6993  0026CA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6994  0026CC  0E7E               	movlw	high STR_90
  6995  0026CE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6996  0026D0  EC09  F023         	call	_UARTTransmitText	;wreg free
  6997  0026D4                     l1061:
  6998                           
  6999                           ;ipv4.c: 161: ethernetController_dropPacket(frame);
  7000  0026D4  C0B5  F072         	movff	ipv4_handleNewPacket@frame,ethernetController_dropPacket@frame
  7001  0026D8  C0B6  F073         	movff	ipv4_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  7002  0026DC  ECA5  F024         	call	_ethernetController_dropPacket	;wreg free
  7003  0026E0  0012               	return		;funcret
  7004  0026E2                     __end_of_ipv4_handleNewPacket:
  7005                           	opt stack 0
  7006                           tblptru	equ	0xFF8
  7007                           tblptrh	equ	0xFF7
  7008                           tblptrl	equ	0xFF6
  7009                           tablat	equ	0xFF5
  7010                           prodh	equ	0xFF4
  7011                           prodl	equ	0xFF3
  7012                           intcon	equ	0xFF2
  7013                           intcon3	equ	0xFF0
  7014                           indf0	equ	0xFEF
  7015                           postinc0	equ	0xFEE
  7016                           plusw0	equ	0xFEB
  7017                           fsr0h	equ	0xFEA
  7018                           fsr0l	equ	0xFE9
  7019                           wreg	equ	0xFE8
  7020                           indf1	equ	0xFE7
  7021                           postinc1	equ	0xFE6
  7022                           postdec1	equ	0xFE5
  7023                           plusw1	equ	0xFE3
  7024                           fsr1h	equ	0xFE2
  7025                           fsr1l	equ	0xFE1
  7026                           indf2	equ	0xFDF
  7027                           postinc2	equ	0xFDE
  7028                           postdec2	equ	0xFDD
  7029                           plusw2	equ	0xFDB
  7030                           fsr2h	equ	0xFDA
  7031                           fsr2l	equ	0xFD9
  7032                           status	equ	0xFD8
  7033                           
  7034 ;; *************** function _ipv4_parseHeader *****************
  7035 ;; Defined at:
  7036 ;;		line 164 in file "src/stack/protocols/ipv4.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;  field           2   23[BANK0 ] PTR struct memoryField
  7039 ;;		 -> ipv4_handleNewPacket@headerField(9), 
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;  i               1   48[BANK0 ] unsigned char 
  7042 ;;  i               1   47[BANK0 ] unsigned char 
  7043 ;;  ip             23   50[BANK0 ] struct ipv4_header
  7044 ;;  temp            1   49[BANK0 ] unsigned char 
  7045 ;; Return value:  Size  Location     Type
  7046 ;;                  23   23[BANK0 ] struct ipv4_header
  7047 ;; Registers used:
  7048 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/0
  7051 ;;		On exit  : 0/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7054 ;;      Params:         0      23       0       0       0       0       0       0       0
  7055 ;;      Locals:         0      26       0       0       0       0       0       0       0
  7056 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7057 ;;      Totals:         0      50       0       0       0       0       0       0       0
  7058 ;;Total ram usage:       50 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; Hardware stack levels required when called:    9
  7061 ;; This function calls:
  7062 ;;		_ethernetController_streamFromRXBuffer
  7063 ;; This function is called by:
  7064 ;;		_ipv4_handleNewPacket
  7065 ;; This function uses a non-reentrant model
  7066 ;;
  7067                           
  7068                           	psect	text16
  7069  001F08                     __ptext16:
  7070                           	opt stack 0
  7071  001F08                     _ipv4_parseHeader:
  7072                           	opt stack 18
  7073                           
  7074                           ;ipv4.c: 165: ipv4_header_t ip;
  7075                           ;ipv4.c: 166: uint8_t temp;
  7076                           ;ipv4.c: 168: ethernetController_streamFromRXBuffer(0, field->start);
  7077                           
  7078                           ;incstack = 0
  7079  001F08  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7080  001F0C  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7081  001F10  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7082  001F14  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7083  001F18  0E00               	movlw	0
  7084  001F1A  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7085                           
  7086                           ;ipv4.c: 170: temp = ethernetController_streamFromRXBuffer(1, field->start);
  7087  001F1E  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7088  001F22  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7089  001F26  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7090  001F2A  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7091  001F2E  0E01               	movlw	1
  7092  001F30  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7093  001F34  0100               	movlb	0	; () banked
  7094  001F36  6F91               	movwf	ipv4_parseHeader@temp& (0+255),b
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;ipv4.c: 171: ip.version = (temp & 0xf0) >> 4;
  7098  001F38  3991               	swapf	ipv4_parseHeader@temp& (0+255),w,b
  7099  001F3A  0B0F               	andlw	15
  7100  001F3C  0B0F               	andlw	15
  7101  001F3E  6F92               	movwf	ipv4_parseHeader@ip& (0+255),b
  7102                           
  7103                           ; BSR set to: 0
  7104                           ;ipv4.c: 172: ip.headerLength = temp & 0x0f;
  7105  001F40  5191               	movf	ipv4_parseHeader@temp& (0+255),w,b
  7106  001F42  0B0F               	andlw	15
  7107  001F44  6F93               	movwf	(ipv4_parseHeader@ip+1)& (0+255),b
  7108                           
  7109                           ;ipv4.c: 174: temp = ethernetController_streamFromRXBuffer(1, field->start);
  7110  001F46  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7111  001F4A  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7112  001F4E  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7113  001F52  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7114  001F56  0E01               	movlw	1
  7115  001F58  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7116  001F5C  0100               	movlb	0	; () banked
  7117  001F5E  6F91               	movwf	ipv4_parseHeader@temp& (0+255),b
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;ipv4.c: 175: ip.dscp = (temp & 0x1f);
  7121  001F60  5191               	movf	ipv4_parseHeader@temp& (0+255),w,b
  7122  001F62  0B1F               	andlw	31
  7123  001F64  6F94               	movwf	(ipv4_parseHeader@ip+2)& (0+255),b
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;ipv4.c: 176: ip.ecn = (temp & 0xC0) >> 6;
  7127  001F66  4591               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  7128  001F68  46E8               	rlncf	wreg,f,c
  7129  001F6A  0B03               	andlw	3
  7130  001F6C  0B03               	andlw	3
  7131  001F6E  6F95               	movwf	(ipv4_parseHeader@ip+3)& (0+255),b
  7132                           
  7133                           ;ipv4.c: 178: ip.totalLength = (ethernetController_streamFromRXBuffer(1, field->start) <
      +                          < 8);
  7134  001F70  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7135  001F74  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7136  001F78  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7137  001F7C  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7138  001F80  0E01               	movlw	1
  7139  001F82  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7140  001F86  0100               	movlb	0	; () banked
  7141  001F88  6F97               	movwf	(ipv4_parseHeader@ip+5)& (0+255),b
  7142  001F8A  6B96               	clrf	(ipv4_parseHeader@ip+4)& (0+255),b
  7143                           
  7144                           ;ipv4.c: 179: ip.totalLength |= ethernetController_streamFromRXBuffer(1, field->start);
  7145  001F8C  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7146  001F90  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7147  001F94  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7148  001F98  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7149  001F9C  0E01               	movlw	1
  7150  001F9E  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7151  001FA2  0100               	movlb	0	; () banked
  7152  001FA4  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  7153  001FA6  518E               	movf	??_ipv4_parseHeader& (0+255),w,b
  7154  001FA8  1396               	iorwf	(ipv4_parseHeader@ip+4)& (0+255),f,b
  7155                           
  7156                           ;ipv4.c: 181: ip.identification = (ethernetController_streamFromRXBuffer(1, field->start
      +                          ) << 8);
  7157  001FAA  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7158  001FAE  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7159  001FB2  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7160  001FB6  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7161  001FBA  0E01               	movlw	1
  7162  001FBC  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7163  001FC0  0100               	movlb	0	; () banked
  7164  001FC2  6F99               	movwf	(ipv4_parseHeader@ip+7)& (0+255),b
  7165  001FC4  6B98               	clrf	(ipv4_parseHeader@ip+6)& (0+255),b
  7166                           
  7167                           ;ipv4.c: 182: ip.identification |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  7168  001FC6  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7169  001FCA  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7170  001FCE  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7171  001FD2  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7172  001FD6  0E01               	movlw	1
  7173  001FD8  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7174  001FDC  0100               	movlb	0	; () banked
  7175  001FDE  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  7176  001FE0  518E               	movf	??_ipv4_parseHeader& (0+255),w,b
  7177  001FE2  1398               	iorwf	(ipv4_parseHeader@ip+6)& (0+255),f,b
  7178                           
  7179                           ;ipv4.c: 184: temp = ethernetController_streamFromRXBuffer(1, field->start);
  7180  001FE4  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7181  001FE8  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7182  001FEC  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7183  001FF0  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7184  001FF4  0E01               	movlw	1
  7185  001FF6  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7186  001FFA  0100               	movlb	0	; () banked
  7187  001FFC  6F91               	movwf	ipv4_parseHeader@temp& (0+255),b
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;ipv4.c: 185: ip.flags = ((temp & 0xC0) >> 6);
  7191  001FFE  4591               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  7192  002000  46E8               	rlncf	wreg,f,c
  7193  002002  0B03               	andlw	3
  7194  002004  0B03               	andlw	3
  7195  002006  6F9A               	movwf	(ipv4_parseHeader@ip+8)& (0+255),b
  7196                           
  7197                           ; BSR set to: 0
  7198                           ;ipv4.c: 186: ip.fragmentOffset = ((temp & 0x1f) << 8);
  7199  002008  5191               	movf	ipv4_parseHeader@temp& (0+255),w,b
  7200  00200A  0B1F               	andlw	31
  7201  00200C  6F9C               	movwf	(ipv4_parseHeader@ip+10)& (0+255),b
  7202  00200E  6B9B               	clrf	(ipv4_parseHeader@ip+9)& (0+255),b
  7203                           
  7204                           ;ipv4.c: 188: ip.fragmentOffset |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  7205  002010  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7206  002014  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7207  002018  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7208  00201C  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7209  002020  0E01               	movlw	1
  7210  002022  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7211  002026  0100               	movlb	0	; () banked
  7212  002028  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  7213  00202A  518E               	movf	??_ipv4_parseHeader& (0+255),w,b
  7214  00202C  139B               	iorwf	(ipv4_parseHeader@ip+9)& (0+255),f,b
  7215                           
  7216                           ;ipv4.c: 190: ip.timeToLive = ethernetController_streamFromRXBuffer(1, field->start);
  7217  00202E  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7218  002032  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7219  002036  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7220  00203A  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7221  00203E  0E01               	movlw	1
  7222  002040  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7223  002044  0100               	movlb	0	; () banked
  7224  002046  6F9D               	movwf	(ipv4_parseHeader@ip+11)& (0+255),b
  7225                           
  7226                           ;ipv4.c: 192: ip.protocol = ethernetController_streamFromRXBuffer(1, field->start);
  7227  002048  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7228  00204C  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7229  002050  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7230  002054  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7231  002058  0E01               	movlw	1
  7232  00205A  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7233  00205E  0100               	movlb	0	; () banked
  7234  002060  6F9E               	movwf	(ipv4_parseHeader@ip+12)& (0+255),b
  7235                           
  7236                           ;ipv4.c: 194: ip.checksum = (ethernetController_streamFromRXBuffer(1, field->start) << 8
      +                          );
  7237  002062  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7238  002066  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7239  00206A  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7240  00206E  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7241  002072  0E01               	movlw	1
  7242  002074  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7243  002078  0100               	movlb	0	; () banked
  7244  00207A  6FA0               	movwf	(ipv4_parseHeader@ip+14)& (0+255),b
  7245  00207C  6B9F               	clrf	(ipv4_parseHeader@ip+13)& (0+255),b
  7246                           
  7247                           ;ipv4.c: 195: ip.checksum |= ethernetController_streamFromRXBuffer(1, field->start);
  7248  00207E  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7249  002082  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7250  002086  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7251  00208A  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7252  00208E  0E01               	movlw	1
  7253  002090  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7254  002094  0100               	movlb	0	; () banked
  7255  002096  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  7256  002098  518E               	movf	??_ipv4_parseHeader& (0+255),w,b
  7257  00209A  139F               	iorwf	(ipv4_parseHeader@ip+13)& (0+255),f,b
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;ipv4.c: 197: for (uint8_t i = 0; i < 4; i++)
  7261  00209C  0E00               	movlw	0
  7262  00209E  6F8F               	movwf	ipv4_parseHeader@i& (0+255),b
  7263  0020A0                     l8453:
  7264                           
  7265                           ; BSR set to: 0
  7266  0020A0  0E03               	movlw	3
  7267  0020A2  658F               	cpfsgt	ipv4_parseHeader@i& (0+255),b
  7268  0020A4  D001               	goto	l1064
  7269  0020A6  D01D               	goto	u10370
  7270  0020A8                     l1064:
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;ipv4.c: 198: ip.source.address[i] = ethernetController_streamFromRXBuffer(1, field->sta
      +                          rt);
  7274                           
  7275                           ; BSR set to: 0
  7276  0020A8  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7277  0020AC  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7278  0020B0  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7279  0020B4  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7280  0020B8  0E01               	movlw	1
  7281  0020BA  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7282  0020BE  0100               	movlb	0	; () banked
  7283  0020C0  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  7284  0020C2  518F               	movf	ipv4_parseHeader@i& (0+255),w,b
  7285  0020C4  0D01               	mullw	1
  7286  0020C6  0E0F               	movlw	15
  7287  0020C8  26F3               	addwf	prodl,f,c
  7288  0020CA  0E00               	movlw	0
  7289  0020CC  22F4               	addwfc	prodh,f,c
  7290  0020CE  0E92               	movlw	low ipv4_parseHeader@ip
  7291  0020D0  24F3               	addwf	prodl,w,c
  7292  0020D2  6ED9               	movwf	fsr2l,c
  7293  0020D4  0E00               	movlw	high ipv4_parseHeader@ip
  7294  0020D6  20F4               	addwfc	prodh,w,c
  7295  0020D8  6EDA               	movwf	fsr2h,c
  7296  0020DA  C08E  FFDF         	movff	??_ipv4_parseHeader,indf2
  7297                           
  7298                           ; BSR set to: 0
  7299  0020DE  2B8F               	incf	ipv4_parseHeader@i& (0+255),f,b
  7300  0020E0  D7DF               	goto	l8453
  7301  0020E2                     u10370:
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;ipv4.c: 200: for (uint8_t i = 0; i < 4; i++)
  7305                           
  7306                           ; BSR set to: 0
  7307  0020E2  0E00               	movlw	0
  7308  0020E4  6F90               	movwf	ipv4_parseHeader@i_3618& (0+255),b
  7309  0020E6                     l8465:
  7310                           
  7311                           ; BSR set to: 0
  7312  0020E6  0E03               	movlw	3
  7313  0020E8  6590               	cpfsgt	ipv4_parseHeader@i_3618& (0+255),b
  7314  0020EA  D001               	goto	l1066
  7315  0020EC  D01D               	goto	u10390
  7316  0020EE                     l1066:
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;ipv4.c: 201: ip.destination.address[i] = ethernetController_streamFromRXBuffer(1, field
      +                          ->start);
  7320                           
  7321                           ; BSR set to: 0
  7322  0020EE  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7323  0020F2  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7324  0020F6  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7325  0020FA  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7326  0020FE  0E01               	movlw	1
  7327  002100  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7328  002104  0100               	movlb	0	; () banked
  7329  002106  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  7330  002108  5190               	movf	ipv4_parseHeader@i_3618& (0+255),w,b
  7331  00210A  0D01               	mullw	1
  7332  00210C  0E13               	movlw	19
  7333  00210E  26F3               	addwf	prodl,f,c
  7334  002110  0E00               	movlw	0
  7335  002112  22F4               	addwfc	prodh,f,c
  7336  002114  0E92               	movlw	low ipv4_parseHeader@ip
  7337  002116  24F3               	addwf	prodl,w,c
  7338  002118  6ED9               	movwf	fsr2l,c
  7339  00211A  0E00               	movlw	high ipv4_parseHeader@ip
  7340  00211C  20F4               	addwfc	prodh,w,c
  7341  00211E  6EDA               	movwf	fsr2h,c
  7342  002120  C08E  FFDF         	movff	??_ipv4_parseHeader,indf2
  7343                           
  7344                           ; BSR set to: 0
  7345  002124  2B90               	incf	ipv4_parseHeader@i_3618& (0+255),f,b
  7346  002126  D7DF               	goto	l8465
  7347  002128                     u10390:
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;ipv4.c: 203: ethernetController_streamFromRXBuffer(2, field->start);
  7351                           
  7352                           ; BSR set to: 0
  7353  002128  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7354  00212C  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7355  002130  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7356  002134  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7357  002138  0E02               	movlw	2
  7358  00213A  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
  7359                           
  7360                           ;ipv4.c: 205: return ip;
  7361  00213E  EE20  F092         	lfsr	2,ipv4_parseHeader@ip
  7362  002142  EE00  F077         	lfsr	0,?_ipv4_parseHeader
  7363  002146  0E16               	movlw	22
  7364  002148                     u10401:
  7365  002148  CFDB FFEB          	movff	plusw2,plusw0
  7366  00214C  06E8               	decf	wreg,f,c
  7367  00214E  E2FC               	bc	u10401
  7368  002150  0012               	return	
  7369  002152                     __end_of_ipv4_parseHeader:
  7370                           	opt stack 0
  7371                           tblptru	equ	0xFF8
  7372                           tblptrh	equ	0xFF7
  7373                           tblptrl	equ	0xFF6
  7374                           tablat	equ	0xFF5
  7375                           prodh	equ	0xFF4
  7376                           prodl	equ	0xFF3
  7377                           intcon	equ	0xFF2
  7378                           intcon3	equ	0xFF0
  7379                           indf0	equ	0xFEF
  7380                           postinc0	equ	0xFEE
  7381                           plusw0	equ	0xFEB
  7382                           fsr0h	equ	0xFEA
  7383                           fsr0l	equ	0xFE9
  7384                           wreg	equ	0xFE8
  7385                           indf1	equ	0xFE7
  7386                           postinc1	equ	0xFE6
  7387                           postdec1	equ	0xFE5
  7388                           plusw1	equ	0xFE3
  7389                           fsr1h	equ	0xFE2
  7390                           fsr1l	equ	0xFE1
  7391                           indf2	equ	0xFDF
  7392                           postinc2	equ	0xFDE
  7393                           postdec2	equ	0xFDD
  7394                           plusw2	equ	0xFDB
  7395                           fsr2h	equ	0xFDA
  7396                           fsr2l	equ	0xFD9
  7397                           status	equ	0xFD8
  7398                           
  7399 ;; *************** function _ipv4_checkHeaderChecksum *****************
  7400 ;; Defined at:
  7401 ;;		line 208 in file "src/stack/protocols/ipv4.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;  header          2   58[BANK0 ] PTR struct ipv4_header
  7404 ;;		 -> ipv4_handleNewPacket@ip(23), 
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;  testHeader     23   62[BANK0 ] struct ipv4_header
  7407 ;; Return value:  Size  Location     Type
  7408 ;;		None               void
  7409 ;; Registers used:
  7410 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7416 ;;      Params:         0       2       0       0       0       0       0       0       0
  7417 ;;      Locals:         0      23       0       0       0       0       0       0       0
  7418 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7419 ;;      Totals:         0      27       0       0       0       0       0       0       0
  7420 ;;Total ram usage:       27 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    6
  7423 ;; This function calls:
  7424 ;;		_UARTTransmitText
  7425 ;;		_hexToString
  7426 ;;		_ipv4_calculateHeaderChecksum
  7427 ;; This function is called by:
  7428 ;;		_ipv4_handleNewPacket
  7429 ;; This function uses a non-reentrant model
  7430 ;;
  7431                           
  7432                           	psect	text17
  7433  0037A4                     __ptext17:
  7434                           	opt stack 0
  7435  0037A4                     _ipv4_checkHeaderChecksum:
  7436                           	opt stack 21
  7437                           
  7438                           ;ipv4.c: 209: ipv4_header_t testHeader;
  7439                           ;ipv4.c: 210: testHeader = *header;
  7440                           
  7441                           ;incstack = 0
  7442  0037A4  C09A  FFD9         	movff	ipv4_checkHeaderChecksum@header,fsr2l
  7443  0037A8  C09B  FFDA         	movff	ipv4_checkHeaderChecksum@header+1,fsr2h
  7444  0037AC  EE10  F09E         	lfsr	1,ipv4_checkHeaderChecksum@testHeader
  7445  0037B0  0E16               	movlw	22
  7446  0037B2                     u10411:
  7447  0037B2  CFDB FFE3          	movff	plusw2,plusw1
  7448  0037B6  06E8               	decf	wreg,f,c
  7449  0037B8  E2FC               	bc	u10411
  7450                           
  7451                           ;ipv4.c: 211: testHeader.checksum = 0x0000;
  7452  0037BA  0E00               	movlw	0
  7453  0037BC  0100               	movlb	0	; () banked
  7454  0037BE  6FAC               	movwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),b
  7455  0037C0  0E00               	movlw	0
  7456  0037C2  6FAB               	movwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),b
  7457                           
  7458                           ; BSR set to: 0
  7459                           ;ipv4.c: 212: ipv4_calculateHeaderChecksum(&testHeader);
  7460  0037C4  0E9E               	movlw	low ipv4_checkHeaderChecksum@testHeader
  7461  0037C6  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  7462  0037C8  0E00               	movlw	high ipv4_checkHeaderChecksum@testHeader
  7463  0037CA  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  7464  0037CC  EC33  F00B         	call	_ipv4_calculateHeaderChecksum	;wreg free
  7465                           
  7466                           ;ipv4.c: 213: if (testHeader.checksum == header->checksum) {
  7467  0037D0  0100               	movlb	0	; () banked
  7468  0037D2  EE20 F00D          	lfsr	2,13
  7469  0037D6  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  7470  0037D8  26D9               	addwf	fsr2l,f,c
  7471  0037DA  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  7472  0037DC  22DA               	addwfc	fsr2h,f,c
  7473  0037DE  50DE               	movf	postinc2,w,c
  7474  0037E0  19AB               	xorwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),w,b
  7475  0037E2  E106               	bnz	l8493
  7476  0037E4  50DE               	movf	postinc2,w,c
  7477  0037E6  19AC               	xorwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),w,b
  7478  0037E8  A4D8               	btfss	status,2,c
  7479  0037EA  D002               	goto	l1071
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;ipv4.c: 214: return 1;
  7483  0037EC  80D8               	bsf	status,0,c
  7484                           
  7485                           ; BSR set to: 0
  7486  0037EE  0012               	return	
  7487  0037F0                     l1071:
  7488  0037F0                     l8493:
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;ipv4.c: 215: }
  7492                           ;ipv4.c: 216: UARTTransmitText("[Expected ");
  7493  0037F0  0E71               	movlw	low STR_91
  7494  0037F2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7495  0037F4  0E7F               	movlw	high STR_91
  7496  0037F6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7497  0037F8  EC09  F023         	call	_UARTTransmitText	;wreg free
  7498                           
  7499                           ;ipv4.c: 217: UARTTransmitText(hexToString(testHeader.checksum));
  7500  0037FC  C0AB  F061         	movff	ipv4_checkHeaderChecksum@testHeader+13,hexToString@val
  7501  003800  C0AC  F062         	movff	ipv4_checkHeaderChecksum@testHeader+14,hexToString@val+1
  7502  003804  0100               	movlb	0	; () banked
  7503  003806  6B63               	clrf	(hexToString@val+2)& (0+255),b
  7504  003808  6B64               	clrf	(hexToString@val+3)& (0+255),b
  7505  00380A  EC70  F01A         	call	_hexToString	;wreg free
  7506  00380E  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  7507  003812  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  7508  003816  EC09  F023         	call	_UARTTransmitText	;wreg free
  7509                           
  7510                           ;ipv4.c: 218: UARTTransmitText(", got ");
  7511  00381A  0EB2               	movlw	low STR_92
  7512  00381C  0100               	movlb	0	; () banked
  7513  00381E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7514  003820  0E7F               	movlw	high STR_92
  7515  003822  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7516  003824  EC09  F023         	call	_UARTTransmitText	;wreg free
  7517                           
  7518                           ;ipv4.c: 219: UARTTransmitText(hexToString(header->checksum));
  7519  003828  0100               	movlb	0	; () banked
  7520  00382A  EE20 F00D          	lfsr	2,13
  7521  00382E  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  7522  003830  26D9               	addwf	fsr2l,f,c
  7523  003832  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  7524  003834  22DA               	addwfc	fsr2h,f,c
  7525  003836  CFDE F09C          	movff	postinc2,??_ipv4_checkHeaderChecksum
  7526  00383A  CFDD F09D          	movff	postdec2,??_ipv4_checkHeaderChecksum+1
  7527  00383E  C09C  F061         	movff	??_ipv4_checkHeaderChecksum,hexToString@val
  7528  003842  C09D  F062         	movff	??_ipv4_checkHeaderChecksum+1,hexToString@val+1
  7529  003846  6B63               	clrf	(hexToString@val+2)& (0+255),b
  7530  003848  6B64               	clrf	(hexToString@val+3)& (0+255),b
  7531  00384A  EC70  F01A         	call	_hexToString	;wreg free
  7532  00384E  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  7533  003852  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  7534  003856  EC09  F023         	call	_UARTTransmitText	;wreg free
  7535                           
  7536                           ;ipv4.c: 220: UARTTransmitText("]");
  7537  00385A  0EFA               	movlw	low (STR_18+1)
  7538  00385C  0100               	movlb	0	; () banked
  7539  00385E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7540  003860  0E7F               	movlw	high (STR_18+1)
  7541  003862  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7542  003864  EC09  F023         	call	_UARTTransmitText	;wreg free
  7543                           
  7544                           ;ipv4.c: 221: return 0;
  7545  003868  90D8               	bcf	status,0,c
  7546  00386A  0012               	return	
  7547  00386C                     __end_of_ipv4_checkHeaderChecksum:
  7548                           	opt stack 0
  7549                           tblptru	equ	0xFF8
  7550                           tblptrh	equ	0xFF7
  7551                           tblptrl	equ	0xFF6
  7552                           tablat	equ	0xFF5
  7553                           prodh	equ	0xFF4
  7554                           prodl	equ	0xFF3
  7555                           intcon	equ	0xFF2
  7556                           intcon3	equ	0xFF0
  7557                           indf0	equ	0xFEF
  7558                           postinc0	equ	0xFEE
  7559                           plusw0	equ	0xFEB
  7560                           fsr0h	equ	0xFEA
  7561                           fsr0l	equ	0xFE9
  7562                           wreg	equ	0xFE8
  7563                           indf1	equ	0xFE7
  7564                           postinc1	equ	0xFE6
  7565                           postdec1	equ	0xFE5
  7566                           plusw1	equ	0xFE3
  7567                           fsr1h	equ	0xFE2
  7568                           fsr1l	equ	0xFE1
  7569                           indf2	equ	0xFDF
  7570                           postinc2	equ	0xFDE
  7571                           postdec2	equ	0xFDD
  7572                           plusw2	equ	0xFDB
  7573                           fsr2h	equ	0xFDA
  7574                           fsr2l	equ	0xFD9
  7575                           status	equ	0xFD8
  7576                           
  7577 ;; *************** function _ipv4_calculateHeaderChecksum *****************
  7578 ;; Defined at:
  7579 ;;		line 90 in file "src/stack/protocols/ipv4.c"
  7580 ;; Parameters:    Size  Location     Type
  7581 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
  7582 ;;		 -> ipv4_checkHeaderChecksum@testHeader(23), stack.pendingPacketToSend(66), stack(121), 
  7583 ;; Auto vars:     Size  Location     Type
  7584 ;;  sum             4   14[BANK0 ] unsigned long 
  7585 ;; Return value:  Size  Location     Type
  7586 ;;                  1    wreg      void 
  7587 ;; Registers used:
  7588 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7589 ;; Tracked objects:
  7590 ;;		On entry : 0/0
  7591 ;;		On exit  : 0/0
  7592 ;;		Unchanged: 0/0
  7593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7594 ;;      Params:         0       2       0       0       0       0       0       0       0
  7595 ;;      Locals:         0       4       0       0       0       0       0       0       0
  7596 ;;      Temps:          0      12       0       0       0       0       0       0       0
  7597 ;;      Totals:         0      18       0       0       0       0       0       0       0
  7598 ;;Total ram usage:       18 bytes
  7599 ;; Hardware stack levels used:    1
  7600 ;; Hardware stack levels required when called:    4
  7601 ;; This function calls:
  7602 ;;		Nothing
  7603 ;; This function is called by:
  7604 ;;		_main
  7605 ;;		_ipv4_checkHeaderChecksum
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           	psect	text18
  7610  001666                     __ptext18:
  7611                           	opt stack 0
  7612  001666                     _ipv4_calculateHeaderChecksum:
  7613                           	opt stack 26
  7614                           
  7615                           ;ipv4.c: 92: uint32_t sum = 0;
  7616                           
  7617                           ;incstack = 0
  7618  001666  0E00               	movlw	0
  7619  001668  0100               	movlb	0	; () banked
  7620  00166A  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  7621  00166C  0E00               	movlw	0
  7622  00166E  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  7623  001670  0E00               	movlw	0
  7624  001672  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  7625  001674  0E00               	movlw	0
  7626  001676  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  7627                           
  7628                           ; BSR set to: 0
  7629                           ;ipv4.c: 93: sum = ((header->version << 12) | (header->headerLength << 8) | (header->dsc
      +                          p << 2) | (header->ecn))&0xffff;
  7630  001678  EE20 F002          	lfsr	2,2
  7631  00167C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7632  00167E  26D9               	addwf	fsr2l,f,c
  7633  001680  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7634  001682  22DA               	addwfc	fsr2h,f,c
  7635  001684  50DF               	movf	indf2,w,c
  7636  001686  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7637  001688  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7638  00168A  90D8               	bcf	status,0,c
  7639  00168C  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7640  00168E  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7641  001690  90D8               	bcf	status,0,c
  7642  001692  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7643  001694  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7644  001696  EE20 F001          	lfsr	2,1
  7645  00169A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7646  00169C  26D9               	addwf	fsr2l,f,c
  7647  00169E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7648  0016A0  22DA               	addwfc	fsr2h,f,c
  7649  0016A2  50DF               	movf	indf2,w,c
  7650  0016A4  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7651  0016A6  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7652  0016A8  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7653  0016AA  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7654  0016AC  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
  7655  0016B0  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
  7656  0016B4  50DF               	movf	indf2,w,c
  7657  0016B6  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  7658  0016B8  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  7659  0016BA  0E0C               	movlw	12
  7660  0016BC                     u9275:
  7661  0016BC  90D8               	bcf	status,0,c
  7662  0016BE  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  7663  0016C0  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  7664  0016C2  2EE8               	decfsz	wreg,f,c
  7665  0016C4  D7FB               	goto	u9275
  7666  0016C6  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7667  0016C8  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  7668  0016CA  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7669  0016CC  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  7670  0016CE  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7671  0016D0  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  7672  0016D2  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7673  0016D4  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  7674  0016D6  EE20 F003          	lfsr	2,3
  7675  0016DA  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7676  0016DC  26D9               	addwf	fsr2l,f,c
  7677  0016DE  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7678  0016E0  22DA               	addwfc	fsr2h,f,c
  7679  0016E2  50DF               	movf	indf2,w,c
  7680  0016E4  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  7681  0016E6  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  7682  0016E8  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  7683  0016EA  0E00               	movlw	0
  7684  0016EC  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  7685  0016EE  C067  F06E         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
  7686  0016F2  C068  F06F         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
  7687  0016F6  6B70               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  7688  0016F8  6B71               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  7689                           
  7690                           ; BSR set to: 0
  7691                           ;ipv4.c: 94: sum += header->totalLength;
  7692  0016FA  EE20 F004          	lfsr	2,4
  7693  0016FE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7694  001700  26D9               	addwf	fsr2l,f,c
  7695  001702  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7696  001704  22DA               	addwfc	fsr2h,f,c
  7697  001706  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  7698  00170A  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  7699  00170E  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7700  001710  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7701  001712  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7702  001714  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7703  001716  0E00               	movlw	0
  7704  001718  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7705  00171A  0E00               	movlw	0
  7706  00171C  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;ipv4.c: 95: sum += header->identification;
  7710  00171E  EE20 F006          	lfsr	2,6
  7711  001722  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7712  001724  26D9               	addwf	fsr2l,f,c
  7713  001726  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7714  001728  22DA               	addwfc	fsr2h,f,c
  7715  00172A  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  7716  00172E  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  7717  001732  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7718  001734  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7719  001736  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7720  001738  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7721  00173A  0E00               	movlw	0
  7722  00173C  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7723  00173E  0E00               	movlw	0
  7724  001740  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;ipv4.c: 96: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
  7728  001742  EE20 F009          	lfsr	2,9
  7729  001746  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7730  001748  26D9               	addwf	fsr2l,f,c
  7731  00174A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7732  00174C  22DA               	addwfc	fsr2h,f,c
  7733  00174E  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  7734  001752  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  7735  001756  EE20 F008          	lfsr	2,8
  7736  00175A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7737  00175C  26D9               	addwf	fsr2l,f,c
  7738  00175E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7739  001760  22DA               	addwfc	fsr2h,f,c
  7740  001762  50DF               	movf	indf2,w,c
  7741  001764  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7742  001766  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7743  001768  0E0D               	movlw	13
  7744  00176A                     u9285:
  7745  00176A  90D8               	bcf	status,0,c
  7746  00176C  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7747  00176E  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7748  001770  2EE8               	decfsz	wreg,f,c
  7749  001772  D7FB               	goto	u9285
  7750  001774  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7751  001776  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7752  001778  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7753  00177A  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7754  00177C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7755  00177E  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7756  001780  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7757  001782  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7758  001784  0E00               	movlw	0
  7759  001786  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7760  001788  0E00               	movlw	0
  7761  00178A  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7762                           
  7763                           ; BSR set to: 0
  7764                           ;ipv4.c: 97: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
  7765  00178C  EE20 F00B          	lfsr	2,11
  7766  001790  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7767  001792  26D9               	addwf	fsr2l,f,c
  7768  001794  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7769  001796  22DA               	addwfc	fsr2h,f,c
  7770  001798  50DF               	movf	indf2,w,c
  7771  00179A  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7772  00179C  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7773  00179E  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7774  0017A0  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7775  0017A2  EE20 F00C          	lfsr	2,12
  7776  0017A6  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7777  0017A8  26D9               	addwf	fsr2l,f,c
  7778  0017AA  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7779  0017AC  22DA               	addwfc	fsr2h,f,c
  7780  0017AE  50DF               	movf	indf2,w,c
  7781  0017B0  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7782  0017B2  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7783  0017B4  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7784  0017B6  0E00               	movlw	0
  7785  0017B8  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7786  0017BA  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7787  0017BC  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7788  0017BE  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7789  0017C0  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7790  0017C2  0E00               	movlw	0
  7791  0017C4  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7792  0017C6  0E00               	movlw	0
  7793  0017C8  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;ipv4.c: 99: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0xf
      +                          fff;
  7797  0017CA  EE20 F00F          	lfsr	2,15
  7798  0017CE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7799  0017D0  26D9               	addwf	fsr2l,f,c
  7800  0017D2  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7801  0017D4  22DA               	addwfc	fsr2h,f,c
  7802  0017D6  50DF               	movf	indf2,w,c
  7803  0017D8  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7804  0017DA  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7805  0017DC  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7806  0017DE  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7807  0017E0  EE20 F010          	lfsr	2,16
  7808  0017E4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7809  0017E6  26D9               	addwf	fsr2l,f,c
  7810  0017E8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7811  0017EA  22DA               	addwfc	fsr2h,f,c
  7812  0017EC  50DF               	movf	indf2,w,c
  7813  0017EE  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7814  0017F0  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7815  0017F2  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7816  0017F4  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7817  0017F6  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7818  0017F8  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7819  0017FA  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7820  0017FC  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7821  0017FE  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7822  001800  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7823  001802  0E00               	movlw	0
  7824  001804  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7825  001806  0E00               	movlw	0
  7826  001808  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7827                           
  7828                           ; BSR set to: 0
  7829                           ;ipv4.c: 100: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0x
      +                          ffff;
  7830  00180A  EE20 F011          	lfsr	2,17
  7831  00180E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7832  001810  26D9               	addwf	fsr2l,f,c
  7833  001812  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7834  001814  22DA               	addwfc	fsr2h,f,c
  7835  001816  50DF               	movf	indf2,w,c
  7836  001818  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7837  00181A  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7838  00181C  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7839  00181E  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7840  001820  EE20 F012          	lfsr	2,18
  7841  001824  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7842  001826  26D9               	addwf	fsr2l,f,c
  7843  001828  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7844  00182A  22DA               	addwfc	fsr2h,f,c
  7845  00182C  50DF               	movf	indf2,w,c
  7846  00182E  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7847  001830  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7848  001832  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7849  001834  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7850  001836  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7851  001838  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7852  00183A  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7853  00183C  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7854  00183E  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7855  001840  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7856  001842  0E00               	movlw	0
  7857  001844  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7858  001846  0E00               	movlw	0
  7859  001848  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;ipv4.c: 101: sum += ((header->destination.address[1] | (header->destination.address[0] 
      +                          << 8)))&0xffff;
  7863  00184A  EE20 F013          	lfsr	2,19
  7864  00184E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7865  001850  26D9               	addwf	fsr2l,f,c
  7866  001852  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7867  001854  22DA               	addwfc	fsr2h,f,c
  7868  001856  50DF               	movf	indf2,w,c
  7869  001858  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7870  00185A  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7871  00185C  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7872  00185E  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7873  001860  EE20 F014          	lfsr	2,20
  7874  001864  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7875  001866  26D9               	addwf	fsr2l,f,c
  7876  001868  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7877  00186A  22DA               	addwfc	fsr2h,f,c
  7878  00186C  50DF               	movf	indf2,w,c
  7879  00186E  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7880  001870  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7881  001872  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7882  001874  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7883  001876  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7884  001878  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7885  00187A  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7886  00187C  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7887  00187E  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7888  001880  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7889  001882  0E00               	movlw	0
  7890  001884  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7891  001886  0E00               	movlw	0
  7892  001888  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7893                           
  7894                           ; BSR set to: 0
  7895                           ;ipv4.c: 102: sum += ((header->destination.address[3] | (header->destination.address[2] 
      +                          << 8)))&0xffff;
  7896  00188A  EE20 F015          	lfsr	2,21
  7897  00188E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7898  001890  26D9               	addwf	fsr2l,f,c
  7899  001892  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7900  001894  22DA               	addwfc	fsr2h,f,c
  7901  001896  50DF               	movf	indf2,w,c
  7902  001898  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7903  00189A  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7904  00189C  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7905  00189E  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7906  0018A0  EE20 F016          	lfsr	2,22
  7907  0018A4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7908  0018A6  26D9               	addwf	fsr2l,f,c
  7909  0018A8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7910  0018AA  22DA               	addwfc	fsr2h,f,c
  7911  0018AC  50DF               	movf	indf2,w,c
  7912  0018AE  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7913  0018B0  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7914  0018B2  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7915  0018B4  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7916  0018B6  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7917  0018B8  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7918  0018BA  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7919  0018BC  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7920  0018BE  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7921  0018C0  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7922  0018C2  0E00               	movlw	0
  7923  0018C4  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7924  0018C6  0E00               	movlw	0
  7925  0018C8  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7926                           
  7927                           ; BSR set to: 0
  7928                           ;ipv4.c: 104: sum = (sum & 0x0ffff)+((sum & 0xf0000) >> 16);
  7929  0018CA  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  7930  0018CE  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  7931  0018D2  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  7932  0018D6  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  7933  0018DA  0E11               	movlw	17
  7934  0018DC  D005               	goto	u9290
  7935  0018DE                     u9295:
  7936  0018DE  90D8               	bcf	status,0,c
  7937  0018E0  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7938  0018E2  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7939  0018E4  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7940  0018E6  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7941  0018E8                     u9290:
  7942  0018E8  2EE8               	decfsz	wreg,f,c
  7943  0018EA  D7F9               	goto	u9295
  7944  0018EC  0E0F               	movlw	15
  7945  0018EE  1562               	andwf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7946  0018F0  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7947  0018F2  0E00               	movlw	0
  7948  0018F4  1563               	andwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7949  0018F6  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  7950  0018F8  0E00               	movlw	0
  7951  0018FA  1564               	andwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7952  0018FC  6F68               	movwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  7953  0018FE  0E00               	movlw	0
  7954  001900  1565               	andwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7955  001902  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  7956  001904  0EFF               	movlw	255
  7957  001906  156E               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
  7958  001908  6F6A               	movwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),b
  7959  00190A  0EFF               	movlw	255
  7960  00190C  156F               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
  7961  00190E  6F6B               	movwf	(??_ipv4_calculateHeaderChecksum+9)& (0+255),b
  7962  001910  0E00               	movlw	0
  7963  001912  1570               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
  7964  001914  6F6C               	movwf	(??_ipv4_calculateHeaderChecksum+10)& (0+255),b
  7965  001916  0E00               	movlw	0
  7966  001918  1571               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
  7967  00191A  6F6D               	movwf	(??_ipv4_calculateHeaderChecksum+11)& (0+255),b
  7968  00191C  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7969  00191E  256A               	addwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),w,b
  7970  001920  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  7971  001922  5167               	movf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),w,b
  7972  001924  216B               	addwfc	(??_ipv4_calculateHeaderChecksum+9)& (0+255),w,b
  7973  001926  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  7974  001928  5168               	movf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),w,b
  7975  00192A  216C               	addwfc	(??_ipv4_calculateHeaderChecksum+10)& (0+255),w,b
  7976  00192C  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  7977  00192E  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  7978  001930  216D               	addwfc	(??_ipv4_calculateHeaderChecksum+11)& (0+255),w,b
  7979  001932  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;ipv4.c: 105: sum = ~sum;
  7983  001934  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  7984  001938  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  7985  00193C  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  7986  001940  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  7987  001944  1F62               	comf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7988  001946  1F63               	comf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7989  001948  1F64               	comf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7990  00194A  1F65               	comf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7991  00194C  C062  F06E         	movff	??_ipv4_calculateHeaderChecksum,ipv4_calculateHeaderChecksum@sum
  7992  001950  C063  F06F         	movff	??_ipv4_calculateHeaderChecksum+1,ipv4_calculateHeaderChecksum@sum+1
  7993  001954  C064  F070         	movff	??_ipv4_calculateHeaderChecksum+2,ipv4_calculateHeaderChecksum@sum+2
  7994  001958  C065  F071         	movff	??_ipv4_calculateHeaderChecksum+3,ipv4_calculateHeaderChecksum@sum+3
  7995                           
  7996                           ; BSR set to: 0
  7997                           ;ipv4.c: 107: header->checksum = sum;
  7998  00195C  EE20 F00D          	lfsr	2,13
  7999  001960  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8000  001962  26D9               	addwf	fsr2l,f,c
  8001  001964  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8002  001966  22DA               	addwfc	fsr2h,f,c
  8003  001968  C06E  FFDE         	movff	ipv4_calculateHeaderChecksum@sum,postinc2
  8004  00196C  C06F  FFDD         	movff	ipv4_calculateHeaderChecksum@sum+1,postdec2
  8005                           
  8006                           ; BSR set to: 0
  8007  001970  0012               	return		;funcret
  8008  001972                     __end_of_ipv4_calculateHeaderChecksum:
  8009                           	opt stack 0
  8010                           tblptru	equ	0xFF8
  8011                           tblptrh	equ	0xFF7
  8012                           tblptrl	equ	0xFF6
  8013                           tablat	equ	0xFF5
  8014                           prodh	equ	0xFF4
  8015                           prodl	equ	0xFF3
  8016                           intcon	equ	0xFF2
  8017                           intcon3	equ	0xFF0
  8018                           indf0	equ	0xFEF
  8019                           postinc0	equ	0xFEE
  8020                           plusw0	equ	0xFEB
  8021                           fsr0h	equ	0xFEA
  8022                           fsr0l	equ	0xFE9
  8023                           wreg	equ	0xFE8
  8024                           indf1	equ	0xFE7
  8025                           postinc1	equ	0xFE6
  8026                           postdec1	equ	0xFE5
  8027                           plusw1	equ	0xFE3
  8028                           fsr1h	equ	0xFE2
  8029                           fsr1l	equ	0xFE1
  8030                           indf2	equ	0xFDF
  8031                           postinc2	equ	0xFDE
  8032                           postdec2	equ	0xFDD
  8033                           plusw2	equ	0xFDB
  8034                           fsr2h	equ	0xFDA
  8035                           fsr2l	equ	0xFD9
  8036                           status	equ	0xFD8
  8037                           
  8038 ;; *************** function _ipProtocolToString *****************
  8039 ;; Defined at:
  8040 ;;		line 189 in file "src/system/uart.c"
  8041 ;; Parameters:    Size  Location     Type
  8042 ;;  protocol        1    wreg     enum E5507
  8043 ;; Auto vars:     Size  Location     Type
  8044 ;;  protocol        1    2[BANK0 ] enum E5507
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  2    0[BANK0 ] PTR unsigned char 
  8047 ;; Registers used:
  8048 ;;		wreg, status,2, status,0
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8054 ;;      Params:         0       2       0       0       0       0       0       0       0
  8055 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8056 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8057 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8058 ;;Total ram usage:        3 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:    4
  8061 ;; This function calls:
  8062 ;;		Nothing
  8063 ;; This function is called by:
  8064 ;;		_ipv4_handleNewPacket
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068                           	psect	text19
  8069  0047F6                     __ptext19:
  8070                           	opt stack 0
  8071  0047F6                     _ipProtocolToString:
  8072                           	opt stack 23
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;incstack = 0
  8076                           ;ipProtocolToString@protocol stored from wreg
  8077  0047F6  0100               	movlb	0	; () banked
  8078  0047F8  6F62               	movwf	ipProtocolToString@protocol& (0+255),b
  8079                           
  8080                           ;uart.c: 190: switch (protocol) {
  8081  0047FA  D015               	goto	l813
  8082  0047FC                     
  8083                           ;uart.c: 192: return "ICMP";
  8084  0047FC  0ED5               	movlw	low STR_63
  8085  0047FE  0100               	movlb	0	; () banked
  8086  004800  6F60               	movwf	?_ipProtocolToString& (0+255),b
  8087  004802  0E7F               	movlw	high STR_63
  8088  004804  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  8089                           
  8090                           ; BSR set to: 0
  8091  004806  0012               	return	
  8092  004808                     
  8093                           ; BSR set to: 0
  8094                           ;uart.c: 194: return "TCP";
  8095                           
  8096                           ; BSR set to: 0
  8097  004808  0EE4               	movlw	low STR_64
  8098  00480A  6F60               	movwf	?_ipProtocolToString& (0+255),b
  8099  00480C  0E7F               	movlw	high STR_64
  8100  00480E  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  8101                           
  8102                           ; BSR set to: 0
  8103  004810  0012               	return	
  8104  004812                     
  8105                           ; BSR set to: 0
  8106                           ;uart.c: 196: return "UDP";
  8107                           
  8108                           ; BSR set to: 0
  8109  004812  0EE8               	movlw	low STR_65
  8110  004814  6F60               	movwf	?_ipProtocolToString& (0+255),b
  8111  004816  0E7F               	movlw	high STR_65
  8112  004818  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  8113                           
  8114                           ; BSR set to: 0
  8115  00481A  0012               	return	
  8116  00481C                     
  8117                           ; BSR set to: 0
  8118                           ;uart.c: 198: return "Unknown Protocol";
  8119                           
  8120                           ; BSR set to: 0
  8121  00481C  0EC6               	movlw	low STR_66
  8122  00481E  6F60               	movwf	?_ipProtocolToString& (0+255),b
  8123  004820  0E7E               	movlw	high STR_66
  8124  004822  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;uart.c: 199: }
  8128                           
  8129                           ; BSR set to: 0
  8130  004824  0012               	return	
  8131  004826                     l813:
  8132                           
  8133                           ; BSR set to: 0
  8134  004826  0100               	movlb	0	; () banked
  8135  004828  5162               	movf	ipProtocolToString@protocol& (0+255),w,b
  8136                           
  8137                           ; Switch size 1, requested type "space"
  8138                           ; Number of cases is 3, Range of values is 1 to 17
  8139                           ; switch strategies available:
  8140                           ; Name         Instructions Cycles
  8141                           ; simple_byte           10     6 (average)
  8142                           ;	Chosen strategy is simple_byte
  8143  00482A  0A01               	xorlw	1	; case 1
  8144  00482C  B4D8               	btfsc	status,2,c
  8145  00482E  D7E6               	goto	l814
  8146  004830  0A07               	xorlw	7	; case 6
  8147  004832  B4D8               	btfsc	status,2,c
  8148  004834  D7E9               	goto	l816
  8149  004836  0A17               	xorlw	23	; case 17
  8150  004838  B4D8               	btfsc	status,2,c
  8151  00483A  D7EB               	goto	l817
  8152  00483C  D7EF               	goto	l818
  8153  00483E                     __end_of_ipProtocolToString:
  8154                           	opt stack 0
  8155                           tblptru	equ	0xFF8
  8156                           tblptrh	equ	0xFF7
  8157                           tblptrl	equ	0xFF6
  8158                           tablat	equ	0xFF5
  8159                           prodh	equ	0xFF4
  8160                           prodl	equ	0xFF3
  8161                           intcon	equ	0xFF2
  8162                           intcon3	equ	0xFF0
  8163                           indf0	equ	0xFEF
  8164                           postinc0	equ	0xFEE
  8165                           plusw0	equ	0xFEB
  8166                           fsr0h	equ	0xFEA
  8167                           fsr0l	equ	0xFE9
  8168                           wreg	equ	0xFE8
  8169                           indf1	equ	0xFE7
  8170                           postinc1	equ	0xFE6
  8171                           postdec1	equ	0xFE5
  8172                           plusw1	equ	0xFE3
  8173                           fsr1h	equ	0xFE2
  8174                           fsr1l	equ	0xFE1
  8175                           indf2	equ	0xFDF
  8176                           postinc2	equ	0xFDE
  8177                           postdec2	equ	0xFDD
  8178                           plusw2	equ	0xFDB
  8179                           fsr2h	equ	0xFDA
  8180                           fsr2l	equ	0xFD9
  8181                           status	equ	0xFD8
  8182                           
  8183 ;; *************** function _ethernetController_updateNextPacketPointer *****************
  8184 ;; Defined at:
  8185 ;;		line 333 in file "src/enc424j600/ENC424J600.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;		None
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;  nextPktPoint    2   21[BANK0 ] unsigned int 
  8190 ;;  newPointerH     1   25[BANK0 ] unsigned char 
  8191 ;;  newPointerL     1   24[BANK0 ] unsigned char 
  8192 ;;  opcode          1   23[BANK0 ] unsigned char 
  8193 ;; Return value:  Size  Location     Type
  8194 ;;                  1    wreg      void 
  8195 ;; Registers used:
  8196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8202 ;;      Params:         0       0       0       0       0       0       0       0       0
  8203 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8204 ;;      Temps:          0       6       0       0       0       0       0       0       0
  8205 ;;      Totals:         0      11       0       0       0       0       0       0       0
  8206 ;;Total ram usage:       11 bytes
  8207 ;; Hardware stack levels used:    1
  8208 ;; Hardware stack levels required when called:    7
  8209 ;; This function calls:
  8210 ;;		_ENC424J600_getNextPacketPointer
  8211 ;;		_ENC424J600_readSPI
  8212 ;;		_ENC424J600_setERXDATAReadPointer
  8213 ;;		_ENC424J600_setNextPacketPointer
  8214 ;;		_ENC424J600_writeSPI
  8215 ;; This function is called by:
  8216 ;;		_ethernet_rxGetNewFrame
  8217 ;; This function uses a non-reentrant model
  8218 ;;
  8219                           
  8220                           	psect	text20
  8221  00414A                     __ptext20:
  8222                           	opt stack 0
  8223  00414A                     _ethernetController_updateNextPacketPointer:
  8224                           	opt stack 21
  8225                           
  8226                           ;ENC424J600.c: 334: uint16_t nextPktPointer;
  8227                           ;ENC424J600.c: 335: uint8_t opcode;
  8228                           ;ENC424J600.c: 336: uint8_t newPointerL, newPointerH;
  8229                           ;ENC424J600.c: 337: nextPktPointer = ENC424J600_getNextPacketPointer();
  8230                           
  8231                           ; BSR set to: 0
  8232                           ;incstack = 0
  8233  00414A  EC6F  F027         	call	_ENC424J600_getNextPacketPointer	;wreg free
  8234  00414E  C060  F075         	movff	?_ENC424J600_getNextPacketPointer,ethernetController_updateNextPacketPointer@next
      +                          PktPointer
  8235  004152  C061  F076         	movff	?_ENC424J600_getNextPacketPointer+1,ethernetController_updateNextPacketPointer@ne
      +                          xtPktPointer+1
  8236                           
  8237                           ;ENC424J600.c: 338: ENC424J600_setERXDATAReadPointer(nextPktPointer);
  8238  004156  C075  F06A         	movff	ethernetController_updateNextPacketPointer@nextPktPointer,ENC424J600_setERXDATARe
      +                          adPointer@addr
  8239  00415A  C076  F06B         	movff	ethernetController_updateNextPacketPointer@nextPktPointer+1,ENC424J600_setERXDATA
      +                          ReadPointer@addr+1
  8240  00415E  ECE1  F024         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  8241                           
  8242                           ;ENC424J600.c: 339: opcode = 0x2C;
  8243  004162  0E2C               	movlw	44
  8244  004164  0100               	movlb	0	; () banked
  8245  004166  6F77               	movwf	ethernetController_updateNextPacketPointer@opcode& (0+255),b
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;ENC424J600.c: 340: PORTBbits.RB4=0;
  8249  004168  9881               	bcf	3969,4,c	;volatile
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;ENC424J600.c: 341: ENC424J600_writeSPI(&opcode);
  8253  00416A  0E77               	movlw	low ethernetController_updateNextPacketPointer@opcode
  8254  00416C  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  8255  00416E  0E00               	movlw	high ethernetController_updateNextPacketPointer@opcode
  8256  004170  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  8257  004172  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
  8258                           
  8259                           ;ENC424J600.c: 342: ENC424J600_readSPI(&newPointerL);
  8260  004176  0E78               	movlw	low ethernetController_updateNextPacketPointer@newPointerL
  8261  004178  0100               	movlb	0	; () banked
  8262  00417A  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  8263  00417C  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerL
  8264  00417E  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  8265  004180  EC3B  F022         	call	_ENC424J600_readSPI	;wreg free
  8266                           
  8267                           ;ENC424J600.c: 343: ENC424J600_readSPI(&newPointerH);
  8268  004184  0E79               	movlw	low ethernetController_updateNextPacketPointer@newPointerH
  8269  004186  0100               	movlb	0	; () banked
  8270  004188  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  8271  00418A  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerH
  8272  00418C  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  8273  00418E  EC3B  F022         	call	_ENC424J600_readSPI	;wreg free
  8274                           
  8275                           ;ENC424J600.c: 344: PORTBbits.RB4=1;
  8276  004192  8881               	bsf	3969,4,c	;volatile
  8277                           
  8278                           ;ENC424J600.c: 346: ENC424J600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
  8279  004194  0E00               	movlw	0
  8280  004196  0100               	movlb	0	; () banked
  8281  004198  6F6F               	movwf	??_ethernetController_updateNextPacketPointer& (0+255),b
  8282  00419A  0EFF               	movlw	255
  8283  00419C  6F70               	movwf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),b
  8284  00419E  5179               	movf	ethernetController_updateNextPacketPointer@newPointerH& (0+255),w,b
  8285  0041A0  6F72               	movwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),b
  8286  0041A2  6B71               	clrf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),b
  8287  0041A4  516F               	movf	??_ethernetController_updateNextPacketPointer& (0+255),w,b
  8288  0041A6  1771               	andwf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),f,b
  8289  0041A8  5170               	movf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),w,b
  8290  0041AA  1772               	andwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),f,b
  8291  0041AC  5178               	movf	ethernetController_updateNextPacketPointer@newPointerL& (0+255),w,b
  8292  0041AE  6F73               	movwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),b
  8293  0041B0  6B74               	clrf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),b
  8294  0041B2  5171               	movf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),w,b
  8295  0041B4  1173               	iorwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),w,b
  8296  0041B6  6F60               	movwf	ENC424J600_setNextPacketPointer@ptr& (0+255),b
  8297  0041B8  5172               	movf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),w,b
  8298  0041BA  1174               	iorwf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),w,b
  8299  0041BC  6F61               	movwf	(ENC424J600_setNextPacketPointer@ptr+1)& (0+255),b
  8300  0041BE  EC74  F027         	call	_ENC424J600_setNextPacketPointer	;wreg free
  8301  0041C2  0012               	return		;funcret
  8302  0041C4                     __end_of_ethernetController_updateNextPacketPointer:
  8303                           	opt stack 0
  8304                           tblptru	equ	0xFF8
  8305                           tblptrh	equ	0xFF7
  8306                           tblptrl	equ	0xFF6
  8307                           tablat	equ	0xFF5
  8308                           prodh	equ	0xFF4
  8309                           prodl	equ	0xFF3
  8310                           intcon	equ	0xFF2
  8311                           intcon3	equ	0xFF0
  8312                           indf0	equ	0xFEF
  8313                           postinc0	equ	0xFEE
  8314                           plusw0	equ	0xFEB
  8315                           fsr0h	equ	0xFEA
  8316                           fsr0l	equ	0xFE9
  8317                           wreg	equ	0xFE8
  8318                           indf1	equ	0xFE7
  8319                           postinc1	equ	0xFE6
  8320                           postdec1	equ	0xFE5
  8321                           plusw1	equ	0xFE3
  8322                           fsr1h	equ	0xFE2
  8323                           fsr1l	equ	0xFE1
  8324                           indf2	equ	0xFDF
  8325                           postinc2	equ	0xFDE
  8326                           postdec2	equ	0xFDD
  8327                           plusw2	equ	0xFDB
  8328                           fsr2h	equ	0xFDA
  8329                           fsr2l	equ	0xFD9
  8330                           status	equ	0xFD8
  8331                           
  8332 ;; *************** function _ethernetController_getRSV *****************
  8333 ;; Defined at:
  8334 ;;		line 298 in file "src/enc424j600/ENC424J600.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;  address         2   17[BANK0 ] unsigned int 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;  i               1   23[BANK0 ] unsigned char 
  8339 ;;  opcode          1   22[BANK0 ] unsigned char 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  5   17[BANK0 ] struct RSV
  8342 ;; Registers used:
  8343 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8349 ;;      Params:         0       5       0       0       0       0       0       0       0
  8350 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8351 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8352 ;;      Totals:         0       7       0       0       0       0       0       0       0
  8353 ;;Total ram usage:        7 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    7
  8356 ;; This function calls:
  8357 ;;		_ENC424J600_readSPI
  8358 ;;		_ENC424J600_setERXDATAReadPointer
  8359 ;;		_ENC424J600_updateReceiveStatusVector
  8360 ;;		_ENC424J600_writeSPI
  8361 ;; This function is called by:
  8362 ;;		_ethernet_rxGetNewFrame
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           	psect	text21
  8367  00423C                     __ptext21:
  8368                           	opt stack 0
  8369  00423C                     _ethernetController_getRSV:
  8370                           	opt stack 21
  8371                           
  8372                           ;ENC424J600.c: 299: uint8_t static temp[6];
  8373                           ;ENC424J600.c: 300: ENC424J600_setERXDATAReadPointer(address + 2);
  8374                           
  8375                           ;incstack = 0
  8376  00423C  0E02               	movlw	2
  8377  00423E  0100               	movlb	0	; () banked
  8378  004240  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
  8379  004242  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
  8380  004244  0E00               	movlw	0
  8381  004246  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
  8382  004248  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
  8383  00424A  ECE1  F024         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  8384                           
  8385                           ;ENC424J600.c: 301: uint8_t opcode = 0x2C;
  8386  00424E  0E2C               	movlw	44
  8387  004250  0100               	movlb	0	; () banked
  8388  004252  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
  8389                           
  8390                           ; BSR set to: 0
  8391                           ;ENC424J600.c: 302: PORTBbits.RB4=0;
  8392  004254  9881               	bcf	3969,4,c	;volatile
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;ENC424J600.c: 303: ENC424J600_writeSPI(&opcode);
  8396  004256  0E76               	movlw	low ethernetController_getRSV@opcode
  8397  004258  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  8398  00425A  0E00               	movlw	high ethernetController_getRSV@opcode
  8399  00425C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  8400  00425E  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
  8401                           
  8402                           ;ENC424J600.c: 304: for (uint8_t i = 0; i < 6; i++) {
  8403  004262  0E00               	movlw	0
  8404  004264  0100               	movlb	0	; () banked
  8405  004266  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
  8406  004268                     l8529:
  8407                           
  8408                           ; BSR set to: 0
  8409  004268  0E05               	movlw	5
  8410  00426A  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
  8411  00426C  D001               	goto	l161
  8412  00426E  D00D               	goto	u10440
  8413  004270                     l161:
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;ENC424J600.c: 305: ENC424J600_readSPI(&temp[i]);
  8417                           
  8418                           ; BSR set to: 0
  8419  004270  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
  8420  004272  0D01               	mullw	1
  8421  004274  0EAF               	movlw	low ethernetController_getRSV@temp
  8422  004276  24F3               	addwf	prodl,w,c
  8423  004278  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  8424  00427A  0E01               	movlw	high ethernetController_getRSV@temp
  8425  00427C  20F4               	addwfc	prodh,w,c
  8426  00427E  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  8427  004280  EC3B  F022         	call	_ENC424J600_readSPI	;wreg free
  8428  004284  0100               	movlb	0	; () banked
  8429  004286  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
  8430  004288  D7EF               	goto	l8529
  8431  00428A                     u10440:
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;ENC424J600.c: 306: }
  8435                           ;ENC424J600.c: 307: PORTBbits.RB4=1;
  8436  00428A  8881               	bsf	3969,4,c	;volatile
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;ENC424J600.c: 308: return ENC424J600_updateReceiveStatusVector(&temp[0]);
  8440  00428C  0EAF               	movlw	low ethernetController_getRSV@temp
  8441  00428E  6F60               	movwf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),b
  8442  004290  0E01               	movlw	high ethernetController_getRSV@temp
  8443  004292  6F61               	movwf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),b
  8444  004294  ECA5  F009         	call	_ENC424J600_updateReceiveStatusVector	;wreg free
  8445  004298  CFE9 FFD9          	movff	fsr0l,fsr2l
  8446  00429C  CFEA FFDA          	movff	fsr0h,fsr2h
  8447  0042A0  EE00  F071         	lfsr	0,?_ethernetController_getRSV
  8448  0042A4  0E04               	movlw	4
  8449  0042A6                     u10451:
  8450  0042A6  CFDB FFEB          	movff	plusw2,plusw0
  8451  0042AA  06E8               	decf	wreg,f,c
  8452  0042AC  E2FC               	bc	u10451
  8453  0042AE  0012               	return	
  8454  0042B0                     __end_of_ethernetController_getRSV:
  8455                           	opt stack 0
  8456                           tblptru	equ	0xFF8
  8457                           tblptrh	equ	0xFF7
  8458                           tblptrl	equ	0xFF6
  8459                           tablat	equ	0xFF5
  8460                           prodh	equ	0xFF4
  8461                           prodl	equ	0xFF3
  8462                           intcon	equ	0xFF2
  8463                           intcon3	equ	0xFF0
  8464                           indf0	equ	0xFEF
  8465                           postinc0	equ	0xFEE
  8466                           plusw0	equ	0xFEB
  8467                           fsr0h	equ	0xFEA
  8468                           fsr0l	equ	0xFE9
  8469                           wreg	equ	0xFE8
  8470                           indf1	equ	0xFE7
  8471                           postinc1	equ	0xFE6
  8472                           postdec1	equ	0xFE5
  8473                           plusw1	equ	0xFE3
  8474                           fsr1h	equ	0xFE2
  8475                           fsr1l	equ	0xFE1
  8476                           indf2	equ	0xFDF
  8477                           postinc2	equ	0xFDE
  8478                           postdec2	equ	0xFDD
  8479                           plusw2	equ	0xFDB
  8480                           fsr2h	equ	0xFDA
  8481                           fsr2l	equ	0xFD9
  8482                           status	equ	0xFD8
  8483                           
  8484 ;; *************** function _ENC424J600_updateReceiveStatusVector *****************
  8485 ;; Defined at:
  8486 ;;		line 754 in file "src/enc424j600/ENC424J600.c"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
  8489 ;;		 -> ethernetController_getRSV@temp(6), 
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;  receiveStatu    5   12[BANK0 ] struct RSV
  8492 ;; Return value:  Size  Location     Type
  8493 ;;                  5    0[BANK0 ] struct RSV
  8494 ;; Registers used:
  8495 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  8496 ;; Tracked objects:
  8497 ;;		On entry : 0/0
  8498 ;;		On exit  : 0/0
  8499 ;;		Unchanged: 0/0
  8500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8501 ;;      Params:         0       5       0       0       0       0       0       0       0
  8502 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8503 ;;      Temps:          0       7       0       0       0       0       0       0       0
  8504 ;;      Totals:         0      17       0       0       0       0       0       0       0
  8505 ;;Total ram usage:       17 bytes
  8506 ;; Hardware stack levels used:    1
  8507 ;; Hardware stack levels required when called:    4
  8508 ;; This function calls:
  8509 ;;		Nothing
  8510 ;; This function is called by:
  8511 ;;		_ethernetController_getRSV
  8512 ;; This function uses a non-reentrant model
  8513 ;;
  8514                           
  8515                           	psect	text22
  8516  00134A                     __ptext22:
  8517                           	opt stack 0
  8518  00134A                     _ENC424J600_updateReceiveStatusVector:
  8519                           	opt stack 23
  8520                           
  8521                           ;ENC424J600.c: 755: RSV_t receiveStatusVector;
  8522                           ;ENC424J600.c: 758: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
  8523                           
  8524                           ;incstack = 0
  8525  00134A  0E00               	movlw	0
  8526  00134C  0100               	movlb	0	; () banked
  8527  00134E  6F65               	movwf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8528  001350  0EFF               	movlw	255
  8529  001352  6F66               	movwf	(??_ENC424J600_updateReceiveStatusVector+1)& (0+255),b
  8530  001354  EE20 F001          	lfsr	2,1
  8531  001358  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8532  00135A  26D9               	addwf	fsr2l,f,c
  8533  00135C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8534  00135E  22DA               	addwfc	fsr2h,f,c
  8535  001360  50DF               	movf	indf2,w,c
  8536  001362  6F67               	movwf	(??_ENC424J600_updateReceiveStatusVector+2)& (0+255),b
  8537  001364  5167               	movf	(??_ENC424J600_updateReceiveStatusVector+2)& (0+255),w,b
  8538  001366  6F69               	movwf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),b
  8539  001368  6B68               	clrf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),b
  8540  00136A  5165               	movf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8541  00136C  1768               	andwf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),f,b
  8542  00136E  5166               	movf	(??_ENC424J600_updateReceiveStatusVector+1)& (0+255),w,b
  8543  001370  1769               	andwf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),f,b
  8544  001372  C060  FFD9         	movff	ENC424J600_updateReceiveStatusVector@rsv,fsr2l
  8545  001376  C061  FFDA         	movff	ENC424J600_updateReceiveStatusVector@rsv+1,fsr2h
  8546  00137A  50DF               	movf	indf2,w,c
  8547  00137C  6F6A               	movwf	(??_ENC424J600_updateReceiveStatusVector+5)& (0+255),b
  8548  00137E  6B6B               	clrf	(??_ENC424J600_updateReceiveStatusVector+6)& (0+255),b
  8549  001380  5168               	movf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),w,b
  8550  001382  116A               	iorwf	(??_ENC424J600_updateReceiveStatusVector+5)& (0+255),w,b
  8551  001384  6F6C               	movwf	ENC424J600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
  8552  001386  5169               	movf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),w,b
  8553  001388  116B               	iorwf	(??_ENC424J600_updateReceiveStatusVector+6)& (0+255),w,b
  8554  00138A  6F6D               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
  8555                           
  8556                           ;ENC424J600.c: 760: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1 : 0;
  8557  00138C  EE20 F002          	lfsr	2,2
  8558  001390  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8559  001392  26D9               	addwf	fsr2l,f,c
  8560  001394  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8561  001396  22DA               	addwfc	fsr2h,f,c
  8562  001398  A0DF               	btfss	indf2,0,c
  8563  00139A  D003               	goto	u9630
  8564  00139C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8565  00139E  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8566  0013A0  D002               	goto	u9648
  8567  0013A2                     u9630:
  8568  0013A2  0100               	movlb	0	; () banked
  8569  0013A4  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8570  0013A6                     u9648:
  8571  0013A6  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8572  0013A8  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8573  0013AA  0BFE               	andlw	-2
  8574  0013AC  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8575  0013AE  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8576                           
  8577                           ;ENC424J600.c: 761: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1 : 0;
  8578  0013B0  EE20 F002          	lfsr	2,2
  8579  0013B4  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8580  0013B6  26D9               	addwf	fsr2l,f,c
  8581  0013B8  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8582  0013BA  22DA               	addwfc	fsr2h,f,c
  8583  0013BC  A4DF               	btfss	indf2,2,c
  8584  0013BE  D003               	goto	u9650
  8585  0013C0  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8586  0013C2  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8587  0013C4  D002               	goto	u9668
  8588  0013C6                     u9650:
  8589  0013C6  0100               	movlb	0	; () banked
  8590  0013C8  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8591  0013CA                     u9668:
  8592  0013CA  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8593  0013CC  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8594  0013CE  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8595  0013D0  0BFD               	andlw	-3
  8596  0013D2  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8597  0013D4  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8598                           
  8599                           ;ENC424J600.c: 762: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1 : 0;
  8600  0013D6  EE20 F002          	lfsr	2,2
  8601  0013DA  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8602  0013DC  26D9               	addwf	fsr2l,f,c
  8603  0013DE  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8604  0013E0  22DA               	addwfc	fsr2h,f,c
  8605  0013E2  A8DF               	btfss	indf2,4,c
  8606  0013E4  D003               	goto	u9670
  8607  0013E6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8608  0013E8  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8609  0013EA  D002               	goto	u9688
  8610  0013EC                     u9670:
  8611  0013EC  0100               	movlb	0	; () banked
  8612  0013EE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8613  0013F0                     u9688:
  8614  0013F0  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8615  0013F2  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8616  0013F4  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8617  0013F6  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8618  0013F8  0BFB               	andlw	-5
  8619  0013FA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8620  0013FC  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8621                           
  8622                           ;ENC424J600.c: 763: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1 : 0;
  8623  0013FE  EE20 F002          	lfsr	2,2
  8624  001402  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8625  001404  26D9               	addwf	fsr2l,f,c
  8626  001406  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8627  001408  22DA               	addwfc	fsr2h,f,c
  8628  00140A  AADF               	btfss	indf2,5,c
  8629  00140C  D003               	goto	u9690
  8630  00140E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8631  001410  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8632  001412  D002               	goto	u9708
  8633  001414                     u9690:
  8634  001414  0100               	movlb	0	; () banked
  8635  001416  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8636  001418                     u9708:
  8637  001418  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8638  00141A  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8639  00141C  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8640  00141E  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8641  001420  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8642  001422  0BF7               	andlw	-9
  8643  001424  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8644  001426  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8645                           
  8646                           ;ENC424J600.c: 764: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1 : 0;
  8647  001428  EE20 F002          	lfsr	2,2
  8648  00142C  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8649  00142E  26D9               	addwf	fsr2l,f,c
  8650  001430  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8651  001432  22DA               	addwfc	fsr2h,f,c
  8652  001434  ACDF               	btfss	indf2,6,c
  8653  001436  D003               	goto	u9710
  8654  001438  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8655  00143A  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8656  00143C  D002               	goto	u9728
  8657  00143E                     u9710:
  8658  00143E  0100               	movlb	0	; () banked
  8659  001440  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8660  001442                     u9728:
  8661  001442  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8662  001444  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8663  001446  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8664  001448  0BEF               	andlw	-17
  8665  00144A  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8666  00144C  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8667                           
  8668                           ;ENC424J600.c: 765: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1 : 0;
  8669  00144E  EE20 F002          	lfsr	2,2
  8670  001452  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8671  001454  26D9               	addwf	fsr2l,f,c
  8672  001456  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8673  001458  22DA               	addwfc	fsr2h,f,c
  8674  00145A  AEDF               	btfss	indf2,7,c
  8675  00145C  D003               	goto	u9730
  8676  00145E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8677  001460  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8678  001462  D002               	goto	u9748
  8679  001464                     u9730:
  8680  001464  0100               	movlb	0	; () banked
  8681  001466  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8682  001468                     u9748:
  8683  001468  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8684  00146A  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8685  00146C  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8686  00146E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8687  001470  0BDF               	andlw	-33
  8688  001472  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8689  001474  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8690                           
  8691                           ;ENC424J600.c: 767: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1 : 0;
  8692  001476  EE20 F003          	lfsr	2,3
  8693  00147A  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8694  00147C  26D9               	addwf	fsr2l,f,c
  8695  00147E  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8696  001480  22DA               	addwfc	fsr2h,f,c
  8697  001482  A0DF               	btfss	indf2,0,c
  8698  001484  D003               	goto	u9750
  8699  001486  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8700  001488  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8701  00148A  D002               	goto	u9768
  8702  00148C                     u9750:
  8703  00148C  0100               	movlb	0	; () banked
  8704  00148E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8705  001490                     u9768:
  8706  001490  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8707  001492  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8708  001494  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8709  001496  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8710  001498  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8711  00149A  0BBF               	andlw	-65
  8712  00149C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8713  00149E  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8714                           
  8715                           ;ENC424J600.c: 768: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1 : 0;
  8716  0014A0  EE20 F003          	lfsr	2,3
  8717  0014A4  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8718  0014A6  26D9               	addwf	fsr2l,f,c
  8719  0014A8  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8720  0014AA  22DA               	addwfc	fsr2h,f,c
  8721  0014AC  A2DF               	btfss	indf2,1,c
  8722  0014AE  D003               	goto	u9770
  8723  0014B0  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8724  0014B2  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8725  0014B4  D002               	goto	u9788
  8726  0014B6                     u9770:
  8727  0014B6  0100               	movlb	0	; () banked
  8728  0014B8  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8729  0014BA                     u9788:
  8730  0014BA  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8731  0014BC  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8732  0014BE  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8733  0014C0  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8734  0014C2  0B7F               	andlw	-129
  8735  0014C4  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8736  0014C6  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8737                           
  8738                           ;ENC424J600.c: 769: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  8739  0014C8  EE20 F003          	lfsr	2,3
  8740  0014CC  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8741  0014CE  26D9               	addwf	fsr2l,f,c
  8742  0014D0  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8743  0014D2  22DA               	addwfc	fsr2h,f,c
  8744  0014D4  A6DF               	btfss	indf2,3,c
  8745  0014D6  D003               	goto	u9790
  8746  0014D8  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8747  0014DA  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8748  0014DC  D002               	goto	u9808
  8749  0014DE                     u9790:
  8750  0014DE  0100               	movlb	0	; () banked
  8751  0014E0  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8752  0014E2                     u9808:
  8753  0014E2  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8754  0014E4  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8755  0014E6  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8756  0014E8  0BFD               	andlw	-3
  8757  0014EA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8758  0014EC  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8759                           
  8760                           ;ENC424J600.c: 770: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1 : 0;
  8761  0014EE  EE20 F003          	lfsr	2,3
  8762  0014F2  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8763  0014F4  26D9               	addwf	fsr2l,f,c
  8764  0014F6  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8765  0014F8  22DA               	addwfc	fsr2h,f,c
  8766  0014FA  A8DF               	btfss	indf2,4,c
  8767  0014FC  D003               	goto	u9810
  8768  0014FE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8769  001500  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8770  001502  D002               	goto	u9828
  8771  001504                     u9810:
  8772  001504  0100               	movlb	0	; () banked
  8773  001506  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8774  001508                     u9828:
  8775  001508  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8776  00150A  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8777  00150C  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8778  00150E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8779  001510  0BFB               	andlw	-5
  8780  001512  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8781  001514  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8782                           
  8783                           ;ENC424J600.c: 771: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1 : 0;
  8784  001516  EE20 F003          	lfsr	2,3
  8785  00151A  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8786  00151C  26D9               	addwf	fsr2l,f,c
  8787  00151E  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8788  001520  22DA               	addwfc	fsr2h,f,c
  8789  001522  AADF               	btfss	indf2,5,c
  8790  001524  D003               	goto	u9830
  8791  001526  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8792  001528  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8793  00152A  D002               	goto	u9848
  8794  00152C                     u9830:
  8795  00152C  0100               	movlb	0	; () banked
  8796  00152E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8797  001530                     u9848:
  8798  001530  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8799  001532  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8800  001534  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8801  001536  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8802  001538  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8803  00153A  0BF7               	andlw	-9
  8804  00153C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8805  00153E  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8806                           
  8807                           ;ENC424J600.c: 772: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1 : 0;
  8808  001540  EE20 F003          	lfsr	2,3
  8809  001544  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8810  001546  26D9               	addwf	fsr2l,f,c
  8811  001548  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8812  00154A  22DA               	addwfc	fsr2h,f,c
  8813  00154C  ACDF               	btfss	indf2,6,c
  8814  00154E  D003               	goto	u9850
  8815  001550  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8816  001552  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8817  001554  D002               	goto	u9868
  8818  001556                     u9850:
  8819  001556  0100               	movlb	0	; () banked
  8820  001558  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8821  00155A                     u9868:
  8822  00155A  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8823  00155C  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8824  00155E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8825  001560  0BEF               	andlw	-17
  8826  001562  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8827  001564  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8828                           
  8829                           ;ENC424J600.c: 773: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1 : 0;
  8830  001566  EE20 F003          	lfsr	2,3
  8831  00156A  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8832  00156C  26D9               	addwf	fsr2l,f,c
  8833  00156E  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8834  001570  22DA               	addwfc	fsr2h,f,c
  8835  001572  AEDF               	btfss	indf2,7,c
  8836  001574  D003               	goto	u9870
  8837  001576  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8838  001578  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8839  00157A  D002               	goto	u9888
  8840  00157C                     u9870:
  8841  00157C  0100               	movlb	0	; () banked
  8842  00157E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8843  001580                     u9888:
  8844  001580  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8845  001582  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8846  001584  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8847  001586  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8848  001588  0BDF               	andlw	-33
  8849  00158A  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8850  00158C  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8851                           
  8852                           ;ENC424J600.c: 775: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1 : 0;
  8853  00158E  EE20 F004          	lfsr	2,4
  8854  001592  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8855  001594  26D9               	addwf	fsr2l,f,c
  8856  001596  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8857  001598  22DA               	addwfc	fsr2h,f,c
  8858  00159A  A0DF               	btfss	indf2,0,c
  8859  00159C  D003               	goto	u9890
  8860  00159E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8861  0015A0  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8862  0015A2  D002               	goto	u9908
  8863  0015A4                     u9890:
  8864  0015A4  0100               	movlb	0	; () banked
  8865  0015A6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8866  0015A8                     u9908:
  8867  0015A8  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8868  0015AA  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8869  0015AC  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8870  0015AE  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8871  0015B0  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8872  0015B2  0BBF               	andlw	-65
  8873  0015B4  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8874  0015B6  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8875                           
  8876                           ;ENC424J600.c: 776: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1 : 0;
  8877  0015B8  EE20 F004          	lfsr	2,4
  8878  0015BC  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8879  0015BE  26D9               	addwf	fsr2l,f,c
  8880  0015C0  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8881  0015C2  22DA               	addwfc	fsr2h,f,c
  8882  0015C4  A2DF               	btfss	indf2,1,c
  8883  0015C6  D003               	goto	u9910
  8884  0015C8  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8885  0015CA  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8886  0015CC  D002               	goto	u9928
  8887  0015CE                     u9910:
  8888  0015CE  0100               	movlb	0	; () banked
  8889  0015D0  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8890  0015D2                     u9928:
  8891  0015D2  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8892  0015D4  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8893  0015D6  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8894  0015D8  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8895  0015DA  0B7F               	andlw	-129
  8896  0015DC  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8897  0015DE  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8898                           
  8899                           ;ENC424J600.c: 777: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1 : 0;
  8900  0015E0  EE20 F004          	lfsr	2,4
  8901  0015E4  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8902  0015E6  26D9               	addwf	fsr2l,f,c
  8903  0015E8  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8904  0015EA  22DA               	addwfc	fsr2h,f,c
  8905  0015EC  A4DF               	btfss	indf2,2,c
  8906  0015EE  D003               	goto	u9930
  8907  0015F0  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8908  0015F2  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8909  0015F4  D002               	goto	u9948
  8910  0015F6                     u9930:
  8911  0015F6  0100               	movlb	0	; () banked
  8912  0015F8  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8913  0015FA                     u9948:
  8914  0015FA  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8915  0015FC  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8916  0015FE  0BFE               	andlw	-2
  8917  001600  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8918  001602  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8919                           
  8920                           ;ENC424J600.c: 778: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  8921  001604  EE20 F004          	lfsr	2,4
  8922  001608  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8923  00160A  26D9               	addwf	fsr2l,f,c
  8924  00160C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8925  00160E  22DA               	addwfc	fsr2h,f,c
  8926  001610  A6DF               	btfss	indf2,3,c
  8927  001612  D003               	goto	u9950
  8928  001614  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8929  001616  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8930  001618  D002               	goto	u9968
  8931  00161A                     u9950:
  8932  00161A  0100               	movlb	0	; () banked
  8933  00161C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8934  00161E                     u9968:
  8935  00161E  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8936  001620  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8937  001622  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8938  001624  0BFD               	andlw	-3
  8939  001626  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8940  001628  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8941                           
  8942                           ;ENC424J600.c: 779: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1 : 0;
  8943  00162A  EE20 F004          	lfsr	2,4
  8944  00162E  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8945  001630  26D9               	addwf	fsr2l,f,c
  8946  001632  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8947  001634  22DA               	addwfc	fsr2h,f,c
  8948  001636  A8DF               	btfss	indf2,4,c
  8949  001638  D003               	goto	u9970
  8950  00163A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8951  00163C  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8952  00163E  D002               	goto	u9988
  8953  001640                     u9970:
  8954  001640  0100               	movlb	0	; () banked
  8955  001642  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8956  001644                     u9988:
  8957  001644  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8958  001646  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8959  001648  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8960  00164A  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8961  00164C  0BFB               	andlw	-5
  8962  00164E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8963  001650  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;ENC424J600.c: 781: return receiveStatusVector;
  8967  001652  EE20  F06C         	lfsr	2,ENC424J600_updateReceiveStatusVector@receiveStatusVector
  8968  001656  EE00  F060         	lfsr	0,?_ENC424J600_updateReceiveStatusVector
  8969  00165A  0E04               	movlw	4
  8970  00165C                     u9991:
  8971  00165C  CFDB FFEB          	movff	plusw2,plusw0
  8972  001660  06E8               	decf	wreg,f,c
  8973  001662  E2FC               	bc	u9991
  8974  001664  0012               	return	
  8975  001666                     __end_of_ENC424J600_updateReceiveStatusVector:
  8976                           	opt stack 0
  8977                           tblptru	equ	0xFF8
  8978                           tblptrh	equ	0xFF7
  8979                           tblptrl	equ	0xFF6
  8980                           tablat	equ	0xFF5
  8981                           prodh	equ	0xFF4
  8982                           prodl	equ	0xFF3
  8983                           intcon	equ	0xFF2
  8984                           intcon3	equ	0xFF0
  8985                           indf0	equ	0xFEF
  8986                           postinc0	equ	0xFEE
  8987                           plusw0	equ	0xFEB
  8988                           fsr0h	equ	0xFEA
  8989                           fsr0l	equ	0xFE9
  8990                           wreg	equ	0xFE8
  8991                           indf1	equ	0xFE7
  8992                           postinc1	equ	0xFE6
  8993                           postdec1	equ	0xFE5
  8994                           plusw1	equ	0xFE3
  8995                           fsr1h	equ	0xFE2
  8996                           fsr1l	equ	0xFE1
  8997                           indf2	equ	0xFDF
  8998                           postinc2	equ	0xFDE
  8999                           postdec2	equ	0xFDD
  9000                           plusw2	equ	0xFDB
  9001                           fsr2h	equ	0xFDA
  9002                           fsr2l	equ	0xFD9
  9003                           status	equ	0xFD8
  9004                           
  9005 ;; *************** function _ethernetController_getEtherTypeField *****************
  9006 ;; Defined at:
  9007 ;;		line 282 in file "src/enc424j600/ENC424J600.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;  field           9   15[BANK0 ] struct memoryField
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;  ethertype       2   28[BANK0 ] enum E5507
  9012 ;;  highByte        1   32[BANK0 ] unsigned char 
  9013 ;;  lowByte         1   31[BANK0 ] unsigned char 
  9014 ;;  opcode          1   30[BANK0 ] unsigned char 
  9015 ;; Return value:  Size  Location     Type
  9016 ;;                  2   15[BANK0 ] enum E5507
  9017 ;; Registers used:
  9018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9019 ;; Tracked objects:
  9020 ;;		On entry : 0/0
  9021 ;;		On exit  : 0/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9024 ;;      Params:         0       9       0       0       0       0       0       0       0
  9025 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9026 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9027 ;;      Totals:         0      18       0       0       0       0       0       0       0
  9028 ;;Total ram usage:       18 bytes
  9029 ;; Hardware stack levels used:    1
  9030 ;; Hardware stack levels required when called:    7
  9031 ;; This function calls:
  9032 ;;		_ENC424J600_readSPI
  9033 ;;		_ENC424J600_setERXDATAReadPointer
  9034 ;;		_ENC424J600_writeSPI
  9035 ;; This function is called by:
  9036 ;;		_ethernet_rxGetNewFrame
  9037 ;; This function uses a non-reentrant model
  9038 ;;
  9039                           
  9040                           	psect	text23
  9041  004396                     __ptext23:
  9042                           	opt stack 0
  9043  004396                     _ethernetController_getEtherTypeField:
  9044                           	opt stack 21
  9045                           
  9046                           ;ENC424J600.c: 283: etherType_t ethertype = 0x0000;
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;incstack = 0
  9050  004396  0E00               	movlw	0
  9051  004398  0100               	movlb	0	; () banked
  9052  00439A  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  9053  00439C  0E00               	movlw	0
  9054  00439E  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  9055                           
  9056                           ; BSR set to: 0
  9057                           ;ENC424J600.c: 284: ENC424J600_setERXDATAReadPointer(field.start + 20);
  9058  0043A0  0E14               	movlw	20
  9059  0043A2  256F               	addwf	ethernetController_getEtherTypeField@field& (0+255),w,b
  9060  0043A4  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
  9061  0043A6  0E00               	movlw	0
  9062  0043A8  2170               	addwfc	(ethernetController_getEtherTypeField@field+1)& (0+255),w,b
  9063  0043AA  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
  9064  0043AC  ECE1  F024         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  9065                           
  9066                           ;ENC424J600.c: 285: uint8_t opcode = 0x2C;
  9067  0043B0  0E2C               	movlw	44
  9068  0043B2  0100               	movlb	0	; () banked
  9069  0043B4  6F7E               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;ENC424J600.c: 286: PORTBbits.RB4=0;
  9073  0043B6  9881               	bcf	3969,4,c	;volatile
  9074                           
  9075                           ;ENC424J600.c: 287: ENC424J600_writeSPI(&opcode);
  9076  0043B8  0E7E               	movlw	low ethernetController_getEtherTypeField@opcode
  9077  0043BA  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  9078  0043BC  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
  9079  0043BE  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  9080  0043C0  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
  9081                           
  9082                           ;ENC424J600.c: 289: uint8_t lowByte;
  9083                           ;ENC424J600.c: 290: uint8_t highByte;
  9084                           ;ENC424J600.c: 291: ENC424J600_readSPI(&highByte);
  9085  0043C4  0E80               	movlw	low ethernetController_getEtherTypeField@highByte
  9086  0043C6  0100               	movlb	0	; () banked
  9087  0043C8  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  9088  0043CA  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
  9089  0043CC  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  9090  0043CE  EC3B  F022         	call	_ENC424J600_readSPI	;wreg free
  9091                           
  9092                           ;ENC424J600.c: 292: ENC424J600_readSPI(&lowByte);
  9093  0043D2  0E7F               	movlw	low ethernetController_getEtherTypeField@lowByte
  9094  0043D4  0100               	movlb	0	; () banked
  9095  0043D6  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  9096  0043D8  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
  9097  0043DA  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  9098  0043DC  EC3B  F022         	call	_ENC424J600_readSPI	;wreg free
  9099                           
  9100                           ;ENC424J600.c: 293: ethertype = (uint16_t) (lowByte | (highByte << 8));
  9101  0043E0  0100               	movlb	0	; () banked
  9102  0043E2  5180               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
  9103  0043E4  6F79               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
  9104  0043E6  6B78               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
  9105  0043E8  517F               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
  9106  0043EA  6F7A               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
  9107  0043EC  6B7B               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
  9108  0043EE  5178               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
  9109  0043F0  117A               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
  9110  0043F2  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  9111  0043F4  5179               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
  9112  0043F6  117B               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
  9113  0043F8  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  9114                           
  9115                           ; BSR set to: 0
  9116                           ;ENC424J600.c: 294: PORTBbits.RB4=1;
  9117  0043FA  8881               	bsf	3969,4,c	;volatile
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;ENC424J600.c: 295: return ethertype;
  9121  0043FC  C07C  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
  9122  004400  C07D  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
  9123  004404  0012               	return	
  9124  004406                     __end_of_ethernetController_getEtherTypeField:
  9125                           	opt stack 0
  9126                           tblptru	equ	0xFF8
  9127                           tblptrh	equ	0xFF7
  9128                           tblptrl	equ	0xFF6
  9129                           tablat	equ	0xFF5
  9130                           prodh	equ	0xFF4
  9131                           prodl	equ	0xFF3
  9132                           intcon	equ	0xFF2
  9133                           intcon3	equ	0xFF0
  9134                           indf0	equ	0xFEF
  9135                           postinc0	equ	0xFEE
  9136                           plusw0	equ	0xFEB
  9137                           fsr0h	equ	0xFEA
  9138                           fsr0l	equ	0xFE9
  9139                           wreg	equ	0xFE8
  9140                           indf1	equ	0xFE7
  9141                           postinc1	equ	0xFE6
  9142                           postdec1	equ	0xFE5
  9143                           plusw1	equ	0xFE3
  9144                           fsr1h	equ	0xFE2
  9145                           fsr1l	equ	0xFE1
  9146                           indf2	equ	0xFDF
  9147                           postinc2	equ	0xFDE
  9148                           postdec2	equ	0xFDD
  9149                           plusw2	equ	0xFDB
  9150                           fsr2h	equ	0xFDA
  9151                           fsr2l	equ	0xFD9
  9152                           status	equ	0xFD8
  9153                           
  9154 ;; *************** function _etherTypeToString *****************
  9155 ;; Defined at:
  9156 ;;		line 178 in file "src/system/uart.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;  ethertype       2    0[BANK0 ] enum E5470
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;		None
  9161 ;; Return value:  Size  Location     Type
  9162 ;;                  2    0[BANK0 ] PTR unsigned char 
  9163 ;; Registers used:
  9164 ;;		wreg, status,2, status,0
  9165 ;; Tracked objects:
  9166 ;;		On entry : 0/0
  9167 ;;		On exit  : 0/0
  9168 ;;		Unchanged: 0/0
  9169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9170 ;;      Params:         0       2       0       0       0       0       0       0       0
  9171 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9172 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9173 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9174 ;;Total ram usage:        4 bytes
  9175 ;; Hardware stack levels used:    1
  9176 ;; Hardware stack levels required when called:    4
  9177 ;; This function calls:
  9178 ;;		Nothing
  9179 ;; This function is called by:
  9180 ;;		_ethernet_rxGetNewFrame
  9181 ;; This function uses a non-reentrant model
  9182 ;;
  9183                           
  9184                           	psect	text24
  9185  00483E                     __ptext24:
  9186                           	opt stack 0
  9187  00483E                     _etherTypeToString:
  9188                           	opt stack 24
  9189                           
  9190                           ;uart.c: 179: switch (ethertype) {
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;incstack = 0
  9194  00483E  D010               	goto	l805
  9195  004840                     
  9196                           ;uart.c: 181: return "IPv4";
  9197  004840  0ED0               	movlw	low STR_60
  9198  004842  0100               	movlb	0	; () banked
  9199  004844  6F60               	movwf	?_etherTypeToString& (0+255),b
  9200  004846  0E7F               	movlw	high STR_60
  9201  004848  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  9202                           
  9203                           ; BSR set to: 0
  9204  00484A  0012               	return	
  9205  00484C                     
  9206                           ; BSR set to: 0
  9207                           ;uart.c: 183: return "ARP";
  9208                           
  9209                           ; BSR set to: 0
  9210  00484C  0EEC               	movlw	low STR_61
  9211  00484E  6F60               	movwf	?_etherTypeToString& (0+255),b
  9212  004850  0E7F               	movlw	high STR_61
  9213  004852  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  9214                           
  9215                           ; BSR set to: 0
  9216  004854  0012               	return	
  9217  004856                     
  9218                           ; BSR set to: 0
  9219                           ;uart.c: 185: return "Unknown EtherType";
  9220                           
  9221                           ; BSR set to: 0
  9222  004856  0EA2               	movlw	low STR_62
  9223  004858  6F60               	movwf	?_etherTypeToString& (0+255),b
  9224  00485A  0E7E               	movlw	high STR_62
  9225  00485C  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  9226                           
  9227                           ; BSR set to: 0
  9228                           ;uart.c: 186: }
  9229                           
  9230                           ; BSR set to: 0
  9231  00485E  0012               	return	
  9232  004860                     l805:
  9233                           
  9234                           ; BSR set to: 0
  9235  004860  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
  9236  004864  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
  9237                           
  9238                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9239                           ; Switch size 1, requested type "space"
  9240                           ; Number of cases is 1, Range of values is 8 to 8
  9241                           ; switch strategies available:
  9242                           ; Name         Instructions Cycles
  9243                           ; simple_byte            4     3 (average)
  9244                           ;	Chosen strategy is simple_byte
  9245  004868  0100               	movlb	0	; () banked
  9246  00486A  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
  9247  00486C  0A08               	xorlw	8	; case 8
  9248  00486E  A4D8               	btfss	status,2,c
  9249  004870  D7F2               	goto	l809
  9250                           
  9251                           ; BSR set to: 0
  9252                           ; Switch size 1, requested type "space"
  9253                           ; Number of cases is 2, Range of values is 0 to 6
  9254                           ; switch strategies available:
  9255                           ; Name         Instructions Cycles
  9256                           ; simple_byte            7     4 (average)
  9257                           ;	Chosen strategy is simple_byte
  9258  004872  5162               	movf	??_etherTypeToString& (0+255),w,b
  9259  004874  0A00               	xorlw	0	; case 0
  9260  004876  B4D8               	btfsc	status,2,c
  9261  004878  D7E3               	goto	l806
  9262  00487A  0A06               	xorlw	6	; case 6
  9263  00487C  B4D8               	btfsc	status,2,c
  9264  00487E  D7E6               	goto	l808
  9265  004880  D7EA               	goto	l809
  9266  004882                     __end_of_etherTypeToString:
  9267                           	opt stack 0
  9268                           tblptru	equ	0xFF8
  9269                           tblptrh	equ	0xFF7
  9270                           tblptrl	equ	0xFF6
  9271                           tablat	equ	0xFF5
  9272                           prodh	equ	0xFF4
  9273                           prodl	equ	0xFF3
  9274                           intcon	equ	0xFF2
  9275                           intcon3	equ	0xFF0
  9276                           indf0	equ	0xFEF
  9277                           postinc0	equ	0xFEE
  9278                           plusw0	equ	0xFEB
  9279                           fsr0h	equ	0xFEA
  9280                           fsr0l	equ	0xFE9
  9281                           wreg	equ	0xFE8
  9282                           indf1	equ	0xFE7
  9283                           postinc1	equ	0xFE6
  9284                           postdec1	equ	0xFE5
  9285                           plusw1	equ	0xFE3
  9286                           fsr1h	equ	0xFE2
  9287                           fsr1l	equ	0xFE1
  9288                           indf2	equ	0xFDF
  9289                           postinc2	equ	0xFDE
  9290                           postdec2	equ	0xFDD
  9291                           plusw2	equ	0xFDB
  9292                           fsr2h	equ	0xFDA
  9293                           fsr2l	equ	0xFD9
  9294                           status	equ	0xFD8
  9295                           
  9296 ;; *************** function _UARTTransmitInt *****************
  9297 ;; Defined at:
  9298 ;;		line 60 in file "src/system/uart.c"
  9299 ;; Parameters:    Size  Location     Type
  9300 ;;  val             4   58[BANK0 ] unsigned long 
  9301 ;; Auto vars:     Size  Location     Type
  9302 ;;		None
  9303 ;; Return value:  Size  Location     Type
  9304 ;;                  1    wreg      void 
  9305 ;; Registers used:
  9306 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9307 ;; Tracked objects:
  9308 ;;		On entry : 0/0
  9309 ;;		On exit  : 0/0
  9310 ;;		Unchanged: 0/0
  9311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9312 ;;      Params:         0       4       0       0       0       0       0       0       0
  9313 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9314 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9315 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9316 ;;Total ram usage:        4 bytes
  9317 ;; Hardware stack levels used:    1
  9318 ;; Hardware stack levels required when called:    6
  9319 ;; This function calls:
  9320 ;;		_UARTTransmitText
  9321 ;;		_intToString
  9322 ;; This function is called by:
  9323 ;;		_ethernet_rxGetNewFrame
  9324 ;;		_main
  9325 ;; This function uses a non-reentrant model
  9326 ;;
  9327                           
  9328                           	psect	text25
  9329  004D44                     __ptext25:
  9330                           	opt stack 0
  9331  004D44                     _UARTTransmitInt:
  9332                           	opt stack 22
  9333                           
  9334                           ;uart.c: 61: UARTTransmitText(intToString(val));
  9335                           
  9336                           ; BSR set to: 0
  9337                           ;incstack = 0
  9338  004D44  C09A  F073         	movff	UARTTransmitInt@val,intToString@val
  9339  004D48  C09B  F074         	movff	UARTTransmitInt@val+1,intToString@val+1
  9340  004D4C  C09C  F075         	movff	UARTTransmitInt@val+2,intToString@val+2
  9341  004D50  C09D  F076         	movff	UARTTransmitInt@val+3,intToString@val+3
  9342  004D54  EC21  F00E         	call	_intToString	;wreg free
  9343  004D58  C073  F098         	movff	?_intToString,UARTTransmitText@str
  9344  004D5C  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  9345  004D60  EC09  F023         	call	_UARTTransmitText	;wreg free
  9346  004D64  0012               	return		;funcret
  9347  004D66                     __end_of_UARTTransmitInt:
  9348                           	opt stack 0
  9349                           tblptru	equ	0xFF8
  9350                           tblptrh	equ	0xFF7
  9351                           tblptrl	equ	0xFF6
  9352                           tablat	equ	0xFF5
  9353                           prodh	equ	0xFF4
  9354                           prodl	equ	0xFF3
  9355                           intcon	equ	0xFF2
  9356                           intcon3	equ	0xFF0
  9357                           indf0	equ	0xFEF
  9358                           postinc0	equ	0xFEE
  9359                           plusw0	equ	0xFEB
  9360                           fsr0h	equ	0xFEA
  9361                           fsr0l	equ	0xFE9
  9362                           wreg	equ	0xFE8
  9363                           indf1	equ	0xFE7
  9364                           postinc1	equ	0xFE6
  9365                           postdec1	equ	0xFE5
  9366                           plusw1	equ	0xFE3
  9367                           fsr1h	equ	0xFE2
  9368                           fsr1l	equ	0xFE1
  9369                           indf2	equ	0xFDF
  9370                           postinc2	equ	0xFDE
  9371                           postdec2	equ	0xFDD
  9372                           plusw2	equ	0xFDB
  9373                           fsr2h	equ	0xFDA
  9374                           fsr2l	equ	0xFD9
  9375                           status	equ	0xFD8
  9376                           
  9377 ;; *************** function _intToString *****************
  9378 ;; Defined at:
  9379 ;;		line 92 in file "src/system/uart.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;  val             4   19[BANK0 ] unsigned long 
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;  pointer         1   38[BANK0 ] unsigned char 
  9384 ;;  tenthousands    1   37[BANK0 ] unsigned char 
  9385 ;;  thousands       1   36[BANK0 ] unsigned char 
  9386 ;;  hundreds        1   35[BANK0 ] unsigned char 
  9387 ;;  ones            1   34[BANK0 ] unsigned char 
  9388 ;;  tens            1   33[BANK0 ] unsigned char 
  9389 ;; Return value:  Size  Location     Type
  9390 ;;                  2   19[BANK0 ] PTR unsigned char 
  9391 ;; Registers used:
  9392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9393 ;; Tracked objects:
  9394 ;;		On entry : 0/0
  9395 ;;		On exit  : 0/0
  9396 ;;		Unchanged: 0/0
  9397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9398 ;;      Params:         0       4       0       0       0       0       0       0       0
  9399 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9400 ;;      Temps:          0      10       0       0       0       0       0       0       0
  9401 ;;      Totals:         0      20       0       0       0       0       0       0       0
  9402 ;;Total ram usage:       20 bytes
  9403 ;; Hardware stack levels used:    1
  9404 ;; Hardware stack levels required when called:    5
  9405 ;; This function calls:
  9406 ;;		___lldiv
  9407 ;;		___llmod
  9408 ;;		___wmul
  9409 ;; This function is called by:
  9410 ;;		_ethernet_rxGetNewFrame
  9411 ;;		_printErrorMessage
  9412 ;;		_UARTTransmitInt
  9413 ;;		_ipv4_handleNewPacket
  9414 ;;		_arpEntryToString
  9415 ;;		_ARP_probe
  9416 ;; This function uses a non-reentrant model
  9417 ;;
  9418                           
  9419                           	psect	text26
  9420  001C42                     __ptext26:
  9421                           	opt stack 0
  9422  001C42                     _intToString:
  9423                           	opt stack 24
  9424                           
  9425                           ;uart.c: 93: char static number [10];
  9426                           ;uart.c: 94: uint8_t pointer = 0;
  9427                           
  9428                           ;incstack = 0
  9429  001C42  0E00               	movlw	0
  9430  001C44  0100               	movlb	0	; () banked
  9431  001C46  6F86               	movwf	intToString@pointer& (0+255),b
  9432                           
  9433                           ; BSR set to: 0
  9434                           ;uart.c: 96: uint8_t tenthousands = val / 10000u;
  9435  001C48  C073  F066         	movff	intToString@val,___lldiv@dividend
  9436  001C4C  C074  F067         	movff	intToString@val+1,___lldiv@dividend+1
  9437  001C50  C075  F068         	movff	intToString@val+2,___lldiv@dividend+2
  9438  001C54  C076  F069         	movff	intToString@val+3,___lldiv@dividend+3
  9439  001C58  0E10               	movlw	16
  9440  001C5A  6F6A               	movwf	___lldiv@divisor& (0+255),b
  9441  001C5C  0E27               	movlw	39
  9442  001C5E  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  9443  001C60  0E00               	movlw	0
  9444  001C62  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  9445  001C64  0E00               	movlw	0
  9446  001C66  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  9447  001C68  ECA7  F01F         	call	___lldiv	;wreg free
  9448  001C6C  0100               	movlb	0	; () banked
  9449  001C6E  5166               	movf	?___lldiv& (0+255),w,b
  9450  001C70  6F85               	movwf	intToString@tenthousands& (0+255),b
  9451                           
  9452                           ; BSR set to: 0
  9453                           ;uart.c: 97: uint8_t thousands = (val - tenthousands * 10000u) / 1000u;
  9454  001C72  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  9455  001C76  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9456  001C78  0E27               	movlw	39
  9457  001C7A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9458  001C7C  0E10               	movlw	16
  9459  001C7E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9460  001C80  EC1C  F026         	call	___wmul	;wreg free
  9461  001C84  0100               	movlb	0	; () banked
  9462  001C86  5160               	movf	?___wmul& (0+255),w,b
  9463  001C88  6F77               	movwf	??_intToString& (0+255),b
  9464  001C8A  5161               	movf	(?___wmul+1)& (0+255),w,b
  9465  001C8C  6F78               	movwf	(??_intToString+1)& (0+255),b
  9466  001C8E  6B79               	clrf	(??_intToString+2)& (0+255),b
  9467  001C90  6B7A               	clrf	(??_intToString+3)& (0+255),b
  9468  001C92  1F77               	comf	??_intToString& (0+255),f,b
  9469  001C94  1F78               	comf	(??_intToString+1)& (0+255),f,b
  9470  001C96  1F79               	comf	(??_intToString+2)& (0+255),f,b
  9471  001C98  1F7A               	comf	(??_intToString+3)& (0+255),f,b
  9472  001C9A  2B77               	incf	??_intToString& (0+255),f,b
  9473  001C9C  0E00               	movlw	0
  9474  001C9E  2378               	addwfc	(??_intToString+1)& (0+255),f,b
  9475  001CA0  2379               	addwfc	(??_intToString+2)& (0+255),f,b
  9476  001CA2  237A               	addwfc	(??_intToString+3)& (0+255),f,b
  9477  001CA4  5173               	movf	intToString@val& (0+255),w,b
  9478  001CA6  2577               	addwf	??_intToString& (0+255),w,b
  9479  001CA8  6F66               	movwf	___lldiv@dividend& (0+255),b
  9480  001CAA  5174               	movf	(intToString@val+1)& (0+255),w,b
  9481  001CAC  2178               	addwfc	(??_intToString+1)& (0+255),w,b
  9482  001CAE  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  9483  001CB0  5175               	movf	(intToString@val+2)& (0+255),w,b
  9484  001CB2  2179               	addwfc	(??_intToString+2)& (0+255),w,b
  9485  001CB4  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  9486  001CB6  5176               	movf	(intToString@val+3)& (0+255),w,b
  9487  001CB8  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  9488  001CBA  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  9489  001CBC  0EE8               	movlw	232
  9490  001CBE  6F6A               	movwf	___lldiv@divisor& (0+255),b
  9491  001CC0  0E03               	movlw	3
  9492  001CC2  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  9493  001CC4  0E00               	movlw	0
  9494  001CC6  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  9495  001CC8  0E00               	movlw	0
  9496  001CCA  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  9497  001CCC  ECA7  F01F         	call	___lldiv	;wreg free
  9498  001CD0  0100               	movlb	0	; () banked
  9499  001CD2  5166               	movf	?___lldiv& (0+255),w,b
  9500  001CD4  6F84               	movwf	intToString@thousands& (0+255),b
  9501                           
  9502                           ; BSR set to: 0
  9503                           ;uart.c: 98: uint8_t hundreds = (val - tenthousands * 10000u - thousands * 1000u) / 100u
      +                          ;
  9504  001CD6  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  9505  001CDA  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9506  001CDC  0E27               	movlw	39
  9507  001CDE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9508  001CE0  0E10               	movlw	16
  9509  001CE2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9510  001CE4  EC1C  F026         	call	___wmul	;wreg free
  9511  001CE8  C060  F077         	movff	?___wmul,??_intToString
  9512  001CEC  C061  F078         	movff	?___wmul+1,??_intToString+1
  9513  001CF0  C084  F060         	movff	intToString@thousands,___wmul@multiplier
  9514  001CF4  0100               	movlb	0	; () banked
  9515  001CF6  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9516  001CF8  0E03               	movlw	3
  9517  001CFA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9518  001CFC  0EE8               	movlw	232
  9519  001CFE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9520  001D00  EC1C  F026         	call	___wmul	;wreg free
  9521  001D04  0100               	movlb	0	; () banked
  9522  001D06  5177               	movf	??_intToString& (0+255),w,b
  9523  001D08  2560               	addwf	?___wmul& (0+255),w,b
  9524  001D0A  6F79               	movwf	(??_intToString+2)& (0+255),b
  9525  001D0C  5178               	movf	(??_intToString+1)& (0+255),w,b
  9526  001D0E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9527  001D10  6F7A               	movwf	(??_intToString+3)& (0+255),b
  9528  001D12  6B7B               	clrf	(??_intToString+4)& (0+255),b
  9529  001D14  B0D8               	btfsc	status,0,c
  9530  001D16  2B7B               	incf	(??_intToString+4)& (0+255),f,b
  9531  001D18  6B7C               	clrf	(??_intToString+5)& (0+255),b
  9532  001D1A  1F79               	comf	(??_intToString+2)& (0+255),f,b
  9533  001D1C  1F7A               	comf	(??_intToString+3)& (0+255),f,b
  9534  001D1E  1F7B               	comf	(??_intToString+4)& (0+255),f,b
  9535  001D20  1F7C               	comf	(??_intToString+5)& (0+255),f,b
  9536  001D22  2B79               	incf	(??_intToString+2)& (0+255),f,b
  9537  001D24  0E00               	movlw	0
  9538  001D26  237A               	addwfc	(??_intToString+3)& (0+255),f,b
  9539  001D28  237B               	addwfc	(??_intToString+4)& (0+255),f,b
  9540  001D2A  237C               	addwfc	(??_intToString+5)& (0+255),f,b
  9541  001D2C  5173               	movf	intToString@val& (0+255),w,b
  9542  001D2E  2579               	addwf	(??_intToString+2)& (0+255),w,b
  9543  001D30  6F66               	movwf	___lldiv@dividend& (0+255),b
  9544  001D32  5174               	movf	(intToString@val+1)& (0+255),w,b
  9545  001D34  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  9546  001D36  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  9547  001D38  5175               	movf	(intToString@val+2)& (0+255),w,b
  9548  001D3A  217B               	addwfc	(??_intToString+4)& (0+255),w,b
  9549  001D3C  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  9550  001D3E  5176               	movf	(intToString@val+3)& (0+255),w,b
  9551  001D40  217C               	addwfc	(??_intToString+5)& (0+255),w,b
  9552  001D42  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  9553  001D44  0E64               	movlw	100
  9554  001D46  6F6A               	movwf	___lldiv@divisor& (0+255),b
  9555  001D48  0E00               	movlw	0
  9556  001D4A  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  9557  001D4C  0E00               	movlw	0
  9558  001D4E  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  9559  001D50  0E00               	movlw	0
  9560  001D52  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  9561  001D54  ECA7  F01F         	call	___lldiv	;wreg free
  9562  001D58  0100               	movlb	0	; () banked
  9563  001D5A  5166               	movf	?___lldiv& (0+255),w,b
  9564  001D5C  6F83               	movwf	intToString@hundreds& (0+255),b
  9565                           
  9566                           ; BSR set to: 0
  9567                           ;uart.c: 99: uint8_t tens = (val - tenthousands * 10000u - thousands * 1000u - hundreds 
      +                          * 100u) / 10u;
  9568  001D5E  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  9569  001D62  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9570  001D64  0E27               	movlw	39
  9571  001D66  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9572  001D68  0E10               	movlw	16
  9573  001D6A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9574  001D6C  EC1C  F026         	call	___wmul	;wreg free
  9575  001D70  C060  F077         	movff	?___wmul,??_intToString
  9576  001D74  C061  F078         	movff	?___wmul+1,??_intToString+1
  9577  001D78  C084  F060         	movff	intToString@thousands,___wmul@multiplier
  9578  001D7C  0100               	movlb	0	; () banked
  9579  001D7E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9580  001D80  0E03               	movlw	3
  9581  001D82  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9582  001D84  0EE8               	movlw	232
  9583  001D86  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9584  001D88  EC1C  F026         	call	___wmul	;wreg free
  9585  001D8C  0100               	movlb	0	; () banked
  9586  001D8E  5177               	movf	??_intToString& (0+255),w,b
  9587  001D90  2560               	addwf	?___wmul& (0+255),w,b
  9588  001D92  6F79               	movwf	(??_intToString+2)& (0+255),b
  9589  001D94  5178               	movf	(??_intToString+1)& (0+255),w,b
  9590  001D96  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9591  001D98  6F7A               	movwf	(??_intToString+3)& (0+255),b
  9592  001D9A  6B7B               	clrf	(??_intToString+4)& (0+255),b
  9593  001D9C  B0D8               	btfsc	status,0,c
  9594  001D9E  2B7B               	incf	(??_intToString+4)& (0+255),f,b
  9595  001DA0  6B7C               	clrf	(??_intToString+5)& (0+255),b
  9596  001DA2  5183               	movf	intToString@hundreds& (0+255),w,b
  9597  001DA4  0D64               	mullw	100
  9598  001DA6  50F3               	movf	prodl,w,c
  9599  001DA8  2579               	addwf	(??_intToString+2)& (0+255),w,b
  9600  001DAA  6F7D               	movwf	(??_intToString+6)& (0+255),b
  9601  001DAC  50F4               	movf	prodh,w,c
  9602  001DAE  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  9603  001DB0  6F7E               	movwf	(??_intToString+7)& (0+255),b
  9604  001DB2  0E00               	movlw	0
  9605  001DB4  217B               	addwfc	(??_intToString+4)& (0+255),w,b
  9606  001DB6  6F7F               	movwf	(??_intToString+8)& (0+255),b
  9607  001DB8  0E00               	movlw	0
  9608  001DBA  217C               	addwfc	(??_intToString+5)& (0+255),w,b
  9609  001DBC  6F80               	movwf	(??_intToString+9)& (0+255),b
  9610  001DBE  1F7D               	comf	(??_intToString+6)& (0+255),f,b
  9611  001DC0  1F7E               	comf	(??_intToString+7)& (0+255),f,b
  9612  001DC2  1F7F               	comf	(??_intToString+8)& (0+255),f,b
  9613  001DC4  1F80               	comf	(??_intToString+9)& (0+255),f,b
  9614  001DC6  2B7D               	incf	(??_intToString+6)& (0+255),f,b
  9615  001DC8  0E00               	movlw	0
  9616  001DCA  237E               	addwfc	(??_intToString+7)& (0+255),f,b
  9617  001DCC  237F               	addwfc	(??_intToString+8)& (0+255),f,b
  9618  001DCE  2380               	addwfc	(??_intToString+9)& (0+255),f,b
  9619  001DD0  5173               	movf	intToString@val& (0+255),w,b
  9620  001DD2  257D               	addwf	(??_intToString+6)& (0+255),w,b
  9621  001DD4  6F66               	movwf	___lldiv@dividend& (0+255),b
  9622  001DD6  5174               	movf	(intToString@val+1)& (0+255),w,b
  9623  001DD8  217E               	addwfc	(??_intToString+7)& (0+255),w,b
  9624  001DDA  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  9625  001DDC  5175               	movf	(intToString@val+2)& (0+255),w,b
  9626  001DDE  217F               	addwfc	(??_intToString+8)& (0+255),w,b
  9627  001DE0  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  9628  001DE2  5176               	movf	(intToString@val+3)& (0+255),w,b
  9629  001DE4  2180               	addwfc	(??_intToString+9)& (0+255),w,b
  9630  001DE6  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  9631  001DE8  0E0A               	movlw	10
  9632  001DEA  6F6A               	movwf	___lldiv@divisor& (0+255),b
  9633  001DEC  0E00               	movlw	0
  9634  001DEE  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  9635  001DF0  0E00               	movlw	0
  9636  001DF2  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  9637  001DF4  0E00               	movlw	0
  9638  001DF6  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  9639  001DF8  ECA7  F01F         	call	___lldiv	;wreg free
  9640  001DFC  0100               	movlb	0	; () banked
  9641  001DFE  5166               	movf	?___lldiv& (0+255),w,b
  9642  001E00  6F81               	movwf	intToString@tens& (0+255),b
  9643                           
  9644                           ; BSR set to: 0
  9645                           ;uart.c: 100: uint8_t ones = val % 10u;
  9646  001E02  C073  F060         	movff	intToString@val,___llmod@dividend
  9647  001E06  C074  F061         	movff	intToString@val+1,___llmod@dividend+1
  9648  001E0A  C075  F062         	movff	intToString@val+2,___llmod@dividend+2
  9649  001E0E  C076  F063         	movff	intToString@val+3,___llmod@dividend+3
  9650  001E12  0E0A               	movlw	10
  9651  001E14  6F64               	movwf	___llmod@divisor& (0+255),b
  9652  001E16  0E00               	movlw	0
  9653  001E18  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  9654  001E1A  0E00               	movlw	0
  9655  001E1C  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  9656  001E1E  0E00               	movlw	0
  9657  001E20  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  9658  001E22  EC70  F022         	call	___llmod	;wreg free
  9659  001E26  0100               	movlb	0	; () banked
  9660  001E28  5160               	movf	?___llmod& (0+255),w,b
  9661  001E2A  6F82               	movwf	intToString@ones& (0+255),b
  9662                           
  9663                           ; BSR set to: 0
  9664                           ;uart.c: 102: if (val > 9999) {
  9665  001E2C  5176               	movf	(intToString@val+3)& (0+255),w,b
  9666  001E2E  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  9667  001E30  E106               	bnz	u10010
  9668  001E32  0E10               	movlw	16
  9669  001E34  5D73               	subwf	intToString@val& (0+255),w,b
  9670  001E36  0E27               	movlw	39
  9671  001E38  5974               	subwfb	(intToString@val+1)& (0+255),w,b
  9672  001E3A  A0D8               	btfss	status,0,c
  9673  001E3C  D00C               	goto	l774
  9674  001E3E                     u10010:
  9675                           
  9676                           ; BSR set to: 0
  9677                           ;uart.c: 103: number[pointer++] = tenthousands + 0x30u;
  9678  001E3E  5186               	movf	intToString@pointer& (0+255),w,b
  9679  001E40  0D01               	mullw	1
  9680  001E42  0EA5               	movlw	low intToString@number
  9681  001E44  24F3               	addwf	prodl,w,c
  9682  001E46  6ED9               	movwf	fsr2l,c
  9683  001E48  0E01               	movlw	high intToString@number
  9684  001E4A  20F4               	addwfc	prodh,w,c
  9685  001E4C  6EDA               	movwf	fsr2h,c
  9686  001E4E  5185               	movf	intToString@tenthousands& (0+255),w,b
  9687  001E50  0F30               	addlw	48
  9688  001E52  6EDF               	movwf	indf2,c
  9689                           
  9690                           ; BSR set to: 0
  9691  001E54  2B86               	incf	intToString@pointer& (0+255),f,b
  9692  001E56                     l774:
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;uart.c: 104: }
  9696                           ;uart.c: 106: if (val > 999) {
  9697                           
  9698                           ; BSR set to: 0
  9699  001E56  5176               	movf	(intToString@val+3)& (0+255),w,b
  9700  001E58  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  9701  001E5A  E106               	bnz	u10020
  9702  001E5C  0EE8               	movlw	232
  9703  001E5E  5D73               	subwf	intToString@val& (0+255),w,b
  9704  001E60  0E03               	movlw	3
  9705  001E62  5974               	subwfb	(intToString@val+1)& (0+255),w,b
  9706  001E64  A0D8               	btfss	status,0,c
  9707  001E66  D00C               	goto	l775
  9708  001E68                     u10020:
  9709                           
  9710                           ; BSR set to: 0
  9711                           ;uart.c: 107: number[pointer++] = thousands + 0x30u;
  9712  001E68  5186               	movf	intToString@pointer& (0+255),w,b
  9713  001E6A  0D01               	mullw	1
  9714  001E6C  0EA5               	movlw	low intToString@number
  9715  001E6E  24F3               	addwf	prodl,w,c
  9716  001E70  6ED9               	movwf	fsr2l,c
  9717  001E72  0E01               	movlw	high intToString@number
  9718  001E74  20F4               	addwfc	prodh,w,c
  9719  001E76  6EDA               	movwf	fsr2h,c
  9720  001E78  5184               	movf	intToString@thousands& (0+255),w,b
  9721  001E7A  0F30               	addlw	48
  9722  001E7C  6EDF               	movwf	indf2,c
  9723                           
  9724                           ; BSR set to: 0
  9725  001E7E  2B86               	incf	intToString@pointer& (0+255),f,b
  9726  001E80                     l775:
  9727                           
  9728                           ; BSR set to: 0
  9729                           ;uart.c: 108: }
  9730                           ;uart.c: 110: if (val > 99) {
  9731                           
  9732                           ; BSR set to: 0
  9733  001E80  5176               	movf	(intToString@val+3)& (0+255),w,b
  9734  001E82  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  9735  001E84  1174               	iorwf	(intToString@val+1)& (0+255),w,b
  9736  001E86  E104               	bnz	u10030
  9737  001E88  0E64               	movlw	100
  9738  001E8A  5D73               	subwf	intToString@val& (0+255),w,b
  9739  001E8C  A0D8               	btfss	status,0,c
  9740  001E8E  D00C               	goto	l776
  9741  001E90                     u10030:
  9742                           
  9743                           ; BSR set to: 0
  9744                           ;uart.c: 111: number[pointer++] = hundreds + 0x30u;
  9745  001E90  5186               	movf	intToString@pointer& (0+255),w,b
  9746  001E92  0D01               	mullw	1
  9747  001E94  0EA5               	movlw	low intToString@number
  9748  001E96  24F3               	addwf	prodl,w,c
  9749  001E98  6ED9               	movwf	fsr2l,c
  9750  001E9A  0E01               	movlw	high intToString@number
  9751  001E9C  20F4               	addwfc	prodh,w,c
  9752  001E9E  6EDA               	movwf	fsr2h,c
  9753  001EA0  5183               	movf	intToString@hundreds& (0+255),w,b
  9754  001EA2  0F30               	addlw	48
  9755  001EA4  6EDF               	movwf	indf2,c
  9756                           
  9757                           ; BSR set to: 0
  9758  001EA6  2B86               	incf	intToString@pointer& (0+255),f,b
  9759  001EA8                     l776:
  9760                           
  9761                           ; BSR set to: 0
  9762                           ;uart.c: 112: }
  9763                           ;uart.c: 114: if (val > 9) {
  9764                           
  9765                           ; BSR set to: 0
  9766  001EA8  5176               	movf	(intToString@val+3)& (0+255),w,b
  9767  001EAA  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  9768  001EAC  1174               	iorwf	(intToString@val+1)& (0+255),w,b
  9769  001EAE  E104               	bnz	u10040
  9770  001EB0  0E0A               	movlw	10
  9771  001EB2  5D73               	subwf	intToString@val& (0+255),w,b
  9772  001EB4  A0D8               	btfss	status,0,c
  9773  001EB6  D00C               	goto	l777
  9774  001EB8                     u10040:
  9775                           
  9776                           ; BSR set to: 0
  9777                           ;uart.c: 115: number[pointer++] = tens + 0x30u;
  9778  001EB8  5186               	movf	intToString@pointer& (0+255),w,b
  9779  001EBA  0D01               	mullw	1
  9780  001EBC  0EA5               	movlw	low intToString@number
  9781  001EBE  24F3               	addwf	prodl,w,c
  9782  001EC0  6ED9               	movwf	fsr2l,c
  9783  001EC2  0E01               	movlw	high intToString@number
  9784  001EC4  20F4               	addwfc	prodh,w,c
  9785  001EC6  6EDA               	movwf	fsr2h,c
  9786  001EC8  5181               	movf	intToString@tens& (0+255),w,b
  9787  001ECA  0F30               	addlw	48
  9788  001ECC  6EDF               	movwf	indf2,c
  9789                           
  9790                           ; BSR set to: 0
  9791  001ECE  2B86               	incf	intToString@pointer& (0+255),f,b
  9792  001ED0                     l777:
  9793                           
  9794                           ; BSR set to: 0
  9795                           ;uart.c: 116: }
  9796                           ;uart.c: 118: number[pointer++] = ones + 0x30u;
  9797                           
  9798                           ; BSR set to: 0
  9799  001ED0  5186               	movf	intToString@pointer& (0+255),w,b
  9800  001ED2  0D01               	mullw	1
  9801  001ED4  0EA5               	movlw	low intToString@number
  9802  001ED6  24F3               	addwf	prodl,w,c
  9803  001ED8  6ED9               	movwf	fsr2l,c
  9804  001EDA  0E01               	movlw	high intToString@number
  9805  001EDC  20F4               	addwfc	prodh,w,c
  9806  001EDE  6EDA               	movwf	fsr2h,c
  9807  001EE0  5182               	movf	intToString@ones& (0+255),w,b
  9808  001EE2  0F30               	addlw	48
  9809  001EE4  6EDF               	movwf	indf2,c
  9810  001EE6  2B86               	incf	intToString@pointer& (0+255),f,b
  9811                           
  9812                           ; BSR set to: 0
  9813                           ;uart.c: 119: number[pointer++] = '\0';
  9814  001EE8  5186               	movf	intToString@pointer& (0+255),w,b
  9815  001EEA  0D01               	mullw	1
  9816  001EEC  0EA5               	movlw	low intToString@number
  9817  001EEE  24F3               	addwf	prodl,w,c
  9818  001EF0  6ED9               	movwf	fsr2l,c
  9819  001EF2  0E01               	movlw	high intToString@number
  9820  001EF4  20F4               	addwfc	prodh,w,c
  9821  001EF6  6EDA               	movwf	fsr2h,c
  9822  001EF8  0E00               	movlw	0
  9823  001EFA  6EDF               	movwf	indf2,c
  9824                           
  9825                           ; BSR set to: 0
  9826  001EFC  2B86               	incf	intToString@pointer& (0+255),f,b
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;uart.c: 121: return number;
  9830  001EFE  0EA5               	movlw	low intToString@number
  9831  001F00  6F73               	movwf	?_intToString& (0+255),b
  9832  001F02  0E01               	movlw	high intToString@number
  9833  001F04  6F74               	movwf	(?_intToString+1)& (0+255),b
  9834  001F06  0012               	return	
  9835  001F08                     __end_of_intToString:
  9836                           	opt stack 0
  9837                           tblptru	equ	0xFF8
  9838                           tblptrh	equ	0xFF7
  9839                           tblptrl	equ	0xFF6
  9840                           tablat	equ	0xFF5
  9841                           prodh	equ	0xFF4
  9842                           prodl	equ	0xFF3
  9843                           intcon	equ	0xFF2
  9844                           intcon3	equ	0xFF0
  9845                           indf0	equ	0xFEF
  9846                           postinc0	equ	0xFEE
  9847                           plusw0	equ	0xFEB
  9848                           fsr0h	equ	0xFEA
  9849                           fsr0l	equ	0xFE9
  9850                           wreg	equ	0xFE8
  9851                           indf1	equ	0xFE7
  9852                           postinc1	equ	0xFE6
  9853                           postdec1	equ	0xFE5
  9854                           plusw1	equ	0xFE3
  9855                           fsr1h	equ	0xFE2
  9856                           fsr1l	equ	0xFE1
  9857                           indf2	equ	0xFDF
  9858                           postinc2	equ	0xFDE
  9859                           postdec2	equ	0xFDD
  9860                           plusw2	equ	0xFDB
  9861                           fsr2h	equ	0xFDA
  9862                           fsr2l	equ	0xFD9
  9863                           status	equ	0xFD8
  9864                           
  9865 ;; *************** function ___llmod *****************
  9866 ;; Defined at:
  9867 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;  dividend        4    0[BANK0 ] unsigned long 
  9870 ;;  divisor         4    4[BANK0 ] unsigned long 
  9871 ;; Auto vars:     Size  Location     Type
  9872 ;;  counter         1    8[BANK0 ] unsigned char 
  9873 ;; Return value:  Size  Location     Type
  9874 ;;                  4    0[BANK0 ] unsigned long 
  9875 ;; Registers used:
  9876 ;;		wreg, status,2, status,0
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9882 ;;      Params:         0       8       0       0       0       0       0       0       0
  9883 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9884 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9885 ;;      Totals:         0       9       0       0       0       0       0       0       0
  9886 ;;Total ram usage:        9 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; Hardware stack levels required when called:    4
  9889 ;; This function calls:
  9890 ;;		Nothing
  9891 ;; This function is called by:
  9892 ;;		_intToString
  9893 ;;		_arpEntryToString
  9894 ;; This function uses a non-reentrant model
  9895 ;;
  9896                           
  9897                           	psect	text27
  9898  0044E0                     __ptext27:
  9899                           	opt stack 0
  9900  0044E0                     ___llmod:
  9901                           	opt stack 24
  9902                           
  9903                           ; BSR set to: 0
  9904                           ;incstack = 0
  9905  0044E0  0100               	movlb	0	; () banked
  9906  0044E2  5164               	movf	___llmod@divisor& (0+255),w,b
  9907  0044E4  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  9908  0044E6  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  9909  0044E8  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  9910  0044EA  B4D8               	btfsc	status,2,c
  9911  0044EC  D024               	goto	l1483
  9912                           
  9913                           ; BSR set to: 0
  9914  0044EE  0E01               	movlw	1
  9915  0044F0  6F68               	movwf	___llmod@counter& (0+255),b
  9916  0044F2  D006               	goto	l1478
  9917  0044F4                     
  9918                           ; BSR set to: 0
  9919                           
  9920                           ; BSR set to: 0
  9921  0044F4  90D8               	bcf	status,0,c
  9922  0044F6  3764               	rlcf	___llmod@divisor& (0+255),f,b
  9923  0044F8  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  9924  0044FA  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  9925  0044FC  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  9926  0044FE  2B68               	incf	___llmod@counter& (0+255),f,b
  9927  004500                     l1478:
  9928                           
  9929                           ; BSR set to: 0
  9930                           
  9931                           ; BSR set to: 0
  9932  004500  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  9933  004502  D7F8               	goto	l1479
  9934  004504                     u9610:
  9935                           
  9936                           ; BSR set to: 0
  9937                           
  9938                           ; BSR set to: 0
  9939                           
  9940                           ; BSR set to: 0
  9941  004504  5164               	movf	___llmod@divisor& (0+255),w,b
  9942  004506  5D60               	subwf	___llmod@dividend& (0+255),w,b
  9943  004508  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  9944  00450A  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  9945  00450C  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  9946  00450E  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  9947  004510  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  9948  004512  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  9949  004514  A0D8               	btfss	status,0,c
  9950  004516  D008               	goto	l1482
  9951                           
  9952                           ; BSR set to: 0
  9953  004518  5164               	movf	___llmod@divisor& (0+255),w,b
  9954  00451A  5F60               	subwf	___llmod@dividend& (0+255),f,b
  9955  00451C  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  9956  00451E  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  9957  004520  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  9958  004522  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  9959  004524  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  9960  004526  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  9961  004528                     l1482:
  9962                           
  9963                           ; BSR set to: 0
  9964                           
  9965                           ; BSR set to: 0
  9966  004528  90D8               	bcf	status,0,c
  9967  00452A  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  9968  00452C  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  9969  00452E  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  9970  004530  3364               	rrcf	___llmod@divisor& (0+255),f,b
  9971                           
  9972                           ; BSR set to: 0
  9973  004532  2F68               	decfsz	___llmod@counter& (0+255),f,b
  9974  004534  D7E7               	goto	u9610
  9975  004536                     l1483:
  9976                           
  9977                           ; BSR set to: 0
  9978                           
  9979                           ; BSR set to: 0
  9980  004536  C060  F060         	movff	___llmod@dividend,?___llmod
  9981  00453A  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  9982  00453E  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  9983  004542  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  9984                           
  9985                           ; BSR set to: 0
  9986  004546  0012               	return		;funcret
  9987  004548                     __end_of___llmod:
  9988                           	opt stack 0
  9989                           tblptru	equ	0xFF8
  9990                           tblptrh	equ	0xFF7
  9991                           tblptrl	equ	0xFF6
  9992                           tablat	equ	0xFF5
  9993                           prodh	equ	0xFF4
  9994                           prodl	equ	0xFF3
  9995                           intcon	equ	0xFF2
  9996                           intcon3	equ	0xFF0
  9997                           indf0	equ	0xFEF
  9998                           postinc0	equ	0xFEE
  9999                           plusw0	equ	0xFEB
 10000                           fsr0h	equ	0xFEA
 10001                           fsr0l	equ	0xFE9
 10002                           wreg	equ	0xFE8
 10003                           indf1	equ	0xFE7
 10004                           postinc1	equ	0xFE6
 10005                           postdec1	equ	0xFE5
 10006                           plusw1	equ	0xFE3
 10007                           fsr1h	equ	0xFE2
 10008                           fsr1l	equ	0xFE1
 10009                           indf2	equ	0xFDF
 10010                           postinc2	equ	0xFDE
 10011                           postdec2	equ	0xFDD
 10012                           plusw2	equ	0xFDB
 10013                           fsr2h	equ	0xFDA
 10014                           fsr2l	equ	0xFD9
 10015                           status	equ	0xFD8
 10016                           
 10017 ;; *************** function ___lldiv *****************
 10018 ;; Defined at:
 10019 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;  dividend        4    6[BANK0 ] unsigned long 
 10022 ;;  divisor         4   10[BANK0 ] unsigned long 
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;  quotient        4   14[BANK0 ] unsigned long 
 10025 ;;  counter         1   18[BANK0 ] unsigned char 
 10026 ;; Return value:  Size  Location     Type
 10027 ;;                  4    6[BANK0 ] unsigned long 
 10028 ;; Registers used:
 10029 ;;		wreg, status,2, status,0
 10030 ;; Tracked objects:
 10031 ;;		On entry : 0/0
 10032 ;;		On exit  : 0/0
 10033 ;;		Unchanged: 0/0
 10034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10035 ;;      Params:         0       8       0       0       0       0       0       0       0
 10036 ;;      Locals:         0       5       0       0       0       0       0       0       0
 10037 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10038 ;;      Totals:         0      13       0       0       0       0       0       0       0
 10039 ;;Total ram usage:       13 bytes
 10040 ;; Hardware stack levels used:    1
 10041 ;; Hardware stack levels required when called:    4
 10042 ;; This function calls:
 10043 ;;		Nothing
 10044 ;; This function is called by:
 10045 ;;		_intToString
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           	psect	text28
 10050  003F4E                     __ptext28:
 10051                           	opt stack 0
 10052  003F4E                     ___lldiv:
 10053                           	opt stack 24
 10054                           
 10055                           ; BSR set to: 0
 10056                           ;incstack = 0
 10057  003F4E  0E00               	movlw	0
 10058  003F50  0100               	movlb	0	; () banked
 10059  003F52  6F6E               	movwf	___lldiv@quotient& (0+255),b
 10060  003F54  0E00               	movlw	0
 10061  003F56  6F6F               	movwf	(___lldiv@quotient+1)& (0+255),b
 10062  003F58  0E00               	movlw	0
 10063  003F5A  6F70               	movwf	(___lldiv@quotient+2)& (0+255),b
 10064  003F5C  0E00               	movlw	0
 10065  003F5E  6F71               	movwf	(___lldiv@quotient+3)& (0+255),b
 10066                           
 10067                           ; BSR set to: 0
 10068  003F60  516A               	movf	___lldiv@divisor& (0+255),w,b
 10069  003F62  116B               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 10070  003F64  116C               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 10071  003F66  116D               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 10072  003F68  B4D8               	btfsc	status,2,c
 10073  003F6A  D02A               	goto	l1473
 10074                           
 10075                           ; BSR set to: 0
 10076  003F6C  0E01               	movlw	1
 10077  003F6E  6F72               	movwf	___lldiv@counter& (0+255),b
 10078  003F70  D006               	goto	l1468
 10079  003F72                     
 10080                           ; BSR set to: 0
 10081                           
 10082                           ; BSR set to: 0
 10083  003F72  90D8               	bcf	status,0,c
 10084  003F74  376A               	rlcf	___lldiv@divisor& (0+255),f,b
 10085  003F76  376B               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 10086  003F78  376C               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 10087  003F7A  376D               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 10088  003F7C  2B72               	incf	___lldiv@counter& (0+255),f,b
 10089  003F7E                     l1468:
 10090                           
 10091                           ; BSR set to: 0
 10092                           
 10093                           ; BSR set to: 0
 10094  003F7E  AF6D               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 10095  003F80  D7F8               	goto	l1469
 10096  003F82                     u9580:
 10097                           
 10098                           ; BSR set to: 0
 10099                           
 10100                           ; BSR set to: 0
 10101                           
 10102                           ; BSR set to: 0
 10103  003F82  90D8               	bcf	status,0,c
 10104  003F84  376E               	rlcf	___lldiv@quotient& (0+255),f,b
 10105  003F86  376F               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 10106  003F88  3770               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 10107  003F8A  3771               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 10108                           
 10109                           ; BSR set to: 0
 10110  003F8C  516A               	movf	___lldiv@divisor& (0+255),w,b
 10111  003F8E  5D66               	subwf	___lldiv@dividend& (0+255),w,b
 10112  003F90  516B               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10113  003F92  5967               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 10114  003F94  516C               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10115  003F96  5968               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 10116  003F98  516D               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10117  003F9A  5969               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 10118  003F9C  A0D8               	btfss	status,0,c
 10119  003F9E  D009               	goto	l1472
 10120                           
 10121                           ; BSR set to: 0
 10122  003FA0  516A               	movf	___lldiv@divisor& (0+255),w,b
 10123  003FA2  5F66               	subwf	___lldiv@dividend& (0+255),f,b
 10124  003FA4  516B               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10125  003FA6  5B67               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 10126  003FA8  516C               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10127  003FAA  5B68               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 10128  003FAC  516D               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10129  003FAE  5B69               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 10130                           
 10131                           ; BSR set to: 0
 10132  003FB0  816E               	bsf	___lldiv@quotient& (0+255),0,b
 10133  003FB2                     l1472:
 10134                           
 10135                           ; BSR set to: 0
 10136                           
 10137                           ; BSR set to: 0
 10138  003FB2  90D8               	bcf	status,0,c
 10139  003FB4  336D               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 10140  003FB6  336C               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 10141  003FB8  336B               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 10142  003FBA  336A               	rrcf	___lldiv@divisor& (0+255),f,b
 10143                           
 10144                           ; BSR set to: 0
 10145  003FBC  2F72               	decfsz	___lldiv@counter& (0+255),f,b
 10146  003FBE  D7E1               	goto	u9580
 10147  003FC0                     l1473:
 10148                           
 10149                           ; BSR set to: 0
 10150                           
 10151                           ; BSR set to: 0
 10152  003FC0  C06E  F066         	movff	___lldiv@quotient,?___lldiv
 10153  003FC4  C06F  F067         	movff	___lldiv@quotient+1,?___lldiv+1
 10154  003FC8  C070  F068         	movff	___lldiv@quotient+2,?___lldiv+2
 10155  003FCC  C071  F069         	movff	___lldiv@quotient+3,?___lldiv+3
 10156                           
 10157                           ; BSR set to: 0
 10158  003FD0  0012               	return		;funcret
 10159  003FD2                     __end_of___lldiv:
 10160                           	opt stack 0
 10161                           tblptru	equ	0xFF8
 10162                           tblptrh	equ	0xFF7
 10163                           tblptrl	equ	0xFF6
 10164                           tablat	equ	0xFF5
 10165                           prodh	equ	0xFF4
 10166                           prodl	equ	0xFF3
 10167                           intcon	equ	0xFF2
 10168                           intcon3	equ	0xFF0
 10169                           indf0	equ	0xFEF
 10170                           postinc0	equ	0xFEE
 10171                           plusw0	equ	0xFEB
 10172                           fsr0h	equ	0xFEA
 10173                           fsr0l	equ	0xFE9
 10174                           wreg	equ	0xFE8
 10175                           indf1	equ	0xFE7
 10176                           postinc1	equ	0xFE6
 10177                           postdec1	equ	0xFE5
 10178                           plusw1	equ	0xFE3
 10179                           fsr1h	equ	0xFE2
 10180                           fsr1l	equ	0xFE1
 10181                           indf2	equ	0xFDF
 10182                           postinc2	equ	0xFDE
 10183                           postdec2	equ	0xFDD
 10184                           plusw2	equ	0xFDB
 10185                           fsr2h	equ	0xFDA
 10186                           fsr2l	equ	0xFD9
 10187                           status	equ	0xFD8
 10188                           
 10189 ;; *************** function _ARP_handleNewPacket *****************
 10190 ;; Defined at:
 10191 ;;		line 31 in file "src/stack/protocols/arp.c"
 10192 ;; Parameters:    Size  Location     Type
 10193 ;;  frame           2  156[BANK0 ] PTR struct ethernetFrame
 10194 ;;		 -> stack.ethernet(15), stack(121), 
 10195 ;; Auto vars:     Size  Location     Type
 10196 ;;  arp            32   88[BANK1 ] struct ARP_message
 10197 ;; Return value:  Size  Location     Type
 10198 ;;                  1    wreg      void 
 10199 ;; Registers used:
 10200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10201 ;; Tracked objects:
 10202 ;;		On entry : 0/0
 10203 ;;		On exit  : 0/0
 10204 ;;		Unchanged: 0/0
 10205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10206 ;;      Params:         0       2       0       0       0       0       0       0       0
 10207 ;;      Locals:         0       0      32       0       0       0       0       0       0
 10208 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10209 ;;      Totals:         0       4      32       0       0       0       0       0       0
 10210 ;;Total ram usage:       36 bytes
 10211 ;; Hardware stack levels used:    1
 10212 ;; Hardware stack levels required when called:   11
 10213 ;; This function calls:
 10214 ;;		_ARP_parseFromRXBuffer
 10215 ;;		_ARP_sendReply
 10216 ;;		_ARP_setNewEntry
 10217 ;;		_UARTTransmitText
 10218 ;;		_ethernetController_dropPacket
 10219 ;;		_getMillis
 10220 ;;		_ipAdressToString
 10221 ;;		_macToString
 10222 ;; This function is called by:
 10223 ;;		_ethernet_rxGetNewFrame
 10224 ;; This function uses a non-reentrant model
 10225 ;;
 10226                           
 10227                           	psect	text29
 10228  002892                     __ptext29:
 10229                           	opt stack 0
 10230  002892                     _ARP_handleNewPacket:
 10231                           	opt stack 17
 10232                           
 10233                           ;arp.c: 32: ARP_message_t arp;
 10234                           ;arp.c: 33: if (frame->ethertype != ETHERTYPE_ARP) {
 10235                           
 10236                           ; BSR set to: 0
 10237                           ;incstack = 0
 10238  002892  0100               	movlb	0	; () banked
 10239  002894  EE20 F00E          	lfsr	2,14
 10240  002898  51FC               	movf	ARP_handleNewPacket@frame& (0+255),w,b
 10241  00289A  26D9               	addwf	fsr2l,f,c
 10242  00289C  51FD               	movf	(ARP_handleNewPacket@frame+1)& (0+255),w,b
 10243  00289E  22DA               	addwfc	fsr2h,f,c
 10244  0028A0  0E06               	movlw	6
 10245  0028A2  18DE               	xorwf	postinc2,w,c
 10246  0028A4  E104               	bnz	u10520
 10247  0028A6  0E08               	movlw	8
 10248  0028A8  18DE               	xorwf	postinc2,w,c
 10249  0028AA  B4D8               	btfsc	status,2,c
 10250  0028AC  D007               	goto	l902
 10251  0028AE                     u10520:
 10252                           
 10253                           ; BSR set to: 0
 10254                           ;arp.c: 34: ethernetController_dropPacket(frame);
 10255  0028AE  C0FC  F072         	movff	ARP_handleNewPacket@frame,ethernetController_dropPacket@frame
 10256  0028B2  C0FD  F073         	movff	ARP_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
 10257  0028B6  ECA5  F024         	call	_ethernetController_dropPacket	;wreg free
 10258                           
 10259                           ;arp.c: 35: return;
 10260  0028BA  0012               	return	
 10261  0028BC                     l902:
 10262                           
 10263                           ;arp.c: 36: }
 10264                           ;arp.c: 38: arp = ARP_parseFromRXBuffer(frame);
 10265  0028BC  C0FC  F077         	movff	ARP_handleNewPacket@frame,ARP_parseFromRXBuffer@frame
 10266  0028C0  C0FD  F078         	movff	ARP_handleNewPacket@frame+1,ARP_parseFromRXBuffer@frame+1
 10267  0028C4  ECA8  F007         	call	_ARP_parseFromRXBuffer	;wreg free
 10268  0028C8  EE21  F058         	lfsr	2,ARP_handleNewPacket@arp
 10269  0028CC  0E1F               	movlw	31
 10270  0028CE                     u10531:
 10271  0028CE  CFEB FFDB          	movff	plusw0,plusw2
 10272  0028D2  06E8               	decf	wreg,f,c
 10273  0028D4  E2FC               	bc	u10531
 10274                           
 10275                           ;arp.c: 39: if (arp.err.code != (uint16_t)0) {
 10276  0028D6  0101               	movlb	1	; () banked
 10277  0028D8  5176               	movf	(ARP_handleNewPacket@arp+30)& (0+255),w,b
 10278  0028DA  1177               	iorwf	(ARP_handleNewPacket@arp+31)& (0+255),w,b
 10279  0028DC  B4D8               	btfsc	status,2,c
 10280  0028DE  D00E               	goto	l904
 10281                           
 10282                           ; BSR set to: 1
 10283                           ;arp.c: 40: ethernetController_dropPacket(frame);
 10284  0028E0  C0FC  F072         	movff	ARP_handleNewPacket@frame,ethernetController_dropPacket@frame
 10285  0028E4  C0FD  F073         	movff	ARP_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
 10286  0028E8  ECA5  F024         	call	_ethernetController_dropPacket	;wreg free
 10287                           
 10288                           ;arp.c: 41: UARTTransmitText("[Invalid ARP Message was discarded.]\r\n");
 10289  0028EC  0EC5               	movlw	low STR_67
 10290  0028EE  0100               	movlb	0	; () banked
 10291  0028F0  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10292  0028F2  0E7C               	movlw	high STR_67
 10293  0028F4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10294  0028F6  EC09  F023         	call	_UARTTransmitText	;wreg free
 10295                           
 10296                           ;arp.c: 42: return;
 10297  0028FA  0012               	return	
 10298  0028FC                     l904:
 10299                           
 10300                           ;arp.c: 43: }
 10301                           ;arp.c: 44: UARTTransmitText("[");
 10302  0028FC  0ECE               	movlw	low (STR_70+3)
 10303  0028FE  0100               	movlb	0	; () banked
 10304  002900  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10305  002902  0E7F               	movlw	high (STR_70+3)
 10306  002904  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10307  002906  EC09  F023         	call	_UARTTransmitText	;wreg free
 10308                           
 10309                           ;arp.c: 45: UARTTransmitText(macToString(arp.senderMACAddress));
 10310  00290A  EE21  F060         	lfsr	2,ARP_handleNewPacket@arp+8
 10311  00290E  EE00  F07A         	lfsr	0,macToString@addr
 10312  002912  0E05               	movlw	5
 10313  002914                     u10551:
 10314  002914  CFDB FFEB          	movff	plusw2,plusw0
 10315  002918  06E8               	decf	wreg,f,c
 10316  00291A  E2FC               	bc	u10551
 10317  00291C  EC68  F019         	call	_macToString	;wreg free
 10318  002920  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 10319  002924  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 10320  002928  EC09  F023         	call	_UARTTransmitText	;wreg free
 10321                           
 10322                           ;arp.c: 46: UARTTransmitText(", ");
 10323  00292C  0E40               	movlw	low (STR_45+17)
 10324  00292E  0100               	movlb	0	; () banked
 10325  002930  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10326  002932  0E7E               	movlw	high (STR_45+17)
 10327  002934  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10328  002936  EC09  F023         	call	_UARTTransmitText	;wreg free
 10329                           
 10330                           ;arp.c: 47: UARTTransmitText(ipAdressToString(arp.senderIPAddress));
 10331  00293A  C166  F067         	movff	ARP_handleNewPacket@arp+14,ipAdressToString@ip
 10332  00293E  C167  F068         	movff	ARP_handleNewPacket@arp+15,ipAdressToString@ip+1
 10333  002942  C168  F069         	movff	ARP_handleNewPacket@arp+16,ipAdressToString@ip+2
 10334  002946  C169  F06A         	movff	ARP_handleNewPacket@arp+17,ipAdressToString@ip+3
 10335  00294A  ECA9  F010         	call	_ipAdressToString	;wreg free
 10336  00294E  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 10337  002952  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 10338  002956  EC09  F023         	call	_UARTTransmitText	;wreg free
 10339                           
 10340                           ;arp.c: 48: UARTTransmitText("]->[");
 10341  00295A  0ECB               	movlw	low STR_70
 10342  00295C  0100               	movlb	0	; () banked
 10343  00295E  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10344  002960  0E7F               	movlw	high STR_70
 10345  002962  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10346  002964  EC09  F023         	call	_UARTTransmitText	;wreg free
 10347                           
 10348                           ;arp.c: 49: UARTTransmitText(macToString(arp.targetMACAddress));
 10349  002968  EE21  F06A         	lfsr	2,ARP_handleNewPacket@arp+18
 10350  00296C  EE00  F07A         	lfsr	0,macToString@addr
 10351  002970  0E05               	movlw	5
 10352  002972                     u10561:
 10353  002972  CFDB FFEB          	movff	plusw2,plusw0
 10354  002976  06E8               	decf	wreg,f,c
 10355  002978  E2FC               	bc	u10561
 10356  00297A  EC68  F019         	call	_macToString	;wreg free
 10357  00297E  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 10358  002982  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 10359  002986  EC09  F023         	call	_UARTTransmitText	;wreg free
 10360                           
 10361                           ;arp.c: 50: UARTTransmitText(", ");
 10362  00298A  0E40               	movlw	low (STR_45+17)
 10363  00298C  0100               	movlb	0	; () banked
 10364  00298E  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10365  002990  0E7E               	movlw	high (STR_45+17)
 10366  002992  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10367  002994  EC09  F023         	call	_UARTTransmitText	;wreg free
 10368                           
 10369                           ;arp.c: 51: UARTTransmitText(ipAdressToString(arp.targetIPAddress));
 10370  002998  C170  F067         	movff	ARP_handleNewPacket@arp+24,ipAdressToString@ip
 10371  00299C  C171  F068         	movff	ARP_handleNewPacket@arp+25,ipAdressToString@ip+1
 10372  0029A0  C172  F069         	movff	ARP_handleNewPacket@arp+26,ipAdressToString@ip+2
 10373  0029A4  C173  F06A         	movff	ARP_handleNewPacket@arp+27,ipAdressToString@ip+3
 10374  0029A8  ECA9  F010         	call	_ipAdressToString	;wreg free
 10375  0029AC  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 10376  0029B0  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 10377  0029B4  EC09  F023         	call	_UARTTransmitText	;wreg free
 10378                           
 10379                           ;arp.c: 52: UARTTransmitText("]");
 10380  0029B8  0EFA               	movlw	low (STR_18+1)
 10381  0029BA  0100               	movlb	0	; () banked
 10382  0029BC  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10383  0029BE  0E7F               	movlw	high (STR_18+1)
 10384  0029C0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10385  0029C2  EC09  F023         	call	_UARTTransmitText	;wreg free
 10386                           
 10387                           ;arp.c: 53: if (arp.fIsProbe)
 10388  0029C6  0101               	movlb	1	; () banked
 10389  0029C8  A374               	btfss	(ARP_handleNewPacket@arp+28)& (0+255),1,b
 10390  0029CA  D007               	goto	l905
 10391                           
 10392                           ; BSR set to: 1
 10393                           ;arp.c: 54: UARTTransmitText("[IsProbe]");
 10394  0029CC  0E7C               	movlw	low STR_73
 10395  0029CE  0100               	movlb	0	; () banked
 10396  0029D0  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10397  0029D2  0E7F               	movlw	high STR_73
 10398  0029D4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10399  0029D6  EC09  F023         	call	_UARTTransmitText	;wreg free
 10400  0029DA                     l905:
 10401                           
 10402                           ;arp.c: 55: if (arp.fIsGratuitous)
 10403  0029DA  0101               	movlb	1	; () banked
 10404  0029DC  A174               	btfss	(ARP_handleNewPacket@arp+28)& (0+255),0,b
 10405  0029DE  D007               	goto	l906
 10406                           
 10407                           ; BSR set to: 1
 10408                           ;arp.c: 56: UARTTransmitText("[IsGratuitous]");
 10409  0029E0  0E08               	movlw	low STR_74
 10410  0029E2  0100               	movlb	0	; () banked
 10411  0029E4  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10412  0029E6  0E7F               	movlw	high STR_74
 10413  0029E8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10414  0029EA  EC09  F023         	call	_UARTTransmitText	;wreg free
 10415  0029EE                     l906:
 10416                           
 10417                           ;arp.c: 58: ARP_sendReply(arp);
 10418  0029EE  EE21  F058         	lfsr	2,ARP_handleNewPacket@arp
 10419  0029F2  EE01  F000         	lfsr	0,ARP_sendReply@request
 10420  0029F6  0E1F               	movlw	31
 10421  0029F8                     u10591:
 10422  0029F8  CFDB FFEB          	movff	plusw2,plusw0
 10423  0029FC  06E8               	decf	wreg,f,c
 10424  0029FE  E2FC               	bc	u10591
 10425  002A00  ECD7  F015         	call	_ARP_sendReply	;wreg free
 10426                           
 10427                           ;arp.c: 59: ARP_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getMillis());
 10428  002A04  EE21  F060         	lfsr	2,ARP_handleNewPacket@arp+8
 10429  002A08  EE00  F064         	lfsr	0,ARP_setNewEntry@mac
 10430  002A0C  0E05               	movlw	5
 10431  002A0E                     u10601:
 10432  002A0E  CFDB FFEB          	movff	plusw2,plusw0
 10433  002A12  06E8               	decf	wreg,f,c
 10434  002A14  E2FC               	bc	u10601
 10435  002A16  C166  F06A         	movff	ARP_handleNewPacket@arp+14,ARP_setNewEntry@ip
 10436  002A1A  C167  F06B         	movff	ARP_handleNewPacket@arp+15,ARP_setNewEntry@ip+1
 10437  002A1E  C168  F06C         	movff	ARP_handleNewPacket@arp+16,ARP_setNewEntry@ip+2
 10438  002A22  C169  F06D         	movff	ARP_handleNewPacket@arp+17,ARP_setNewEntry@ip+3
 10439  002A26  EC2F  F027         	call	_getMillis	;wreg free
 10440  002A2A  C060  F06E         	movff	?_getMillis,ARP_setNewEntry@timestamp
 10441  002A2E  C061  F06F         	movff	?_getMillis+1,ARP_setNewEntry@timestamp+1
 10442  002A32  C062  F070         	movff	?_getMillis+2,ARP_setNewEntry@timestamp+2
 10443  002A36  C063  F071         	movff	?_getMillis+3,ARP_setNewEntry@timestamp+3
 10444  002A3A  ECE7  F01A         	call	_ARP_setNewEntry	;wreg free
 10445  002A3E  0012               	return		;funcret
 10446  002A40                     __end_of_ARP_handleNewPacket:
 10447                           	opt stack 0
 10448                           tblptru	equ	0xFF8
 10449                           tblptrh	equ	0xFF7
 10450                           tblptrl	equ	0xFF6
 10451                           tablat	equ	0xFF5
 10452                           prodh	equ	0xFF4
 10453                           prodl	equ	0xFF3
 10454                           intcon	equ	0xFF2
 10455                           intcon3	equ	0xFF0
 10456                           indf0	equ	0xFEF
 10457                           postinc0	equ	0xFEE
 10458                           plusw0	equ	0xFEB
 10459                           fsr0h	equ	0xFEA
 10460                           fsr0l	equ	0xFE9
 10461                           wreg	equ	0xFE8
 10462                           indf1	equ	0xFE7
 10463                           postinc1	equ	0xFE6
 10464                           postdec1	equ	0xFE5
 10465                           plusw1	equ	0xFE3
 10466                           fsr1h	equ	0xFE2
 10467                           fsr1l	equ	0xFE1
 10468                           indf2	equ	0xFDF
 10469                           postinc2	equ	0xFDE
 10470                           postdec2	equ	0xFDD
 10471                           plusw2	equ	0xFDB
 10472                           fsr2h	equ	0xFDA
 10473                           fsr2l	equ	0xFD9
 10474                           status	equ	0xFD8
 10475                           
 10476 ;; *************** function _getMillis *****************
 10477 ;; Defined at:
 10478 ;;		line 33 in file "src/stack/time.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;		None
 10481 ;; Auto vars:     Size  Location     Type
 10482 ;;		None
 10483 ;; Return value:  Size  Location     Type
 10484 ;;                  4    0[BANK0 ] unsigned long 
 10485 ;; Registers used:
 10486 ;;		None
 10487 ;; Tracked objects:
 10488 ;;		On entry : 0/0
 10489 ;;		On exit  : 0/0
 10490 ;;		Unchanged: 0/0
 10491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10492 ;;      Params:         0       4       0       0       0       0       0       0       0
 10493 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10494 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10495 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10496 ;;Total ram usage:        4 bytes
 10497 ;; Hardware stack levels used:    1
 10498 ;; Hardware stack levels required when called:    4
 10499 ;; This function calls:
 10500 ;;		Nothing
 10501 ;; This function is called by:
 10502 ;;		_ethernet_rxGetNewFrame
 10503 ;;		_ARP_handleNewPacket
 10504 ;;		_ARP_checkForEntry
 10505 ;;		_ipv4_sendFrame
 10506 ;;		_ARP_probe
 10507 ;; This function uses a non-reentrant model
 10508 ;;
 10509                           
 10510                           	psect	text30
 10511  004E5E                     __ptext30:
 10512                           	opt stack 0
 10513  004E5E                     _getMillis:
 10514                           	opt stack 24
 10515                           
 10516                           ;time.c: 34: return time;
 10517                           
 10518                           ;incstack = 0
 10519  004E5E  C029  F060         	movff	_time,?_getMillis	;volatile
 10520  004E62  C02A  F061         	movff	_time+1,?_getMillis+1	;volatile
 10521  004E66  C02B  F062         	movff	_time+2,?_getMillis+2	;volatile
 10522  004E6A  C02C  F063         	movff	_time+3,?_getMillis+3	;volatile
 10523  004E6E  0012               	return		;funcret
 10524  004E70                     __end_of_getMillis:
 10525                           	opt stack 0
 10526                           tblptru	equ	0xFF8
 10527                           tblptrh	equ	0xFF7
 10528                           tblptrl	equ	0xFF6
 10529                           tablat	equ	0xFF5
 10530                           prodh	equ	0xFF4
 10531                           prodl	equ	0xFF3
 10532                           intcon	equ	0xFF2
 10533                           intcon3	equ	0xFF0
 10534                           indf0	equ	0xFEF
 10535                           postinc0	equ	0xFEE
 10536                           plusw0	equ	0xFEB
 10537                           fsr0h	equ	0xFEA
 10538                           fsr0l	equ	0xFE9
 10539                           wreg	equ	0xFE8
 10540                           indf1	equ	0xFE7
 10541                           postinc1	equ	0xFE6
 10542                           postdec1	equ	0xFE5
 10543                           plusw1	equ	0xFE3
 10544                           fsr1h	equ	0xFE2
 10545                           fsr1l	equ	0xFE1
 10546                           indf2	equ	0xFDF
 10547                           postinc2	equ	0xFDE
 10548                           postdec2	equ	0xFDD
 10549                           plusw2	equ	0xFDB
 10550                           fsr2h	equ	0xFDA
 10551                           fsr2l	equ	0xFD9
 10552                           status	equ	0xFD8
 10553                           
 10554 ;; *************** function _ethernetController_dropPacket *****************
 10555 ;; Defined at:
 10556 ;;		line 378 in file "src/enc424j600/ENC424J600.c"
 10557 ;; Parameters:    Size  Location     Type
 10558 ;;  frame           2   18[BANK0 ] PTR struct ethernetFrame
 10559 ;;		 -> stack.ethernet(15), stack(121), 
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;		None
 10562 ;; Return value:  Size  Location     Type
 10563 ;;                  1    wreg      void 
 10564 ;; Registers used:
 10565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10566 ;; Tracked objects:
 10567 ;;		On entry : 0/0
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10571 ;;      Params:         0       2       0       0       0       0       0       0       0
 10572 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10573 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10574 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10575 ;;Total ram usage:        2 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; Hardware stack levels required when called:    8
 10578 ;; This function calls:
 10579 ;;		_ENC424J600_setRXTailPointer
 10580 ;;		_ENC424J600_writeSingleByte
 10581 ;;		_ethernetController_getNextPacketPointer
 10582 ;; This function is called by:
 10583 ;;		_ethernet_rxGetNewFrame
 10584 ;;		_ARP_handleNewPacket
 10585 ;;		_ipv4_handleNewPacket
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           	psect	text31
 10590  00494A                     __ptext31:
 10591                           	opt stack 0
 10592  00494A                     _ethernetController_dropPacket:
 10593                           	opt stack 19
 10594                           
 10595                           ;ENC424J600.c: 393: if (ethernetController_getNextPacketPointer() == 0x3000) {
 10596                           
 10597                           ;incstack = 0
 10598  00494A  EC5A  F027         	call	_ethernetController_getNextPacketPointer	;wreg free
 10599  00494E  0E30               	movlw	48
 10600  004950  0100               	movlb	0	; () banked
 10601  004952  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 10602  004954  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 10603  004956  A4D8               	btfss	status,2,c
 10604  004958  D007               	goto	l185
 10605                           
 10606                           ; BSR set to: 0
 10607                           ;ENC424J600.c: 394: ENC424J600_setRXTailPointer(0x5FFF - 1);
 10608  00495A  0E5F               	movlw	95
 10609  00495C  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 10610  00495E  0EFE               	movlw	254
 10611  004960  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 10612  004962  ECDE  F025         	call	_ENC424J600_setRXTailPointer	;wreg free
 10613                           
 10614                           ;ENC424J600.c: 395: } else {
 10615  004966  D00B               	goto	l186
 10616  004968                     l185:
 10617                           
 10618                           ;ENC424J600.c: 396: ENC424J600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
 10619  004968  EC5A  F027         	call	_ethernetController_getNextPacketPointer	;wreg free
 10620  00496C  0EFE               	movlw	254
 10621  00496E  0100               	movlb	0	; () banked
 10622  004970  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 10623  004972  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 10624  004974  0EFF               	movlw	255
 10625  004976  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 10626  004978  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 10627  00497A  ECDE  F025         	call	_ENC424J600_setRXTailPointer	;wreg free
 10628  00497E                     l186:
 10629                           
 10630                           ;ENC424J600.c: 397: }
 10631                           ;ENC424J600.c: 399: ENC424J600_writeSingleByte(0b11001100);
 10632  00497E  0ECC               	movlw	204
 10633  004980  EC1A  F027         	call	_ENC424J600_writeSingleByte
 10634  004984  0012               	return		;funcret
 10635  004986                     __end_of_ethernetController_dropPacket:
 10636                           	opt stack 0
 10637                           tblptru	equ	0xFF8
 10638                           tblptrh	equ	0xFF7
 10639                           tblptrl	equ	0xFF6
 10640                           tablat	equ	0xFF5
 10641                           prodh	equ	0xFF4
 10642                           prodl	equ	0xFF3
 10643                           intcon	equ	0xFF2
 10644                           intcon3	equ	0xFF0
 10645                           indf0	equ	0xFEF
 10646                           postinc0	equ	0xFEE
 10647                           plusw0	equ	0xFEB
 10648                           fsr0h	equ	0xFEA
 10649                           fsr0l	equ	0xFE9
 10650                           wreg	equ	0xFE8
 10651                           indf1	equ	0xFE7
 10652                           postinc1	equ	0xFE6
 10653                           postdec1	equ	0xFE5
 10654                           plusw1	equ	0xFE3
 10655                           fsr1h	equ	0xFE2
 10656                           fsr1l	equ	0xFE1
 10657                           indf2	equ	0xFDF
 10658                           postinc2	equ	0xFDE
 10659                           postdec2	equ	0xFDD
 10660                           plusw2	equ	0xFDB
 10661                           fsr2h	equ	0xFDA
 10662                           fsr2l	equ	0xFD9
 10663                           status	equ	0xFD8
 10664                           
 10665 ;; *************** function _ARP_sendReply *****************
 10666 ;; Defined at:
 10667 ;;		line 209 in file "src/stack/protocols/arp.c"
 10668 ;; Parameters:    Size  Location     Type
 10669 ;;  request        32    0[BANK1 ] struct ARP_message
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;  reply          32   56[BANK1 ] struct ARP_message
 10672 ;;  targetMAC       6   38[BANK1 ] struct macaddress
 10673 ;;  senderMAC       6   32[BANK1 ] struct macaddress
 10674 ;;  myIP            4   52[BANK1 ] struct ipv4_address
 10675 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
 10676 ;;  senderIP        4   44[BANK1 ] struct ipv4_address
 10677 ;; Return value:  Size  Location     Type
 10678 ;;                  1    wreg      void 
 10679 ;; Registers used:
 10680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10681 ;; Tracked objects:
 10682 ;;		On entry : 0/0
 10683 ;;		On exit  : 0/0
 10684 ;;		Unchanged: 0/0
 10685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10686 ;;      Params:         0       0      32       0       0       0       0       0       0
 10687 ;;      Locals:         0       0      56       0       0       0       0       0       0
 10688 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10689 ;;      Totals:         0       0      88       0       0       0       0       0       0
 10690 ;;Total ram usage:       88 bytes
 10691 ;; Hardware stack levels used:    1
 10692 ;; Hardware stack levels required when called:   10
 10693 ;; This function calls:
 10694 ;;		_ARP_send
 10695 ;;		_UARTTransmitText
 10696 ;;		_ethernetController_getMacAddress
 10697 ;;		_ipAdressToString
 10698 ;;		_ipv4_cmp
 10699 ;;		_ipv4_getIPSourceAddress
 10700 ;;		_macToString
 10701 ;; This function is called by:
 10702 ;;		_ARP_handleNewPacket
 10703 ;; This function uses a non-reentrant model
 10704 ;;
 10705                           
 10706                           	psect	text32
 10707  002BAE                     __ptext32:
 10708                           	opt stack 0
 10709  002BAE                     _ARP_sendReply:
 10710                           	opt stack 17
 10711                           
 10712                           ;arp.c: 210: if (request.operation != ARP_REQUEST)
 10713                           
 10714                           ;incstack = 0
 10715  002BAE  0101               	movlb	1	; () banked
 10716  002BB0  0506               	decf	(ARP_sendReply@request+6)& (0+255),w,b
 10717  002BB2  1107               	iorwf	(ARP_sendReply@request+7)& (0+255),w,b
 10718  002BB4  A4D8               	btfss	status,2,c
 10719  002BB6  0012               	return	
 10720                           
 10721                           ; BSR set to: 1
 10722                           ;arp.c: 213: ipv4_address_t myIP = ipv4_getIPSourceAddress();
 10723                           
 10724                           ; BSR set to: 1
 10725                           
 10726                           ; BSR set to: 1
 10727                           ;arp.c: 211: return;
 10728  002BB8  EC38  F027         	call	_ipv4_getIPSourceAddress	;wreg free
 10729  002BBC  C060  F134         	movff	?_ipv4_getIPSourceAddress,ARP_sendReply@myIP
 10730  002BC0  C061  F135         	movff	?_ipv4_getIPSourceAddress+1,ARP_sendReply@myIP+1
 10731  002BC4  C062  F136         	movff	?_ipv4_getIPSourceAddress+2,ARP_sendReply@myIP+2
 10732  002BC8  C063  F137         	movff	?_ipv4_getIPSourceAddress+3,ARP_sendReply@myIP+3
 10733                           
 10734                           ;arp.c: 214: if (!(ipv4_cmp(&request.targetIPAddress, &myIP)))
 10735  002BCC  0E18               	movlw	low (ARP_sendReply@request+24)
 10736  002BCE  0100               	movlb	0	; () banked
 10737  002BD0  6F60               	movwf	ipv4_cmp@a& (0+255),b
 10738  002BD2  0E01               	movlw	high (ARP_sendReply@request+24)
 10739  002BD4  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 10740  002BD6  0E34               	movlw	low ARP_sendReply@myIP
 10741  002BD8  6F62               	movwf	ipv4_cmp@b& (0+255),b
 10742  002BDA  0E01               	movlw	high ARP_sendReply@myIP
 10743  002BDC  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 10744  002BDE  EC84  F024         	call	_ipv4_cmp	;wreg free
 10745  002BE2  0100               	movlb	0	; () banked
 10746  002BE4  A0D8               	btfss	status,0,c
 10747  002BE6  0012               	return	
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;arp.c: 217: ARP_message_t reply;
 10751                           ;arp.c: 218: ipv4_address_t senderIP;
 10752                           ;arp.c: 219: ipv4_address_t targetIP;
 10753                           ;arp.c: 220: macaddress_t senderMAC;
 10754                           ;arp.c: 221: macaddress_t targetMAC;
 10755                           ;arp.c: 223: senderMAC = ethernetController_getMacAddress();
 10756                           
 10757                           ; BSR set to: 0
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;arp.c: 215: return;
 10761  002BE8  EC58  F021         	call	_ethernetController_getMacAddress	;wreg free
 10762  002BEC  EE21  F020         	lfsr	2,ARP_sendReply@senderMAC
 10763  002BF0  0E05               	movlw	5
 10764  002BF2                     u10261:
 10765  002BF2  CFEB FFDB          	movff	plusw0,plusw2
 10766  002BF6  06E8               	decf	wreg,f,c
 10767  002BF8  E2FC               	bc	u10261
 10768                           
 10769                           ;arp.c: 224: targetMAC = request.senderMACAddress;
 10770  002BFA  EE21  F008         	lfsr	2,ARP_sendReply@request+8
 10771  002BFE  EE11  F026         	lfsr	1,ARP_sendReply@targetMAC
 10772  002C02  0E05               	movlw	5
 10773  002C04                     u10271:
 10774  002C04  CFDB FFE3          	movff	plusw2,plusw1
 10775  002C08  06E8               	decf	wreg,f,c
 10776  002C0A  E2FC               	bc	u10271
 10777                           
 10778                           ;arp.c: 225: senderIP = ipv4_getIPSourceAddress();
 10779  002C0C  EC38  F027         	call	_ipv4_getIPSourceAddress	;wreg free
 10780  002C10  C060  F12C         	movff	?_ipv4_getIPSourceAddress,ARP_sendReply@senderIP
 10781  002C14  C061  F12D         	movff	?_ipv4_getIPSourceAddress+1,ARP_sendReply@senderIP+1
 10782  002C18  C062  F12E         	movff	?_ipv4_getIPSourceAddress+2,ARP_sendReply@senderIP+2
 10783  002C1C  C063  F12F         	movff	?_ipv4_getIPSourceAddress+3,ARP_sendReply@senderIP+3
 10784                           
 10785                           ;arp.c: 226: targetIP = request.senderIPAddress;
 10786  002C20  C10E  F130         	movff	ARP_sendReply@request+14,ARP_sendReply@targetIP
 10787  002C24  C10F  F131         	movff	ARP_sendReply@request+15,ARP_sendReply@targetIP+1
 10788  002C28  C110  F132         	movff	ARP_sendReply@request+16,ARP_sendReply@targetIP+2
 10789  002C2C  C111  F133         	movff	ARP_sendReply@request+17,ARP_sendReply@targetIP+3
 10790                           
 10791                           ;arp.c: 228: reply.hlen = 6;
 10792  002C30  0E06               	movlw	6
 10793  002C32  0101               	movlb	1	; () banked
 10794  002C34  6F3C               	movwf	(ARP_sendReply@reply+4)& (0+255),b
 10795                           
 10796                           ; BSR set to: 1
 10797                           ;arp.c: 229: reply.plen = 4;
 10798  002C36  0E04               	movlw	4
 10799  002C38  6F3D               	movwf	(ARP_sendReply@reply+5)& (0+255),b
 10800                           
 10801                           ; BSR set to: 1
 10802                           ;arp.c: 230: reply.htype = ARP_HTYPE_ETHERNET;
 10803  002C3A  0E00               	movlw	0
 10804  002C3C  6F39               	movwf	(ARP_sendReply@reply+1)& (0+255),b
 10805  002C3E  0E01               	movlw	1
 10806  002C40  6F38               	movwf	ARP_sendReply@reply& (0+255),b
 10807                           
 10808                           ; BSR set to: 1
 10809                           ;arp.c: 231: reply.ptype = ARP_PTYPE_IPv4;
 10810  002C42  0E08               	movlw	8
 10811  002C44  6F3B               	movwf	(ARP_sendReply@reply+3)& (0+255),b
 10812  002C46  0E00               	movlw	0
 10813  002C48  6F3A               	movwf	(ARP_sendReply@reply+2)& (0+255),b
 10814                           
 10815                           ; BSR set to: 1
 10816                           ;arp.c: 232: reply.operation = ARP_REPLY;
 10817  002C4A  0E00               	movlw	0
 10818  002C4C  6F3F               	movwf	(ARP_sendReply@reply+7)& (0+255),b
 10819  002C4E  0E02               	movlw	2
 10820  002C50  6F3E               	movwf	(ARP_sendReply@reply+6)& (0+255),b
 10821                           
 10822                           ; BSR set to: 1
 10823                           ;arp.c: 233: reply.senderIPAddress = senderIP;
 10824  002C52  C12C  F146         	movff	ARP_sendReply@senderIP,ARP_sendReply@reply+14
 10825  002C56  C12D  F147         	movff	ARP_sendReply@senderIP+1,ARP_sendReply@reply+15
 10826  002C5A  C12E  F148         	movff	ARP_sendReply@senderIP+2,ARP_sendReply@reply+16
 10827  002C5E  C12F  F149         	movff	ARP_sendReply@senderIP+3,ARP_sendReply@reply+17
 10828                           
 10829                           ; BSR set to: 1
 10830                           ;arp.c: 234: reply.senderMACAddress = senderMAC;
 10831  002C62  EE21  F020         	lfsr	2,ARP_sendReply@senderMAC
 10832  002C66  EE11  F040         	lfsr	1,ARP_sendReply@reply+8
 10833  002C6A  0E05               	movlw	5
 10834  002C6C                     u10281:
 10835  002C6C  CFDB FFE3          	movff	plusw2,plusw1
 10836  002C70  06E8               	decf	wreg,f,c
 10837  002C72  E2FC               	bc	u10281
 10838                           
 10839                           ; BSR set to: 1
 10840                           ;arp.c: 235: reply.targetIPAddress = targetIP;
 10841  002C74  C130  F150         	movff	ARP_sendReply@targetIP,ARP_sendReply@reply+24
 10842  002C78  C131  F151         	movff	ARP_sendReply@targetIP+1,ARP_sendReply@reply+25
 10843  002C7C  C132  F152         	movff	ARP_sendReply@targetIP+2,ARP_sendReply@reply+26
 10844  002C80  C133  F153         	movff	ARP_sendReply@targetIP+3,ARP_sendReply@reply+27
 10845                           
 10846                           ; BSR set to: 1
 10847                           ;arp.c: 236: reply.targetMACAddress = targetMAC;
 10848  002C84  EE21  F026         	lfsr	2,ARP_sendReply@targetMAC
 10849  002C88  EE11  F04A         	lfsr	1,ARP_sendReply@reply+18
 10850  002C8C  0E05               	movlw	5
 10851  002C8E                     u10291:
 10852  002C8E  CFDB FFE3          	movff	plusw2,plusw1
 10853  002C92  06E8               	decf	wreg,f,c
 10854  002C94  E2FC               	bc	u10291
 10855                           
 10856                           ; BSR set to: 1
 10857                           ;arp.c: 238: ARP_send(reply);
 10858  002C96  EE21  F038         	lfsr	2,ARP_sendReply@reply
 10859  002C9A  EE00  F0A7         	lfsr	0,ARP_send@arp
 10860  002C9E  0E1F               	movlw	31
 10861  002CA0                     u10301:
 10862  002CA0  CFDB FFEB          	movff	plusw2,plusw0
 10863  002CA4  06E8               	decf	wreg,f,c
 10864  002CA6  E2FC               	bc	u10301
 10865  002CA8  ECB9  F00C         	call	_ARP_send	;wreg free
 10866                           
 10867                           ;arp.c: 240: UARTTransmitText("[Reply sent to ");
 10868  002CAC  0EE8               	movlw	low STR_77
 10869  002CAE  0100               	movlb	0	; () banked
 10870  002CB0  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10871  002CB2  0E7E               	movlw	high STR_77
 10872  002CB4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10873  002CB6  EC09  F023         	call	_UARTTransmitText	;wreg free
 10874                           
 10875                           ;arp.c: 241: UARTTransmitText(macToString(reply.targetMACAddress));
 10876  002CBA  EE21  F04A         	lfsr	2,ARP_sendReply@reply+18
 10877  002CBE  EE00  F07A         	lfsr	0,macToString@addr
 10878  002CC2  0E05               	movlw	5
 10879  002CC4                     u10311:
 10880  002CC4  CFDB FFEB          	movff	plusw2,plusw0
 10881  002CC8  06E8               	decf	wreg,f,c
 10882  002CCA  E2FC               	bc	u10311
 10883  002CCC  EC68  F019         	call	_macToString	;wreg free
 10884  002CD0  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 10885  002CD4  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 10886  002CD8  EC09  F023         	call	_UARTTransmitText	;wreg free
 10887                           
 10888                           ;arp.c: 242: UARTTransmitText(", ");
 10889  002CDC  0E40               	movlw	low (STR_45+17)
 10890  002CDE  0100               	movlb	0	; () banked
 10891  002CE0  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10892  002CE2  0E7E               	movlw	high (STR_45+17)
 10893  002CE4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10894  002CE6  EC09  F023         	call	_UARTTransmitText	;wreg free
 10895                           
 10896                           ;arp.c: 243: UARTTransmitText(ipAdressToString(reply.targetIPAddress));
 10897  002CEA  C150  F067         	movff	ARP_sendReply@reply+24,ipAdressToString@ip
 10898  002CEE  C151  F068         	movff	ARP_sendReply@reply+25,ipAdressToString@ip+1
 10899  002CF2  C152  F069         	movff	ARP_sendReply@reply+26,ipAdressToString@ip+2
 10900  002CF6  C153  F06A         	movff	ARP_sendReply@reply+27,ipAdressToString@ip+3
 10901  002CFA  ECA9  F010         	call	_ipAdressToString	;wreg free
 10902  002CFE  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 10903  002D02  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 10904  002D06  EC09  F023         	call	_UARTTransmitText	;wreg free
 10905                           
 10906                           ;arp.c: 244: UARTTransmitText("]");
 10907  002D0A  0EFA               	movlw	low (STR_18+1)
 10908  002D0C  0100               	movlb	0	; () banked
 10909  002D0E  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10910  002D10  0E7F               	movlw	high (STR_18+1)
 10911  002D12  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10912  002D14  EC09  F023         	call	_UARTTransmitText	;wreg free
 10913  002D18  0012               	return		;funcret
 10914  002D1A                     __end_of_ARP_sendReply:
 10915                           	opt stack 0
 10916                           tblptru	equ	0xFF8
 10917                           tblptrh	equ	0xFF7
 10918                           tblptrl	equ	0xFF6
 10919                           tablat	equ	0xFF5
 10920                           prodh	equ	0xFF4
 10921                           prodl	equ	0xFF3
 10922                           intcon	equ	0xFF2
 10923                           intcon3	equ	0xFF0
 10924                           indf0	equ	0xFEF
 10925                           postinc0	equ	0xFEE
 10926                           plusw0	equ	0xFEB
 10927                           fsr0h	equ	0xFEA
 10928                           fsr0l	equ	0xFE9
 10929                           wreg	equ	0xFE8
 10930                           indf1	equ	0xFE7
 10931                           postinc1	equ	0xFE6
 10932                           postdec1	equ	0xFE5
 10933                           plusw1	equ	0xFE3
 10934                           fsr1h	equ	0xFE2
 10935                           fsr1l	equ	0xFE1
 10936                           indf2	equ	0xFDF
 10937                           postinc2	equ	0xFDE
 10938                           postdec2	equ	0xFDD
 10939                           plusw2	equ	0xFDB
 10940                           fsr2h	equ	0xFDA
 10941                           fsr2l	equ	0xFD9
 10942                           status	equ	0xFD8
 10943                           
 10944 ;; *************** function _macToString *****************
 10945 ;; Defined at:
 10946 ;;		line 147 in file "src/system/uart.c"
 10947 ;; Parameters:    Size  Location     Type
 10948 ;;  addr            6   26[BANK0 ] struct macaddress
 10949 ;; Auto vars:     Size  Location     Type
 10950 ;;  i               2   53[BANK0 ] int 
 10951 ;;  address        18   33[BANK0 ] unsigned char [18]
 10952 ;;  j               1   55[BANK0 ] unsigned char 
 10953 ;;  secondDigit     1   52[BANK0 ] unsigned char 
 10954 ;;  firstDigit      1   51[BANK0 ] unsigned char 
 10955 ;; Return value:  Size  Location     Type
 10956 ;;                  2   26[BANK0 ] PTR unsigned char 
 10957 ;; Registers used:
 10958 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10959 ;; Tracked objects:
 10960 ;;		On entry : 0/0
 10961 ;;		On exit  : 0/0
 10962 ;;		Unchanged: 0/0
 10963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10964 ;;      Params:         0       6       0       0       0       0       0       0       0
 10965 ;;      Locals:         0      23       0       0       0       0       0       0       0
 10966 ;;      Temps:          0       1       0       0       0       0       0       0       0
 10967 ;;      Totals:         0      30       0       0       0       0       0       0       0
 10968 ;;Total ram usage:       30 bytes
 10969 ;; Hardware stack levels used:    1
 10970 ;; Hardware stack levels required when called:    4
 10971 ;; This function calls:
 10972 ;;		Nothing
 10973 ;; This function is called by:
 10974 ;;		_ethernet_rxGetNewFrame
 10975 ;;		_main
 10976 ;;		_ARP_handleNewPacket
 10977 ;;		_ARP_sendReply
 10978 ;;		_arpEntryToString
 10979 ;; This function uses a non-reentrant model
 10980 ;;
 10981                           
 10982                           	psect	text33
 10983  0032D0                     __ptext33:
 10984                           	opt stack 0
 10985  0032D0                     _macToString:
 10986                           	opt stack 26
 10987                           
 10988                           ;uart.c: 148: char address[] = "??:??:??:??:??:??";
 10989                           
 10990                           ;incstack = 0
 10991  0032D0  EE22  F0D0         	lfsr	2,macToString@F5813
 10992  0032D4  EE10  F081         	lfsr	1,macToString@address
 10993  0032D8  0E11               	movlw	17
 10994  0032DA                     u9091:
 10995  0032DA  CFDB FFE3          	movff	plusw2,plusw1
 10996  0032DE  06E8               	decf	wreg,f,c
 10997  0032E0  E2FC               	bc	u9091
 10998                           
 10999                           ;uart.c: 149: uint8_t j = 0;
 11000  0032E2  0E00               	movlw	0
 11001  0032E4  0100               	movlb	0	; () banked
 11002  0032E6  6F97               	movwf	macToString@j& (0+255),b
 11003                           
 11004                           ; BSR set to: 0
 11005                           ;uart.c: 150: uint8_t firstDigit;
 11006                           ;uart.c: 151: uint8_t secondDigit;
 11007                           ;uart.c: 153: for (int i = 0; i < 6; i++) {
 11008  0032E8  0E00               	movlw	0
 11009  0032EA  6F96               	movwf	(macToString@i+1)& (0+255),b
 11010  0032EC  0E00               	movlw	0
 11011  0032EE  6F95               	movwf	macToString@i& (0+255),b
 11012                           
 11013                           ; BSR set to: 0
 11014  0032F0  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 11015  0032F2  D006               	goto	l795
 11016  0032F4  5196               	movf	(macToString@i+1)& (0+255),w,b
 11017  0032F6  E16B               	bnz	l796
 11018  0032F8  0E06               	movlw	6
 11019  0032FA  5D95               	subwf	macToString@i& (0+255),w,b
 11020  0032FC  B0D8               	btfsc	status,0,c
 11021  0032FE  D067               	goto	u9140
 11022  003300                     l795:
 11023                           
 11024                           ; BSR set to: 0
 11025                           ;uart.c: 154: firstDigit = ((addr.address[i] & 0xF0) >> 4)&0x0F;
 11026                           
 11027                           ; BSR set to: 0
 11028  003300  0E7A               	movlw	low macToString@addr
 11029  003302  2595               	addwf	macToString@i& (0+255),w,b
 11030  003304  6ED9               	movwf	fsr2l,c
 11031  003306  0E00               	movlw	high macToString@addr
 11032  003308  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 11033  00330A  6EDA               	movwf	fsr2h,c
 11034  00330C  50DF               	movf	indf2,w,c
 11035  00330E  6F80               	movwf	??_macToString& (0+255),b
 11036  003310  3980               	swapf	??_macToString& (0+255),w,b
 11037  003312  0B0F               	andlw	15
 11038  003314  0B0F               	andlw	15
 11039  003316  6F93               	movwf	macToString@firstDigit& (0+255),b
 11040                           
 11041                           ;uart.c: 155: secondDigit = addr.address[i] & 0x0F;
 11042  003318  0E7A               	movlw	low macToString@addr
 11043  00331A  2595               	addwf	macToString@i& (0+255),w,b
 11044  00331C  6ED9               	movwf	fsr2l,c
 11045  00331E  0E00               	movlw	high macToString@addr
 11046  003320  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 11047  003322  6EDA               	movwf	fsr2h,c
 11048  003324  50DF               	movf	indf2,w,c
 11049  003326  0B0F               	andlw	15
 11050  003328  6F94               	movwf	macToString@secondDigit& (0+255),b
 11051                           
 11052                           ; BSR set to: 0
 11053                           ;uart.c: 157: firstDigit += 0x30;
 11054  00332A  0E30               	movlw	48
 11055  00332C  2793               	addwf	macToString@firstDigit& (0+255),f,b
 11056                           
 11057                           ; BSR set to: 0
 11058                           ;uart.c: 158: secondDigit += 0x30;
 11059  00332E  0E30               	movlw	48
 11060  003330  2794               	addwf	macToString@secondDigit& (0+255),f,b
 11061                           
 11062                           ; BSR set to: 0
 11063                           ;uart.c: 160: if (firstDigit > '9') {
 11064  003332  0E39               	movlw	57
 11065  003334  6593               	cpfsgt	macToString@firstDigit& (0+255),b
 11066  003336  D00C               	goto	l797
 11067                           
 11068                           ; BSR set to: 0
 11069                           ;uart.c: 161: address[j++] = firstDigit + 7;
 11070  003338  5197               	movf	macToString@j& (0+255),w,b
 11071  00333A  0D01               	mullw	1
 11072  00333C  0E81               	movlw	low macToString@address
 11073  00333E  24F3               	addwf	prodl,w,c
 11074  003340  6ED9               	movwf	fsr2l,c
 11075  003342  0E00               	movlw	high macToString@address
 11076  003344  20F4               	addwfc	prodh,w,c
 11077  003346  6EDA               	movwf	fsr2h,c
 11078  003348  5193               	movf	macToString@firstDigit& (0+255),w,b
 11079  00334A  0F07               	addlw	7
 11080  00334C  6EDF               	movwf	indf2,c
 11081  00334E  D00A               	goto	l7887
 11082  003350                     l797:
 11083                           
 11084                           ; BSR set to: 0
 11085                           ;uart.c: 163: address[j++] = firstDigit;
 11086                           
 11087                           ; BSR set to: 0
 11088  003350  5197               	movf	macToString@j& (0+255),w,b
 11089  003352  0D01               	mullw	1
 11090  003354  0E81               	movlw	low macToString@address
 11091  003356  24F3               	addwf	prodl,w,c
 11092  003358  6ED9               	movwf	fsr2l,c
 11093  00335A  0E00               	movlw	high macToString@address
 11094  00335C  20F4               	addwfc	prodh,w,c
 11095  00335E  6EDA               	movwf	fsr2h,c
 11096  003360  C093  FFDF         	movff	macToString@firstDigit,indf2
 11097  003364                     l7887:
 11098                           
 11099                           ; BSR set to: 0
 11100  003364  2B97               	incf	macToString@j& (0+255),f,b
 11101                           
 11102                           ; BSR set to: 0
 11103                           ;uart.c: 164: }
 11104                           ;uart.c: 165: if (secondDigit > '9') {
 11105                           
 11106                           ; BSR set to: 0
 11107  003366  0E39               	movlw	57
 11108  003368  6594               	cpfsgt	macToString@secondDigit& (0+255),b
 11109  00336A  D00C               	goto	l799
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;uart.c: 166: address[j++] = secondDigit + 7;
 11113  00336C  5197               	movf	macToString@j& (0+255),w,b
 11114  00336E  0D01               	mullw	1
 11115  003370  0E81               	movlw	low macToString@address
 11116  003372  24F3               	addwf	prodl,w,c
 11117  003374  6ED9               	movwf	fsr2l,c
 11118  003376  0E00               	movlw	high macToString@address
 11119  003378  20F4               	addwfc	prodh,w,c
 11120  00337A  6EDA               	movwf	fsr2h,c
 11121  00337C  5194               	movf	macToString@secondDigit& (0+255),w,b
 11122  00337E  0F07               	addlw	7
 11123  003380  6EDF               	movwf	indf2,c
 11124  003382  D00A               	goto	l7897
 11125  003384                     l799:
 11126                           
 11127                           ; BSR set to: 0
 11128                           ;uart.c: 168: address[j++] = secondDigit;
 11129                           
 11130                           ; BSR set to: 0
 11131  003384  5197               	movf	macToString@j& (0+255),w,b
 11132  003386  0D01               	mullw	1
 11133  003388  0E81               	movlw	low macToString@address
 11134  00338A  24F3               	addwf	prodl,w,c
 11135  00338C  6ED9               	movwf	fsr2l,c
 11136  00338E  0E00               	movlw	high macToString@address
 11137  003390  20F4               	addwfc	prodh,w,c
 11138  003392  6EDA               	movwf	fsr2h,c
 11139  003394  C094  FFDF         	movff	macToString@secondDigit,indf2
 11140  003398                     l7897:
 11141                           
 11142                           ; BSR set to: 0
 11143  003398  2B97               	incf	macToString@j& (0+255),f,b
 11144                           
 11145                           ; BSR set to: 0
 11146                           ;uart.c: 169: }
 11147                           ;uart.c: 171: if (i < 5) {
 11148                           
 11149                           ; BSR set to: 0
 11150  00339A  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 11151  00339C  D006               	goto	u9130
 11152  00339E  5196               	movf	(macToString@i+1)& (0+255),w,b
 11153  0033A0  E10F               	bnz	l7905
 11154  0033A2  0E05               	movlw	5
 11155  0033A4  5D95               	subwf	macToString@i& (0+255),w,b
 11156  0033A6  B0D8               	btfsc	status,0,c
 11157  0033A8  D00B               	goto	l801
 11158  0033AA                     u9130:
 11159                           
 11160                           ; BSR set to: 0
 11161                           ;uart.c: 172: address[j++] = ':';
 11162  0033AA  5197               	movf	macToString@j& (0+255),w,b
 11163  0033AC  0D01               	mullw	1
 11164  0033AE  0E81               	movlw	low macToString@address
 11165  0033B0  24F3               	addwf	prodl,w,c
 11166  0033B2  6ED9               	movwf	fsr2l,c
 11167  0033B4  0E00               	movlw	high macToString@address
 11168  0033B6  20F4               	addwfc	prodh,w,c
 11169  0033B8  6EDA               	movwf	fsr2h,c
 11170  0033BA  0E3A               	movlw	58
 11171  0033BC  6EDF               	movwf	indf2,c
 11172                           
 11173                           ; BSR set to: 0
 11174  0033BE  2B97               	incf	macToString@j& (0+255),f,b
 11175  0033C0                     l801:
 11176  0033C0                     l7905:
 11177                           
 11178                           ; BSR set to: 0
 11179  0033C0  4B95               	infsnz	macToString@i& (0+255),f,b
 11180  0033C2  2B96               	incf	(macToString@i+1)& (0+255),f,b
 11181                           
 11182                           ; BSR set to: 0
 11183  0033C4  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 11184  0033C6  D79C               	goto	l795
 11185  0033C8  5196               	movf	(macToString@i+1)& (0+255),w,b
 11186  0033CA  E101               	bnz	l7909
 11187  0033CC  D795               	goto	L1
 11188  0033CE                     u9140:
 11189  0033CE                     l796:
 11190  0033CE                     l7909:
 11191                           
 11192                           ; BSR set to: 0
 11193                           ;uart.c: 173: }
 11194                           ;uart.c: 174: }
 11195                           ;uart.c: 175: return &address;
 11196  0033CE  0E81               	movlw	low macToString@address
 11197  0033D0  6F7A               	movwf	?_macToString& (0+255),b
 11198  0033D2  0E00               	movlw	high macToString@address
 11199  0033D4  6F7B               	movwf	(?_macToString+1)& (0+255),b
 11200  0033D6  0012               	return	
 11201  0033D8                     __end_of_macToString:
 11202                           	opt stack 0
 11203                           tblptru	equ	0xFF8
 11204                           tblptrh	equ	0xFF7
 11205                           tblptrl	equ	0xFF6
 11206                           tablat	equ	0xFF5
 11207                           prodh	equ	0xFF4
 11208                           prodl	equ	0xFF3
 11209                           intcon	equ	0xFF2
 11210                           intcon3	equ	0xFF0
 11211                           indf0	equ	0xFEF
 11212                           postinc0	equ	0xFEE
 11213                           plusw0	equ	0xFEB
 11214                           fsr0h	equ	0xFEA
 11215                           fsr0l	equ	0xFE9
 11216                           wreg	equ	0xFE8
 11217                           indf1	equ	0xFE7
 11218                           postinc1	equ	0xFE6
 11219                           postdec1	equ	0xFE5
 11220                           plusw1	equ	0xFE3
 11221                           fsr1h	equ	0xFE2
 11222                           fsr1l	equ	0xFE1
 11223                           indf2	equ	0xFDF
 11224                           postinc2	equ	0xFDE
 11225                           postdec2	equ	0xFDD
 11226                           plusw2	equ	0xFDB
 11227                           fsr2h	equ	0xFDA
 11228                           fsr2l	equ	0xFD9
 11229                           status	equ	0xFD8
 11230                           
 11231 ;; *************** function _ipv4_getIPSourceAddress *****************
 11232 ;; Defined at:
 11233 ;;		line 224 in file "src/stack/protocols/ipv4.c"
 11234 ;; Parameters:    Size  Location     Type
 11235 ;;		None
 11236 ;; Auto vars:     Size  Location     Type
 11237 ;;		None
 11238 ;; Return value:  Size  Location     Type
 11239 ;;                  4    0[BANK0 ] struct ipv4_address
 11240 ;; Registers used:
 11241 ;;		None
 11242 ;; Tracked objects:
 11243 ;;		On entry : 0/0
 11244 ;;		On exit  : 0/0
 11245 ;;		Unchanged: 0/0
 11246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11247 ;;      Params:         0       4       0       0       0       0       0       0       0
 11248 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11249 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11250 ;;      Totals:         0       4       0       0       0       0       0       0       0
 11251 ;;Total ram usage:        4 bytes
 11252 ;; Hardware stack levels used:    1
 11253 ;; Hardware stack levels required when called:    4
 11254 ;; This function calls:
 11255 ;;		Nothing
 11256 ;; This function is called by:
 11257 ;;		_ARP_sendRequest
 11258 ;;		_ARP_sendReply
 11259 ;;		_ipv4_sendFrame
 11260 ;; This function uses a non-reentrant model
 11261 ;;
 11262                           
 11263                           	psect	text34
 11264  004E70                     __ptext34:
 11265                           	opt stack 0
 11266  004E70                     _ipv4_getIPSourceAddress:
 11267                           	opt stack 24
 11268                           
 11269                           ;ipv4.c: 225: return sourceIPAddress;
 11270                           
 11271                           ; BSR set to: 0
 11272                           ;incstack = 0
 11273  004E70  C02D  F060         	movff	_sourceIPAddress,?_ipv4_getIPSourceAddress
 11274  004E74  C02E  F061         	movff	_sourceIPAddress+1,?_ipv4_getIPSourceAddress+1
 11275  004E78  C02F  F062         	movff	_sourceIPAddress+2,?_ipv4_getIPSourceAddress+2
 11276  004E7C  C030  F063         	movff	_sourceIPAddress+3,?_ipv4_getIPSourceAddress+3
 11277  004E80  0012               	return		;funcret
 11278  004E82                     __end_of_ipv4_getIPSourceAddress:
 11279                           	opt stack 0
 11280                           tblptru	equ	0xFF8
 11281                           tblptrh	equ	0xFF7
 11282                           tblptrl	equ	0xFF6
 11283                           tablat	equ	0xFF5
 11284                           prodh	equ	0xFF4
 11285                           prodl	equ	0xFF3
 11286                           intcon	equ	0xFF2
 11287                           intcon3	equ	0xFF0
 11288                           indf0	equ	0xFEF
 11289                           postinc0	equ	0xFEE
 11290                           plusw0	equ	0xFEB
 11291                           fsr0h	equ	0xFEA
 11292                           fsr0l	equ	0xFE9
 11293                           wreg	equ	0xFE8
 11294                           indf1	equ	0xFE7
 11295                           postinc1	equ	0xFE6
 11296                           postdec1	equ	0xFE5
 11297                           plusw1	equ	0xFE3
 11298                           fsr1h	equ	0xFE2
 11299                           fsr1l	equ	0xFE1
 11300                           indf2	equ	0xFDF
 11301                           postinc2	equ	0xFDE
 11302                           postdec2	equ	0xFDD
 11303                           plusw2	equ	0xFDB
 11304                           fsr2h	equ	0xFDA
 11305                           fsr2l	equ	0xFD9
 11306                           status	equ	0xFD8
 11307                           
 11308 ;; *************** function _ipAdressToString *****************
 11309 ;; Defined at:
 11310 ;;		line 202 in file "src/system/uart.c"
 11311 ;; Parameters:    Size  Location     Type
 11312 ;;  ip              4    7[BANK0 ] struct ipv4_address
 11313 ;; Auto vars:     Size  Location     Type
 11314 ;;  i               1   28[BANK0 ] unsigned char 
 11315 ;;  hundreds        4   23[BANK0 ] unsigned char [4]
 11316 ;;  tens            4   19[BANK0 ] unsigned char [4]
 11317 ;;  ones            4   15[BANK0 ] unsigned char [4]
 11318 ;;  pointer         1   27[BANK0 ] unsigned char 
 11319 ;; Return value:  Size  Location     Type
 11320 ;;                  2    7[BANK0 ] PTR unsigned char 
 11321 ;; Registers used:
 11322 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11323 ;; Tracked objects:
 11324 ;;		On entry : 0/0
 11325 ;;		On exit  : 0/0
 11326 ;;		Unchanged: 0/0
 11327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11328 ;;      Params:         0       4       0       0       0       0       0       0       0
 11329 ;;      Locals:         0      14       0       0       0       0       0       0       0
 11330 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11331 ;;      Totals:         0      22       0       0       0       0       0       0       0
 11332 ;;Total ram usage:       22 bytes
 11333 ;; Hardware stack levels used:    1
 11334 ;; Hardware stack levels required when called:    5
 11335 ;; This function calls:
 11336 ;;		___lwdiv
 11337 ;;		___lwmod
 11338 ;; This function is called by:
 11339 ;;		_handleStackBackgroundTasks
 11340 ;;		_ARP_handleNewPacket
 11341 ;;		_ARP_sendReply
 11342 ;;		_ipv4_handleNewPacket
 11343 ;;		_arpEntryToString
 11344 ;; This function uses a non-reentrant model
 11345 ;;
 11346                           
 11347                           	psect	text35
 11348  002152                     __ptext35:
 11349                           	opt stack 0
 11350  002152                     _ipAdressToString:
 11351                           	opt stack 24
 11352                           
 11353                           ;uart.c: 203: char static address [] = "???.???.???.???";
 11354                           ;uart.c: 204: uint8_t hundreds[4];
 11355                           ;uart.c: 205: uint8_t tens[4];
 11356                           ;uart.c: 206: uint8_t ones[4];
 11357                           ;uart.c: 207: uint8_t pointer = 0;
 11358                           
 11359                           ;incstack = 0
 11360  002152  0E00               	movlw	0
 11361  002154  0100               	movlb	0	; () banked
 11362  002156  6F7B               	movwf	ipAdressToString@pointer& (0+255),b
 11363                           
 11364                           ;uart.c: 209: for (uint8_t i = 0; i < 4; i++) {
 11365  002158  0E00               	movlw	0
 11366  00215A  6F7C               	movwf	ipAdressToString@i& (0+255),b
 11367  00215C                     l7955:
 11368                           
 11369                           ; BSR set to: 0
 11370  00215C  0E03               	movlw	3
 11371  00215E  657C               	cpfsgt	ipAdressToString@i& (0+255),b
 11372  002160  D001               	goto	l824
 11373  002162  D0DF               	goto	u9260
 11374  002164                     l824:
 11375                           
 11376                           ; BSR set to: 0
 11377                           ;uart.c: 211: hundreds[i] = ip.address[i] / 100u;
 11378                           
 11379                           ; BSR set to: 0
 11380  002164  517C               	movf	ipAdressToString@i& (0+255),w,b
 11381  002166  0D01               	mullw	1
 11382  002168  0E77               	movlw	low ipAdressToString@hundreds
 11383  00216A  24F3               	addwf	prodl,w,c
 11384  00216C  6ED9               	movwf	fsr2l,c
 11385  00216E  0E00               	movlw	high ipAdressToString@hundreds
 11386  002170  20F4               	addwfc	prodh,w,c
 11387  002172  6EDA               	movwf	fsr2h,c
 11388  002174  517C               	movf	ipAdressToString@i& (0+255),w,b
 11389  002176  0D01               	mullw	1
 11390  002178  0E67               	movlw	low ipAdressToString@ip
 11391  00217A  24F3               	addwf	prodl,w,c
 11392  00217C  6EE1               	movwf	fsr1l,c
 11393  00217E  0E00               	movlw	high ipAdressToString@ip
 11394  002180  20F4               	addwfc	prodh,w,c
 11395  002182  6EE2               	movwf	fsr1h,c
 11396  002184  50E7               	movf	indf1,w,c
 11397  002186  6F6B               	movwf	??_ipAdressToString& (0+255),b
 11398  002188  516B               	movf	??_ipAdressToString& (0+255),w,b
 11399  00218A  6F60               	movwf	___lwdiv@dividend& (0+255),b
 11400  00218C  6B61               	clrf	(___lwdiv@dividend+1)& (0+255),b
 11401  00218E  0E00               	movlw	0
 11402  002190  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 11403  002192  0E64               	movlw	100
 11404  002194  6F62               	movwf	___lwdiv@divisor& (0+255),b
 11405  002196  EC34  F023         	call	___lwdiv	;wreg free
 11406  00219A  0100               	movlb	0	; () banked
 11407  00219C  5160               	movf	?___lwdiv& (0+255),w,b
 11408  00219E  6EDF               	movwf	indf2,c
 11409                           
 11410                           ;uart.c: 212: tens[i] = (ip.address[i] - hundreds[i]*100u) / 10u;
 11411  0021A0  517C               	movf	ipAdressToString@i& (0+255),w,b
 11412  0021A2  0D01               	mullw	1
 11413  0021A4  0E73               	movlw	low ipAdressToString@tens
 11414  0021A6  24F3               	addwf	prodl,w,c
 11415  0021A8  6ED9               	movwf	fsr2l,c
 11416  0021AA  0E00               	movlw	high ipAdressToString@tens
 11417  0021AC  20F4               	addwfc	prodh,w,c
 11418  0021AE  6EDA               	movwf	fsr2h,c
 11419  0021B0  517C               	movf	ipAdressToString@i& (0+255),w,b
 11420  0021B2  0D01               	mullw	1
 11421  0021B4  0E77               	movlw	low ipAdressToString@hundreds
 11422  0021B6  24F3               	addwf	prodl,w,c
 11423  0021B8  6EE1               	movwf	fsr1l,c
 11424  0021BA  0E00               	movlw	high ipAdressToString@hundreds
 11425  0021BC  20F4               	addwfc	prodh,w,c
 11426  0021BE  6EE2               	movwf	fsr1h,c
 11427  0021C0  50E7               	movf	indf1,w,c
 11428  0021C2  6F6B               	movwf	??_ipAdressToString& (0+255),b
 11429  0021C4  516B               	movf	??_ipAdressToString& (0+255),w,b
 11430  0021C6  0D64               	mullw	100
 11431  0021C8  CFF3 F06C          	movff	prodl,??_ipAdressToString+1
 11432  0021CC  CFF4 F06D          	movff	prodh,??_ipAdressToString+2
 11433  0021D0  1F6C               	comf	(??_ipAdressToString+1)& (0+255),f,b
 11434  0021D2  1F6D               	comf	(??_ipAdressToString+2)& (0+255),f,b
 11435  0021D4  4B6C               	infsnz	(??_ipAdressToString+1)& (0+255),f,b
 11436  0021D6  2B6D               	incf	(??_ipAdressToString+2)& (0+255),f,b
 11437  0021D8  517C               	movf	ipAdressToString@i& (0+255),w,b
 11438  0021DA  0D01               	mullw	1
 11439  0021DC  0E67               	movlw	low ipAdressToString@ip
 11440  0021DE  24F3               	addwf	prodl,w,c
 11441  0021E0  6EE1               	movwf	fsr1l,c
 11442  0021E2  0E00               	movlw	high ipAdressToString@ip
 11443  0021E4  20F4               	addwfc	prodh,w,c
 11444  0021E6  6EE2               	movwf	fsr1h,c
 11445  0021E8  50E7               	movf	indf1,w,c
 11446  0021EA  6F6E               	movwf	(??_ipAdressToString+3)& (0+255),b
 11447  0021EC  516E               	movf	(??_ipAdressToString+3)& (0+255),w,b
 11448  0021EE  256C               	addwf	(??_ipAdressToString+1)& (0+255),w,b
 11449  0021F0  6F60               	movwf	___lwdiv@dividend& (0+255),b
 11450  0021F2  0E00               	movlw	0
 11451  0021F4  216D               	addwfc	(??_ipAdressToString+2)& (0+255),w,b
 11452  0021F6  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
 11453  0021F8  0E00               	movlw	0
 11454  0021FA  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 11455  0021FC  0E0A               	movlw	10
 11456  0021FE  6F62               	movwf	___lwdiv@divisor& (0+255),b
 11457  002200  EC34  F023         	call	___lwdiv	;wreg free
 11458  002204  0100               	movlb	0	; () banked
 11459  002206  5160               	movf	?___lwdiv& (0+255),w,b
 11460  002208  6EDF               	movwf	indf2,c
 11461                           
 11462                           ;uart.c: 213: ones[i] = ip.address[i] % 10u;
 11463  00220A  517C               	movf	ipAdressToString@i& (0+255),w,b
 11464  00220C  0D01               	mullw	1
 11465  00220E  0E6F               	movlw	low ipAdressToString@ones
 11466  002210  24F3               	addwf	prodl,w,c
 11467  002212  6ED9               	movwf	fsr2l,c
 11468  002214  0E00               	movlw	high ipAdressToString@ones
 11469  002216  20F4               	addwfc	prodh,w,c
 11470  002218  6EDA               	movwf	fsr2h,c
 11471  00221A  517C               	movf	ipAdressToString@i& (0+255),w,b
 11472  00221C  0D01               	mullw	1
 11473  00221E  0E67               	movlw	low ipAdressToString@ip
 11474  002220  24F3               	addwf	prodl,w,c
 11475  002222  6EE1               	movwf	fsr1l,c
 11476  002224  0E00               	movlw	high ipAdressToString@ip
 11477  002226  20F4               	addwfc	prodh,w,c
 11478  002228  6EE2               	movwf	fsr1h,c
 11479  00222A  50E7               	movf	indf1,w,c
 11480  00222C  6F6B               	movwf	??_ipAdressToString& (0+255),b
 11481  00222E  516B               	movf	??_ipAdressToString& (0+255),w,b
 11482  002230  6F60               	movwf	___lwmod@dividend& (0+255),b
 11483  002232  6B61               	clrf	(___lwmod@dividend+1)& (0+255),b
 11484  002234  0E00               	movlw	0
 11485  002236  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
 11486  002238  0E0A               	movlw	10
 11487  00223A  6F62               	movwf	___lwmod@divisor& (0+255),b
 11488  00223C  EC41  F024         	call	___lwmod	;wreg free
 11489  002240  0100               	movlb	0	; () banked
 11490  002242  5160               	movf	?___lwmod& (0+255),w,b
 11491  002244  6EDF               	movwf	indf2,c
 11492                           
 11493                           ; BSR set to: 0
 11494                           ;uart.c: 215: if (hundreds[i] > 0)
 11495  002246  517C               	movf	ipAdressToString@i& (0+255),w,b
 11496  002248  0D01               	mullw	1
 11497  00224A  0E77               	movlw	low ipAdressToString@hundreds
 11498  00224C  24F3               	addwf	prodl,w,c
 11499  00224E  6ED9               	movwf	fsr2l,c
 11500  002250  0E00               	movlw	high ipAdressToString@hundreds
 11501  002252  20F4               	addwfc	prodh,w,c
 11502  002254  6EDA               	movwf	fsr2h,c
 11503  002256  50DF               	movf	indf2,w,c
 11504  002258  B4D8               	btfsc	status,2,c
 11505  00225A  D014               	goto	l826
 11506                           
 11507                           ; BSR set to: 0
 11508                           ;uart.c: 216: address[pointer++] = hundreds[i] + 0x30;
 11509  00225C  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11510  00225E  0D01               	mullw	1
 11511  002260  0EC6               	movlw	low ipAdressToString@address
 11512  002262  24F3               	addwf	prodl,w,c
 11513  002264  6ED9               	movwf	fsr2l,c
 11514  002266  0E01               	movlw	high ipAdressToString@address
 11515  002268  20F4               	addwfc	prodh,w,c
 11516  00226A  6EDA               	movwf	fsr2h,c
 11517  00226C  517C               	movf	ipAdressToString@i& (0+255),w,b
 11518  00226E  0D01               	mullw	1
 11519  002270  0E77               	movlw	low ipAdressToString@hundreds
 11520  002272  24F3               	addwf	prodl,w,c
 11521  002274  6EE1               	movwf	fsr1l,c
 11522  002276  0E00               	movlw	high ipAdressToString@hundreds
 11523  002278  20F4               	addwfc	prodh,w,c
 11524  00227A  6EE2               	movwf	fsr1h,c
 11525  00227C  50E7               	movf	indf1,w,c
 11526  00227E  0F30               	addlw	48
 11527  002280  6EDF               	movwf	indf2,c
 11528                           
 11529                           ; BSR set to: 0
 11530  002282  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 11531  002284                     l826:
 11532                           
 11533                           ; BSR set to: 0
 11534                           ;uart.c: 217: if ((tens[i] > 0) || hundreds[i] > 0)
 11535                           
 11536                           ; BSR set to: 0
 11537  002284  517C               	movf	ipAdressToString@i& (0+255),w,b
 11538  002286  0D01               	mullw	1
 11539  002288  0E73               	movlw	low ipAdressToString@tens
 11540  00228A  24F3               	addwf	prodl,w,c
 11541  00228C  6ED9               	movwf	fsr2l,c
 11542  00228E  0E00               	movlw	high ipAdressToString@tens
 11543  002290  20F4               	addwfc	prodh,w,c
 11544  002292  6EDA               	movwf	fsr2h,c
 11545  002294  50DF               	movf	indf2,w,c
 11546  002296  A4D8               	btfss	status,2,c
 11547  002298  D00B               	goto	u9240
 11548                           
 11549                           ; BSR set to: 0
 11550  00229A  517C               	movf	ipAdressToString@i& (0+255),w,b
 11551  00229C  0D01               	mullw	1
 11552  00229E  0E77               	movlw	low ipAdressToString@hundreds
 11553  0022A0  24F3               	addwf	prodl,w,c
 11554  0022A2  6ED9               	movwf	fsr2l,c
 11555  0022A4  0E00               	movlw	high ipAdressToString@hundreds
 11556  0022A6  20F4               	addwfc	prodh,w,c
 11557  0022A8  6EDA               	movwf	fsr2h,c
 11558  0022AA  50DF               	movf	indf2,w,c
 11559  0022AC  B4D8               	btfsc	status,2,c
 11560  0022AE  D014               	goto	l827
 11561  0022B0                     u9240:
 11562                           
 11563                           ; BSR set to: 0
 11564                           ;uart.c: 218: address[pointer++] = tens[i] + 0x30;
 11565                           
 11566                           ; BSR set to: 0
 11567  0022B0  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11568  0022B2  0D01               	mullw	1
 11569  0022B4  0EC6               	movlw	low ipAdressToString@address
 11570  0022B6  24F3               	addwf	prodl,w,c
 11571  0022B8  6ED9               	movwf	fsr2l,c
 11572  0022BA  0E01               	movlw	high ipAdressToString@address
 11573  0022BC  20F4               	addwfc	prodh,w,c
 11574  0022BE  6EDA               	movwf	fsr2h,c
 11575  0022C0  517C               	movf	ipAdressToString@i& (0+255),w,b
 11576  0022C2  0D01               	mullw	1
 11577  0022C4  0E73               	movlw	low ipAdressToString@tens
 11578  0022C6  24F3               	addwf	prodl,w,c
 11579  0022C8  6EE1               	movwf	fsr1l,c
 11580  0022CA  0E00               	movlw	high ipAdressToString@tens
 11581  0022CC  20F4               	addwfc	prodh,w,c
 11582  0022CE  6EE2               	movwf	fsr1h,c
 11583  0022D0  50E7               	movf	indf1,w,c
 11584  0022D2  0F30               	addlw	48
 11585  0022D4  6EDF               	movwf	indf2,c
 11586                           
 11587                           ; BSR set to: 0
 11588  0022D6  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 11589  0022D8                     l827:
 11590                           
 11591                           ; BSR set to: 0
 11592                           ;uart.c: 219: address[pointer++] = ones[i] + 0x30;
 11593                           
 11594                           ; BSR set to: 0
 11595  0022D8  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11596  0022DA  0D01               	mullw	1
 11597  0022DC  0EC6               	movlw	low ipAdressToString@address
 11598  0022DE  24F3               	addwf	prodl,w,c
 11599  0022E0  6ED9               	movwf	fsr2l,c
 11600  0022E2  0E01               	movlw	high ipAdressToString@address
 11601  0022E4  20F4               	addwfc	prodh,w,c
 11602  0022E6  6EDA               	movwf	fsr2h,c
 11603  0022E8  517C               	movf	ipAdressToString@i& (0+255),w,b
 11604  0022EA  0D01               	mullw	1
 11605  0022EC  0E6F               	movlw	low ipAdressToString@ones
 11606  0022EE  24F3               	addwf	prodl,w,c
 11607  0022F0  6EE1               	movwf	fsr1l,c
 11608  0022F2  0E00               	movlw	high ipAdressToString@ones
 11609  0022F4  20F4               	addwfc	prodh,w,c
 11610  0022F6  6EE2               	movwf	fsr1h,c
 11611  0022F8  50E7               	movf	indf1,w,c
 11612  0022FA  0F30               	addlw	48
 11613  0022FC  6EDF               	movwf	indf2,c
 11614  0022FE  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 11615                           
 11616                           ; BSR set to: 0
 11617                           ;uart.c: 220: if (i != 3)
 11618  002300  0E03               	movlw	3
 11619  002302  197C               	xorwf	ipAdressToString@i& (0+255),w,b
 11620  002304  B4D8               	btfsc	status,2,c
 11621  002306  D00B               	goto	l830
 11622                           
 11623                           ; BSR set to: 0
 11624                           ;uart.c: 221: address[pointer++] = '.';
 11625  002308  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11626  00230A  0D01               	mullw	1
 11627  00230C  0EC6               	movlw	low ipAdressToString@address
 11628  00230E  24F3               	addwf	prodl,w,c
 11629  002310  6ED9               	movwf	fsr2l,c
 11630  002312  0E01               	movlw	high ipAdressToString@address
 11631  002314  20F4               	addwfc	prodh,w,c
 11632  002316  6EDA               	movwf	fsr2h,c
 11633  002318  0E2E               	movlw	46
 11634  00231A  6EDF               	movwf	indf2,c
 11635                           
 11636                           ; BSR set to: 0
 11637  00231C  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 11638  00231E                     l830:
 11639                           
 11640                           ; BSR set to: 0
 11641                           
 11642                           ; BSR set to: 0
 11643  00231E  2B7C               	incf	ipAdressToString@i& (0+255),f,b
 11644  002320  D71D               	goto	l7955
 11645  002322                     u9260:
 11646                           
 11647                           ; BSR set to: 0
 11648                           ;uart.c: 222: }
 11649                           ;uart.c: 223: address[pointer] = '\0';
 11650                           
 11651                           ; BSR set to: 0
 11652  002322  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11653  002324  0D01               	mullw	1
 11654  002326  0EC6               	movlw	low ipAdressToString@address
 11655  002328  24F3               	addwf	prodl,w,c
 11656  00232A  6ED9               	movwf	fsr2l,c
 11657  00232C  0E01               	movlw	high ipAdressToString@address
 11658  00232E  20F4               	addwfc	prodh,w,c
 11659  002330  6EDA               	movwf	fsr2h,c
 11660  002332  0E00               	movlw	0
 11661  002334  6EDF               	movwf	indf2,c
 11662                           
 11663                           ; BSR set to: 0
 11664                           ;uart.c: 224: return address;
 11665  002336  0EC6               	movlw	low ipAdressToString@address
 11666  002338  6F67               	movwf	?_ipAdressToString& (0+255),b
 11667  00233A  0E01               	movlw	high ipAdressToString@address
 11668  00233C  6F68               	movwf	(?_ipAdressToString+1)& (0+255),b
 11669  00233E  0012               	return	
 11670  002340                     __end_of_ipAdressToString:
 11671                           	opt stack 0
 11672                           tblptru	equ	0xFF8
 11673                           tblptrh	equ	0xFF7
 11674                           tblptrl	equ	0xFF6
 11675                           tablat	equ	0xFF5
 11676                           prodh	equ	0xFF4
 11677                           prodl	equ	0xFF3
 11678                           intcon	equ	0xFF2
 11679                           intcon3	equ	0xFF0
 11680                           indf0	equ	0xFEF
 11681                           postinc0	equ	0xFEE
 11682                           plusw0	equ	0xFEB
 11683                           fsr0h	equ	0xFEA
 11684                           fsr0l	equ	0xFE9
 11685                           wreg	equ	0xFE8
 11686                           indf1	equ	0xFE7
 11687                           postinc1	equ	0xFE6
 11688                           postdec1	equ	0xFE5
 11689                           plusw1	equ	0xFE3
 11690                           fsr1h	equ	0xFE2
 11691                           fsr1l	equ	0xFE1
 11692                           indf2	equ	0xFDF
 11693                           postinc2	equ	0xFDE
 11694                           postdec2	equ	0xFDD
 11695                           plusw2	equ	0xFDB
 11696                           fsr2h	equ	0xFDA
 11697                           fsr2l	equ	0xFD9
 11698                           status	equ	0xFD8
 11699                           
 11700 ;; *************** function ___lwmod *****************
 11701 ;; Defined at:
 11702 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 11703 ;; Parameters:    Size  Location     Type
 11704 ;;  dividend        2    0[BANK0 ] unsigned int 
 11705 ;;  divisor         2    2[BANK0 ] unsigned int 
 11706 ;; Auto vars:     Size  Location     Type
 11707 ;;  counter         1    4[BANK0 ] unsigned char 
 11708 ;; Return value:  Size  Location     Type
 11709 ;;                  2    0[BANK0 ] unsigned int 
 11710 ;; Registers used:
 11711 ;;		wreg, status,2, status,0
 11712 ;; Tracked objects:
 11713 ;;		On entry : 0/0
 11714 ;;		On exit  : 0/0
 11715 ;;		Unchanged: 0/0
 11716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11717 ;;      Params:         0       4       0       0       0       0       0       0       0
 11718 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11719 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11720 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11721 ;;Total ram usage:        5 bytes
 11722 ;; Hardware stack levels used:    1
 11723 ;; Hardware stack levels required when called:    4
 11724 ;; This function calls:
 11725 ;;		Nothing
 11726 ;; This function is called by:
 11727 ;;		_ipAdressToString
 11728 ;; This function uses a non-reentrant model
 11729 ;;
 11730                           
 11731                           	psect	text36
 11732  004882                     __ptext36:
 11733                           	opt stack 0
 11734  004882                     ___lwmod:
 11735                           	opt stack 24
 11736                           
 11737                           ; BSR set to: 0
 11738                           ;incstack = 0
 11739  004882  0100               	movlb	0	; () banked
 11740  004884  5162               	movf	___lwmod@divisor& (0+255),w,b
 11741  004886  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 11742  004888  B4D8               	btfsc	status,2,c
 11743  00488A  D018               	goto	l1536
 11744                           
 11745                           ; BSR set to: 0
 11746  00488C  0E01               	movlw	1
 11747  00488E  6F64               	movwf	___lwmod@counter& (0+255),b
 11748  004890  D004               	goto	l1531
 11749  004892                     
 11750                           ; BSR set to: 0
 11751                           
 11752                           ; BSR set to: 0
 11753  004892  90D8               	bcf	status,0,c
 11754  004894  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 11755  004896  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 11756  004898  2B64               	incf	___lwmod@counter& (0+255),f,b
 11757  00489A                     l1531:
 11758                           
 11759                           ; BSR set to: 0
 11760                           
 11761                           ; BSR set to: 0
 11762  00489A  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 11763  00489C  D7FA               	goto	l1532
 11764  00489E                     u9050:
 11765                           
 11766                           ; BSR set to: 0
 11767                           
 11768                           ; BSR set to: 0
 11769                           
 11770                           ; BSR set to: 0
 11771  00489E  5162               	movf	___lwmod@divisor& (0+255),w,b
 11772  0048A0  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 11773  0048A2  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 11774  0048A4  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 11775  0048A6  A0D8               	btfss	status,0,c
 11776  0048A8  D004               	goto	l1535
 11777                           
 11778                           ; BSR set to: 0
 11779  0048AA  5162               	movf	___lwmod@divisor& (0+255),w,b
 11780  0048AC  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 11781  0048AE  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 11782  0048B0  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 11783  0048B2                     l1535:
 11784                           
 11785                           ; BSR set to: 0
 11786                           
 11787                           ; BSR set to: 0
 11788  0048B2  90D8               	bcf	status,0,c
 11789  0048B4  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 11790  0048B6  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 11791                           
 11792                           ; BSR set to: 0
 11793  0048B8  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 11794  0048BA  D7F1               	goto	u9050
 11795  0048BC                     l1536:
 11796                           
 11797                           ; BSR set to: 0
 11798                           
 11799                           ; BSR set to: 0
 11800  0048BC  C060  F060         	movff	___lwmod@dividend,?___lwmod
 11801  0048C0  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 11802                           
 11803                           ; BSR set to: 0
 11804  0048C4  0012               	return		;funcret
 11805  0048C6                     __end_of___lwmod:
 11806                           	opt stack 0
 11807                           tblptru	equ	0xFF8
 11808                           tblptrh	equ	0xFF7
 11809                           tblptrl	equ	0xFF6
 11810                           tablat	equ	0xFF5
 11811                           prodh	equ	0xFF4
 11812                           prodl	equ	0xFF3
 11813                           intcon	equ	0xFF2
 11814                           intcon3	equ	0xFF0
 11815                           indf0	equ	0xFEF
 11816                           postinc0	equ	0xFEE
 11817                           plusw0	equ	0xFEB
 11818                           fsr0h	equ	0xFEA
 11819                           fsr0l	equ	0xFE9
 11820                           wreg	equ	0xFE8
 11821                           indf1	equ	0xFE7
 11822                           postinc1	equ	0xFE6
 11823                           postdec1	equ	0xFE5
 11824                           plusw1	equ	0xFE3
 11825                           fsr1h	equ	0xFE2
 11826                           fsr1l	equ	0xFE1
 11827                           indf2	equ	0xFDF
 11828                           postinc2	equ	0xFDE
 11829                           postdec2	equ	0xFDD
 11830                           plusw2	equ	0xFDB
 11831                           fsr2h	equ	0xFDA
 11832                           fsr2l	equ	0xFD9
 11833                           status	equ	0xFD8
 11834                           
 11835 ;; *************** function ___lwdiv *****************
 11836 ;; Defined at:
 11837 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 11838 ;; Parameters:    Size  Location     Type
 11839 ;;  dividend        2    0[BANK0 ] unsigned int 
 11840 ;;  divisor         2    2[BANK0 ] unsigned int 
 11841 ;; Auto vars:     Size  Location     Type
 11842 ;;  quotient        2    5[BANK0 ] unsigned int 
 11843 ;;  counter         1    4[BANK0 ] unsigned char 
 11844 ;; Return value:  Size  Location     Type
 11845 ;;                  2    0[BANK0 ] unsigned int 
 11846 ;; Registers used:
 11847 ;;		wreg, status,2, status,0
 11848 ;; Tracked objects:
 11849 ;;		On entry : 0/0
 11850 ;;		On exit  : 0/0
 11851 ;;		Unchanged: 0/0
 11852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11853 ;;      Params:         0       4       0       0       0       0       0       0       0
 11854 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11855 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11856 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11857 ;;Total ram usage:        7 bytes
 11858 ;; Hardware stack levels used:    1
 11859 ;; Hardware stack levels required when called:    4
 11860 ;; This function calls:
 11861 ;;		Nothing
 11862 ;; This function is called by:
 11863 ;;		_ipAdressToString
 11864 ;; This function uses a non-reentrant model
 11865 ;;
 11866                           
 11867                           	psect	text37
 11868  004668                     __ptext37:
 11869                           	opt stack 0
 11870  004668                     ___lwdiv:
 11871                           	opt stack 24
 11872                           
 11873                           ; BSR set to: 0
 11874                           ;incstack = 0
 11875  004668  0E00               	movlw	0
 11876  00466A  0100               	movlb	0	; () banked
 11877  00466C  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 11878  00466E  0E00               	movlw	0
 11879  004670  6F65               	movwf	___lwdiv@quotient& (0+255),b
 11880                           
 11881                           ; BSR set to: 0
 11882  004672  5162               	movf	___lwdiv@divisor& (0+255),w,b
 11883  004674  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 11884  004676  B4D8               	btfsc	status,2,c
 11885  004678  D01C               	goto	l1526
 11886                           
 11887                           ; BSR set to: 0
 11888  00467A  0E01               	movlw	1
 11889  00467C  6F64               	movwf	___lwdiv@counter& (0+255),b
 11890  00467E  D004               	goto	l1521
 11891  004680                     
 11892                           ; BSR set to: 0
 11893                           
 11894                           ; BSR set to: 0
 11895  004680  90D8               	bcf	status,0,c
 11896  004682  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 11897  004684  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 11898  004686  2B64               	incf	___lwdiv@counter& (0+255),f,b
 11899  004688                     l1521:
 11900                           
 11901                           ; BSR set to: 0
 11902                           
 11903                           ; BSR set to: 0
 11904  004688  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 11905  00468A  D7FA               	goto	l1522
 11906  00468C                     u9020:
 11907                           
 11908                           ; BSR set to: 0
 11909                           
 11910                           ; BSR set to: 0
 11911                           
 11912                           ; BSR set to: 0
 11913  00468C  90D8               	bcf	status,0,c
 11914  00468E  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 11915  004690  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 11916                           
 11917                           ; BSR set to: 0
 11918  004692  5162               	movf	___lwdiv@divisor& (0+255),w,b
 11919  004694  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 11920  004696  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11921  004698  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 11922  00469A  A0D8               	btfss	status,0,c
 11923  00469C  D005               	goto	l1525
 11924                           
 11925                           ; BSR set to: 0
 11926  00469E  5162               	movf	___lwdiv@divisor& (0+255),w,b
 11927  0046A0  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 11928  0046A2  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11929  0046A4  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 11930                           
 11931                           ; BSR set to: 0
 11932  0046A6  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 11933  0046A8                     l1525:
 11934                           
 11935                           ; BSR set to: 0
 11936                           
 11937                           ; BSR set to: 0
 11938  0046A8  90D8               	bcf	status,0,c
 11939  0046AA  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 11940  0046AC  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 11941                           
 11942                           ; BSR set to: 0
 11943  0046AE  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 11944  0046B0  D7ED               	goto	u9020
 11945  0046B2                     l1526:
 11946                           
 11947                           ; BSR set to: 0
 11948                           
 11949                           ; BSR set to: 0
 11950  0046B2  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 11951  0046B6  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11952                           
 11953                           ; BSR set to: 0
 11954  0046BA  0012               	return		;funcret
 11955  0046BC                     __end_of___lwdiv:
 11956                           	opt stack 0
 11957                           tblptru	equ	0xFF8
 11958                           tblptrh	equ	0xFF7
 11959                           tblptrl	equ	0xFF6
 11960                           tablat	equ	0xFF5
 11961                           prodh	equ	0xFF4
 11962                           prodl	equ	0xFF3
 11963                           intcon	equ	0xFF2
 11964                           intcon3	equ	0xFF0
 11965                           indf0	equ	0xFEF
 11966                           postinc0	equ	0xFEE
 11967                           plusw0	equ	0xFEB
 11968                           fsr0h	equ	0xFEA
 11969                           fsr0l	equ	0xFE9
 11970                           wreg	equ	0xFE8
 11971                           indf1	equ	0xFE7
 11972                           postinc1	equ	0xFE6
 11973                           postdec1	equ	0xFE5
 11974                           plusw1	equ	0xFE3
 11975                           fsr1h	equ	0xFE2
 11976                           fsr1l	equ	0xFE1
 11977                           indf2	equ	0xFDF
 11978                           postinc2	equ	0xFDE
 11979                           postdec2	equ	0xFDD
 11980                           plusw2	equ	0xFDB
 11981                           fsr2h	equ	0xFDA
 11982                           fsr2l	equ	0xFD9
 11983                           status	equ	0xFD8
 11984                           
 11985 ;; *************** function _ethernetController_getMacAddress *****************
 11986 ;; Defined at:
 11987 ;;		line 156 in file "src/enc424j600/ENC424J600.c"
 11988 ;; Parameters:    Size  Location     Type
 11989 ;;		None
 11990 ;; Auto vars:     Size  Location     Type
 11991 ;;  mac             6   20[BANK0 ] struct macaddress
 11992 ;; Return value:  Size  Location     Type
 11993 ;;                  6   14[BANK0 ] struct macaddress
 11994 ;; Registers used:
 11995 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 11996 ;; Tracked objects:
 11997 ;;		On entry : 0/0
 11998 ;;		On exit  : 0/0
 11999 ;;		Unchanged: 0/0
 12000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12001 ;;      Params:         0       6       0       0       0       0       0       0       0
 12002 ;;      Locals:         0       6       0       0       0       0       0       0       0
 12003 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12004 ;;      Totals:         0      12       0       0       0       0       0       0       0
 12005 ;;Total ram usage:       12 bytes
 12006 ;; Hardware stack levels used:    1
 12007 ;; Hardware stack levels required when called:    7
 12008 ;; This function calls:
 12009 ;;		_ENC424J600_readControlRegisterUnbanked
 12010 ;; This function is called by:
 12011 ;;		_main
 12012 ;;		_ARP_sendRequest
 12013 ;;		_ARP_sendReply
 12014 ;;		_ipv4_sendFrame
 12015 ;; This function uses a non-reentrant model
 12016 ;;
 12017                           
 12018                           	psect	text38
 12019  0042B0                     __ptext38:
 12020                           	opt stack 0
 12021  0042B0                     _ethernetController_getMacAddress:
 12022                           	opt stack 21
 12023                           
 12024                           ;ENC424J600.c: 157: macaddress_t mac;
 12025                           ;ENC424J600.c: 158: ENC424J600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 12026                           
 12027                           ; BSR set to: 0
 12028                           ;incstack = 0
 12029  0042B0  0E74               	movlw	low ethernetController_getMacAddress@mac
 12030  0042B2  0100               	movlb	0	; () banked
 12031  0042B4  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 12032  0042B6  0E00               	movlw	high ethernetController_getMacAddress@mac
 12033  0042B8  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 12034  0042BA  0E64               	movlw	100
 12035  0042BC  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 12036                           
 12037                           ;ENC424J600.c: 159: ENC424J600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 12038  0042C0  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 12039  0042C2  0100               	movlb	0	; () banked
 12040  0042C4  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 12041  0042C6  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 12042  0042C8  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 12043  0042CA  0E65               	movlw	101
 12044  0042CC  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 12045                           
 12046                           ;ENC424J600.c: 160: ENC424J600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 12047  0042D0  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 12048  0042D2  0100               	movlb	0	; () banked
 12049  0042D4  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 12050  0042D6  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 12051  0042D8  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 12052  0042DA  0E62               	movlw	98
 12053  0042DC  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 12054                           
 12055                           ;ENC424J600.c: 161: ENC424J600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 12056  0042E0  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 12057  0042E2  0100               	movlb	0	; () banked
 12058  0042E4  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 12059  0042E6  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 12060  0042E8  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 12061  0042EA  0E63               	movlw	99
 12062  0042EC  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 12063                           
 12064                           ;ENC424J600.c: 162: ENC424J600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 12065  0042F0  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 12066  0042F2  0100               	movlb	0	; () banked
 12067  0042F4  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 12068  0042F6  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 12069  0042F8  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 12070  0042FA  0E60               	movlw	96
 12071  0042FC  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 12072                           
 12073                           ;ENC424J600.c: 163: ENC424J600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 12074  004300  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 12075  004302  0100               	movlb	0	; () banked
 12076  004304  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 12077  004306  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 12078  004308  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 12079  00430A  0E61               	movlw	97
 12080  00430C  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 12081                           
 12082                           ;ENC424J600.c: 164: return mac;
 12083  004310  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 12084  004314  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 12085  004318  0E05               	movlw	5
 12086  00431A                     u9071:
 12087  00431A  CFDB FFEB          	movff	plusw2,plusw0
 12088  00431E  06E8               	decf	wreg,f,c
 12089  004320  E2FC               	bc	u9071
 12090  004322  0012               	return	
 12091  004324                     __end_of_ethernetController_getMacAddress:
 12092                           	opt stack 0
 12093                           tblptru	equ	0xFF8
 12094                           tblptrh	equ	0xFF7
 12095                           tblptrl	equ	0xFF6
 12096                           tablat	equ	0xFF5
 12097                           prodh	equ	0xFF4
 12098                           prodl	equ	0xFF3
 12099                           intcon	equ	0xFF2
 12100                           intcon3	equ	0xFF0
 12101                           indf0	equ	0xFEF
 12102                           postinc0	equ	0xFEE
 12103                           plusw0	equ	0xFEB
 12104                           fsr0h	equ	0xFEA
 12105                           fsr0l	equ	0xFE9
 12106                           wreg	equ	0xFE8
 12107                           indf1	equ	0xFE7
 12108                           postinc1	equ	0xFE6
 12109                           postdec1	equ	0xFE5
 12110                           plusw1	equ	0xFE3
 12111                           fsr1h	equ	0xFE2
 12112                           fsr1l	equ	0xFE1
 12113                           indf2	equ	0xFDF
 12114                           postinc2	equ	0xFDE
 12115                           postdec2	equ	0xFDD
 12116                           plusw2	equ	0xFDB
 12117                           fsr2h	equ	0xFDA
 12118                           fsr2l	equ	0xFD9
 12119                           status	equ	0xFD8
 12120                           
 12121 ;; *************** function _ARP_send *****************
 12122 ;; Defined at:
 12123 ;;		line 137 in file "src/stack/protocols/arp.c"
 12124 ;; Parameters:    Size  Location     Type
 12125 ;;  arp            32   71[BANK0 ] struct ARP_message
 12126 ;; Auto vars:     Size  Location     Type
 12127 ;;  i               1  112[BANK0 ] unsigned char 
 12128 ;;  i               1  111[BANK0 ] unsigned char 
 12129 ;;  i               1  110[BANK0 ] unsigned char 
 12130 ;;  i               1  109[BANK0 ] unsigned char 
 12131 ;;  ethFrame       34  113[BANK0 ] struct ethernetFrame
 12132 ;;  field           9  147[BANK0 ] struct memoryField
 12133 ;;  destination     6  103[BANK0 ] struct macaddress
 12134 ;; Return value:  Size  Location     Type
 12135 ;;                  1    wreg      void 
 12136 ;; Registers used:
 12137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12138 ;; Tracked objects:
 12139 ;;		On entry : 0/0
 12140 ;;		On exit  : 0/0
 12141 ;;		Unchanged: 0/0
 12142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12143 ;;      Params:         0      32       0       0       0       0       0       0       0
 12144 ;;      Locals:         0      53       0       0       0       0       0       0       0
 12145 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12146 ;;      Totals:         0      85       0       0       0       0       0       0       0
 12147 ;;Total ram usage:       85 bytes
 12148 ;; Hardware stack levels used:    1
 12149 ;; Hardware stack levels required when called:    9
 12150 ;; This function calls:
 12151 ;;		_UARTTransmitText
 12152 ;;		_ethernetController_getSourceMACAddress
 12153 ;;		_ethernetController_sendPacket
 12154 ;;		_ethernetController_streamToTransmitBuffer
 12155 ;;		_ethernet_txFrameRequest
 12156 ;;		_hexToString
 12157 ;;		_mac_setToBroadcast
 12158 ;; This function is called by:
 12159 ;;		_ARP_sendRequest
 12160 ;;		_ARP_sendReply
 12161 ;; This function uses a non-reentrant model
 12162 ;;
 12163                           
 12164                           	psect	text39
 12165  001972                     __ptext39:
 12166                           	opt stack 0
 12167  001972                     _ARP_send:
 12168                           	opt stack 18
 12169                           
 12170                           ;arp.c: 138: memoryField_t field;
 12171                           ;arp.c: 139: macaddress_t destination;
 12172                           ;arp.c: 140: ethernetFrame_t ethFrame;
 12173                           ;arp.c: 141: mac_setToBroadcast(&destination);
 12174                           
 12175                           ;incstack = 0
 12176  001972  0EC7               	movlw	low ARP_send@destination
 12177  001974  0100               	movlb	0	; () banked
 12178  001976  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 12179  001978  0E00               	movlw	high ARP_send@destination
 12180  00197A  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 12181  00197C  EC58  F026         	call	_mac_setToBroadcast	;wreg free
 12182                           
 12183                           ;arp.c: 143: ethFrame.length = 36;
 12184  001980  0E00               	movlw	0
 12185  001982  0100               	movlb	0	; () banked
 12186  001984  6FD2               	movwf	(ARP_send@ethFrame+1)& (0+255),b
 12187  001986  0E24               	movlw	36
 12188  001988  6FD1               	movwf	ARP_send@ethFrame& (0+255),b
 12189                           
 12190                           ; BSR set to: 0
 12191                           ;arp.c: 144: ethFrame.destination = arp.targetMACAddress;
 12192  00198A  EE20  F0B9         	lfsr	2,ARP_send@arp+18
 12193  00198E  EE10  F0D9         	lfsr	1,ARP_send@ethFrame+8
 12194  001992  0E05               	movlw	5
 12195  001994                     u9361:
 12196  001994  CFDB FFE3          	movff	plusw2,plusw1
 12197  001998  06E8               	decf	wreg,f,c
 12198  00199A  E2FC               	bc	u9361
 12199                           
 12200                           ; BSR set to: 0
 12201                           ;arp.c: 145: ethFrame.source = ethernetController_getSourceMACAddress(field);
 12202  00199C  EE20  F0F3         	lfsr	2,ARP_send@field
 12203  0019A0  EE00  F06F         	lfsr	0,ethernetController_getSourceMACAddress@field
 12204  0019A4  0E08               	movlw	8
 12205  0019A6                     u9371:
 12206  0019A6  CFDB FFEB          	movff	plusw2,plusw0
 12207  0019AA  06E8               	decf	wreg,f,c
 12208  0019AC  E2FC               	bc	u9371
 12209  0019AE  EC03  F022         	call	_ethernetController_getSourceMACAddress	;wreg free
 12210  0019B2  EE20  F0D3         	lfsr	2,ARP_send@ethFrame+2
 12211  0019B6  0E05               	movlw	5
 12212  0019B8                     u9381:
 12213  0019B8  CFEB FFDB          	movff	plusw0,plusw2
 12214  0019BC  06E8               	decf	wreg,f,c
 12215  0019BE  E2FC               	bc	u9381
 12216                           
 12217                           ;arp.c: 146: ethFrame.ethertype = ETHERTYPE_ARP;
 12218  0019C0  0E08               	movlw	8
 12219  0019C2  0100               	movlb	0	; () banked
 12220  0019C4  6FE0               	movwf	(ARP_send@ethFrame+15)& (0+255),b
 12221  0019C6  0E06               	movlw	6
 12222  0019C8  6FDF               	movwf	(ARP_send@ethFrame+14)& (0+255),b
 12223                           
 12224                           ; BSR set to: 0
 12225                           ;arp.c: 148: ethernet_txFrameRequest(&ethFrame);
 12226  0019CA  0ED1               	movlw	low ARP_send@ethFrame
 12227  0019CC  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 12228  0019CE  0E00               	movlw	high ARP_send@ethFrame
 12229  0019D0  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 12230  0019D2  EC5E  F01B         	call	_ethernet_txFrameRequest	;wreg free
 12231                           
 12232                           ;arp.c: 150: if (ethFrame.memory.fOutOfMemory) {
 12233  0019D6  0100               	movlb	0	; () banked
 12234  0019D8  51E8               	movf	(ARP_send@ethFrame+23)& (0+255),w,b
 12235  0019DA  A4D8               	btfss	status,2,c
 12236  0019DC  0012               	return	
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;arp.c: 152: }
 12240                           ;arp.c: 154: field.start = ethFrame.memory.start + 8;
 12241                           
 12242                           ; BSR set to: 0
 12243                           
 12244                           ; BSR set to: 0
 12245                           ;arp.c: 151: return;
 12246  0019DE  0E08               	movlw	8
 12247  0019E0  25E1               	addwf	(ARP_send@ethFrame+16)& (0+255),w,b
 12248  0019E2  6FF3               	movwf	ARP_send@field& (0+255),b
 12249  0019E4  0E00               	movlw	0
 12250  0019E6  21E2               	addwfc	(ARP_send@ethFrame+17)& (0+255),w,b
 12251  0019E8  6FF4               	movwf	(ARP_send@field+1)& (0+255),b
 12252                           
 12253                           ; BSR set to: 0
 12254                           ;arp.c: 155: field.end = ethFrame.memory.end;
 12255  0019EA  C0E3  F0F5         	movff	ARP_send@ethFrame+18,ARP_send@field+2
 12256  0019EE  C0E4  F0F6         	movff	ARP_send@ethFrame+19,ARP_send@field+3
 12257                           
 12258                           ; BSR set to: 0
 12259                           ;arp.c: 156: field.length = 28;
 12260  0019F2  0E00               	movlw	0
 12261  0019F4  6FF8               	movwf	(ARP_send@field+5)& (0+255),b
 12262  0019F6  0E1C               	movlw	28
 12263  0019F8  6FF7               	movwf	(ARP_send@field+4)& (0+255),b
 12264                           
 12265                           ; BSR set to: 0
 12266                           ;arp.c: 158: UARTTransmitText(hexToString(field.start));
 12267  0019FA  C0F3  F061         	movff	ARP_send@field,hexToString@val
 12268  0019FE  C0F4  F062         	movff	ARP_send@field+1,hexToString@val+1
 12269  001A02  6B63               	clrf	(hexToString@val+2)& (0+255),b
 12270  001A04  6B64               	clrf	(hexToString@val+3)& (0+255),b
 12271  001A06  EC70  F01A         	call	_hexToString	;wreg free
 12272  001A0A  C061  F098         	movff	?_hexToString,UARTTransmitText@str
 12273  001A0E  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
 12274  001A12  EC09  F023         	call	_UARTTransmitText	;wreg free
 12275                           
 12276                           ;arp.c: 159: UARTTransmitText(", ");
 12277  001A16  0E40               	movlw	low (STR_45+17)
 12278  001A18  0100               	movlb	0	; () banked
 12279  001A1A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 12280  001A1C  0E7E               	movlw	high (STR_45+17)
 12281  001A1E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 12282  001A20  EC09  F023         	call	_UARTTransmitText	;wreg free
 12283                           
 12284                           ;arp.c: 160: UARTTransmitText(hexToString(field.end));
 12285  001A24  C0F5  F061         	movff	ARP_send@field+2,hexToString@val
 12286  001A28  C0F6  F062         	movff	ARP_send@field+3,hexToString@val+1
 12287  001A2C  0100               	movlb	0	; () banked
 12288  001A2E  6B63               	clrf	(hexToString@val+2)& (0+255),b
 12289  001A30  6B64               	clrf	(hexToString@val+3)& (0+255),b
 12290  001A32  EC70  F01A         	call	_hexToString	;wreg free
 12291  001A36  C061  F098         	movff	?_hexToString,UARTTransmitText@str
 12292  001A3A  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
 12293  001A3E  EC09  F023         	call	_UARTTransmitText	;wreg free
 12294                           
 12295                           ;arp.c: 161: UARTTransmitText("\n\r");
 12296  001A42  0EC2               	movlw	low (STR_25+46)
 12297  001A44  0100               	movlb	0	; () banked
 12298  001A46  6F98               	movwf	UARTTransmitText@str& (0+255),b
 12299  001A48  0E7C               	movlw	high (STR_25+46)
 12300  001A4A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 12301  001A4C  EC09  F023         	call	_UARTTransmitText	;wreg free
 12302                           
 12303                           ;arp.c: 164: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field)
      +                          ;
 12304  001A50  EE20  F0F3         	lfsr	2,ARP_send@field
 12305  001A54  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12306  001A58  0E08               	movlw	8
 12307  001A5A                     u9401:
 12308  001A5A  CFDB FFEB          	movff	plusw2,plusw0
 12309  001A5E  06E8               	decf	wreg,f,c
 12310  001A60  E2FC               	bc	u9401
 12311  001A62  0100               	movlb	0	; () banked
 12312  001A64  51A8               	movf	(ARP_send@arp+1)& (0+255),w,b
 12313  001A66  ECE2  F020         	call	_ethernetController_streamToTransmitBuffer
 12314                           
 12315                           ;arp.c: 165: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field);
 12316  001A6A  EE20  F0F3         	lfsr	2,ARP_send@field
 12317  001A6E  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12318  001A72  0E08               	movlw	8
 12319  001A74                     u9411:
 12320  001A74  CFDB FFEB          	movff	plusw2,plusw0
 12321  001A78  06E8               	decf	wreg,f,c
 12322  001A7A  E2FC               	bc	u9411
 12323  001A7C  0100               	movlb	0	; () banked
 12324  001A7E  51A7               	movf	ARP_send@arp& (0+255),w,b
 12325  001A80  ECE2  F020         	call	_ethernetController_streamToTransmitBuffer
 12326                           
 12327                           ;arp.c: 166: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field)
      +                          ;
 12328  001A84  EE20  F0F3         	lfsr	2,ARP_send@field
 12329  001A88  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12330  001A8C  0E08               	movlw	8
 12331  001A8E                     u9421:
 12332  001A8E  CFDB FFEB          	movff	plusw2,plusw0
 12333  001A92  06E8               	decf	wreg,f,c
 12334  001A94  E2FC               	bc	u9421
 12335  001A96  0100               	movlb	0	; () banked
 12336  001A98  51AA               	movf	(ARP_send@arp+3)& (0+255),w,b
 12337  001A9A  ECE2  F020         	call	_ethernetController_streamToTransmitBuffer
 12338                           
 12339                           ;arp.c: 167: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field);
 12340  001A9E  EE20  F0F3         	lfsr	2,ARP_send@field
 12341  001AA2  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12342  001AA6  0E08               	movlw	8
 12343  001AA8                     u9431:
 12344  001AA8  CFDB FFEB          	movff	plusw2,plusw0
 12345  001AAC  06E8               	decf	wreg,f,c
 12346  001AAE  E2FC               	bc	u9431
 12347  001AB0  0100               	movlb	0	; () banked
 12348  001AB2  51A9               	movf	(ARP_send@arp+2)& (0+255),w,b
 12349  001AB4  ECE2  F020         	call	_ethernetController_streamToTransmitBuffer
 12350                           
 12351                           ;arp.c: 168: ethernetController_streamToTransmitBuffer(arp.hlen, field);
 12352  001AB8  EE20  F0F3         	lfsr	2,ARP_send@field
 12353  001ABC  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12354  001AC0  0E08               	movlw	8
 12355  001AC2                     u9441:
 12356  001AC2  CFDB FFEB          	movff	plusw2,plusw0
 12357  001AC6  06E8               	decf	wreg,f,c
 12358  001AC8  E2FC               	bc	u9441
 12359  001ACA  0100               	movlb	0	; () banked
 12360  001ACC  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 12361  001ACE  ECE2  F020         	call	_ethernetController_streamToTransmitBuffer
 12362                           
 12363                           ;arp.c: 169: ethernetController_streamToTransmitBuffer(arp.plen, field);
 12364  001AD2  EE20  F0F3         	lfsr	2,ARP_send@field
 12365  001AD6  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12366  001ADA  0E08               	movlw	8
 12367  001ADC                     u9451:
 12368  001ADC  CFDB FFEB          	movff	plusw2,plusw0
 12369  001AE0  06E8               	decf	wreg,f,c
 12370  001AE2  E2FC               	bc	u9451
 12371  001AE4  0100               	movlb	0	; () banked
 12372  001AE6  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 12373  001AE8  ECE2  F020         	call	_ethernetController_streamToTransmitBuffer
 12374                           
 12375                           ;arp.c: 170: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld);
 12376  001AEC  EE20  F0F3         	lfsr	2,ARP_send@field
 12377  001AF0  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12378  001AF4  0E08               	movlw	8
 12379  001AF6                     u9461:
 12380  001AF6  CFDB FFEB          	movff	plusw2,plusw0
 12381  001AFA  06E8               	decf	wreg,f,c
 12382  001AFC  E2FC               	bc	u9461
 12383  001AFE  0100               	movlb	0	; () banked
 12384  001B00  51AE               	movf	(ARP_send@arp+7)& (0+255),w,b
 12385  001B02  ECE2  F020         	call	_ethernetController_streamToTransmitBuffer
 12386                           
 12387                           ;arp.c: 171: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field);
 12388  001B06  EE20  F0F3         	lfsr	2,ARP_send@field
 12389  001B0A  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12390  001B0E  0E08               	movlw	8
 12391  001B10                     u9471:
 12392  001B10  CFDB FFEB          	movff	plusw2,plusw0
 12393  001B14  06E8               	decf	wreg,f,c
 12394  001B16  E2FC               	bc	u9471
 12395  001B18  0100               	movlb	0	; () banked
 12396  001B1A  51AD               	movf	(ARP_send@arp+6)& (0+255),w,b
 12397  001B1C  ECE2  F020         	call	_ethernetController_streamToTransmitBuffer
 12398                           
 12399                           ;arp.c: 172: for (uint8_t i = 0; i < arp.hlen; i++)
 12400  001B20  0E00               	movlw	0
 12401  001B22  0100               	movlb	0	; () banked
 12402  001B24  6FCD               	movwf	ARP_send@i& (0+255),b
 12403  001B26  D01A               	goto	l936
 12404  001B28                     
 12405                           ; BSR set to: 0
 12406                           ;arp.c: 173: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field);
 12407                           
 12408                           ; BSR set to: 0
 12409  001B28  EE20  F0F3         	lfsr	2,ARP_send@field
 12410  001B2C  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12411  001B30  0E08               	movlw	8
 12412  001B32                     u9481:
 12413  001B32  CFDB FFEB          	movff	plusw2,plusw0
 12414  001B36  06E8               	decf	wreg,f,c
 12415  001B38  E2FC               	bc	u9481
 12416  001B3A  51CD               	movf	ARP_send@i& (0+255),w,b
 12417  001B3C  0D01               	mullw	1
 12418  001B3E  0E08               	movlw	8
 12419  001B40  26F3               	addwf	prodl,f,c
 12420  001B42  0E00               	movlw	0
 12421  001B44  22F4               	addwfc	prodh,f,c
 12422  001B46  0EA7               	movlw	low ARP_send@arp
 12423  001B48  24F3               	addwf	prodl,w,c
 12424  001B4A  6ED9               	movwf	fsr2l,c
 12425  001B4C  0E00               	movlw	high ARP_send@arp
 12426  001B4E  20F4               	addwfc	prodh,w,c
 12427  001B50  6EDA               	movwf	fsr2h,c
 12428  001B52  50DF               	movf	indf2,w,c
 12429  001B54  ECE2  F020         	call	_ethernetController_streamToTransmitBuffer
 12430  001B58  0100               	movlb	0	; () banked
 12431  001B5A  2BCD               	incf	ARP_send@i& (0+255),f,b
 12432  001B5C                     l936:
 12433                           
 12434                           ; BSR set to: 0
 12435                           
 12436                           ; BSR set to: 0
 12437  001B5C  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 12438  001B5E  5DCD               	subwf	ARP_send@i& (0+255),w,b
 12439  001B60  A0D8               	btfss	status,0,c
 12440  001B62  D7E2               	goto	l937
 12441                           
 12442                           ; BSR set to: 0
 12443                           ;arp.c: 174: for (uint8_t i = 0; i < arp.plen; i++)
 12444                           
 12445                           ; BSR set to: 0
 12446  001B64  0E00               	movlw	0
 12447  001B66  6FCE               	movwf	ARP_send@i_3048& (0+255),b
 12448  001B68  D01A               	goto	l939
 12449  001B6A                     
 12450                           ; BSR set to: 0
 12451                           ;arp.c: 175: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield);
 12452                           
 12453                           ; BSR set to: 0
 12454  001B6A  EE20  F0F3         	lfsr	2,ARP_send@field
 12455  001B6E  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12456  001B72  0E08               	movlw	8
 12457  001B74                     u9501:
 12458  001B74  CFDB FFEB          	movff	plusw2,plusw0
 12459  001B78  06E8               	decf	wreg,f,c
 12460  001B7A  E2FC               	bc	u9501
 12461  001B7C  51CE               	movf	ARP_send@i_3048& (0+255),w,b
 12462  001B7E  0D01               	mullw	1
 12463  001B80  0E0E               	movlw	14
 12464  001B82  26F3               	addwf	prodl,f,c
 12465  001B84  0E00               	movlw	0
 12466  001B86  22F4               	addwfc	prodh,f,c
 12467  001B88  0EA7               	movlw	low ARP_send@arp
 12468  001B8A  24F3               	addwf	prodl,w,c
 12469  001B8C  6ED9               	movwf	fsr2l,c
 12470  001B8E  0E00               	movlw	high ARP_send@arp
 12471  001B90  20F4               	addwfc	prodh,w,c
 12472  001B92  6EDA               	movwf	fsr2h,c
 12473  001B94  50DF               	movf	indf2,w,c
 12474  001B96  ECE2  F020         	call	_ethernetController_streamToTransmitBuffer
 12475  001B9A  0100               	movlb	0	; () banked
 12476  001B9C  2BCE               	incf	ARP_send@i_3048& (0+255),f,b
 12477  001B9E                     l939:
 12478                           
 12479                           ; BSR set to: 0
 12480                           
 12481                           ; BSR set to: 0
 12482  001B9E  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 12483  001BA0  5DCE               	subwf	ARP_send@i_3048& (0+255),w,b
 12484  001BA2  A0D8               	btfss	status,0,c
 12485  001BA4  D7E2               	goto	l940
 12486                           
 12487                           ; BSR set to: 0
 12488                           ;arp.c: 176: for (uint8_t i = 0; i < arp.hlen; i++)
 12489                           
 12490                           ; BSR set to: 0
 12491  001BA6  0E00               	movlw	0
 12492  001BA8  6FCF               	movwf	ARP_send@i_3049& (0+255),b
 12493  001BAA  D01A               	goto	l942
 12494  001BAC                     
 12495                           ; BSR set to: 0
 12496                           ;arp.c: 177: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field);
 12497                           
 12498                           ; BSR set to: 0
 12499  001BAC  EE20  F0F3         	lfsr	2,ARP_send@field
 12500  001BB0  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12501  001BB4  0E08               	movlw	8
 12502  001BB6                     u9521:
 12503  001BB6  CFDB FFEB          	movff	plusw2,plusw0
 12504  001BBA  06E8               	decf	wreg,f,c
 12505  001BBC  E2FC               	bc	u9521
 12506  001BBE  51CF               	movf	ARP_send@i_3049& (0+255),w,b
 12507  001BC0  0D01               	mullw	1
 12508  001BC2  0E12               	movlw	18
 12509  001BC4  26F3               	addwf	prodl,f,c
 12510  001BC6  0E00               	movlw	0
 12511  001BC8  22F4               	addwfc	prodh,f,c
 12512  001BCA  0EA7               	movlw	low ARP_send@arp
 12513  001BCC  24F3               	addwf	prodl,w,c
 12514  001BCE  6ED9               	movwf	fsr2l,c
 12515  001BD0  0E00               	movlw	high ARP_send@arp
 12516  001BD2  20F4               	addwfc	prodh,w,c
 12517  001BD4  6EDA               	movwf	fsr2h,c
 12518  001BD6  50DF               	movf	indf2,w,c
 12519  001BD8  ECE2  F020         	call	_ethernetController_streamToTransmitBuffer
 12520  001BDC  0100               	movlb	0	; () banked
 12521  001BDE  2BCF               	incf	ARP_send@i_3049& (0+255),f,b
 12522  001BE0                     l942:
 12523                           
 12524                           ; BSR set to: 0
 12525                           
 12526                           ; BSR set to: 0
 12527  001BE0  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 12528  001BE2  5DCF               	subwf	ARP_send@i_3049& (0+255),w,b
 12529  001BE4  A0D8               	btfss	status,0,c
 12530  001BE6  D7E2               	goto	l943
 12531                           
 12532                           ; BSR set to: 0
 12533                           ;arp.c: 179: for (uint8_t i = 0; i < arp.plen; i++)
 12534                           
 12535                           ; BSR set to: 0
 12536  001BE8  0E00               	movlw	0
 12537  001BEA  6FD0               	movwf	ARP_send@i_3050& (0+255),b
 12538  001BEC  D01A               	goto	l945
 12539  001BEE                     
 12540                           ; BSR set to: 0
 12541                           ;arp.c: 180: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield);
 12542                           
 12543                           ; BSR set to: 0
 12544  001BEE  EE20  F0F3         	lfsr	2,ARP_send@field
 12545  001BF2  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12546  001BF6  0E08               	movlw	8
 12547  001BF8                     u9541:
 12548  001BF8  CFDB FFEB          	movff	plusw2,plusw0
 12549  001BFC  06E8               	decf	wreg,f,c
 12550  001BFE  E2FC               	bc	u9541
 12551  001C00  51D0               	movf	ARP_send@i_3050& (0+255),w,b
 12552  001C02  0D01               	mullw	1
 12553  001C04  0E18               	movlw	24
 12554  001C06  26F3               	addwf	prodl,f,c
 12555  001C08  0E00               	movlw	0
 12556  001C0A  22F4               	addwfc	prodh,f,c
 12557  001C0C  0EA7               	movlw	low ARP_send@arp
 12558  001C0E  24F3               	addwf	prodl,w,c
 12559  001C10  6ED9               	movwf	fsr2l,c
 12560  001C12  0E00               	movlw	high ARP_send@arp
 12561  001C14  20F4               	addwfc	prodh,w,c
 12562  001C16  6EDA               	movwf	fsr2h,c
 12563  001C18  50DF               	movf	indf2,w,c
 12564  001C1A  ECE2  F020         	call	_ethernetController_streamToTransmitBuffer
 12565  001C1E  0100               	movlb	0	; () banked
 12566  001C20  2BD0               	incf	ARP_send@i_3050& (0+255),f,b
 12567  001C22                     l945:
 12568                           
 12569                           ; BSR set to: 0
 12570                           
 12571                           ; BSR set to: 0
 12572  001C22  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 12573  001C24  5DD0               	subwf	ARP_send@i_3050& (0+255),w,b
 12574  001C26  A0D8               	btfss	status,0,c
 12575  001C28  D7E2               	goto	l946
 12576                           
 12577                           ; BSR set to: 0
 12578                           ;arp.c: 182: ethernetController_sendPacket(ethFrame.memory);
 12579                           
 12580                           ; BSR set to: 0
 12581  001C2A  EE20  F0E1         	lfsr	2,ARP_send@ethFrame+16
 12582  001C2E  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 12583  001C32  0E08               	movlw	8
 12584  001C34                     u9561:
 12585  001C34  CFDB FFEB          	movff	plusw2,plusw0
 12586  001C38  06E8               	decf	wreg,f,c
 12587  001C3A  E2FC               	bc	u9561
 12588  001C3C  EC30  F026         	call	_ethernetController_sendPacket	;wreg free
 12589  001C40  0012               	return		;funcret
 12590  001C42                     __end_of_ARP_send:
 12591                           	opt stack 0
 12592                           tblptru	equ	0xFF8
 12593                           tblptrh	equ	0xFF7
 12594                           tblptrl	equ	0xFF6
 12595                           tablat	equ	0xFF5
 12596                           prodh	equ	0xFF4
 12597                           prodl	equ	0xFF3
 12598                           intcon	equ	0xFF2
 12599                           intcon3	equ	0xFF0
 12600                           indf0	equ	0xFEF
 12601                           postinc0	equ	0xFEE
 12602                           plusw0	equ	0xFEB
 12603                           fsr0h	equ	0xFEA
 12604                           fsr0l	equ	0xFE9
 12605                           wreg	equ	0xFE8
 12606                           indf1	equ	0xFE7
 12607                           postinc1	equ	0xFE6
 12608                           postdec1	equ	0xFE5
 12609                           plusw1	equ	0xFE3
 12610                           fsr1h	equ	0xFE2
 12611                           fsr1l	equ	0xFE1
 12612                           indf2	equ	0xFDF
 12613                           postinc2	equ	0xFDE
 12614                           postdec2	equ	0xFDD
 12615                           plusw2	equ	0xFDB
 12616                           fsr2h	equ	0xFDA
 12617                           fsr2l	equ	0xFD9
 12618                           status	equ	0xFD8
 12619                           
 12620 ;; *************** function _mac_setToBroadcast *****************
 12621 ;; Defined at:
 12622 ;;		line 26 in file "src/eth/mac.c"
 12623 ;; Parameters:    Size  Location     Type
 12624 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 12625 ;;		 -> ARP_send@destination(6), 
 12626 ;; Auto vars:     Size  Location     Type
 12627 ;;  i               1    2[BANK0 ] unsigned char 
 12628 ;; Return value:  Size  Location     Type
 12629 ;;                  1    wreg      void 
 12630 ;; Registers used:
 12631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12632 ;; Tracked objects:
 12633 ;;		On entry : 0/0
 12634 ;;		On exit  : 0/0
 12635 ;;		Unchanged: 0/0
 12636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12637 ;;      Params:         0       2       0       0       0       0       0       0       0
 12638 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12639 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12640 ;;      Totals:         0       3       0       0       0       0       0       0       0
 12641 ;;Total ram usage:        3 bytes
 12642 ;; Hardware stack levels used:    1
 12643 ;; Hardware stack levels required when called:    4
 12644 ;; This function calls:
 12645 ;;		Nothing
 12646 ;; This function is called by:
 12647 ;;		_ARP_send
 12648 ;; This function uses a non-reentrant model
 12649 ;;
 12650                           
 12651                           	psect	text40
 12652  004CB0                     __ptext40:
 12653                           	opt stack 0
 12654  004CB0                     _mac_setToBroadcast:
 12655                           	opt stack 22
 12656                           
 12657                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 12658                           
 12659                           ;incstack = 0
 12660  004CB0  0E00               	movlw	0
 12661  004CB2  0100               	movlb	0	; () banked
 12662  004CB4  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 12663  004CB6                     l7747:
 12664                           
 12665                           ; BSR set to: 0
 12666  004CB6  0E05               	movlw	5
 12667  004CB8  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 12668  004CBA  D001               	goto	l377
 12669  004CBC  0012               	return	
 12670  004CBE                     l377:
 12671                           
 12672                           ; BSR set to: 0
 12673                           ;mac.c: 28: mac->address[i] = 0xff;
 12674                           
 12675                           ; BSR set to: 0
 12676  004CBE  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 12677  004CC0  0D01               	mullw	1
 12678  004CC2  50F3               	movf	prodl,w,c
 12679  004CC4  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 12680  004CC6  6ED9               	movwf	fsr2l,c
 12681  004CC8  50F4               	movf	prodh,w,c
 12682  004CCA  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 12683  004CCC  6EDA               	movwf	fsr2h,c
 12684  004CCE  0EFF               	movlw	255
 12685  004CD0  6EDF               	movwf	indf2,c
 12686                           
 12687                           ; BSR set to: 0
 12688  004CD2  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 12689  004CD4  D7F0               	goto	l7747
 12690  004CD6                     __end_of_mac_setToBroadcast:
 12691                           	opt stack 0
 12692                           tblptru	equ	0xFF8
 12693                           tblptrh	equ	0xFF7
 12694                           tblptrl	equ	0xFF6
 12695                           tablat	equ	0xFF5
 12696                           prodh	equ	0xFF4
 12697                           prodl	equ	0xFF3
 12698                           intcon	equ	0xFF2
 12699                           intcon3	equ	0xFF0
 12700                           indf0	equ	0xFEF
 12701                           postinc0	equ	0xFEE
 12702                           plusw0	equ	0xFEB
 12703                           fsr0h	equ	0xFEA
 12704                           fsr0l	equ	0xFE9
 12705                           wreg	equ	0xFE8
 12706                           indf1	equ	0xFE7
 12707                           postinc1	equ	0xFE6
 12708                           postdec1	equ	0xFE5
 12709                           plusw1	equ	0xFE3
 12710                           fsr1h	equ	0xFE2
 12711                           fsr1l	equ	0xFE1
 12712                           indf2	equ	0xFDF
 12713                           postinc2	equ	0xFDE
 12714                           postdec2	equ	0xFDD
 12715                           plusw2	equ	0xFDB
 12716                           fsr2h	equ	0xFDA
 12717                           fsr2l	equ	0xFD9
 12718                           status	equ	0xFD8
 12719                           
 12720 ;; *************** function _hexToString *****************
 12721 ;; Defined at:
 12722 ;;		line 133 in file "src/system/uart.c"
 12723 ;; Parameters:    Size  Location     Type
 12724 ;;  val             4    1[BANK0 ] unsigned long 
 12725 ;; Auto vars:     Size  Location     Type
 12726 ;;  pointer         1    9[BANK0 ] unsigned char 
 12727 ;; Return value:  Size  Location     Type
 12728 ;;                  2    1[BANK0 ] PTR unsigned char 
 12729 ;; Registers used:
 12730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12731 ;; Tracked objects:
 12732 ;;		On entry : 0/0
 12733 ;;		On exit  : 0/0
 12734 ;;		Unchanged: 0/0
 12735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12736 ;;      Params:         0       4       0       0       0       0       0       0       0
 12737 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12738 ;;      Temps:          0       4       0       0       0       0       0       0       0
 12739 ;;      Totals:         0       9       0       0       0       0       0       0       0
 12740 ;;Total ram usage:        9 bytes
 12741 ;; Hardware stack levels used:    1
 12742 ;; Hardware stack levels required when called:    5
 12743 ;; This function calls:
 12744 ;;		_hexToChar
 12745 ;; This function is called by:
 12746 ;;		_main
 12747 ;;		_ARP_send
 12748 ;;		_ipv4_checkHeaderChecksum
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           	psect	text41
 12753  0034E0                     __ptext41:
 12754                           	opt stack 0
 12755  0034E0                     _hexToString:
 12756                           	opt stack 25
 12757                           
 12758                           ;uart.c: 134: char static number [10];
 12759                           ;uart.c: 135: uint8_t pointer = 0;
 12760                           
 12761                           ; BSR set to: 0
 12762                           ;incstack = 0
 12763  0034E0  0E00               	movlw	0
 12764  0034E2  0100               	movlb	0	; () banked
 12765  0034E4  6F69               	movwf	hexToString@pointer& (0+255),b
 12766                           
 12767                           ; BSR set to: 0
 12768                           ;uart.c: 136: if (val > 0xff) {
 12769  0034E6  5164               	movf	(hexToString@val+3)& (0+255),w,b
 12770  0034E8  1163               	iorwf	(hexToString@val+2)& (0+255),w,b
 12771  0034EA  E103               	bnz	u8980
 12772  0034EC  0562               	decf	(hexToString@val+1)& (0+255),w,b
 12773  0034EE  A0D8               	btfss	status,0,c
 12774  0034F0  D02F               	goto	l789
 12775  0034F2                     u8980:
 12776                           
 12777                           ; BSR set to: 0
 12778                           ;uart.c: 137: number[pointer++] = hexToChar((val >> 12) & 0xf);
 12779  0034F2  5169               	movf	hexToString@pointer& (0+255),w,b
 12780  0034F4  0D01               	mullw	1
 12781  0034F6  0E9B               	movlw	low hexToString@number
 12782  0034F8  24F3               	addwf	prodl,w,c
 12783  0034FA  6ED9               	movwf	fsr2l,c
 12784  0034FC  0E01               	movlw	high hexToString@number
 12785  0034FE  20F4               	addwfc	prodh,w,c
 12786  003500  6EDA               	movwf	fsr2h,c
 12787  003502  C061  F065         	movff	hexToString@val,??_hexToString
 12788  003506  C062  F066         	movff	hexToString@val+1,??_hexToString+1
 12789  00350A  C063  F067         	movff	hexToString@val+2,??_hexToString+2
 12790  00350E  C064  F068         	movff	hexToString@val+3,??_hexToString+3
 12791  003512  0E0D               	movlw	13
 12792  003514  D005               	goto	u8990
 12793  003516                     u8995:
 12794  003516  90D8               	bcf	status,0,c
 12795  003518  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
 12796  00351A  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
 12797  00351C  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
 12798  00351E  3365               	rrcf	??_hexToString& (0+255),f,b
 12799  003520                     u8990:
 12800  003520  2EE8               	decfsz	wreg,f,c
 12801  003522  D7F9               	goto	u8995
 12802  003524  5165               	movf	??_hexToString& (0+255),w,b
 12803  003526  0B0F               	andlw	15
 12804  003528  ECB3  F026         	call	_hexToChar
 12805  00352C  6EDF               	movwf	indf2,c
 12806  00352E  0100               	movlb	0	; () banked
 12807  003530  2B69               	incf	hexToString@pointer& (0+255),f,b
 12808                           
 12809                           ; BSR set to: 0
 12810                           ;uart.c: 138: number[pointer++] = hexToChar((val >> 8) & 0xf);
 12811  003532  5169               	movf	hexToString@pointer& (0+255),w,b
 12812  003534  0D01               	mullw	1
 12813  003536  0E9B               	movlw	low hexToString@number
 12814  003538  24F3               	addwf	prodl,w,c
 12815  00353A  6ED9               	movwf	fsr2l,c
 12816  00353C  0E01               	movlw	high hexToString@number
 12817  00353E  20F4               	addwfc	prodh,w,c
 12818  003540  6EDA               	movwf	fsr2h,c
 12819  003542  5162               	movf	(hexToString@val+1)& (0+255),w,b
 12820  003544  0B0F               	andlw	15
 12821  003546  ECB3  F026         	call	_hexToChar
 12822  00354A  6EDF               	movwf	indf2,c
 12823  00354C  0100               	movlb	0	; () banked
 12824  00354E  2B69               	incf	hexToString@pointer& (0+255),f,b
 12825  003550                     l789:
 12826                           
 12827                           ; BSR set to: 0
 12828                           ;uart.c: 139: }
 12829                           ;uart.c: 140: number[pointer++] = hexToChar((val >> 4) & 0xf);
 12830                           
 12831                           ; BSR set to: 0
 12832  003550  5169               	movf	hexToString@pointer& (0+255),w,b
 12833  003552  0D01               	mullw	1
 12834  003554  0E9B               	movlw	low hexToString@number
 12835  003556  24F3               	addwf	prodl,w,c
 12836  003558  6ED9               	movwf	fsr2l,c
 12837  00355A  0E01               	movlw	high hexToString@number
 12838  00355C  20F4               	addwfc	prodh,w,c
 12839  00355E  6EDA               	movwf	fsr2h,c
 12840  003560  C061  F065         	movff	hexToString@val,??_hexToString
 12841  003564  C062  F066         	movff	hexToString@val+1,??_hexToString+1
 12842  003568  C063  F067         	movff	hexToString@val+2,??_hexToString+2
 12843  00356C  C064  F068         	movff	hexToString@val+3,??_hexToString+3
 12844  003570  0E05               	movlw	5
 12845  003572  D005               	goto	u9000
 12846  003574                     u9005:
 12847  003574  90D8               	bcf	status,0,c
 12848  003576  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
 12849  003578  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
 12850  00357A  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
 12851  00357C  3365               	rrcf	??_hexToString& (0+255),f,b
 12852  00357E                     u9000:
 12853  00357E  2EE8               	decfsz	wreg,f,c
 12854  003580  D7F9               	goto	u9005
 12855  003582  5165               	movf	??_hexToString& (0+255),w,b
 12856  003584  0B0F               	andlw	15
 12857  003586  ECB3  F026         	call	_hexToChar
 12858  00358A  6EDF               	movwf	indf2,c
 12859  00358C  0100               	movlb	0	; () banked
 12860  00358E  2B69               	incf	hexToString@pointer& (0+255),f,b
 12861                           
 12862                           ;uart.c: 141: number[pointer++] = hexToChar(val & 0xf);
 12863  003590  5169               	movf	hexToString@pointer& (0+255),w,b
 12864  003592  0D01               	mullw	1
 12865  003594  0E9B               	movlw	low hexToString@number
 12866  003596  24F3               	addwf	prodl,w,c
 12867  003598  6ED9               	movwf	fsr2l,c
 12868  00359A  0E01               	movlw	high hexToString@number
 12869  00359C  20F4               	addwfc	prodh,w,c
 12870  00359E  6EDA               	movwf	fsr2h,c
 12871  0035A0  5161               	movf	hexToString@val& (0+255),w,b
 12872  0035A2  0B0F               	andlw	15
 12873  0035A4  ECB3  F026         	call	_hexToChar
 12874  0035A8  6EDF               	movwf	indf2,c
 12875  0035AA  0100               	movlb	0	; () banked
 12876  0035AC  2B69               	incf	hexToString@pointer& (0+255),f,b
 12877                           
 12878                           ; BSR set to: 0
 12879                           ;uart.c: 143: number[pointer++] = '\0';
 12880  0035AE  5169               	movf	hexToString@pointer& (0+255),w,b
 12881  0035B0  0D01               	mullw	1
 12882  0035B2  0E9B               	movlw	low hexToString@number
 12883  0035B4  24F3               	addwf	prodl,w,c
 12884  0035B6  6ED9               	movwf	fsr2l,c
 12885  0035B8  0E01               	movlw	high hexToString@number
 12886  0035BA  20F4               	addwfc	prodh,w,c
 12887  0035BC  6EDA               	movwf	fsr2h,c
 12888  0035BE  0E00               	movlw	0
 12889  0035C0  6EDF               	movwf	indf2,c
 12890                           
 12891                           ; BSR set to: 0
 12892  0035C2  2B69               	incf	hexToString@pointer& (0+255),f,b
 12893                           
 12894                           ; BSR set to: 0
 12895                           ;uart.c: 144: return number;
 12896  0035C4  0E9B               	movlw	low hexToString@number
 12897  0035C6  6F61               	movwf	?_hexToString& (0+255),b
 12898  0035C8  0E01               	movlw	high hexToString@number
 12899  0035CA  6F62               	movwf	(?_hexToString+1)& (0+255),b
 12900  0035CC  0012               	return	
 12901  0035CE                     __end_of_hexToString:
 12902                           	opt stack 0
 12903                           tblptru	equ	0xFF8
 12904                           tblptrh	equ	0xFF7
 12905                           tblptrl	equ	0xFF6
 12906                           tablat	equ	0xFF5
 12907                           prodh	equ	0xFF4
 12908                           prodl	equ	0xFF3
 12909                           intcon	equ	0xFF2
 12910                           intcon3	equ	0xFF0
 12911                           indf0	equ	0xFEF
 12912                           postinc0	equ	0xFEE
 12913                           plusw0	equ	0xFEB
 12914                           fsr0h	equ	0xFEA
 12915                           fsr0l	equ	0xFE9
 12916                           wreg	equ	0xFE8
 12917                           indf1	equ	0xFE7
 12918                           postinc1	equ	0xFE6
 12919                           postdec1	equ	0xFE5
 12920                           plusw1	equ	0xFE3
 12921                           fsr1h	equ	0xFE2
 12922                           fsr1l	equ	0xFE1
 12923                           indf2	equ	0xFDF
 12924                           postinc2	equ	0xFDE
 12925                           postdec2	equ	0xFDD
 12926                           plusw2	equ	0xFDB
 12927                           fsr2h	equ	0xFDA
 12928                           fsr2l	equ	0xFD9
 12929                           status	equ	0xFD8
 12930                           
 12931 ;; *************** function _hexToChar *****************
 12932 ;; Defined at:
 12933 ;;		line 124 in file "src/system/uart.c"
 12934 ;; Parameters:    Size  Location     Type
 12935 ;;  val             1    wreg     unsigned char 
 12936 ;; Auto vars:     Size  Location     Type
 12937 ;;  val             1    0[BANK0 ] unsigned char 
 12938 ;; Return value:  Size  Location     Type
 12939 ;;                  1    wreg      unsigned char 
 12940 ;; Registers used:
 12941 ;;		wreg, status,2, status,0
 12942 ;; Tracked objects:
 12943 ;;		On entry : 0/0
 12944 ;;		On exit  : 0/0
 12945 ;;		Unchanged: 0/0
 12946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12947 ;;      Params:         0       0       0       0       0       0       0       0       0
 12948 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12949 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12950 ;;      Totals:         0       1       0       0       0       0       0       0       0
 12951 ;;Total ram usage:        1 bytes
 12952 ;; Hardware stack levels used:    1
 12953 ;; Hardware stack levels required when called:    4
 12954 ;; This function calls:
 12955 ;;		Nothing
 12956 ;; This function is called by:
 12957 ;;		_hexToString
 12958 ;; This function uses a non-reentrant model
 12959 ;;
 12960                           
 12961                           	psect	text42
 12962  004D66                     __ptext42:
 12963                           	opt stack 0
 12964  004D66                     _hexToChar:
 12965                           	opt stack 25
 12966                           
 12967                           ; BSR set to: 0
 12968                           ;incstack = 0
 12969                           ;hexToChar@val stored from wreg
 12970  004D66  0100               	movlb	0	; () banked
 12971  004D68  6F60               	movwf	hexToChar@val& (0+255),b
 12972                           
 12973                           ;uart.c: 125: if (val < 10) {
 12974  004D6A  0E0A               	movlw	10
 12975  004D6C  0100               	movlb	0	; () banked
 12976  004D6E  6160               	cpfslt	hexToChar@val& (0+255),b
 12977  004D70  D003               	goto	l781
 12978                           
 12979                           ; BSR set to: 0
 12980                           ;uart.c: 126: return val + 0x30u;
 12981  004D72  5160               	movf	hexToChar@val& (0+255),w,b
 12982  004D74  0F30               	addlw	48
 12983                           
 12984                           ; BSR set to: 0
 12985  004D76  0012               	return	
 12986  004D78                     l781:
 12987                           
 12988                           ; BSR set to: 0
 12989                           
 12990                           ; BSR set to: 0
 12991  004D78  0E10               	movlw	16
 12992  004D7A  6160               	cpfslt	hexToChar@val& (0+255),b
 12993  004D7C  D003               	goto	l784
 12994                           
 12995                           ; BSR set to: 0
 12996                           ;uart.c: 128: return val + 0x41u - 10;
 12997  004D7E  5160               	movf	hexToChar@val& (0+255),w,b
 12998  004D80  0F37               	addlw	55
 12999                           
 13000                           ; BSR set to: 0
 13001  004D82  0012               	return	
 13002  004D84                     l784:
 13003                           
 13004                           ; BSR set to: 0
 13005                           ;uart.c: 129: }
 13006                           ;uart.c: 130: return 0;
 13007                           
 13008                           ; BSR set to: 0
 13009                           
 13010                           ; BSR set to: 0
 13011  004D84  0E00               	movlw	0
 13012  004D86  0012               	return	
 13013  004D88                     __end_of_hexToChar:
 13014                           	opt stack 0
 13015                           tblptru	equ	0xFF8
 13016                           tblptrh	equ	0xFF7
 13017                           tblptrl	equ	0xFF6
 13018                           tablat	equ	0xFF5
 13019                           prodh	equ	0xFF4
 13020                           prodl	equ	0xFF3
 13021                           intcon	equ	0xFF2
 13022                           intcon3	equ	0xFF0
 13023                           indf0	equ	0xFEF
 13024                           postinc0	equ	0xFEE
 13025                           plusw0	equ	0xFEB
 13026                           fsr0h	equ	0xFEA
 13027                           fsr0l	equ	0xFE9
 13028                           wreg	equ	0xFE8
 13029                           indf1	equ	0xFE7
 13030                           postinc1	equ	0xFE6
 13031                           postdec1	equ	0xFE5
 13032                           plusw1	equ	0xFE3
 13033                           fsr1h	equ	0xFE2
 13034                           fsr1l	equ	0xFE1
 13035                           indf2	equ	0xFDF
 13036                           postinc2	equ	0xFDE
 13037                           postdec2	equ	0xFDD
 13038                           plusw2	equ	0xFDB
 13039                           fsr2h	equ	0xFDA
 13040                           fsr2l	equ	0xFD9
 13041                           status	equ	0xFD8
 13042                           
 13043 ;; *************** function _ethernet_txFrameRequest *****************
 13044 ;; Defined at:
 13045 ;;		line 29 in file "src/eth/ethernet.c"
 13046 ;; Parameters:    Size  Location     Type
 13047 ;;  frame           2   66[BANK0 ] PTR struct ethernetFrame
 13048 ;;		 -> ARP_send@ethFrame(34), stack(121), 
 13049 ;; Auto vars:     Size  Location     Type
 13050 ;;  err             3   68[BANK0 ] struct error
 13051 ;; Return value:  Size  Location     Type
 13052 ;;                  3   66[BANK0 ] struct error
 13053 ;; Registers used:
 13054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13055 ;; Tracked objects:
 13056 ;;		On entry : 0/0
 13057 ;;		On exit  : 0/0
 13058 ;;		Unchanged: 0/0
 13059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13060 ;;      Params:         0       2       0       0       0       0       0       0       0
 13061 ;;      Locals:         0       3       0       0       0       0       0       0       0
 13062 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13063 ;;      Totals:         0       5       0       0       0       0       0       0       0
 13064 ;;Total ram usage:        5 bytes
 13065 ;; Hardware stack levels used:    1
 13066 ;; Hardware stack levels required when called:    8
 13067 ;; This function calls:
 13068 ;;		_ethernetController_writeDestinationMACAddress
 13069 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 13070 ;;		_memory_txFrameRequest
 13071 ;; This function is called by:
 13072 ;;		_ARP_send
 13073 ;;		_ipv4_txFrameRequest
 13074 ;; This function uses a non-reentrant model
 13075 ;;
 13076                           
 13077                           	psect	text43
 13078  0036BC                     __ptext43:
 13079                           	opt stack 0
 13080  0036BC                     _ethernet_txFrameRequest:
 13081                           	opt stack 21
 13082                           
 13083                           ;ethernet.c: 31: error_t err;
 13084                           ;ethernet.c: 32: err.module = ERROR_MODULE_ETHERNET;
 13085                           
 13086                           ; BSR set to: 0
 13087                           ;incstack = 0
 13088  0036BC  0E02               	movlw	2
 13089  0036BE  0100               	movlb	0	; () banked
 13090  0036C0  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 13091                           
 13092                           ;ethernet.c: 33: err.code = (uint16_t)0;
 13093  0036C2  0E00               	movlw	0
 13094  0036C4  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 13095  0036C6  0E00               	movlw	0
 13096  0036C8  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 13097                           
 13098                           ; BSR set to: 0
 13099                           ;ethernet.c: 34: frame->memory = memory_txFrameRequest(frame->length);
 13100  0036CA  C0A2  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 13101  0036CE  C0A3  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 13102  0036D2  CFDE F084          	movff	postinc2,memory_txFrameRequest@length
 13103  0036D6  CFDD F085          	movff	postdec2,memory_txFrameRequest@length+1
 13104  0036DA  EC07  F003         	call	_memory_txFrameRequest	;wreg free
 13105  0036DE  0100               	movlb	0	; () banked
 13106  0036E0  EE20 F010          	lfsr	2,16
 13107  0036E4  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 13108  0036E6  26D9               	addwf	fsr2l,f,c
 13109  0036E8  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 13110  0036EA  22DA               	addwfc	fsr2h,f,c
 13111  0036EC  0E08               	movlw	8
 13112  0036EE                     u8861:
 13113  0036EE  CFEB FFDB          	movff	plusw0,plusw2
 13114  0036F2  06E8               	decf	wreg,f,c
 13115  0036F4  E2FC               	bc	u8861
 13116                           
 13117                           ; BSR set to: 0
 13118                           ;ethernet.c: 36: if (frame->memory.fOutOfMemory) {
 13119  0036F6  EE20 F017          	lfsr	2,23
 13120  0036FA  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 13121  0036FC  26D9               	addwf	fsr2l,f,c
 13122  0036FE  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 13123  003700  22DA               	addwfc	fsr2h,f,c
 13124  003702  50DF               	movf	indf2,w,c
 13125  003704  B4D8               	btfsc	status,2,c
 13126  003706  D007               	goto	l355
 13127                           
 13128                           ; BSR set to: 0
 13129                           ;ethernet.c: 38: err.module = ERROR_MODULE_MEMORY;
 13130  003708  0E00               	movlw	0
 13131  00370A  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 13132                           
 13133                           ;ethernet.c: 39: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 13134  00370C  0E00               	movlw	0
 13135  00370E  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 13136  003710  0E65               	movlw	101
 13137  003712  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;ethernet.c: 40: return err;
 13141                           ;	Return value of _ethernet_txFrameRequest is never used
 13142  003714  0012               	return	
 13143  003716                     l355:
 13144                           
 13145                           ; BSR set to: 0
 13146                           ;ethernet.c: 41: }
 13147                           ;ethernet.c: 42: if (!frame->memory.fIsAssigned) {
 13148                           
 13149                           ; BSR set to: 0
 13150  003716  EE20 F016          	lfsr	2,22
 13151  00371A  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 13152  00371C  26D9               	addwf	fsr2l,f,c
 13153  00371E  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 13154  003720  22DA               	addwfc	fsr2h,f,c
 13155  003722  50DF               	movf	indf2,w,c
 13156  003724  A4D8               	btfss	status,2,c
 13157  003726  D007               	goto	l357
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;ethernet.c: 44: err.module = ERROR_MODULE_MEMORY;
 13161  003728  0E00               	movlw	0
 13162  00372A  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 13163                           
 13164                           ;ethernet.c: 45: err.code = ERROR_MEMORY_UNKNOWN;
 13165  00372C  0E00               	movlw	0
 13166  00372E  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 13167  003730  0EC7               	movlw	199
 13168  003732  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 13169                           
 13170                           ; BSR set to: 0
 13171                           ;ethernet.c: 46: return err;
 13172                           ;	Return value of _ethernet_txFrameRequest is never used
 13173  003734  0012               	return	
 13174  003736                     l357:
 13175                           
 13176                           ; BSR set to: 0
 13177                           ;ethernet.c: 47: }
 13178                           ;ethernet.c: 49: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 13179                           
 13180                           ; BSR set to: 0
 13181  003736  EE20 F008          	lfsr	2,8
 13182  00373A  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 13183  00373C  26D9               	addwf	fsr2l,f,c
 13184  00373E  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 13185  003740  22DA               	addwfc	fsr2h,f,c
 13186  003742  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 13187  003746  0E05               	movlw	5
 13188  003748                     u8891:
 13189  003748  CFDB FFEB          	movff	plusw2,plusw0
 13190  00374C  06E8               	decf	wreg,f,c
 13191  00374E  E2FC               	bc	u8891
 13192  003750  EE20 F010          	lfsr	2,16
 13193  003754  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 13194  003756  26D9               	addwf	fsr2l,f,c
 13195  003758  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 13196  00375A  22DA               	addwfc	fsr2h,f,c
 13197  00375C  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 13198  003760  0E08               	movlw	8
 13199  003762                     u8901:
 13200  003762  CFDB FFEB          	movff	plusw2,plusw0
 13201  003766  06E8               	decf	wreg,f,c
 13202  003768  E2FC               	bc	u8901
 13203  00376A  ECE9  F01F         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 13204                           
 13205                           ;ethernet.c: 50: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 13206  00376E  0100               	movlb	0	; () banked
 13207  003770  EE20 F00E          	lfsr	2,14
 13208  003774  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 13209  003776  26D9               	addwf	fsr2l,f,c
 13210  003778  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 13211  00377A  22DA               	addwfc	fsr2h,f,c
 13212  00377C  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 13213  003780  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 13214  003784  EE20 F010          	lfsr	2,16
 13215  003788  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 13216  00378A  26D9               	addwf	fsr2l,f,c
 13217  00378C  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 13218  00378E  22DA               	addwfc	fsr2h,f,c
 13219  003790  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 13220  003794  0E08               	movlw	8
 13221  003796                     u8911:
 13222  003796  CFDB FFEB          	movff	plusw2,plusw0
 13223  00379A  06E8               	decf	wreg,f,c
 13224  00379C  E2FC               	bc	u8911
 13225  00379E  EC87  F023         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 13226  0037A2  0012               	return	
 13227  0037A4                     __end_of_ethernet_txFrameRequest:
 13228                           	opt stack 0
 13229                           tblptru	equ	0xFF8
 13230                           tblptrh	equ	0xFF7
 13231                           tblptrl	equ	0xFF6
 13232                           tablat	equ	0xFF5
 13233                           prodh	equ	0xFF4
 13234                           prodl	equ	0xFF3
 13235                           intcon	equ	0xFF2
 13236                           intcon3	equ	0xFF0
 13237                           indf0	equ	0xFEF
 13238                           postinc0	equ	0xFEE
 13239                           plusw0	equ	0xFEB
 13240                           fsr0h	equ	0xFEA
 13241                           fsr0l	equ	0xFE9
 13242                           wreg	equ	0xFE8
 13243                           indf1	equ	0xFE7
 13244                           postinc1	equ	0xFE6
 13245                           postdec1	equ	0xFE5
 13246                           plusw1	equ	0xFE3
 13247                           fsr1h	equ	0xFE2
 13248                           fsr1l	equ	0xFE1
 13249                           indf2	equ	0xFDF
 13250                           postinc2	equ	0xFDE
 13251                           postdec2	equ	0xFDD
 13252                           plusw2	equ	0xFDB
 13253                           fsr2h	equ	0xFDA
 13254                           fsr2l	equ	0xFD9
 13255                           status	equ	0xFD8
 13256                           
 13257 ;; *************** function _memory_txFrameRequest *****************
 13258 ;; Defined at:
 13259 ;;		line 136 in file "src/mem/memoryController.c"
 13260 ;; Parameters:    Size  Location     Type
 13261 ;;  length          2   36[BANK0 ] unsigned int 
 13262 ;; Auto vars:     Size  Location     Type
 13263 ;;  i               1   54[BANK0 ] unsigned char 
 13264 ;;  i               1   55[BANK0 ] unsigned char 
 13265 ;;  fNoOverlapMa    1   53[BANK0 ] unsigned char 
 13266 ;;  field           9   56[BANK0 ] struct memoryField
 13267 ;;  freeIndex       1   65[BANK0 ] unsigned char 
 13268 ;; Return value:  Size  Location     Type
 13269 ;;                  9   36[BANK0 ] struct memoryField
 13270 ;; Registers used:
 13271 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13272 ;; Tracked objects:
 13273 ;;		On entry : 0/0
 13274 ;;		On exit  : 0/0
 13275 ;;		Unchanged: 0/0
 13276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13277 ;;      Params:         0       9       0       0       0       0       0       0       0
 13278 ;;      Locals:         0      15       0       0       0       0       0       0       0
 13279 ;;      Temps:          0       6       0       0       0       0       0       0       0
 13280 ;;      Totals:         0      30       0       0       0       0       0       0       0
 13281 ;;Total ram usage:       30 bytes
 13282 ;; Hardware stack levels used:    1
 13283 ;; Hardware stack levels required when called:    6
 13284 ;; This function calls:
 13285 ;;		___wmul
 13286 ;;		_checkForOverlap
 13287 ;;		_entireMemoryEmpty
 13288 ;;		_entireMemoryFull
 13289 ;; This function is called by:
 13290 ;;		_ethernet_txFrameRequest
 13291 ;; This function uses a non-reentrant model
 13292 ;;
 13293                           
 13294                           	psect	text44
 13295  00060E                     __ptext44:
 13296                           	opt stack 0
 13297  00060E                     _memory_txFrameRequest:
 13298                           	opt stack 22
 13299                           
 13300                           ;memoryController.c: 137: memoryField_t field;
 13301                           ;memoryController.c: 138: uint8_t freeIndex = 0;
 13302                           
 13303                           ;incstack = 0
 13304  00060E  0E00               	movlw	0
 13305  000610  0100               	movlb	0	; () banked
 13306  000612  6FA1               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 13307                           
 13308                           ; BSR set to: 0
 13309                           ;memoryController.c: 140: if (length == 0) {
 13310  000614  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 13311  000616  1185               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 13312  000618  A4D8               	btfss	status,2,c
 13313  00061A  D00C               	goto	l460
 13314                           
 13315                           ; BSR set to: 0
 13316                           ;memoryController.c: 141: field.fOutOfMemory = 1;
 13317  00061C  0E01               	movlw	1
 13318  00061E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 13319                           
 13320                           ; BSR set to: 0
 13321                           ;memoryController.c: 142: return field;
 13322  000620  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 13323  000624  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13324  000628  0E08               	movlw	8
 13325  00062A                     u8461:
 13326  00062A  CFDB FFEB          	movff	plusw2,plusw0
 13327  00062E  06E8               	decf	wreg,f,c
 13328  000630  E2FC               	bc	u8461
 13329                           
 13330                           ; BSR set to: 0
 13331  000632  0012               	return	
 13332  000634                     l460:
 13333                           
 13334                           ; BSR set to: 0
 13335                           ;memoryController.c: 143: }
 13336                           ;memoryController.c: 145: if (entireMemoryFull()) {
 13337                           
 13338                           ; BSR set to: 0
 13339  000634  ECFF  F024         	call	_entireMemoryFull	;wreg free
 13340  000638  0900               	iorlw	0
 13341  00063A  B4D8               	btfsc	status,2,c
 13342  00063C  D00D               	goto	l462
 13343                           
 13344                           ;memoryController.c: 146: field.fOutOfMemory = 1;
 13345  00063E  0E01               	movlw	1
 13346  000640  0100               	movlb	0	; () banked
 13347  000642  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 13348                           
 13349                           ; BSR set to: 0
 13350                           ;memoryController.c: 147: return field;
 13351  000644  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 13352  000648  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13353  00064C  0E08               	movlw	8
 13354  00064E                     u8481:
 13355  00064E  CFDB FFEB          	movff	plusw2,plusw0
 13356  000652  06E8               	decf	wreg,f,c
 13357  000654  E2FC               	bc	u8481
 13358                           
 13359                           ; BSR set to: 0
 13360  000656  0012               	return	
 13361  000658                     l462:
 13362                           
 13363                           ;memoryController.c: 148: }
 13364                           ;memoryController.c: 149: if (entireMemoryEmpty()) {
 13365                           
 13366                           ; BSR set to: 0
 13367  000658  EC1B  F025         	call	_entireMemoryEmpty	;wreg free
 13368  00065C  0900               	iorlw	0
 13369  00065E  B4D8               	btfsc	status,2,c
 13370  000660  D23C               	goto	l487
 13371                           
 13372                           ;memoryController.c: 151: if ((0x0000 + length) > 0x3000 - 1) {
 13373  000662  0E30               	movlw	48
 13374  000664  0100               	movlb	0	; () banked
 13375  000666  5D85               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 13376  000668  A0D8               	btfss	status,0,c
 13377  00066A  D00C               	goto	l464
 13378                           
 13379                           ; BSR set to: 0
 13380                           ;memoryController.c: 152: field.fOutOfMemory = 1;
 13381  00066C  0E01               	movlw	1
 13382  00066E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 13383                           
 13384                           ; BSR set to: 0
 13385                           ;memoryController.c: 153: return field;
 13386  000670  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 13387  000674  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13388  000678  0E08               	movlw	8
 13389  00067A                     u8511:
 13390  00067A  CFDB FFEB          	movff	plusw2,plusw0
 13391  00067E  06E8               	decf	wreg,f,c
 13392  000680  E2FC               	bc	u8511
 13393                           
 13394                           ; BSR set to: 0
 13395  000682  0012               	return	
 13396  000684                     l464:
 13397                           
 13398                           ; BSR set to: 0
 13399                           ;memoryController.c: 155: else {
 13400                           ;memoryController.c: 156: occupiedMemory[0].start = 0x0000;
 13401                           
 13402                           ; BSR set to: 0
 13403  000684  0E00               	movlw	0
 13404  000686  0102               	movlb	2	; () banked
 13405  000688  6F01               	movwf	(_occupiedMemory+1)& (0+255),b
 13406  00068A  0E00               	movlw	0
 13407  00068C  6F00               	movwf	_occupiedMemory& (0+255),b
 13408                           
 13409                           ; BSR set to: 2
 13410                           ;memoryController.c: 157: occupiedMemory[0].end = 0x0000 + length;
 13411  00068E  C084  F202         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 13412  000692  C085  F203         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 13413                           
 13414                           ; BSR set to: 2
 13415                           ;memoryController.c: 158: occupiedMemory[0].length = length;
 13416  000696  C084  F204         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 13417  00069A  C085  F205         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 13418                           
 13419                           ;memoryController.c: 159: occupiedMemory[0].fIsAssigned = 1;
 13420  00069E  0E01               	movlw	1
 13421  0006A0  6F06               	movwf	(_occupiedMemory+6)& (0+255),b
 13422                           
 13423                           ;memoryController.c: 160: occupiedMemory[0].index=0;
 13424  0006A2  0E00               	movlw	0
 13425  0006A4  6F08               	movwf	(_occupiedMemory+8)& (0+255),b
 13426                           
 13427                           ; BSR set to: 2
 13428                           ;memoryController.c: 161: return occupiedMemory[0];
 13429  0006A6  EE22  F000         	lfsr	2,_occupiedMemory
 13430  0006AA  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13431  0006AE  0E08               	movlw	8
 13432  0006B0                     u8521:
 13433  0006B0  CFDB FFEB          	movff	plusw2,plusw0
 13434  0006B4  06E8               	decf	wreg,f,c
 13435  0006B6  E2FC               	bc	u8521
 13436                           
 13437                           ; BSR set to: 2
 13438  0006B8  0012               	return	
 13439  0006BA                     
 13440                           ;memoryController.c: 167: if (!occupiedMemory[freeIndex].fIsAssigned) {
 13441                           
 13442                           ; BSR set to: 2
 13443  0006BA  0100               	movlb	0	; () banked
 13444  0006BC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13445  0006BE  0D09               	mullw	9
 13446  0006C0  0E06               	movlw	6
 13447  0006C2  26F3               	addwf	prodl,f,c
 13448  0006C4  0E00               	movlw	0
 13449  0006C6  22F4               	addwfc	prodh,f,c
 13450  0006C8  0E00               	movlw	low _occupiedMemory
 13451  0006CA  24F3               	addwf	prodl,w,c
 13452  0006CC  6ED9               	movwf	fsr2l,c
 13453  0006CE  0E02               	movlw	high _occupiedMemory
 13454  0006D0  20F4               	addwfc	prodh,w,c
 13455  0006D2  6EDA               	movwf	fsr2h,c
 13456  0006D4  50DF               	movf	indf2,w,c
 13457  0006D6  A4D8               	btfss	status,2,c
 13458  0006D8  D1EF               	goto	l486
 13459                           
 13460                           ; BSR set to: 0
 13461                           ;memoryController.c: 171: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex ==
      +                           0) ? 8 - 1 : freeIndex - 1].end + 1;
 13462  0006DA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13463  0006DC  B4D8               	btfsc	status,2,c
 13464  0006DE  D007               	goto	l470
 13465                           
 13466                           ; BSR set to: 0
 13467  0006E0  0EFF               	movlw	255
 13468  0006E2  25A1               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13469  0006E4  6F93               	movwf	_memory_txFrameRequest$1163& (0+255),b
 13470  0006E6  6B94               	clrf	(_memory_txFrameRequest$1163+1)& (0+255),b
 13471  0006E8  0EFF               	movlw	255
 13472  0006EA  2394               	addwfc	(_memory_txFrameRequest$1163+1)& (0+255),f,b
 13473  0006EC  D004               	goto	l472
 13474  0006EE                     l470:
 13475                           
 13476                           ; BSR set to: 0
 13477                           
 13478                           ; BSR set to: 0
 13479  0006EE  0E00               	movlw	0
 13480  0006F0  6F94               	movwf	(_memory_txFrameRequest$1163+1)& (0+255),b
 13481  0006F2  0E07               	movlw	7
 13482  0006F4  6F93               	movwf	_memory_txFrameRequest$1163& (0+255),b
 13483  0006F6                     l472:
 13484                           
 13485                           ; BSR set to: 0
 13486                           
 13487                           ; BSR set to: 0
 13488  0006F6  C093  F060         	movff	_memory_txFrameRequest$1163,___wmul@multiplier
 13489  0006FA  C094  F061         	movff	_memory_txFrameRequest$1163+1,___wmul@multiplier+1
 13490  0006FE  0E00               	movlw	0
 13491  000700  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13492  000702  0E09               	movlw	9
 13493  000704  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13494  000706  EC1C  F026         	call	___wmul	;wreg free
 13495  00070A  0E02               	movlw	2
 13496  00070C  0100               	movlb	0	; () banked
 13497  00070E  2760               	addwf	?___wmul& (0+255),f,b
 13498  000710  0E00               	movlw	0
 13499  000712  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 13500  000714  0E00               	movlw	low _occupiedMemory
 13501  000716  2560               	addwf	?___wmul& (0+255),w,b
 13502  000718  6ED9               	movwf	fsr2l,c
 13503  00071A  0E02               	movlw	high _occupiedMemory
 13504  00071C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13505  00071E  6EDA               	movwf	fsr2h,c
 13506  000720  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13507  000724  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13508  000728  0E01               	movlw	1
 13509  00072A  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 13510  00072C  0E00               	movlw	0
 13511  00072E  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 13512  000730  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13513  000732  0D09               	mullw	9
 13514  000734  0E00               	movlw	low _occupiedMemory
 13515  000736  24F3               	addwf	prodl,w,c
 13516  000738  6ED9               	movwf	fsr2l,c
 13517  00073A  0E02               	movlw	high _occupiedMemory
 13518  00073C  20F4               	addwfc	prodh,w,c
 13519  00073E  6EDA               	movwf	fsr2h,c
 13520  000740  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 13521  000744  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 13522                           
 13523                           ; BSR set to: 0
 13524                           ;memoryController.c: 172: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 13525  000748  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13526  00074A  0D09               	mullw	9
 13527  00074C  0E00               	movlw	low _occupiedMemory
 13528  00074E  24F3               	addwf	prodl,w,c
 13529  000750  6ED9               	movwf	fsr2l,c
 13530  000752  0E02               	movlw	high _occupiedMemory
 13531  000754  20F4               	addwfc	prodh,w,c
 13532  000756  6EDA               	movwf	fsr2h,c
 13533  000758  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13534  00075C  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13535  000760  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 13536  000762  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 13537  000764  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 13538  000766  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 13539  000768  058D               	decf	??_memory_txFrameRequest& (0+255),w,b
 13540  00076A  0E30               	movlw	48
 13541  00076C  598E               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 13542  00076E  A0D8               	btfss	status,0,c
 13543  000770  D0D1               	goto	l474
 13544                           
 13545                           ; BSR set to: 0
 13546                           ;memoryController.c: 173: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 13547  000772  0E07               	movlw	7
 13548  000774  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13549  000776  A4D8               	btfss	status,2,c
 13550  000778  D0CD               	goto	l474
 13551                           
 13552                           ; BSR set to: 0
 13553  00077A  0102               	movlb	2	; () banked
 13554  00077C  5106               	movf	(_occupiedMemory+6)& (0+255),w,b
 13555  00077E  A4D8               	btfss	status,2,c
 13556  000780  D0C9               	goto	l474
 13557                           
 13558                           ; BSR set to: 2
 13559                           ;memoryController.c: 174: occupiedMemory[freeIndex].length = length;
 13560  000782  0100               	movlb	0	; () banked
 13561  000784  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13562  000786  0D09               	mullw	9
 13563  000788  0E04               	movlw	4
 13564  00078A  26F3               	addwf	prodl,f,c
 13565  00078C  0E00               	movlw	0
 13566  00078E  22F4               	addwfc	prodh,f,c
 13567  000790  0E00               	movlw	low _occupiedMemory
 13568  000792  24F3               	addwf	prodl,w,c
 13569  000794  6ED9               	movwf	fsr2l,c
 13570  000796  0E02               	movlw	high _occupiedMemory
 13571  000798  20F4               	addwfc	prodh,w,c
 13572  00079A  6EDA               	movwf	fsr2h,c
 13573  00079C  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 13574  0007A0  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 13575                           
 13576                           ;memoryController.c: 175: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 13577  0007A4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13578  0007A6  0D09               	mullw	9
 13579  0007A8  0E04               	movlw	4
 13580  0007AA  26F3               	addwf	prodl,f,c
 13581  0007AC  0E00               	movlw	0
 13582  0007AE  22F4               	addwfc	prodh,f,c
 13583  0007B0  0E00               	movlw	low _occupiedMemory
 13584  0007B2  24F3               	addwf	prodl,w,c
 13585  0007B4  6ED9               	movwf	fsr2l,c
 13586  0007B6  0E02               	movlw	high _occupiedMemory
 13587  0007B8  20F4               	addwfc	prodh,w,c
 13588  0007BA  6EDA               	movwf	fsr2h,c
 13589  0007BC  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13590  0007C0  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13591  0007C4  0EFF               	movlw	255
 13592  0007C6  6F8F               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 13593  0007C8  0E2F               	movlw	47
 13594  0007CA  6F90               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 13595  0007CC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13596  0007CE  0D09               	mullw	9
 13597  0007D0  0E00               	movlw	low _occupiedMemory
 13598  0007D2  24F3               	addwf	prodl,w,c
 13599  0007D4  6ED9               	movwf	fsr2l,c
 13600  0007D6  0E02               	movlw	high _occupiedMemory
 13601  0007D8  20F4               	addwfc	prodh,w,c
 13602  0007DA  6EDA               	movwf	fsr2h,c
 13603  0007DC  CFDE F091          	movff	postinc2,??_memory_txFrameRequest+4
 13604  0007E0  CFDD F092          	movff	postdec2,??_memory_txFrameRequest+5
 13605  0007E4  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 13606  0007E6  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 13607  0007E8  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 13608  0007EA  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 13609  0007EC  518F               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 13610  0007EE  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 13611  0007F0  5190               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 13612  0007F2  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 13613  0007F4  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 13614  0007F6  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 13615  0007F8  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 13616  0007FA  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 13617  0007FC  518D               	movf	??_memory_txFrameRequest& (0+255),w,b
 13618  0007FE  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 13619  000800  518E               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 13620  000802  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 13621  000804  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13622  000806  0D09               	mullw	9
 13623  000808  0E02               	movlw	2
 13624  00080A  26F3               	addwf	prodl,f,c
 13625  00080C  0E00               	movlw	0
 13626  00080E  22F4               	addwfc	prodh,f,c
 13627  000810  0E00               	movlw	low _occupiedMemory
 13628  000812  24F3               	addwf	prodl,w,c
 13629  000814  6ED9               	movwf	fsr2l,c
 13630  000816  0E02               	movlw	high _occupiedMemory
 13631  000818  20F4               	addwfc	prodh,w,c
 13632  00081A  6EDA               	movwf	fsr2h,c
 13633  00081C  C091  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 13634  000820  C092  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 13635                           
 13636                           ; BSR set to: 0
 13637                           ;memoryController.c: 176: for (uint8_t i = 0; i < 8;i++) {
 13638  000824  0E00               	movlw	0
 13639  000826  6F96               	movwf	memory_txFrameRequest@i& (0+255),b
 13640  000828                     l7551:
 13641                           
 13642                           ; BSR set to: 0
 13643  000828  0E07               	movlw	7
 13644  00082A  6596               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 13645  00082C  D001               	goto	l475
 13646  00082E  D046               	goto	u8650
 13647  000830                     l475:
 13648                           
 13649                           ; BSR set to: 0
 13650                           ;memoryController.c: 177: if (i == freeIndex)
 13651                           
 13652                           ; BSR set to: 0
 13653  000830  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13654  000832  1996               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 13655  000834  B4D8               	btfsc	status,2,c
 13656  000836  D03F               	goto	l479
 13657                           
 13658                           ; BSR set to: 0
 13659                           ;memoryController.c: 179: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 13660                           
 13661                           ; BSR set to: 0
 13662                           
 13663                           ; BSR set to: 0
 13664                           ;memoryController.c: 178: continue;
 13665  000838  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13666  00083A  0D09               	mullw	9
 13667  00083C  0E00               	movlw	low _occupiedMemory
 13668  00083E  24F3               	addwf	prodl,w,c
 13669  000840  6ED9               	movwf	fsr2l,c
 13670  000842  0E02               	movlw	high _occupiedMemory
 13671  000844  20F4               	addwfc	prodh,w,c
 13672  000846  6EDA               	movwf	fsr2h,c
 13673  000848  EE00  F072         	lfsr	0,checkForOverlap@a
 13674  00084C  0E08               	movlw	8
 13675  00084E                     u8601:
 13676  00084E  CFDB FFEB          	movff	plusw2,plusw0
 13677  000852  06E8               	decf	wreg,f,c
 13678  000854  E2FC               	bc	u8601
 13679  000856  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 13680  000858  0D09               	mullw	9
 13681  00085A  0E00               	movlw	low _occupiedMemory
 13682  00085C  24F3               	addwf	prodl,w,c
 13683  00085E  6ED9               	movwf	fsr2l,c
 13684  000860  0E02               	movlw	high _occupiedMemory
 13685  000862  20F4               	addwfc	prodh,w,c
 13686  000864  6EDA               	movwf	fsr2h,c
 13687  000866  EE00  F07B         	lfsr	0,checkForOverlap@b
 13688  00086A  0E08               	movlw	8
 13689  00086C                     u8611:
 13690  00086C  CFDB FFEB          	movff	plusw2,plusw0
 13691  000870  06E8               	decf	wreg,f,c
 13692  000872  E2FC               	bc	u8611
 13693  000874  ECEC  F019         	call	_checkForOverlap	;wreg free
 13694  000878  0900               	iorlw	0
 13695  00087A  B4D8               	btfsc	status,2,c
 13696  00087C  D01C               	goto	l479
 13697  00087E  0100               	movlb	0	; () banked
 13698  000880  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 13699  000882  0D09               	mullw	9
 13700  000884  0E06               	movlw	6
 13701  000886  26F3               	addwf	prodl,f,c
 13702  000888  0E00               	movlw	0
 13703  00088A  22F4               	addwfc	prodh,f,c
 13704  00088C  0E00               	movlw	low _occupiedMemory
 13705  00088E  24F3               	addwf	prodl,w,c
 13706  000890  6ED9               	movwf	fsr2l,c
 13707  000892  0E02               	movlw	high _occupiedMemory
 13708  000894  20F4               	addwfc	prodh,w,c
 13709  000896  6EDA               	movwf	fsr2h,c
 13710  000898  50DF               	movf	indf2,w,c
 13711  00089A  B4D8               	btfsc	status,2,c
 13712  00089C  D00C               	goto	l479
 13713                           
 13714                           ; BSR set to: 0
 13715                           ;memoryController.c: 181: field.fOutOfMemory = 1;
 13716  00089E  0E01               	movlw	1
 13717  0008A0  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 13718                           
 13719                           ; BSR set to: 0
 13720                           ;memoryController.c: 182: return field;
 13721  0008A2  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 13722  0008A6  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13723  0008AA  0E08               	movlw	8
 13724  0008AC                     u8641:
 13725  0008AC  CFDB FFEB          	movff	plusw2,plusw0
 13726  0008B0  06E8               	decf	wreg,f,c
 13727  0008B2  E2FC               	bc	u8641
 13728                           
 13729                           ; BSR set to: 0
 13730  0008B4  0012               	return	
 13731  0008B6                     l479:
 13732                           
 13733                           ; BSR set to: 0
 13734                           
 13735                           ; BSR set to: 0
 13736  0008B6  0100               	movlb	0	; () banked
 13737  0008B8  2B96               	incf	memory_txFrameRequest@i& (0+255),f,b
 13738  0008BA  D7B6               	goto	l7551
 13739  0008BC                     u8650:
 13740                           
 13741                           ; BSR set to: 0
 13742                           ;memoryController.c: 183: }
 13743                           ;memoryController.c: 184: }
 13744                           ;memoryController.c: 185: occupiedMemory[freeIndex].fIsAssigned = 1;
 13745                           
 13746                           ; BSR set to: 0
 13747  0008BC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13748  0008BE  0D09               	mullw	9
 13749  0008C0  0E06               	movlw	6
 13750  0008C2  26F3               	addwf	prodl,f,c
 13751  0008C4  0E00               	movlw	0
 13752  0008C6  22F4               	addwfc	prodh,f,c
 13753  0008C8  0E00               	movlw	low _occupiedMemory
 13754  0008CA  24F3               	addwf	prodl,w,c
 13755  0008CC  6ED9               	movwf	fsr2l,c
 13756  0008CE  0E02               	movlw	high _occupiedMemory
 13757  0008D0  20F4               	addwfc	prodh,w,c
 13758  0008D2  6EDA               	movwf	fsr2h,c
 13759  0008D4  0E01               	movlw	1
 13760  0008D6  6EDF               	movwf	indf2,c
 13761                           
 13762                           ;memoryController.c: 186: occupiedMemory[freeIndex].index=freeIndex;
 13763  0008D8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13764  0008DA  0D09               	mullw	9
 13765  0008DC  0E08               	movlw	8
 13766  0008DE  26F3               	addwf	prodl,f,c
 13767  0008E0  0E00               	movlw	0
 13768  0008E2  22F4               	addwfc	prodh,f,c
 13769  0008E4  0E00               	movlw	low _occupiedMemory
 13770  0008E6  24F3               	addwf	prodl,w,c
 13771  0008E8  6ED9               	movwf	fsr2l,c
 13772  0008EA  0E02               	movlw	high _occupiedMemory
 13773  0008EC  20F4               	addwfc	prodh,w,c
 13774  0008EE  6EDA               	movwf	fsr2h,c
 13775  0008F0  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 13776                           
 13777                           ; BSR set to: 0
 13778                           ;memoryController.c: 187: return occupiedMemory[freeIndex];
 13779  0008F4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13780  0008F6  0D09               	mullw	9
 13781  0008F8  0E00               	movlw	low _occupiedMemory
 13782  0008FA  24F3               	addwf	prodl,w,c
 13783  0008FC  6ED9               	movwf	fsr2l,c
 13784  0008FE  0E02               	movlw	high _occupiedMemory
 13785  000900  20F4               	addwfc	prodh,w,c
 13786  000902  6EDA               	movwf	fsr2h,c
 13787  000904  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13788  000908  0E08               	movlw	8
 13789  00090A                     u8661:
 13790  00090A  CFDB FFEB          	movff	plusw2,plusw0
 13791  00090E  06E8               	decf	wreg,f,c
 13792  000910  E2FC               	bc	u8661
 13793                           
 13794                           ; BSR set to: 0
 13795  000912  0012               	return	
 13796  000914                     l474:
 13797                           
 13798                           ;memoryController.c: 188: }
 13799                           ;memoryController.c: 189: }
 13800                           ;memoryController.c: 191: uint8_t fNoOverlapMarker = 1;
 13801                           
 13802                           ; BSR set to: 0
 13803                           
 13804                           ; BSR set to: 0
 13805  000914  0E01               	movlw	1
 13806  000916  0100               	movlb	0	; () banked
 13807  000918  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 13808                           
 13809                           ; BSR set to: 0
 13810                           ;memoryController.c: 192: uint8_t i;
 13811                           ;memoryController.c: 193: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 13812  00091A  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13813  00091C  0D09               	mullw	9
 13814  00091E  0E00               	movlw	low _occupiedMemory
 13815  000920  24F3               	addwf	prodl,w,c
 13816  000922  6ED9               	movwf	fsr2l,c
 13817  000924  0E02               	movlw	high _occupiedMemory
 13818  000926  20F4               	addwfc	prodh,w,c
 13819  000928  6EDA               	movwf	fsr2h,c
 13820  00092A  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13821  00092E  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13822  000932  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 13823  000934  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 13824  000936  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 13825  000938  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 13826  00093A  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13827  00093C  0D09               	mullw	9
 13828  00093E  0E02               	movlw	2
 13829  000940  26F3               	addwf	prodl,f,c
 13830  000942  0E00               	movlw	0
 13831  000944  22F4               	addwfc	prodh,f,c
 13832  000946  0E00               	movlw	low _occupiedMemory
 13833  000948  24F3               	addwf	prodl,w,c
 13834  00094A  6ED9               	movwf	fsr2l,c
 13835  00094C  0E02               	movlw	high _occupiedMemory
 13836  00094E  20F4               	addwfc	prodh,w,c
 13837  000950  6EDA               	movwf	fsr2h,c
 13838  000952  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 13839  000956  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 13840                           
 13841                           ; BSR set to: 0
 13842                           ;memoryController.c: 194: for (i = 0; i < 8; i++) {
 13843  00095A  0E00               	movlw	0
 13844  00095C  6F97               	movwf	memory_txFrameRequest@i_1167& (0+255),b
 13845  00095E                     l7585:
 13846                           
 13847                           ; BSR set to: 0
 13848  00095E  0E07               	movlw	7
 13849  000960  6597               	cpfsgt	memory_txFrameRequest@i_1167& (0+255),b
 13850  000962  D001               	goto	l480
 13851  000964  D03C               	goto	u8730
 13852  000966                     l480:
 13853                           
 13854                           ; BSR set to: 0
 13855                           ;memoryController.c: 195: if (i == freeIndex)
 13856                           
 13857                           ; BSR set to: 0
 13858  000966  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13859  000968  1997               	xorwf	memory_txFrameRequest@i_1167& (0+255),w,b
 13860  00096A  B4D8               	btfsc	status,2,c
 13861  00096C  D035               	goto	l485
 13862                           
 13863                           ; BSR set to: 0
 13864                           ;memoryController.c: 197: if (!occupiedMemory[i].fIsAssigned) {
 13865                           
 13866                           ; BSR set to: 0
 13867                           
 13868                           ; BSR set to: 0
 13869                           ;memoryController.c: 196: continue;
 13870  00096E  5197               	movf	memory_txFrameRequest@i_1167& (0+255),w,b
 13871  000970  0D09               	mullw	9
 13872  000972  0E06               	movlw	6
 13873  000974  26F3               	addwf	prodl,f,c
 13874  000976  0E00               	movlw	0
 13875  000978  22F4               	addwfc	prodh,f,c
 13876  00097A  0E00               	movlw	low _occupiedMemory
 13877  00097C  24F3               	addwf	prodl,w,c
 13878  00097E  6ED9               	movwf	fsr2l,c
 13879  000980  0E02               	movlw	high _occupiedMemory
 13880  000982  20F4               	addwfc	prodh,w,c
 13881  000984  6EDA               	movwf	fsr2h,c
 13882  000986  50DF               	movf	indf2,w,c
 13883  000988  B4D8               	btfsc	status,2,c
 13884  00098A  D026               	goto	l485
 13885                           
 13886                           ; BSR set to: 0
 13887                           ;memoryController.c: 200: }
 13888                           ;memoryController.c: 202: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 13889                           
 13890                           ; BSR set to: 0
 13891                           
 13892                           ; BSR set to: 0
 13893                           ;memoryController.c: 198: continue;
 13894  00098C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13895  00098E  0D09               	mullw	9
 13896  000990  0E00               	movlw	low _occupiedMemory
 13897  000992  24F3               	addwf	prodl,w,c
 13898  000994  6ED9               	movwf	fsr2l,c
 13899  000996  0E02               	movlw	high _occupiedMemory
 13900  000998  20F4               	addwfc	prodh,w,c
 13901  00099A  6EDA               	movwf	fsr2h,c
 13902  00099C  EE00  F072         	lfsr	0,checkForOverlap@a
 13903  0009A0  0E08               	movlw	8
 13904  0009A2                     u8701:
 13905  0009A2  CFDB FFEB          	movff	plusw2,plusw0
 13906  0009A6  06E8               	decf	wreg,f,c
 13907  0009A8  E2FC               	bc	u8701
 13908  0009AA  5197               	movf	memory_txFrameRequest@i_1167& (0+255),w,b
 13909  0009AC  0D09               	mullw	9
 13910  0009AE  0E00               	movlw	low _occupiedMemory
 13911  0009B0  24F3               	addwf	prodl,w,c
 13912  0009B2  6ED9               	movwf	fsr2l,c
 13913  0009B4  0E02               	movlw	high _occupiedMemory
 13914  0009B6  20F4               	addwfc	prodh,w,c
 13915  0009B8  6EDA               	movwf	fsr2h,c
 13916  0009BA  EE00  F07B         	lfsr	0,checkForOverlap@b
 13917  0009BE  0E08               	movlw	8
 13918  0009C0                     u8711:
 13919  0009C0  CFDB FFEB          	movff	plusw2,plusw0
 13920  0009C4  06E8               	decf	wreg,f,c
 13921  0009C6  E2FC               	bc	u8711
 13922  0009C8  ECEC  F019         	call	_checkForOverlap	;wreg free
 13923  0009CC  0900               	iorlw	0
 13924  0009CE  B4D8               	btfsc	status,2,c
 13925  0009D0  D003               	goto	l485
 13926                           
 13927                           ;memoryController.c: 203: fNoOverlapMarker = 0;
 13928  0009D2  0E00               	movlw	0
 13929  0009D4  0100               	movlb	0	; () banked
 13930  0009D6  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 13931  0009D8                     l485:
 13932                           
 13933                           ; BSR set to: 0
 13934                           
 13935                           ; BSR set to: 0
 13936  0009D8  0100               	movlb	0	; () banked
 13937  0009DA  2B97               	incf	memory_txFrameRequest@i_1167& (0+255),f,b
 13938  0009DC  D7C0               	goto	l7585
 13939  0009DE                     u8730:
 13940                           
 13941                           ; BSR set to: 0
 13942                           ;memoryController.c: 205: }
 13943                           ;memoryController.c: 206: if (fNoOverlapMarker) {
 13944                           
 13945                           ; BSR set to: 0
 13946  0009DE  5195               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 13947  0009E0  B4D8               	btfsc	status,2,c
 13948  0009E2  D06A               	goto	l486
 13949                           
 13950                           ; BSR set to: 0
 13951                           ;memoryController.c: 207: occupiedMemory[freeIndex].fIsAssigned = 1;
 13952  0009E4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13953  0009E6  0D09               	mullw	9
 13954  0009E8  0E06               	movlw	6
 13955  0009EA  26F3               	addwf	prodl,f,c
 13956  0009EC  0E00               	movlw	0
 13957  0009EE  22F4               	addwfc	prodh,f,c
 13958  0009F0  0E00               	movlw	low _occupiedMemory
 13959  0009F2  24F3               	addwf	prodl,w,c
 13960  0009F4  6ED9               	movwf	fsr2l,c
 13961  0009F6  0E02               	movlw	high _occupiedMemory
 13962  0009F8  20F4               	addwfc	prodh,w,c
 13963  0009FA  6EDA               	movwf	fsr2h,c
 13964  0009FC  0E01               	movlw	1
 13965  0009FE  6EDF               	movwf	indf2,c
 13966                           
 13967                           ;memoryController.c: 208: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 13968  000A00  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13969  000A02  0D09               	mullw	9
 13970  000A04  0E00               	movlw	low _occupiedMemory
 13971  000A06  24F3               	addwf	prodl,w,c
 13972  000A08  6ED9               	movwf	fsr2l,c
 13973  000A0A  0E02               	movlw	high _occupiedMemory
 13974  000A0C  20F4               	addwfc	prodh,w,c
 13975  000A0E  6EDA               	movwf	fsr2h,c
 13976  000A10  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13977  000A14  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13978  000A18  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 13979  000A1A  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 13980  000A1C  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 13981  000A1E  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 13982  000A20  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13983  000A22  0D09               	mullw	9
 13984  000A24  0E02               	movlw	2
 13985  000A26  26F3               	addwf	prodl,f,c
 13986  000A28  0E00               	movlw	0
 13987  000A2A  22F4               	addwfc	prodh,f,c
 13988  000A2C  0E00               	movlw	low _occupiedMemory
 13989  000A2E  24F3               	addwf	prodl,w,c
 13990  000A30  6ED9               	movwf	fsr2l,c
 13991  000A32  0E02               	movlw	high _occupiedMemory
 13992  000A34  20F4               	addwfc	prodh,w,c
 13993  000A36  6EDA               	movwf	fsr2h,c
 13994  000A38  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 13995  000A3C  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 13996                           
 13997                           ;memoryController.c: 209: occupiedMemory[freeIndex].fOutOfMemory = 0;
 13998  000A40  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13999  000A42  0D09               	mullw	9
 14000  000A44  0E07               	movlw	7
 14001  000A46  26F3               	addwf	prodl,f,c
 14002  000A48  0E00               	movlw	0
 14003  000A4A  22F4               	addwfc	prodh,f,c
 14004  000A4C  0E00               	movlw	low _occupiedMemory
 14005  000A4E  24F3               	addwf	prodl,w,c
 14006  000A50  6ED9               	movwf	fsr2l,c
 14007  000A52  0E02               	movlw	high _occupiedMemory
 14008  000A54  20F4               	addwfc	prodh,w,c
 14009  000A56  6EDA               	movwf	fsr2h,c
 14010  000A58  0E00               	movlw	0
 14011  000A5A  6EDF               	movwf	indf2,c
 14012                           
 14013                           ;memoryController.c: 210: occupiedMemory[freeIndex].length = length;
 14014  000A5C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 14015  000A5E  0D09               	mullw	9
 14016  000A60  0E04               	movlw	4
 14017  000A62  26F3               	addwf	prodl,f,c
 14018  000A64  0E00               	movlw	0
 14019  000A66  22F4               	addwfc	prodh,f,c
 14020  000A68  0E00               	movlw	low _occupiedMemory
 14021  000A6A  24F3               	addwf	prodl,w,c
 14022  000A6C  6ED9               	movwf	fsr2l,c
 14023  000A6E  0E02               	movlw	high _occupiedMemory
 14024  000A70  20F4               	addwfc	prodh,w,c
 14025  000A72  6EDA               	movwf	fsr2h,c
 14026  000A74  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 14027  000A78  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 14028                           
 14029                           ;memoryController.c: 211: occupiedMemory[freeIndex].index=freeIndex;
 14030  000A7C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 14031  000A7E  0D09               	mullw	9
 14032  000A80  0E08               	movlw	8
 14033  000A82  26F3               	addwf	prodl,f,c
 14034  000A84  0E00               	movlw	0
 14035  000A86  22F4               	addwfc	prodh,f,c
 14036  000A88  0E00               	movlw	low _occupiedMemory
 14037  000A8A  24F3               	addwf	prodl,w,c
 14038  000A8C  6ED9               	movwf	fsr2l,c
 14039  000A8E  0E02               	movlw	high _occupiedMemory
 14040  000A90  20F4               	addwfc	prodh,w,c
 14041  000A92  6EDA               	movwf	fsr2h,c
 14042  000A94  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 14043                           
 14044                           ; BSR set to: 0
 14045                           ;memoryController.c: 212: return occupiedMemory[freeIndex];
 14046  000A98  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 14047  000A9A  0D09               	mullw	9
 14048  000A9C  0E00               	movlw	low _occupiedMemory
 14049  000A9E  24F3               	addwf	prodl,w,c
 14050  000AA0  6ED9               	movwf	fsr2l,c
 14051  000AA2  0E02               	movlw	high _occupiedMemory
 14052  000AA4  20F4               	addwfc	prodh,w,c
 14053  000AA6  6EDA               	movwf	fsr2h,c
 14054  000AA8  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 14055  000AAC  0E08               	movlw	8
 14056  000AAE                     u8751:
 14057  000AAE  CFDB FFEB          	movff	plusw2,plusw0
 14058  000AB2  06E8               	decf	wreg,f,c
 14059  000AB4  E2FC               	bc	u8751
 14060                           
 14061                           ; BSR set to: 0
 14062  000AB6  0012               	return	
 14063  000AB8                     l486:
 14064                           
 14065                           ; BSR set to: 0
 14066                           ;memoryController.c: 213: }
 14067                           ;memoryController.c: 214: }
 14068                           ;memoryController.c: 215: freeIndex++;
 14069                           
 14070                           ; BSR set to: 0
 14071                           
 14072                           ; BSR set to: 0
 14073  000AB8  2BA1               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 14074                           
 14075                           ; BSR set to: 0
 14076                           ;memoryController.c: 216: if (freeIndex == 8) {
 14077  000ABA  0E08               	movlw	8
 14078  000ABC  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 14079  000ABE  A4D8               	btfss	status,2,c
 14080  000AC0  D00C               	goto	l487
 14081                           
 14082                           ; BSR set to: 0
 14083                           ;memoryController.c: 218: field.fOutOfMemory = 1;
 14084  000AC2  0E01               	movlw	1
 14085  000AC4  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 14086                           
 14087                           ; BSR set to: 0
 14088                           ;memoryController.c: 219: return field;
 14089  000AC6  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 14090  000ACA  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 14091  000ACE  0E08               	movlw	8
 14092  000AD0                     u8771:
 14093  000AD0  CFDB FFEB          	movff	plusw2,plusw0
 14094  000AD4  06E8               	decf	wreg,f,c
 14095  000AD6  E2FC               	bc	u8771
 14096                           
 14097                           ; BSR set to: 0
 14098  000AD8  0012               	return	
 14099  000ADA                     l487:
 14100                           
 14101                           ; BSR set to: 0
 14102                           
 14103                           ; BSR set to: 0
 14104  000ADA  0E08               	movlw	8
 14105  000ADC  0100               	movlb	0	; () banked
 14106  000ADE  65A1               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 14107  000AE0  D5EC               	goto	l467
 14108  000AE2  0012               	return	
 14109  000AE4                     __end_of_memory_txFrameRequest:
 14110                           	opt stack 0
 14111                           tblptru	equ	0xFF8
 14112                           tblptrh	equ	0xFF7
 14113                           tblptrl	equ	0xFF6
 14114                           tablat	equ	0xFF5
 14115                           prodh	equ	0xFF4
 14116                           prodl	equ	0xFF3
 14117                           intcon	equ	0xFF2
 14118                           intcon3	equ	0xFF0
 14119                           indf0	equ	0xFEF
 14120                           postinc0	equ	0xFEE
 14121                           plusw0	equ	0xFEB
 14122                           fsr0h	equ	0xFEA
 14123                           fsr0l	equ	0xFE9
 14124                           wreg	equ	0xFE8
 14125                           indf1	equ	0xFE7
 14126                           postinc1	equ	0xFE6
 14127                           postdec1	equ	0xFE5
 14128                           plusw1	equ	0xFE3
 14129                           fsr1h	equ	0xFE2
 14130                           fsr1l	equ	0xFE1
 14131                           indf2	equ	0xFDF
 14132                           postinc2	equ	0xFDE
 14133                           postdec2	equ	0xFDD
 14134                           plusw2	equ	0xFDB
 14135                           fsr2h	equ	0xFDA
 14136                           fsr2l	equ	0xFD9
 14137                           status	equ	0xFD8
 14138                           
 14139 ;; *************** function _entireMemoryFull *****************
 14140 ;; Defined at:
 14141 ;;		line 44 in file "src/mem/memoryController.c"
 14142 ;; Parameters:    Size  Location     Type
 14143 ;;		None
 14144 ;; Auto vars:     Size  Location     Type
 14145 ;;  i               1    0[BANK0 ] unsigned char 
 14146 ;; Return value:  Size  Location     Type
 14147 ;;                  1    wreg      unsigned char 
 14148 ;; Registers used:
 14149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14150 ;; Tracked objects:
 14151 ;;		On entry : 0/0
 14152 ;;		On exit  : 0/0
 14153 ;;		Unchanged: 0/0
 14154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14155 ;;      Params:         0       0       0       0       0       0       0       0       0
 14156 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14157 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14158 ;;      Totals:         0       1       0       0       0       0       0       0       0
 14159 ;;Total ram usage:        1 bytes
 14160 ;; Hardware stack levels used:    1
 14161 ;; Hardware stack levels required when called:    4
 14162 ;; This function calls:
 14163 ;;		Nothing
 14164 ;; This function is called by:
 14165 ;;		_memory_txFrameRequest
 14166 ;; This function uses a non-reentrant model
 14167 ;;
 14168                           
 14169                           	psect	text45
 14170  0049FE                     __ptext45:
 14171                           	opt stack 0
 14172  0049FE                     _entireMemoryFull:
 14173                           	opt stack 23
 14174                           
 14175                           ;memoryController.c: 45: for (uint8_t i = 0; i < 8;i++) {
 14176                           
 14177                           ;incstack = 0
 14178  0049FE  0E00               	movlw	0
 14179  004A00  0100               	movlb	0	; () banked
 14180  004A02  6F60               	movwf	entireMemoryFull@i& (0+255),b
 14181  004A04                     l7311:
 14182                           
 14183                           ; BSR set to: 0
 14184  004A04  0E07               	movlw	7
 14185  004A06  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 14186  004A08  D001               	goto	l416
 14187  004A0A  D013               	goto	u8200
 14188  004A0C                     l416:
 14189                           
 14190                           ; BSR set to: 0
 14191                           ;memoryController.c: 46: if (!occupiedMemory[i].fIsAssigned)
 14192                           
 14193                           ; BSR set to: 0
 14194  004A0C  5160               	movf	entireMemoryFull@i& (0+255),w,b
 14195  004A0E  0D09               	mullw	9
 14196  004A10  0E06               	movlw	6
 14197  004A12  26F3               	addwf	prodl,f,c
 14198  004A14  0E00               	movlw	0
 14199  004A16  22F4               	addwfc	prodh,f,c
 14200  004A18  0E00               	movlw	low _occupiedMemory
 14201  004A1A  24F3               	addwf	prodl,w,c
 14202  004A1C  6ED9               	movwf	fsr2l,c
 14203  004A1E  0E02               	movlw	high _occupiedMemory
 14204  004A20  20F4               	addwfc	prodh,w,c
 14205  004A22  6EDA               	movwf	fsr2h,c
 14206  004A24  50DF               	movf	indf2,w,c
 14207  004A26  A4D8               	btfss	status,2,c
 14208  004A28  D002               	goto	l418
 14209                           
 14210                           ; BSR set to: 0
 14211                           ;memoryController.c: 47: return 0;
 14212  004A2A  0E00               	movlw	0
 14213                           
 14214                           ; BSR set to: 0
 14215  004A2C  0012               	return	
 14216  004A2E                     l418:
 14217                           
 14218                           ; BSR set to: 0
 14219                           
 14220                           ; BSR set to: 0
 14221  004A2E  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 14222  004A30  D7E9               	goto	l7311
 14223  004A32                     u8200:
 14224                           
 14225                           ; BSR set to: 0
 14226                           ;memoryController.c: 48: }
 14227                           ;memoryController.c: 49: return 1;
 14228                           
 14229                           ; BSR set to: 0
 14230  004A32  0E01               	movlw	1
 14231  004A34  0012               	return	
 14232  004A36                     __end_of_entireMemoryFull:
 14233                           	opt stack 0
 14234                           tblptru	equ	0xFF8
 14235                           tblptrh	equ	0xFF7
 14236                           tblptrl	equ	0xFF6
 14237                           tablat	equ	0xFF5
 14238                           prodh	equ	0xFF4
 14239                           prodl	equ	0xFF3
 14240                           intcon	equ	0xFF2
 14241                           intcon3	equ	0xFF0
 14242                           indf0	equ	0xFEF
 14243                           postinc0	equ	0xFEE
 14244                           plusw0	equ	0xFEB
 14245                           fsr0h	equ	0xFEA
 14246                           fsr0l	equ	0xFE9
 14247                           wreg	equ	0xFE8
 14248                           indf1	equ	0xFE7
 14249                           postinc1	equ	0xFE6
 14250                           postdec1	equ	0xFE5
 14251                           plusw1	equ	0xFE3
 14252                           fsr1h	equ	0xFE2
 14253                           fsr1l	equ	0xFE1
 14254                           indf2	equ	0xFDF
 14255                           postinc2	equ	0xFDE
 14256                           postdec2	equ	0xFDD
 14257                           plusw2	equ	0xFDB
 14258                           fsr2h	equ	0xFDA
 14259                           fsr2l	equ	0xFD9
 14260                           status	equ	0xFD8
 14261                           
 14262 ;; *************** function _entireMemoryEmpty *****************
 14263 ;; Defined at:
 14264 ;;		line 36 in file "src/mem/memoryController.c"
 14265 ;; Parameters:    Size  Location     Type
 14266 ;;		None
 14267 ;; Auto vars:     Size  Location     Type
 14268 ;;  i               1    0[BANK0 ] unsigned char 
 14269 ;; Return value:  Size  Location     Type
 14270 ;;                  1    wreg      unsigned char 
 14271 ;; Registers used:
 14272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14273 ;; Tracked objects:
 14274 ;;		On entry : 0/0
 14275 ;;		On exit  : 0/0
 14276 ;;		Unchanged: 0/0
 14277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14278 ;;      Params:         0       0       0       0       0       0       0       0       0
 14279 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14280 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14281 ;;      Totals:         0       1       0       0       0       0       0       0       0
 14282 ;;Total ram usage:        1 bytes
 14283 ;; Hardware stack levels used:    1
 14284 ;; Hardware stack levels required when called:    4
 14285 ;; This function calls:
 14286 ;;		Nothing
 14287 ;; This function is called by:
 14288 ;;		_memory_txFrameRequest
 14289 ;; This function uses a non-reentrant model
 14290 ;;
 14291                           
 14292                           	psect	text46
 14293  004A36                     __ptext46:
 14294                           	opt stack 0
 14295  004A36                     _entireMemoryEmpty:
 14296                           	opt stack 23
 14297                           
 14298                           ;memoryController.c: 37: for (uint8_t i = 0; i < 8;i++) {
 14299                           
 14300                           ; BSR set to: 0
 14301                           ;incstack = 0
 14302  004A36  0E00               	movlw	0
 14303  004A38  0100               	movlb	0	; () banked
 14304  004A3A  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 14305  004A3C                     l7291:
 14306                           
 14307                           ; BSR set to: 0
 14308  004A3C  0E07               	movlw	7
 14309  004A3E  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 14310  004A40  D001               	goto	l410
 14311  004A42  D013               	goto	u8170
 14312  004A44                     l410:
 14313                           
 14314                           ; BSR set to: 0
 14315                           ;memoryController.c: 38: if (occupiedMemory[i].fIsAssigned)
 14316                           
 14317                           ; BSR set to: 0
 14318  004A44  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 14319  004A46  0D09               	mullw	9
 14320  004A48  0E06               	movlw	6
 14321  004A4A  26F3               	addwf	prodl,f,c
 14322  004A4C  0E00               	movlw	0
 14323  004A4E  22F4               	addwfc	prodh,f,c
 14324  004A50  0E00               	movlw	low _occupiedMemory
 14325  004A52  24F3               	addwf	prodl,w,c
 14326  004A54  6ED9               	movwf	fsr2l,c
 14327  004A56  0E02               	movlw	high _occupiedMemory
 14328  004A58  20F4               	addwfc	prodh,w,c
 14329  004A5A  6EDA               	movwf	fsr2h,c
 14330  004A5C  50DF               	movf	indf2,w,c
 14331  004A5E  B4D8               	btfsc	status,2,c
 14332  004A60  D002               	goto	l412
 14333                           
 14334                           ; BSR set to: 0
 14335                           ;memoryController.c: 39: return 0;
 14336  004A62  0E00               	movlw	0
 14337                           
 14338                           ; BSR set to: 0
 14339  004A64  0012               	return	
 14340  004A66                     l412:
 14341                           
 14342                           ; BSR set to: 0
 14343                           
 14344                           ; BSR set to: 0
 14345  004A66  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 14346  004A68  D7E9               	goto	l7291
 14347  004A6A                     u8170:
 14348                           
 14349                           ; BSR set to: 0
 14350                           ;memoryController.c: 40: }
 14351                           ;memoryController.c: 41: return 1;
 14352                           
 14353                           ; BSR set to: 0
 14354  004A6A  0E01               	movlw	1
 14355  004A6C  0012               	return	
 14356  004A6E                     __end_of_entireMemoryEmpty:
 14357                           	opt stack 0
 14358                           tblptru	equ	0xFF8
 14359                           tblptrh	equ	0xFF7
 14360                           tblptrl	equ	0xFF6
 14361                           tablat	equ	0xFF5
 14362                           prodh	equ	0xFF4
 14363                           prodl	equ	0xFF3
 14364                           intcon	equ	0xFF2
 14365                           intcon3	equ	0xFF0
 14366                           indf0	equ	0xFEF
 14367                           postinc0	equ	0xFEE
 14368                           plusw0	equ	0xFEB
 14369                           fsr0h	equ	0xFEA
 14370                           fsr0l	equ	0xFE9
 14371                           wreg	equ	0xFE8
 14372                           indf1	equ	0xFE7
 14373                           postinc1	equ	0xFE6
 14374                           postdec1	equ	0xFE5
 14375                           plusw1	equ	0xFE3
 14376                           fsr1h	equ	0xFE2
 14377                           fsr1l	equ	0xFE1
 14378                           indf2	equ	0xFDF
 14379                           postinc2	equ	0xFDE
 14380                           postdec2	equ	0xFDD
 14381                           plusw2	equ	0xFDB
 14382                           fsr2h	equ	0xFDA
 14383                           fsr2l	equ	0xFD9
 14384                           status	equ	0xFD8
 14385                           
 14386 ;; *************** function _checkForOverlap *****************
 14387 ;; Defined at:
 14388 ;;		line 62 in file "src/mem/memoryController.c"
 14389 ;; Parameters:    Size  Location     Type
 14390 ;;  a               9   18[BANK0 ] struct memoryField
 14391 ;;  b               9   27[BANK0 ] struct memoryField
 14392 ;; Auto vars:     Size  Location     Type
 14393 ;;		None
 14394 ;; Return value:  Size  Location     Type
 14395 ;;                  1    wreg      unsigned char 
 14396 ;; Registers used:
 14397 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 14398 ;; Tracked objects:
 14399 ;;		On entry : 0/0
 14400 ;;		On exit  : 0/0
 14401 ;;		Unchanged: 0/0
 14402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14403 ;;      Params:         0      18       0       0       0       0       0       0       0
 14404 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14405 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14406 ;;      Totals:         0      18       0       0       0       0       0       0       0
 14407 ;;Total ram usage:       18 bytes
 14408 ;; Hardware stack levels used:    1
 14409 ;; Hardware stack levels required when called:    5
 14410 ;; This function calls:
 14411 ;;		_checkForOverlapSwitched
 14412 ;; This function is called by:
 14413 ;;		_memory_txFrameRequest
 14414 ;; This function uses a non-reentrant model
 14415 ;;
 14416                           
 14417                           	psect	text47
 14418  0033D8                     __ptext47:
 14419                           	opt stack 0
 14420  0033D8                     _checkForOverlap:
 14421                           	opt stack 22
 14422                           
 14423                           ;memoryController.c: 63: if ((a.start == b.start) ||
 14424                           ;memoryController.c: 64: (a.end == b.end) ||
 14425                           ;memoryController.c: 65: (a.start == b.end) ||
 14426                           ;memoryController.c: 66: (a.end == b.start) ||
 14427                           ;memoryController.c: 67: (a.end > 0x3000) ||
 14428                           ;memoryController.c: 68: (a.start > 0x3000) ||
 14429                           ;memoryController.c: 69: (b.end > 0x3000) ||
 14430                           ;memoryController.c: 70: (b.start > 0x3000))
 14431                           
 14432                           ; BSR set to: 0
 14433                           ;incstack = 0
 14434  0033D8  0100               	movlb	0	; () banked
 14435  0033DA  517B               	movf	checkForOverlap@b& (0+255),w,b
 14436  0033DC  1972               	xorwf	checkForOverlap@a& (0+255),w,b
 14437  0033DE  E104               	bnz	u8210
 14438  0033E0  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 14439  0033E2  1973               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 14440  0033E4  B4D8               	btfsc	status,2,c
 14441  0033E6  D029               	goto	u8280
 14442  0033E8                     u8210:
 14443                           
 14444                           ; BSR set to: 0
 14445  0033E8  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 14446  0033EA  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 14447  0033EC  E104               	bnz	u8220
 14448  0033EE  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 14449  0033F0  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 14450  0033F2  B4D8               	btfsc	status,2,c
 14451  0033F4  D022               	goto	u8280
 14452  0033F6                     u8220:
 14453                           
 14454                           ; BSR set to: 0
 14455  0033F6  5172               	movf	checkForOverlap@a& (0+255),w,b
 14456  0033F8  197D               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 14457  0033FA  E104               	bnz	u8230
 14458  0033FC  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 14459  0033FE  197E               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 14460  003400  B4D8               	btfsc	status,2,c
 14461  003402  D01B               	goto	u8280
 14462  003404                     u8230:
 14463                           
 14464                           ; BSR set to: 0
 14465  003404  517B               	movf	checkForOverlap@b& (0+255),w,b
 14466  003406  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 14467  003408  E104               	bnz	u8240
 14468  00340A  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 14469  00340C  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 14470  00340E  B4D8               	btfsc	status,2,c
 14471  003410  D014               	goto	u8280
 14472  003412                     u8240:
 14473                           
 14474                           ; BSR set to: 0
 14475  003412  0574               	decf	(checkForOverlap@a+2)& (0+255),w,b
 14476  003414  0E30               	movlw	48
 14477  003416  5975               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 14478  003418  B0D8               	btfsc	status,0,c
 14479  00341A  D00F               	goto	u8280
 14480                           
 14481                           ; BSR set to: 0
 14482  00341C  0572               	decf	checkForOverlap@a& (0+255),w,b
 14483  00341E  0E30               	movlw	48
 14484  003420  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 14485  003422  B0D8               	btfsc	status,0,c
 14486  003424  D00A               	goto	u8280
 14487                           
 14488                           ; BSR set to: 0
 14489  003426  057D               	decf	(checkForOverlap@b+2)& (0+255),w,b
 14490  003428  0E30               	movlw	48
 14491  00342A  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 14492  00342C  B0D8               	btfsc	status,0,c
 14493  00342E  D005               	goto	u8280
 14494                           
 14495                           ; BSR set to: 0
 14496  003430  057B               	decf	checkForOverlap@b& (0+255),w,b
 14497  003432  0E30               	movlw	48
 14498  003434  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 14499  003436  A0D8               	btfss	status,0,c
 14500  003438  D002               	goto	l430
 14501  00343A                     u8280:
 14502                           
 14503                           ; BSR set to: 0
 14504                           ;memoryController.c: 71: return 1;
 14505                           
 14506                           ; BSR set to: 0
 14507  00343A  0E01               	movlw	1
 14508                           
 14509                           ; BSR set to: 0
 14510  00343C  0012               	return	
 14511  00343E                     l430:
 14512                           
 14513                           ; BSR set to: 0
 14514                           ;memoryController.c: 74: if (a.start < a.end) {
 14515                           
 14516                           ; BSR set to: 0
 14517  00343E  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 14518  003440  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 14519  003442  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 14520  003444  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 14521  003446  B0D8               	btfsc	status,0,c
 14522  003448  D036               	goto	l434
 14523                           
 14524                           ; BSR set to: 0
 14525                           ;memoryController.c: 75: if (b.start < b.end) {
 14526  00344A  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 14527  00344C  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 14528  00344E  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 14529  003450  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 14530  003452  B0D8               	btfsc	status,0,c
 14531  003454  D025               	goto	l435
 14532                           
 14533                           ; BSR set to: 0
 14534                           ;memoryController.c: 77: if (a.start < b.start) {
 14535  003456  517B               	movf	checkForOverlap@b& (0+255),w,b
 14536  003458  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 14537  00345A  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 14538  00345C  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 14539  00345E  B0D8               	btfsc	status,0,c
 14540  003460  D00A               	goto	l436
 14541                           
 14542                           ; BSR set to: 0
 14543                           ;memoryController.c: 78: if (a.end > b.start) {
 14544  003462  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 14545  003464  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 14546  003466  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 14547  003468  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 14548  00346A  B0D8               	btfsc	status,0,c
 14549  00346C  D002               	goto	l437
 14550                           
 14551                           ; BSR set to: 0
 14552                           ;memoryController.c: 79: return 1;
 14553  00346E  0E01               	movlw	1
 14554                           
 14555                           ; BSR set to: 0
 14556                           ;memoryController.c: 80: }
 14557                           
 14558                           ; BSR set to: 0
 14559  003470  0012               	return	
 14560  003472                     l437:
 14561                           
 14562                           ; BSR set to: 0
 14563                           ;memoryController.c: 81: else {
 14564                           ;memoryController.c: 82: return 0;
 14565                           
 14566                           ; BSR set to: 0
 14567  003472  0E00               	movlw	0
 14568                           
 14569                           ; BSR set to: 0
 14570                           ;memoryController.c: 83: }
 14571                           ;memoryController.c: 84: }
 14572                           
 14573                           ; BSR set to: 0
 14574  003474  0012               	return	
 14575  003476                     l436:
 14576                           
 14577                           ; BSR set to: 0
 14578                           ;memoryController.c: 85: else {
 14579                           ;memoryController.c: 86: return checkForOverlapSwitched(b, a);
 14580                           
 14581                           ; BSR set to: 0
 14582  003476  EE20  F07B         	lfsr	2,checkForOverlap@b
 14583  00347A  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 14584  00347E  0E08               	movlw	8
 14585  003480                     u8331:
 14586  003480  CFDB FFEB          	movff	plusw2,plusw0
 14587  003484  06E8               	decf	wreg,f,c
 14588  003486  E2FC               	bc	u8331
 14589  003488  EE20  F072         	lfsr	2,checkForOverlap@a
 14590  00348C  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 14591  003490  0E08               	movlw	8
 14592  003492                     u8341:
 14593  003492  CFDB FFEB          	movff	plusw2,plusw0
 14594  003496  06E8               	decf	wreg,f,c
 14595  003498  E2FC               	bc	u8341
 14596  00349A  EC47  F01D         	call	_checkForOverlapSwitched	;wreg free
 14597                           
 14598                           ;memoryController.c: 87: }
 14599                           ;memoryController.c: 88: }
 14600  00349E  0012               	return	
 14601  0034A0                     l435:
 14602                           
 14603                           ;memoryController.c: 89: else {
 14604                           ;memoryController.c: 90: if (b.end < a.start)
 14605  0034A0  0100               	movlb	0	; () banked
 14606  0034A2  5172               	movf	checkForOverlap@a& (0+255),w,b
 14607  0034A4  5D7D               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 14608  0034A6  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 14609  0034A8  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 14610  0034AA  B0D8               	btfsc	status,0,c
 14611  0034AC  D002               	goto	l441
 14612                           
 14613                           ; BSR set to: 0
 14614                           ;memoryController.c: 91: return 0;
 14615  0034AE  0E00               	movlw	0
 14616                           
 14617                           ; BSR set to: 0
 14618                           
 14619                           ; BSR set to: 0
 14620  0034B0  0012               	return	
 14621  0034B2                     l441:
 14622                           
 14623                           ; BSR set to: 0
 14624                           ;memoryController.c: 92: else
 14625                           ;memoryController.c: 93: return 1;
 14626                           
 14627                           ; BSR set to: 0
 14628  0034B2  0E01               	movlw	1
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;memoryController.c: 94: }
 14632                           ;memoryController.c: 95: }
 14633                           
 14634                           ; BSR set to: 0
 14635                           
 14636                           ; BSR set to: 0
 14637  0034B4  0012               	return	
 14638  0034B6                     l434:
 14639                           
 14640                           ; BSR set to: 0
 14641                           ;memoryController.c: 96: else {
 14642                           ;memoryController.c: 97: return checkForOverlapSwitched(b, a);
 14643                           
 14644                           ; BSR set to: 0
 14645  0034B6  EE20  F07B         	lfsr	2,checkForOverlap@b
 14646  0034BA  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 14647  0034BE  0E08               	movlw	8
 14648  0034C0                     u8361:
 14649  0034C0  CFDB FFEB          	movff	plusw2,plusw0
 14650  0034C4  06E8               	decf	wreg,f,c
 14651  0034C6  E2FC               	bc	u8361
 14652  0034C8  EE20  F072         	lfsr	2,checkForOverlap@a
 14653  0034CC  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 14654  0034D0  0E08               	movlw	8
 14655  0034D2                     u8371:
 14656  0034D2  CFDB FFEB          	movff	plusw2,plusw0
 14657  0034D6  06E8               	decf	wreg,f,c
 14658  0034D8  E2FC               	bc	u8371
 14659  0034DA  EC47  F01D         	call	_checkForOverlapSwitched	;wreg free
 14660  0034DE  0012               	return	
 14661  0034E0                     __end_of_checkForOverlap:
 14662                           	opt stack 0
 14663                           tblptru	equ	0xFF8
 14664                           tblptrh	equ	0xFF7
 14665                           tblptrl	equ	0xFF6
 14666                           tablat	equ	0xFF5
 14667                           prodh	equ	0xFF4
 14668                           prodl	equ	0xFF3
 14669                           intcon	equ	0xFF2
 14670                           intcon3	equ	0xFF0
 14671                           indf0	equ	0xFEF
 14672                           postinc0	equ	0xFEE
 14673                           plusw0	equ	0xFEB
 14674                           fsr0h	equ	0xFEA
 14675                           fsr0l	equ	0xFE9
 14676                           wreg	equ	0xFE8
 14677                           indf1	equ	0xFE7
 14678                           postinc1	equ	0xFE6
 14679                           postdec1	equ	0xFE5
 14680                           plusw1	equ	0xFE3
 14681                           fsr1h	equ	0xFE2
 14682                           fsr1l	equ	0xFE1
 14683                           indf2	equ	0xFDF
 14684                           postinc2	equ	0xFDE
 14685                           postdec2	equ	0xFDD
 14686                           plusw2	equ	0xFDB
 14687                           fsr2h	equ	0xFDA
 14688                           fsr2l	equ	0xFD9
 14689                           status	equ	0xFD8
 14690                           
 14691 ;; *************** function _checkForOverlapSwitched *****************
 14692 ;; Defined at:
 14693 ;;		line 101 in file "src/mem/memoryController.c"
 14694 ;; Parameters:    Size  Location     Type
 14695 ;;  a               9    0[BANK0 ] struct memoryField
 14696 ;;  b               9    9[BANK0 ] struct memoryField
 14697 ;; Auto vars:     Size  Location     Type
 14698 ;;		None
 14699 ;; Return value:  Size  Location     Type
 14700 ;;                  1    wreg      unsigned char 
 14701 ;; Registers used:
 14702 ;;		wreg, status,2, status,0
 14703 ;; Tracked objects:
 14704 ;;		On entry : 0/0
 14705 ;;		On exit  : 0/0
 14706 ;;		Unchanged: 0/0
 14707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14708 ;;      Params:         0      18       0       0       0       0       0       0       0
 14709 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14710 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14711 ;;      Totals:         0      18       0       0       0       0       0       0       0
 14712 ;;Total ram usage:       18 bytes
 14713 ;; Hardware stack levels used:    1
 14714 ;; Hardware stack levels required when called:    4
 14715 ;; This function calls:
 14716 ;;		Nothing
 14717 ;; This function is called by:
 14718 ;;		_checkForOverlap
 14719 ;; This function uses a non-reentrant model
 14720 ;;
 14721                           
 14722                           	psect	text48
 14723  003A8E                     __ptext48:
 14724                           	opt stack 0
 14725  003A8E                     _checkForOverlapSwitched:
 14726                           	opt stack 22
 14727                           
 14728                           ;memoryController.c: 104: if ((a.start == b.start) ||
 14729                           ;memoryController.c: 105: (a.end == b.end) ||
 14730                           ;memoryController.c: 106: (a.start == b.end) ||
 14731                           ;memoryController.c: 107: (a.end == b.start) ||
 14732                           ;memoryController.c: 108: (a.end > 0x3000) ||
 14733                           ;memoryController.c: 109: (a.start > 0x3000) ||
 14734                           ;memoryController.c: 110: (b.end > 0x3000) ||
 14735                           ;memoryController.c: 111: (b.start > 0x3000))
 14736                           
 14737                           ;incstack = 0
 14738  003A8E  0100               	movlb	0	; () banked
 14739  003A90  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 14740  003A92  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 14741  003A94  E104               	bnz	u8020
 14742  003A96  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14743  003A98  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14744  003A9A  B4D8               	btfsc	status,2,c
 14745  003A9C  D029               	goto	u8090
 14746  003A9E                     u8020:
 14747                           
 14748                           ; BSR set to: 0
 14749  003A9E  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14750  003AA0  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14751  003AA2  E104               	bnz	u8030
 14752  003AA4  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14753  003AA6  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14754  003AA8  B4D8               	btfsc	status,2,c
 14755  003AAA  D022               	goto	u8090
 14756  003AAC                     u8030:
 14757                           
 14758                           ; BSR set to: 0
 14759  003AAC  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 14760  003AAE  196B               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14761  003AB0  E104               	bnz	u8040
 14762  003AB2  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14763  003AB4  196C               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14764  003AB6  B4D8               	btfsc	status,2,c
 14765  003AB8  D01B               	goto	u8090
 14766  003ABA                     u8040:
 14767                           
 14768                           ; BSR set to: 0
 14769  003ABA  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 14770  003ABC  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14771  003ABE  E104               	bnz	u8050
 14772  003AC0  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14773  003AC2  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14774  003AC4  B4D8               	btfsc	status,2,c
 14775  003AC6  D014               	goto	u8090
 14776  003AC8                     u8050:
 14777                           
 14778                           ; BSR set to: 0
 14779  003AC8  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14780  003ACA  0E30               	movlw	48
 14781  003ACC  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14782  003ACE  B0D8               	btfsc	status,0,c
 14783  003AD0  D00F               	goto	u8090
 14784                           
 14785                           ; BSR set to: 0
 14786  003AD2  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 14787  003AD4  0E30               	movlw	48
 14788  003AD6  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14789  003AD8  B0D8               	btfsc	status,0,c
 14790  003ADA  D00A               	goto	u8090
 14791                           
 14792                           ; BSR set to: 0
 14793  003ADC  056B               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14794  003ADE  0E30               	movlw	48
 14795  003AE0  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14796  003AE2  B0D8               	btfsc	status,0,c
 14797  003AE4  D005               	goto	u8090
 14798                           
 14799                           ; BSR set to: 0
 14800  003AE6  0569               	decf	checkForOverlapSwitched@b& (0+255),w,b
 14801  003AE8  0E30               	movlw	48
 14802  003AEA  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14803  003AEC  A0D8               	btfss	status,0,c
 14804  003AEE  D002               	goto	l446
 14805  003AF0                     u8090:
 14806                           
 14807                           ; BSR set to: 0
 14808                           ;memoryController.c: 112: return 1;
 14809                           
 14810                           ; BSR set to: 0
 14811  003AF0  0E01               	movlw	1
 14812                           
 14813                           ; BSR set to: 0
 14814  003AF2  0012               	return	
 14815  003AF4                     l446:
 14816                           
 14817                           ; BSR set to: 0
 14818                           ;memoryController.c: 115: if (a.start < a.end) {
 14819                           
 14820                           ; BSR set to: 0
 14821  003AF4  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14822  003AF6  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 14823  003AF8  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14824  003AFA  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14825  003AFC  B0D8               	btfsc	status,0,c
 14826  003AFE  0012               	return	
 14827                           
 14828                           ; BSR set to: 0
 14829                           ;memoryController.c: 116: if (b.start < b.end) {
 14830  003B00  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14831  003B02  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 14832  003B04  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14833  003B06  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14834  003B08  B0D8               	btfsc	status,0,c
 14835  003B0A  D010               	goto	l451
 14836                           
 14837                           ; BSR set to: 0
 14838                           ;memoryController.c: 118: if (a.start < b.start) {
 14839  003B0C  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 14840  003B0E  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 14841  003B10  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14842  003B12  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14843  003B14  B0D8               	btfsc	status,0,c
 14844  003B16  0012               	return	
 14845                           
 14846                           ; BSR set to: 0
 14847                           ;memoryController.c: 119: if (a.end > b.start) {
 14848  003B18  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14849  003B1A  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 14850  003B1C  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14851  003B1E  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14852  003B20  B0D8               	btfsc	status,0,c
 14853  003B22  D002               	goto	l453
 14854                           
 14855                           ; BSR set to: 0
 14856                           ;memoryController.c: 120: return 1;
 14857  003B24  0E01               	movlw	1
 14858                           
 14859                           ; BSR set to: 0
 14860                           ;memoryController.c: 121: }
 14861                           
 14862                           ; BSR set to: 0
 14863  003B26  0012               	return	
 14864  003B28                     l453:
 14865                           
 14866                           ; BSR set to: 0
 14867                           ;memoryController.c: 122: else {
 14868                           ;memoryController.c: 123: return 0;
 14869                           
 14870                           ; BSR set to: 0
 14871  003B28  0E00               	movlw	0
 14872                           
 14873                           ; BSR set to: 0
 14874                           ;memoryController.c: 124: }
 14875                           ;memoryController.c: 125: }
 14876                           ;memoryController.c: 126: }
 14877                           
 14878                           ; BSR set to: 0
 14879                           
 14880                           ; BSR set to: 0
 14881  003B2A  0012               	return	
 14882  003B2C                     l451:
 14883                           
 14884                           ; BSR set to: 0
 14885                           ;memoryController.c: 127: else {
 14886                           ;memoryController.c: 128: if (b.end < a.start)
 14887                           
 14888                           ; BSR set to: 0
 14889  003B2C  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 14890  003B2E  5D6B               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14891  003B30  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14892  003B32  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14893  003B34  B0D8               	btfsc	status,0,c
 14894  003B36  D002               	goto	l456
 14895                           
 14896                           ; BSR set to: 0
 14897                           ;memoryController.c: 129: return 0;
 14898  003B38  0E00               	movlw	0
 14899                           
 14900                           ; BSR set to: 0
 14901                           
 14902                           ; BSR set to: 0
 14903  003B3A  0012               	return	
 14904  003B3C                     l456:
 14905                           
 14906                           ; BSR set to: 0
 14907                           ;memoryController.c: 130: else
 14908                           ;memoryController.c: 131: return 1;
 14909                           
 14910                           ; BSR set to: 0
 14911  003B3C  0E01               	movlw	1
 14912                           
 14913                           ; BSR set to: 0
 14914                           
 14915                           ; BSR set to: 0
 14916                           
 14917                           ; BSR set to: 0
 14918  003B3E  0012               	return	
 14919  003B40                     __end_of_checkForOverlapSwitched:
 14920                           	opt stack 0
 14921                           tblptru	equ	0xFF8
 14922                           tblptrh	equ	0xFF7
 14923                           tblptrl	equ	0xFF6
 14924                           tablat	equ	0xFF5
 14925                           prodh	equ	0xFF4
 14926                           prodl	equ	0xFF3
 14927                           intcon	equ	0xFF2
 14928                           intcon3	equ	0xFF0
 14929                           indf0	equ	0xFEF
 14930                           postinc0	equ	0xFEE
 14931                           plusw0	equ	0xFEB
 14932                           fsr0h	equ	0xFEA
 14933                           fsr0l	equ	0xFE9
 14934                           wreg	equ	0xFE8
 14935                           indf1	equ	0xFE7
 14936                           postinc1	equ	0xFE6
 14937                           postdec1	equ	0xFE5
 14938                           plusw1	equ	0xFE3
 14939                           fsr1h	equ	0xFE2
 14940                           fsr1l	equ	0xFE1
 14941                           indf2	equ	0xFDF
 14942                           postinc2	equ	0xFDE
 14943                           postdec2	equ	0xFDD
 14944                           plusw2	equ	0xFDB
 14945                           fsr2h	equ	0xFDA
 14946                           fsr2l	equ	0xFD9
 14947                           status	equ	0xFD8
 14948                           
 14949 ;; *************** function ___wmul *****************
 14950 ;; Defined at:
 14951 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14952 ;; Parameters:    Size  Location     Type
 14953 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14954 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14955 ;; Auto vars:     Size  Location     Type
 14956 ;;  product         2    4[BANK0 ] unsigned int 
 14957 ;; Return value:  Size  Location     Type
 14958 ;;                  2    0[BANK0 ] unsigned int 
 14959 ;; Registers used:
 14960 ;;		wreg, status,2, status,0, prodl, prodh
 14961 ;; Tracked objects:
 14962 ;;		On entry : 0/0
 14963 ;;		On exit  : 0/0
 14964 ;;		Unchanged: 0/0
 14965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14966 ;;      Params:         0       4       0       0       0       0       0       0       0
 14967 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14968 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14969 ;;      Totals:         0       6       0       0       0       0       0       0       0
 14970 ;;Total ram usage:        6 bytes
 14971 ;; Hardware stack levels used:    1
 14972 ;; Hardware stack levels required when called:    4
 14973 ;; This function calls:
 14974 ;;		Nothing
 14975 ;; This function is called by:
 14976 ;;		_memory_txFrameRequest
 14977 ;;		_intToString
 14978 ;; This function uses a non-reentrant model
 14979 ;;
 14980                           
 14981                           	psect	text49
 14982  004C38                     __ptext49:
 14983                           	opt stack 0
 14984  004C38                     ___wmul:
 14985                           	opt stack 24
 14986                           
 14987                           ; BSR set to: 0
 14988                           ;incstack = 0
 14989  004C38  0100               	movlb	0	; () banked
 14990  004C3A  5160               	movf	___wmul@multiplier& (0+255),w,b
 14991  004C3C  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14992  004C3E  CFF3 F064          	movff	prodl,___wmul@product
 14993  004C42  CFF4 F065          	movff	prodh,___wmul@product+1
 14994  004C46  5160               	movf	___wmul@multiplier& (0+255),w,b
 14995  004C48  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14996  004C4A  50F3               	movf	prodl,w,c
 14997  004C4C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14998  004C4E  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14999  004C50  0362               	mulwf	___wmul@multiplicand& (0+255),b
 15000  004C52  50F3               	movf	prodl,w,c
 15001  004C54  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 15002                           
 15003                           ; BSR set to: 0
 15004  004C56  C064  F060         	movff	___wmul@product,?___wmul
 15005  004C5A  C065  F061         	movff	___wmul@product+1,?___wmul+1
 15006  004C5E  0012               	return	
 15007  004C60                     __end_of___wmul:
 15008                           	opt stack 0
 15009                           tblptru	equ	0xFF8
 15010                           tblptrh	equ	0xFF7
 15011                           tblptrl	equ	0xFF6
 15012                           tablat	equ	0xFF5
 15013                           prodh	equ	0xFF4
 15014                           prodl	equ	0xFF3
 15015                           intcon	equ	0xFF2
 15016                           intcon3	equ	0xFF0
 15017                           indf0	equ	0xFEF
 15018                           postinc0	equ	0xFEE
 15019                           plusw0	equ	0xFEB
 15020                           fsr0h	equ	0xFEA
 15021                           fsr0l	equ	0xFE9
 15022                           wreg	equ	0xFE8
 15023                           indf1	equ	0xFE7
 15024                           postinc1	equ	0xFE6
 15025                           postdec1	equ	0xFE5
 15026                           plusw1	equ	0xFE3
 15027                           fsr1h	equ	0xFE2
 15028                           fsr1l	equ	0xFE1
 15029                           indf2	equ	0xFDF
 15030                           postinc2	equ	0xFDE
 15031                           postdec2	equ	0xFDD
 15032                           plusw2	equ	0xFDB
 15033                           fsr2h	equ	0xFDA
 15034                           fsr2l	equ	0xFD9
 15035                           status	equ	0xFD8
 15036                           
 15037 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 15038 ;; Defined at:
 15039 ;;		line 240 in file "src/enc424j600/ENC424J600.c"
 15040 ;; Parameters:    Size  Location     Type
 15041 ;;  ethtype         2   15[BANK0 ] enum E5507
 15042 ;;  field           9   17[BANK0 ] struct memoryField
 15043 ;; Auto vars:     Size  Location     Type
 15044 ;;  opcode          1   28[BANK0 ] unsigned char 
 15045 ;;  highByte        1   27[BANK0 ] unsigned char 
 15046 ;;  lowByte         1   26[BANK0 ] unsigned char 
 15047 ;; Return value:  Size  Location     Type
 15048 ;;                  1    wreg      void 
 15049 ;; Registers used:
 15050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15051 ;; Tracked objects:
 15052 ;;		On entry : 0/0
 15053 ;;		On exit  : 0/0
 15054 ;;		Unchanged: 0/0
 15055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15056 ;;      Params:         0      11       0       0       0       0       0       0       0
 15057 ;;      Locals:         0       3       0       0       0       0       0       0       0
 15058 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15059 ;;      Totals:         0      14       0       0       0       0       0       0       0
 15060 ;;Total ram usage:       14 bytes
 15061 ;; Hardware stack levels used:    1
 15062 ;; Hardware stack levels required when called:    7
 15063 ;; This function calls:
 15064 ;;		_ENC424J600_setGPDATAWritePointer
 15065 ;;		_ENC424J600_writeSPI
 15066 ;; This function is called by:
 15067 ;;		_ethernet_txFrameRequest
 15068 ;; This function uses a non-reentrant model
 15069 ;;
 15070                           
 15071                           	psect	text50
 15072  00470E                     __ptext50:
 15073                           	opt stack 0
 15074  00470E                     _ethernetController_writeEtherTypeFieldToBuffer:
 15075                           	opt stack 21
 15076                           
 15077                           ;ENC424J600.c: 241: ENC424J600_setGPDATAWritePointer(field.start + 0x0006);
 15078                           
 15079                           ; BSR set to: 0
 15080                           ;incstack = 0
 15081  00470E  0E06               	movlw	6
 15082  004710  0100               	movlb	0	; () banked
 15083  004712  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 15084  004714  6F6A               	movwf	ENC424J600_setGPDATAWritePointer@addr& (0+255),b
 15085  004716  0E00               	movlw	0
 15086  004718  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 15087  00471A  6F6B               	movwf	(ENC424J600_setGPDATAWritePointer@addr+1)& (0+255),b
 15088  00471C  ECC3  F024         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 15089                           
 15090                           ;ENC424J600.c: 242: uint8_t lowByte = ethtype & 0x00ff;
 15091  004720  C06F  F07A         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 15092                           
 15093                           ;ENC424J600.c: 243: uint8_t highByte = (ethtype & 0xff00) >> 8;
 15094  004724  0100               	movlb	0	; () banked
 15095  004726  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 15096  004728  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 15097                           
 15098                           ; BSR set to: 0
 15099                           ;ENC424J600.c: 244: uint8_t opcode = 0x2A;
 15100  00472A  0E2A               	movlw	42
 15101  00472C  6F7C               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 15102                           
 15103                           ; BSR set to: 0
 15104                           ;ENC424J600.c: 245: PORTBbits.RB4=0;
 15105  00472E  9881               	bcf	3969,4,c	;volatile
 15106                           
 15107                           ;ENC424J600.c: 246: ENC424J600_writeSPI(&opcode);
 15108  004730  0E7C               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 15109  004732  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15110  004734  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 15111  004736  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15112  004738  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 15113                           
 15114                           ;ENC424J600.c: 247: ENC424J600_writeSPI(&highByte);
 15115  00473C  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 15116  00473E  0100               	movlb	0	; () banked
 15117  004740  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15118  004742  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 15119  004744  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15120  004746  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 15121                           
 15122                           ;ENC424J600.c: 248: ENC424J600_writeSPI(&lowByte);
 15123  00474A  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 15124  00474C  0100               	movlb	0	; () banked
 15125  00474E  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15126  004750  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 15127  004752  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15128  004754  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 15129                           
 15130                           ;ENC424J600.c: 249: PORTBbits.RB4=1;
 15131  004758  8881               	bsf	3969,4,c	;volatile
 15132  00475A  0012               	return		;funcret
 15133  00475C                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 15134                           	opt stack 0
 15135                           tblptru	equ	0xFF8
 15136                           tblptrh	equ	0xFF7
 15137                           tblptrl	equ	0xFF6
 15138                           tablat	equ	0xFF5
 15139                           prodh	equ	0xFF4
 15140                           prodl	equ	0xFF3
 15141                           intcon	equ	0xFF2
 15142                           intcon3	equ	0xFF0
 15143                           indf0	equ	0xFEF
 15144                           postinc0	equ	0xFEE
 15145                           plusw0	equ	0xFEB
 15146                           fsr0h	equ	0xFEA
 15147                           fsr0l	equ	0xFE9
 15148                           wreg	equ	0xFE8
 15149                           indf1	equ	0xFE7
 15150                           postinc1	equ	0xFE6
 15151                           postdec1	equ	0xFE5
 15152                           plusw1	equ	0xFE3
 15153                           fsr1h	equ	0xFE2
 15154                           fsr1l	equ	0xFE1
 15155                           indf2	equ	0xFDF
 15156                           postinc2	equ	0xFDE
 15157                           postdec2	equ	0xFDD
 15158                           plusw2	equ	0xFDB
 15159                           fsr2h	equ	0xFDA
 15160                           fsr2l	equ	0xFD9
 15161                           status	equ	0xFD8
 15162                           
 15163 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 15164 ;; Defined at:
 15165 ;;		line 227 in file "src/enc424j600/ENC424J600.c"
 15166 ;; Parameters:    Size  Location     Type
 15167 ;;  addr            6   15[BANK0 ] struct macaddress
 15168 ;;  field           9   21[BANK0 ] struct memoryField
 15169 ;; Auto vars:     Size  Location     Type
 15170 ;;  i               1   37[BANK0 ] unsigned char 
 15171 ;;  i               1   38[BANK0 ] unsigned char 
 15172 ;;  data            6   30[BANK0 ] unsigned char [6]
 15173 ;;  opcode          1   36[BANK0 ] unsigned char 
 15174 ;; Return value:  Size  Location     Type
 15175 ;;                  1    wreg      void 
 15176 ;; Registers used:
 15177 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15178 ;; Tracked objects:
 15179 ;;		On entry : 0/0
 15180 ;;		On exit  : 0/0
 15181 ;;		Unchanged: 0/0
 15182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15183 ;;      Params:         0      15       0       0       0       0       0       0       0
 15184 ;;      Locals:         0       9       0       0       0       0       0       0       0
 15185 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15186 ;;      Totals:         0      24       0       0       0       0       0       0       0
 15187 ;;Total ram usage:       24 bytes
 15188 ;; Hardware stack levels used:    1
 15189 ;; Hardware stack levels required when called:    7
 15190 ;; This function calls:
 15191 ;;		_ENC424J600_setGPDATAWritePointer
 15192 ;;		_ENC424J600_writeSPI
 15193 ;; This function is called by:
 15194 ;;		_ethernet_txFrameRequest
 15195 ;;		_ipv4_sendFrame
 15196 ;; This function uses a non-reentrant model
 15197 ;;
 15198                           
 15199                           	psect	text51
 15200  003FD2                     __ptext51:
 15201                           	opt stack 0
 15202  003FD2                     _ethernetController_writeDestinationMACAddress:
 15203                           	opt stack 21
 15204                           
 15205                           ;ENC424J600.c: 228: ENC424J600_setGPDATAWritePointer(field.start);
 15206                           
 15207                           ;incstack = 0
 15208  003FD2  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,ENC424J600_setGPDATAWritePoin
      +                          ter@addr
 15209  003FD6  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,ENC424J600_setGPDATAWritePo
      +                          inter@addr+1
 15210  003FDA  ECC3  F024         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 15211                           
 15212                           ;ENC424J600.c: 229: uint8_t data[6];
 15213                           ;ENC424J600.c: 230: for (uint8_t i = 0; i < 6; i++)
 15214  003FDE  0E00               	movlw	0
 15215  003FE0  0100               	movlb	0	; () banked
 15216  003FE2  6F86               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 15217  003FE4                     l7421:
 15218                           
 15219                           ; BSR set to: 0
 15220  003FE4  0E05               	movlw	5
 15221  003FE6  6586               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 15222  003FE8  D001               	goto	l136
 15223  003FEA  D014               	goto	u8390
 15224  003FEC                     l136:
 15225                           
 15226                           ; BSR set to: 0
 15227                           ;ENC424J600.c: 231: data[i] = addr.address[i];
 15228                           
 15229                           ; BSR set to: 0
 15230  003FEC  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 15231  003FEE  0D01               	mullw	1
 15232  003FF0  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 15233  003FF2  24F3               	addwf	prodl,w,c
 15234  003FF4  6ED9               	movwf	fsr2l,c
 15235  003FF6  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 15236  003FF8  20F4               	addwfc	prodh,w,c
 15237  003FFA  6EDA               	movwf	fsr2h,c
 15238  003FFC  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 15239  003FFE  0D01               	mullw	1
 15240  004000  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 15241  004002  24F3               	addwf	prodl,w,c
 15242  004004  6EE1               	movwf	fsr1l,c
 15243  004006  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 15244  004008  20F4               	addwfc	prodh,w,c
 15245  00400A  6EE2               	movwf	fsr1h,c
 15246  00400C  CFDF FFE7          	movff	indf2,indf1
 15247                           
 15248                           ; BSR set to: 0
 15249  004010  2B86               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 15250  004012  D7E8               	goto	l7421
 15251  004014                     u8390:
 15252                           
 15253                           ; BSR set to: 0
 15254                           ;ENC424J600.c: 232: uint8_t opcode = 0x2A;
 15255                           
 15256                           ; BSR set to: 0
 15257  004014  0E2A               	movlw	42
 15258  004016  6F84               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 15259                           
 15260                           ; BSR set to: 0
 15261                           ;ENC424J600.c: 233: PORTBbits.RB4=0;
 15262  004018  9881               	bcf	3969,4,c	;volatile
 15263                           
 15264                           ; BSR set to: 0
 15265                           ;ENC424J600.c: 234: ENC424J600_writeSPI(&opcode);
 15266  00401A  0E84               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 15267  00401C  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15268  00401E  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 15269  004020  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15270  004022  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 15271                           
 15272                           ;ENC424J600.c: 235: for (uint8_t i = 0; i < 6; i++)
 15273  004026  0E00               	movlw	0
 15274  004028  0100               	movlb	0	; () banked
 15275  00402A  6F85               	movwf	ethernetController_writeDestinationMACAddress@i_630& (0+255),b
 15276  00402C                     l7439:
 15277                           
 15278                           ; BSR set to: 0
 15279  00402C  0E05               	movlw	5
 15280  00402E  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i_630& (0+255),b
 15281  004030  D001               	goto	l138
 15282  004032  D00D               	goto	u8410
 15283  004034                     l138:
 15284                           
 15285                           ; BSR set to: 0
 15286                           ;ENC424J600.c: 236: ENC424J600_writeSPI(&data[i]);
 15287                           
 15288                           ; BSR set to: 0
 15289  004034  5185               	movf	ethernetController_writeDestinationMACAddress@i_630& (0+255),w,b
 15290  004036  0D01               	mullw	1
 15291  004038  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 15292  00403A  24F3               	addwf	prodl,w,c
 15293  00403C  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15294  00403E  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 15295  004040  20F4               	addwfc	prodh,w,c
 15296  004042  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15297  004044  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 15298  004048  0100               	movlb	0	; () banked
 15299  00404A  2B85               	incf	ethernetController_writeDestinationMACAddress@i_630& (0+255),f,b
 15300  00404C  D7EF               	goto	l7439
 15301  00404E                     u8410:
 15302                           
 15303                           ; BSR set to: 0
 15304                           ;ENC424J600.c: 237: PORTBbits.RB4=1;
 15305  00404E  8881               	bsf	3969,4,c	;volatile
 15306                           
 15307                           ; BSR set to: 0
 15308  004050  0012               	return		;funcret
 15309  004052                     __end_of_ethernetController_writeDestinationMACAddress:
 15310                           	opt stack 0
 15311                           tblptru	equ	0xFF8
 15312                           tblptrh	equ	0xFF7
 15313                           tblptrl	equ	0xFF6
 15314                           tablat	equ	0xFF5
 15315                           prodh	equ	0xFF4
 15316                           prodl	equ	0xFF3
 15317                           intcon	equ	0xFF2
 15318                           intcon3	equ	0xFF0
 15319                           indf0	equ	0xFEF
 15320                           postinc0	equ	0xFEE
 15321                           plusw0	equ	0xFEB
 15322                           fsr0h	equ	0xFEA
 15323                           fsr0l	equ	0xFE9
 15324                           wreg	equ	0xFE8
 15325                           indf1	equ	0xFE7
 15326                           postinc1	equ	0xFE6
 15327                           postdec1	equ	0xFE5
 15328                           plusw1	equ	0xFE3
 15329                           fsr1h	equ	0xFE2
 15330                           fsr1l	equ	0xFE1
 15331                           indf2	equ	0xFDF
 15332                           postinc2	equ	0xFDE
 15333                           postdec2	equ	0xFDD
 15334                           plusw2	equ	0xFDB
 15335                           fsr2h	equ	0xFDA
 15336                           fsr2l	equ	0xFD9
 15337                           status	equ	0xFD8
 15338                           
 15339 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 15340 ;; Defined at:
 15341 ;;		line 207 in file "src/enc424j600/ENC424J600.c"
 15342 ;; Parameters:    Size  Location     Type
 15343 ;;  data            1    wreg     unsigned char 
 15344 ;;  field           9   15[BANK0 ] struct memoryField
 15345 ;; Auto vars:     Size  Location     Type
 15346 ;;  data            1   28[BANK0 ] unsigned char 
 15347 ;;  opcode          1   29[BANK0 ] unsigned char 
 15348 ;; Return value:  Size  Location     Type
 15349 ;;                  1    wreg      void 
 15350 ;; Registers used:
 15351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15352 ;; Tracked objects:
 15353 ;;		On entry : 0/0
 15354 ;;		On exit  : 0/0
 15355 ;;		Unchanged: 0/0
 15356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15357 ;;      Params:         0       9       0       0       0       0       0       0       0
 15358 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15359 ;;      Temps:          0       4       0       0       0       0       0       0       0
 15360 ;;      Totals:         0      15       0       0       0       0       0       0       0
 15361 ;;Total ram usage:       15 bytes
 15362 ;; Hardware stack levels used:    1
 15363 ;; Hardware stack levels required when called:    7
 15364 ;; This function calls:
 15365 ;;		_ENC424J600_setGPDATAWritePointer
 15366 ;;		_ENC424J600_writeSPI
 15367 ;; This function is called by:
 15368 ;;		_ARP_send
 15369 ;;		_ipv4_streamToTransmissionBuffer
 15370 ;; This function uses a non-reentrant model
 15371 ;;
 15372                           
 15373                           	psect	text52
 15374  0041C4                     __ptext52:
 15375                           	opt stack 0
 15376  0041C4                     _ethernetController_streamToTransmitBuffer:
 15377                           	opt stack 22
 15378                           
 15379                           ; BSR set to: 0
 15380                           ;incstack = 0
 15381                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 15382  0041C4  0100               	movlb	0	; () banked
 15383  0041C6  6F7C               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 15384                           
 15385                           ;ENC424J600.c: 208: uint8_t opcode;
 15386                           ;ENC424J600.c: 209: uint16_t static pointer = 0;
 15387                           ;ENC424J600.c: 210: if (pointer == 0) {
 15388  0041C8  5040               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 15389  0041CA  1041               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 15390  0041CC  A4D8               	btfss	status,2,c
 15391  0041CE  D010               	goto	l130
 15392                           
 15393                           ;ENC424J600.c: 211: ENC424J600_setGPDATAWritePointer(field.start);
 15394  0041D0  C06F  F06A         	movff	ethernetController_streamToTransmitBuffer@field,ENC424J600_setGPDATAWritePointer@
      +                          addr
 15395  0041D4  C070  F06B         	movff	ethernetController_streamToTransmitBuffer@field+1,ENC424J600_setGPDATAWritePointe
      +                          r@addr+1
 15396  0041D8  ECC3  F024         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 15397                           
 15398                           ;ENC424J600.c: 212: opcode = 0x2A;
 15399  0041DC  0E2A               	movlw	42
 15400  0041DE  0100               	movlb	0	; () banked
 15401  0041E0  6F7D               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 15402                           
 15403                           ; BSR set to: 0
 15404                           ;ENC424J600.c: 213: PORTBbits.RB4=0;
 15405  0041E2  9881               	bcf	3969,4,c	;volatile
 15406                           
 15407                           ; BSR set to: 0
 15408                           ;ENC424J600.c: 214: ENC424J600_writeSPI(&opcode);
 15409  0041E4  0E7D               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 15410  0041E6  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15411  0041E8  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 15412  0041EA  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15413  0041EC  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 15414  0041F0                     l130:
 15415                           
 15416                           ;ENC424J600.c: 215: }
 15417                           ;ENC424J600.c: 217: ENC424J600_writeSPI(&data);
 15418  0041F0  0E7C               	movlw	low ethernetController_streamToTransmitBuffer@data
 15419  0041F2  0100               	movlb	0	; () banked
 15420  0041F4  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15421  0041F6  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 15422  0041F8  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15423  0041FA  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 15424                           
 15425                           ;ENC424J600.c: 219: if (pointer == field.length - 1) {
 15426  0041FE  0EFF               	movlw	255
 15427  004200  0100               	movlb	0	; () banked
 15428  004202  6F78               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 15429  004204  0EFF               	movlw	255
 15430  004206  6F79               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 15431  004208  EE20  F073         	lfsr	2,ethernetController_streamToTransmitBuffer@field+4
 15432  00420C  CFDE F07A          	movff	postinc2,??_ethernetController_streamToTransmitBuffer+2
 15433  004210  CFDD F07B          	movff	postdec2,??_ethernetController_streamToTransmitBuffer+3
 15434  004214  5178               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 15435  004216  277A               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 15436  004218  5179               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 15437  00421A  237B               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 15438  00421C  5040               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 15439  00421E  197A               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 15440  004220  E10A               	bnz	l7685
 15441  004222  5041               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 15442  004224  197B               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 15443  004226  A4D8               	btfss	status,2,c
 15444  004228  D006               	goto	l131
 15445                           
 15446                           ; BSR set to: 0
 15447                           ;ENC424J600.c: 220: PORTBbits.RB4=1;
 15448  00422A  8881               	bsf	3969,4,c	;volatile
 15449                           
 15450                           ; BSR set to: 0
 15451                           ;ENC424J600.c: 221: pointer = 0;
 15452  00422C  0E00               	movlw	0
 15453  00422E  6E41               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 15454  004230  0E00               	movlw	0
 15455  004232  6E40               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 15456                           
 15457                           ;ENC424J600.c: 222: } else {
 15458  004234  0012               	return	
 15459  004236                     l131:
 15460  004236                     l7685:
 15461                           
 15462                           ; BSR set to: 0
 15463                           ;ENC424J600.c: 223: pointer++;
 15464  004236  4A40               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 15465  004238  2A41               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 15466  00423A  0012               	return	
 15467  00423C                     __end_of_ethernetController_streamToTransmitBuffer:
 15468                           	opt stack 0
 15469                           tblptru	equ	0xFF8
 15470                           tblptrh	equ	0xFF7
 15471                           tblptrl	equ	0xFF6
 15472                           tablat	equ	0xFF5
 15473                           prodh	equ	0xFF4
 15474                           prodl	equ	0xFF3
 15475                           intcon	equ	0xFF2
 15476                           intcon3	equ	0xFF0
 15477                           indf0	equ	0xFEF
 15478                           postinc0	equ	0xFEE
 15479                           plusw0	equ	0xFEB
 15480                           fsr0h	equ	0xFEA
 15481                           fsr0l	equ	0xFE9
 15482                           wreg	equ	0xFE8
 15483                           indf1	equ	0xFE7
 15484                           postinc1	equ	0xFE6
 15485                           postdec1	equ	0xFE5
 15486                           plusw1	equ	0xFE3
 15487                           fsr1h	equ	0xFE2
 15488                           fsr1l	equ	0xFE1
 15489                           indf2	equ	0xFDF
 15490                           postinc2	equ	0xFDE
 15491                           postdec2	equ	0xFDD
 15492                           plusw2	equ	0xFDB
 15493                           fsr2h	equ	0xFDA
 15494                           fsr2l	equ	0xFD9
 15495                           status	equ	0xFD8
 15496                           
 15497 ;; *************** function _ENC424J600_setGPDATAWritePointer *****************
 15498 ;; Defined at:
 15499 ;;		line 644 in file "src/enc424j600/ENC424J600.c"
 15500 ;; Parameters:    Size  Location     Type
 15501 ;;  addr            2   10[BANK0 ] unsigned int 
 15502 ;; Auto vars:     Size  Location     Type
 15503 ;;  highByte        1   14[BANK0 ] unsigned char 
 15504 ;;  lowByte         1   13[BANK0 ] unsigned char 
 15505 ;;  opcode          1   12[BANK0 ] unsigned char 
 15506 ;; Return value:  Size  Location     Type
 15507 ;;                  1    wreg      void 
 15508 ;; Registers used:
 15509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15510 ;; Tracked objects:
 15511 ;;		On entry : 0/0
 15512 ;;		On exit  : 0/0
 15513 ;;		Unchanged: 0/0
 15514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15515 ;;      Params:         0       2       0       0       0       0       0       0       0
 15516 ;;      Locals:         0       3       0       0       0       0       0       0       0
 15517 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15518 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15519 ;;Total ram usage:        5 bytes
 15520 ;; Hardware stack levels used:    1
 15521 ;; Hardware stack levels required when called:    6
 15522 ;; This function calls:
 15523 ;;		_ENC424J600_writeSPI
 15524 ;; This function is called by:
 15525 ;;		_ethernetController_streamToTransmitBuffer
 15526 ;;		_ethernetController_writeDestinationMACAddress
 15527 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 15528 ;; This function uses a non-reentrant model
 15529 ;;
 15530                           
 15531                           	psect	text53
 15532  004986                     __ptext53:
 15533                           	opt stack 0
 15534  004986                     _ENC424J600_setGPDATAWritePointer:
 15535                           	opt stack 21
 15536                           
 15537                           ;ENC424J600.c: 645: uint8_t opcode = 0x6C;
 15538                           
 15539                           ; BSR set to: 0
 15540                           ;incstack = 0
 15541  004986  0E6C               	movlw	108
 15542  004988  0100               	movlb	0	; () banked
 15543  00498A  6F6C               	movwf	ENC424J600_setGPDATAWritePointer@opcode& (0+255),b
 15544                           
 15545                           ; BSR set to: 0
 15546                           ;ENC424J600.c: 646: uint8_t lowByte = addr & 0x00ff;
 15547  00498C  C06A  F06D         	movff	ENC424J600_setGPDATAWritePointer@addr,ENC424J600_setGPDATAWritePointer@lowByte
 15548                           
 15549                           ;ENC424J600.c: 647: uint8_t highByte = (addr & 0xff00) >> 8;
 15550  004990  516B               	movf	(ENC424J600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 15551  004992  6F6E               	movwf	ENC424J600_setGPDATAWritePointer@highByte& (0+255),b
 15552                           
 15553                           ; BSR set to: 0
 15554                           ;ENC424J600.c: 648: PORTBbits.RB4=0;
 15555  004994  9881               	bcf	3969,4,c	;volatile
 15556                           
 15557                           ; BSR set to: 0
 15558                           ;ENC424J600.c: 649: ENC424J600_writeSPI(&opcode);
 15559  004996  0E6C               	movlw	low ENC424J600_setGPDATAWritePointer@opcode
 15560  004998  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15561  00499A  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@opcode
 15562  00499C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15563  00499E  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 15564                           
 15565                           ;ENC424J600.c: 650: ENC424J600_writeSPI(&lowByte);
 15566  0049A2  0E6D               	movlw	low ENC424J600_setGPDATAWritePointer@lowByte
 15567  0049A4  0100               	movlb	0	; () banked
 15568  0049A6  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15569  0049A8  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@lowByte
 15570  0049AA  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15571  0049AC  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 15572                           
 15573                           ;ENC424J600.c: 651: ENC424J600_writeSPI(&highByte);
 15574  0049B0  0E6E               	movlw	low ENC424J600_setGPDATAWritePointer@highByte
 15575  0049B2  0100               	movlb	0	; () banked
 15576  0049B4  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15577  0049B6  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@highByte
 15578  0049B8  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15579  0049BA  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 15580                           
 15581                           ;ENC424J600.c: 652: PORTBbits.RB4=1;
 15582  0049BE  8881               	bsf	3969,4,c	;volatile
 15583  0049C0  0012               	return		;funcret
 15584  0049C2                     __end_of_ENC424J600_setGPDATAWritePointer:
 15585                           	opt stack 0
 15586                           tblptru	equ	0xFF8
 15587                           tblptrh	equ	0xFF7
 15588                           tblptrl	equ	0xFF6
 15589                           tablat	equ	0xFF5
 15590                           prodh	equ	0xFF4
 15591                           prodl	equ	0xFF3
 15592                           intcon	equ	0xFF2
 15593                           intcon3	equ	0xFF0
 15594                           indf0	equ	0xFEF
 15595                           postinc0	equ	0xFEE
 15596                           plusw0	equ	0xFEB
 15597                           fsr0h	equ	0xFEA
 15598                           fsr0l	equ	0xFE9
 15599                           wreg	equ	0xFE8
 15600                           indf1	equ	0xFE7
 15601                           postinc1	equ	0xFE6
 15602                           postdec1	equ	0xFE5
 15603                           plusw1	equ	0xFE3
 15604                           fsr1h	equ	0xFE2
 15605                           fsr1l	equ	0xFE1
 15606                           indf2	equ	0xFDF
 15607                           postinc2	equ	0xFDE
 15608                           postdec2	equ	0xFDD
 15609                           plusw2	equ	0xFDB
 15610                           fsr2h	equ	0xFDA
 15611                           fsr2l	equ	0xFD9
 15612                           status	equ	0xFD8
 15613                           
 15614 ;; *************** function _ethernetController_sendPacket *****************
 15615 ;; Defined at:
 15616 ;;		line 200 in file "src/enc424j600/ENC424J600.c"
 15617 ;; Parameters:    Size  Location     Type
 15618 ;;  field           9   18[BANK0 ] struct memoryField
 15619 ;; Auto vars:     Size  Location     Type
 15620 ;;		None
 15621 ;; Return value:  Size  Location     Type
 15622 ;;                  1    wreg      void 
 15623 ;; Registers used:
 15624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15625 ;; Tracked objects:
 15626 ;;		On entry : 0/0
 15627 ;;		On exit  : 0/0
 15628 ;;		Unchanged: 0/0
 15629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15630 ;;      Params:         0       9       0       0       0       0       0       0       0
 15631 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15632 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15633 ;;      Totals:         0       9       0       0       0       0       0       0       0
 15634 ;;Total ram usage:        9 bytes
 15635 ;; Hardware stack levels used:    1
 15636 ;; Hardware stack levels required when called:    8
 15637 ;; This function calls:
 15638 ;;		_ENC424J600_setTXLength
 15639 ;;		_ENC424J600_setTXStartAddress
 15640 ;;		_ENC424J600_writeSingleByte
 15641 ;;		_memory_txFrameClear
 15642 ;; This function is called by:
 15643 ;;		_ARP_send
 15644 ;;		_ipv4_sendFrame
 15645 ;; This function uses a non-reentrant model
 15646 ;;
 15647                           
 15648                           	psect	text54
 15649  004C60                     __ptext54:
 15650                           	opt stack 0
 15651  004C60                     _ethernetController_sendPacket:
 15652                           	opt stack 20
 15653                           
 15654                           ;ENC424J600.c: 201: ENC424J600_setTXStartAddress(field.start);
 15655                           
 15656                           ;incstack = 0
 15657  004C60  C072  F06E         	movff	ethernetController_sendPacket@field,ENC424J600_setTXStartAddress@addr
 15658  004C64  C073  F06F         	movff	ethernetController_sendPacket@field+1,ENC424J600_setTXStartAddress@addr+1
 15659  004C68  ECB4  F025         	call	_ENC424J600_setTXStartAddress	;wreg free
 15660                           
 15661                           ;ENC424J600.c: 202: ENC424J600_setTXLength(field.length);
 15662  004C6C  C076  F06E         	movff	ethernetController_sendPacket@field+4,ENC424J600_setTXLength@len
 15663  004C70  C077  F06F         	movff	ethernetController_sendPacket@field+5,ENC424J600_setTXLength@len+1
 15664  004C74  ECC9  F025         	call	_ENC424J600_setTXLength	;wreg free
 15665                           
 15666                           ;ENC424J600.c: 203: ENC424J600_writeSingleByte(0b11010100);
 15667  004C78  0ED4               	movlw	212
 15668  004C7A  EC1A  F027         	call	_ENC424J600_writeSingleByte
 15669                           
 15670                           ;ENC424J600.c: 204: memory_txFrameClear(field.index);
 15671  004C7E  0100               	movlb	0	; () banked
 15672  004C80  517A               	movf	(ethernetController_sendPacket@field+8)& (0+255),w,b
 15673  004C82  EC7E  F026         	call	_memory_txFrameClear
 15674  004C86  0012               	return		;funcret
 15675  004C88                     __end_of_ethernetController_sendPacket:
 15676                           	opt stack 0
 15677                           tblptru	equ	0xFF8
 15678                           tblptrh	equ	0xFF7
 15679                           tblptrl	equ	0xFF6
 15680                           tablat	equ	0xFF5
 15681                           prodh	equ	0xFF4
 15682                           prodl	equ	0xFF3
 15683                           intcon	equ	0xFF2
 15684                           intcon3	equ	0xFF0
 15685                           indf0	equ	0xFEF
 15686                           postinc0	equ	0xFEE
 15687                           plusw0	equ	0xFEB
 15688                           fsr0h	equ	0xFEA
 15689                           fsr0l	equ	0xFE9
 15690                           wreg	equ	0xFE8
 15691                           indf1	equ	0xFE7
 15692                           postinc1	equ	0xFE6
 15693                           postdec1	equ	0xFE5
 15694                           plusw1	equ	0xFE3
 15695                           fsr1h	equ	0xFE2
 15696                           fsr1l	equ	0xFE1
 15697                           indf2	equ	0xFDF
 15698                           postinc2	equ	0xFDE
 15699                           postdec2	equ	0xFDD
 15700                           plusw2	equ	0xFDB
 15701                           fsr2h	equ	0xFDA
 15702                           fsr2l	equ	0xFD9
 15703                           status	equ	0xFD8
 15704                           
 15705 ;; *************** function _memory_txFrameClear *****************
 15706 ;; Defined at:
 15707 ;;		line 224 in file "src/mem/memoryController.c"
 15708 ;; Parameters:    Size  Location     Type
 15709 ;;  index           1    wreg     unsigned char 
 15710 ;; Auto vars:     Size  Location     Type
 15711 ;;  index           1    0[BANK0 ] unsigned char 
 15712 ;; Return value:  Size  Location     Type
 15713 ;;                  1    wreg      void 
 15714 ;; Registers used:
 15715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15716 ;; Tracked objects:
 15717 ;;		On entry : 0/0
 15718 ;;		On exit  : 0/0
 15719 ;;		Unchanged: 0/0
 15720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15721 ;;      Params:         0       0       0       0       0       0       0       0       0
 15722 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15723 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15724 ;;      Totals:         0       1       0       0       0       0       0       0       0
 15725 ;;Total ram usage:        1 bytes
 15726 ;; Hardware stack levels used:    1
 15727 ;; Hardware stack levels required when called:    4
 15728 ;; This function calls:
 15729 ;;		Nothing
 15730 ;; This function is called by:
 15731 ;;		_ethernetController_sendPacket
 15732 ;; This function uses a non-reentrant model
 15733 ;;
 15734                           
 15735                           	psect	text55
 15736  004CFC                     __ptext55:
 15737                           	opt stack 0
 15738  004CFC                     _memory_txFrameClear:
 15739                           	opt stack 23
 15740                           
 15741                           ;incstack = 0
 15742                           ;memory_txFrameClear@index stored from wreg
 15743  004CFC  0100               	movlb	0	; () banked
 15744  004CFE  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 15745                           
 15746                           ;memoryController.c: 225: occupiedMemory[index].fIsAssigned = 0;
 15747  004D00  0100               	movlb	0	; () banked
 15748  004D02  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 15749  004D04  0D09               	mullw	9
 15750  004D06  0E06               	movlw	6
 15751  004D08  26F3               	addwf	prodl,f,c
 15752  004D0A  0E00               	movlw	0
 15753  004D0C  22F4               	addwfc	prodh,f,c
 15754  004D0E  0E00               	movlw	low _occupiedMemory
 15755  004D10  24F3               	addwf	prodl,w,c
 15756  004D12  6ED9               	movwf	fsr2l,c
 15757  004D14  0E02               	movlw	high _occupiedMemory
 15758  004D16  20F4               	addwfc	prodh,w,c
 15759  004D18  6EDA               	movwf	fsr2h,c
 15760  004D1A  0E00               	movlw	0
 15761  004D1C  6EDF               	movwf	indf2,c
 15762                           
 15763                           ; BSR set to: 0
 15764  004D1E  0012               	return		;funcret
 15765  004D20                     __end_of_memory_txFrameClear:
 15766                           	opt stack 0
 15767                           tblptru	equ	0xFF8
 15768                           tblptrh	equ	0xFF7
 15769                           tblptrl	equ	0xFF6
 15770                           tablat	equ	0xFF5
 15771                           prodh	equ	0xFF4
 15772                           prodl	equ	0xFF3
 15773                           intcon	equ	0xFF2
 15774                           intcon3	equ	0xFF0
 15775                           indf0	equ	0xFEF
 15776                           postinc0	equ	0xFEE
 15777                           plusw0	equ	0xFEB
 15778                           fsr0h	equ	0xFEA
 15779                           fsr0l	equ	0xFE9
 15780                           wreg	equ	0xFE8
 15781                           indf1	equ	0xFE7
 15782                           postinc1	equ	0xFE6
 15783                           postdec1	equ	0xFE5
 15784                           plusw1	equ	0xFE3
 15785                           fsr1h	equ	0xFE2
 15786                           fsr1l	equ	0xFE1
 15787                           indf2	equ	0xFDF
 15788                           postinc2	equ	0xFDE
 15789                           postdec2	equ	0xFDD
 15790                           plusw2	equ	0xFDB
 15791                           fsr2h	equ	0xFDA
 15792                           fsr2l	equ	0xFD9
 15793                           status	equ	0xFD8
 15794                           
 15795 ;; *************** function _ENC424J600_setTXStartAddress *****************
 15796 ;; Defined at:
 15797 ;;		line 637 in file "src/enc424j600/ENC424J600.c"
 15798 ;; Parameters:    Size  Location     Type
 15799 ;;  addr            2   14[BANK0 ] unsigned int 
 15800 ;; Auto vars:     Size  Location     Type
 15801 ;;  highByte        1   17[BANK0 ] unsigned char 
 15802 ;;  lowByte         1   16[BANK0 ] unsigned char 
 15803 ;; Return value:  Size  Location     Type
 15804 ;;                  1    wreg      void 
 15805 ;; Registers used:
 15806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15807 ;; Tracked objects:
 15808 ;;		On entry : 0/0
 15809 ;;		On exit  : 0/0
 15810 ;;		Unchanged: 0/0
 15811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15812 ;;      Params:         0       2       0       0       0       0       0       0       0
 15813 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15814 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15815 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15816 ;;Total ram usage:        4 bytes
 15817 ;; Hardware stack levels used:    1
 15818 ;; Hardware stack levels required when called:    7
 15819 ;; This function calls:
 15820 ;;		_ENC424J600_writeControlRegisterUnbanked
 15821 ;; This function is called by:
 15822 ;;		_ethernetController_sendPacket
 15823 ;; This function uses a non-reentrant model
 15824 ;;
 15825                           
 15826                           	psect	text56
 15827  004B68                     __ptext56:
 15828                           	opt stack 0
 15829  004B68                     _ENC424J600_setTXStartAddress:
 15830                           	opt stack 20
 15831                           
 15832                           ;ENC424J600.c: 638: uint8_t lowByte = addr & 0xff;
 15833                           
 15834                           ; BSR set to: 0
 15835                           ;incstack = 0
 15836  004B68  C06E  F070         	movff	ENC424J600_setTXStartAddress@addr,ENC424J600_setTXStartAddress@lowByte
 15837                           
 15838                           ;ENC424J600.c: 639: uint8_t highByte = (addr & 0xff00) >> 8;
 15839  004B6C  0100               	movlb	0	; () banked
 15840  004B6E  516F               	movf	(ENC424J600_setTXStartAddress@addr+1)& (0+255),w,b
 15841  004B70  6F71               	movwf	ENC424J600_setTXStartAddress@highByte& (0+255),b
 15842                           
 15843                           ; BSR set to: 0
 15844                           ;ENC424J600.c: 640: ENC424J600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 15845  004B72  0E70               	movlw	low ENC424J600_setTXStartAddress@lowByte
 15846  004B74  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 15847  004B76  0E00               	movlw	high ENC424J600_setTXStartAddress@lowByte
 15848  004B78  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 15849  004B7A  0E00               	movlw	0
 15850  004B7C  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 15851                           
 15852                           ;ENC424J600.c: 641: ENC424J600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 15853  004B80  0E71               	movlw	low ENC424J600_setTXStartAddress@highByte
 15854  004B82  0100               	movlb	0	; () banked
 15855  004B84  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 15856  004B86  0E00               	movlw	high ENC424J600_setTXStartAddress@highByte
 15857  004B88  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 15858  004B8A  0E01               	movlw	1
 15859  004B8C  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 15860  004B90  0012               	return		;funcret
 15861  004B92                     __end_of_ENC424J600_setTXStartAddress:
 15862                           	opt stack 0
 15863                           tblptru	equ	0xFF8
 15864                           tblptrh	equ	0xFF7
 15865                           tblptrl	equ	0xFF6
 15866                           tablat	equ	0xFF5
 15867                           prodh	equ	0xFF4
 15868                           prodl	equ	0xFF3
 15869                           intcon	equ	0xFF2
 15870                           intcon3	equ	0xFF0
 15871                           indf0	equ	0xFEF
 15872                           postinc0	equ	0xFEE
 15873                           plusw0	equ	0xFEB
 15874                           fsr0h	equ	0xFEA
 15875                           fsr0l	equ	0xFE9
 15876                           wreg	equ	0xFE8
 15877                           indf1	equ	0xFE7
 15878                           postinc1	equ	0xFE6
 15879                           postdec1	equ	0xFE5
 15880                           plusw1	equ	0xFE3
 15881                           fsr1h	equ	0xFE2
 15882                           fsr1l	equ	0xFE1
 15883                           indf2	equ	0xFDF
 15884                           postinc2	equ	0xFDE
 15885                           postdec2	equ	0xFDD
 15886                           plusw2	equ	0xFDB
 15887                           fsr2h	equ	0xFDA
 15888                           fsr2l	equ	0xFD9
 15889                           status	equ	0xFD8
 15890                           
 15891 ;; *************** function _ENC424J600_setTXLength *****************
 15892 ;; Defined at:
 15893 ;;		line 612 in file "src/enc424j600/ENC424J600.c"
 15894 ;; Parameters:    Size  Location     Type
 15895 ;;  len             2   14[BANK0 ] unsigned int 
 15896 ;; Auto vars:     Size  Location     Type
 15897 ;;  highByte        1   17[BANK0 ] unsigned char 
 15898 ;;  lowByte         1   16[BANK0 ] unsigned char 
 15899 ;; Return value:  Size  Location     Type
 15900 ;;                  1    wreg      void 
 15901 ;; Registers used:
 15902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15903 ;; Tracked objects:
 15904 ;;		On entry : 0/0
 15905 ;;		On exit  : 0/0
 15906 ;;		Unchanged: 0/0
 15907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15908 ;;      Params:         0       2       0       0       0       0       0       0       0
 15909 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15910 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15911 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15912 ;;Total ram usage:        4 bytes
 15913 ;; Hardware stack levels used:    1
 15914 ;; Hardware stack levels required when called:    7
 15915 ;; This function calls:
 15916 ;;		_ENC424J600_writeControlRegisterUnbanked
 15917 ;; This function is called by:
 15918 ;;		_ethernetController_sendPacket
 15919 ;; This function uses a non-reentrant model
 15920 ;;
 15921                           
 15922                           	psect	text57
 15923  004B92                     __ptext57:
 15924                           	opt stack 0
 15925  004B92                     _ENC424J600_setTXLength:
 15926                           	opt stack 20
 15927                           
 15928                           ;ENC424J600.c: 613: uint8_t lowByte = len & 0x00ff;
 15929                           
 15930                           ;incstack = 0
 15931  004B92  C06E  F070         	movff	ENC424J600_setTXLength@len,ENC424J600_setTXLength@lowByte
 15932                           
 15933                           ;ENC424J600.c: 614: uint8_t highByte = len >> 8;
 15934  004B96  0100               	movlb	0	; () banked
 15935  004B98  516F               	movf	(ENC424J600_setTXLength@len+1)& (0+255),w,b
 15936  004B9A  6F71               	movwf	ENC424J600_setTXLength@highByte& (0+255),b
 15937                           
 15938                           ; BSR set to: 0
 15939                           ;ENC424J600.c: 615: ENC424J600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 15940  004B9C  0E70               	movlw	low ENC424J600_setTXLength@lowByte
 15941  004B9E  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 15942  004BA0  0E00               	movlw	high ENC424J600_setTXLength@lowByte
 15943  004BA2  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 15944  004BA4  0E02               	movlw	2
 15945  004BA6  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 15946                           
 15947                           ;ENC424J600.c: 616: ENC424J600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 15948  004BAA  0E71               	movlw	low ENC424J600_setTXLength@highByte
 15949  004BAC  0100               	movlb	0	; () banked
 15950  004BAE  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 15951  004BB0  0E00               	movlw	high ENC424J600_setTXLength@highByte
 15952  004BB2  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 15953  004BB4  0E03               	movlw	3
 15954  004BB6  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 15955  004BBA  0012               	return		;funcret
 15956  004BBC                     __end_of_ENC424J600_setTXLength:
 15957                           	opt stack 0
 15958                           tblptru	equ	0xFF8
 15959                           tblptrh	equ	0xFF7
 15960                           tblptrl	equ	0xFF6
 15961                           tablat	equ	0xFF5
 15962                           prodh	equ	0xFF4
 15963                           prodl	equ	0xFF3
 15964                           intcon	equ	0xFF2
 15965                           intcon3	equ	0xFF0
 15966                           indf0	equ	0xFEF
 15967                           postinc0	equ	0xFEE
 15968                           plusw0	equ	0xFEB
 15969                           fsr0h	equ	0xFEA
 15970                           fsr0l	equ	0xFE9
 15971                           wreg	equ	0xFE8
 15972                           indf1	equ	0xFE7
 15973                           postinc1	equ	0xFE6
 15974                           postdec1	equ	0xFE5
 15975                           plusw1	equ	0xFE3
 15976                           fsr1h	equ	0xFE2
 15977                           fsr1l	equ	0xFE1
 15978                           indf2	equ	0xFDF
 15979                           postinc2	equ	0xFDE
 15980                           postdec2	equ	0xFDD
 15981                           plusw2	equ	0xFDB
 15982                           fsr2h	equ	0xFDA
 15983                           fsr2l	equ	0xFD9
 15984                           status	equ	0xFD8
 15985                           
 15986 ;; *************** function _ethernetController_getSourceMACAddress *****************
 15987 ;; Defined at:
 15988 ;;		line 267 in file "src/enc424j600/ENC424J600.c"
 15989 ;; Parameters:    Size  Location     Type
 15990 ;;  field           9   15[BANK0 ] struct memoryField
 15991 ;; Auto vars:     Size  Location     Type
 15992 ;;  temp            1   31[BANK0 ] unsigned char 
 15993 ;;  i               1   32[BANK0 ] unsigned char 
 15994 ;;  sourceAddres    6   25[BANK0 ] struct macaddress
 15995 ;;  opcode          1   24[BANK0 ] unsigned char 
 15996 ;; Return value:  Size  Location     Type
 15997 ;;                  6   15[BANK0 ] struct macaddress
 15998 ;; Registers used:
 15999 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16000 ;; Tracked objects:
 16001 ;;		On entry : 0/0
 16002 ;;		On exit  : 0/0
 16003 ;;		Unchanged: 0/0
 16004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16005 ;;      Params:         0       9       0       0       0       0       0       0       0
 16006 ;;      Locals:         0       9       0       0       0       0       0       0       0
 16007 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16008 ;;      Totals:         0      18       0       0       0       0       0       0       0
 16009 ;;Total ram usage:       18 bytes
 16010 ;; Hardware stack levels used:    1
 16011 ;; Hardware stack levels required when called:    7
 16012 ;; This function calls:
 16013 ;;		_ENC424J600_readSPI
 16014 ;;		_ENC424J600_setERXDATAReadPointer
 16015 ;;		_ENC424J600_writeSPI
 16016 ;; This function is called by:
 16017 ;;		_ARP_send
 16018 ;; This function uses a non-reentrant model
 16019 ;;
 16020                           
 16021                           	psect	text58
 16022  004406                     __ptext58:
 16023                           	opt stack 0
 16024  004406                     _ethernetController_getSourceMACAddress:
 16025                           	opt stack 19
 16026                           
 16027                           ;ENC424J600.c: 268: macaddress_t sourceAddress;
 16028                           ;ENC424J600.c: 269: ENC424J600_setERXDATAReadPointer(field.start + 14);
 16029                           
 16030                           ;incstack = 0
 16031  004406  0E0E               	movlw	14
 16032  004408  0100               	movlb	0	; () banked
 16033  00440A  256F               	addwf	ethernetController_getSourceMACAddress@field& (0+255),w,b
 16034  00440C  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
 16035  00440E  0E00               	movlw	0
 16036  004410  2170               	addwfc	(ethernetController_getSourceMACAddress@field+1)& (0+255),w,b
 16037  004412  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
 16038  004414  ECE1  F024         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
 16039                           
 16040                           ;ENC424J600.c: 270: uint8_t opcode = 0x2C;
 16041  004418  0E2C               	movlw	44
 16042  00441A  0100               	movlb	0	; () banked
 16043  00441C  6F78               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 16044                           
 16045                           ; BSR set to: 0
 16046                           ;ENC424J600.c: 271: PORTBbits.RB4=0;
 16047  00441E  9881               	bcf	3969,4,c	;volatile
 16048                           
 16049                           ; BSR set to: 0
 16050                           ;ENC424J600.c: 272: ENC424J600_writeSPI(&opcode);
 16051  004420  0E78               	movlw	low ethernetController_getSourceMACAddress@opcode
 16052  004422  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 16053  004424  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 16054  004426  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 16055  004428  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 16056                           
 16057                           ;ENC424J600.c: 273: for (uint8_t i = 0; i < 6; i++) {
 16058  00442C  0E00               	movlw	0
 16059  00442E  0100               	movlb	0	; () banked
 16060  004430  6F80               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 16061  004432                     l7695:
 16062                           
 16063                           ; BSR set to: 0
 16064  004432  0E05               	movlw	5
 16065  004434  6580               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 16066  004436  D001               	goto	l151
 16067  004438  D013               	goto	u8840
 16068  00443A                     l151:
 16069                           
 16070                           ; BSR set to: 0
 16071                           ;ENC424J600.c: 274: uint8_t temp;
 16072                           ;ENC424J600.c: 275: ENC424J600_readSPI(&temp);
 16073                           
 16074                           ; BSR set to: 0
 16075  00443A  0E7F               	movlw	low ethernetController_getSourceMACAddress@temp
 16076  00443C  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 16077  00443E  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 16078  004440  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 16079  004442  EC3B  F022         	call	_ENC424J600_readSPI	;wreg free
 16080                           
 16081                           ;ENC424J600.c: 276: sourceAddress.address[i] = temp;
 16082  004446  0100               	movlb	0	; () banked
 16083  004448  5180               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 16084  00444A  0D01               	mullw	1
 16085  00444C  0E79               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 16086  00444E  24F3               	addwf	prodl,w,c
 16087  004450  6ED9               	movwf	fsr2l,c
 16088  004452  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 16089  004454  20F4               	addwfc	prodh,w,c
 16090  004456  6EDA               	movwf	fsr2h,c
 16091  004458  C07F  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 16092                           
 16093                           ; BSR set to: 0
 16094  00445C  2B80               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 16095  00445E  D7E9               	goto	l7695
 16096  004460                     u8840:
 16097                           
 16098                           ; BSR set to: 0
 16099                           ;ENC424J600.c: 277: }
 16100                           ;ENC424J600.c: 278: PORTBbits.RB4=1;
 16101  004460  8881               	bsf	3969,4,c	;volatile
 16102                           
 16103                           ; BSR set to: 0
 16104                           ;ENC424J600.c: 279: return sourceAddress;
 16105  004462  EE20  F079         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 16106  004466  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 16107  00446A  0E05               	movlw	5
 16108  00446C                     u8851:
 16109  00446C  CFDB FFEB          	movff	plusw2,plusw0
 16110  004470  06E8               	decf	wreg,f,c
 16111  004472  E2FC               	bc	u8851
 16112  004474  0012               	return	
 16113  004476                     __end_of_ethernetController_getSourceMACAddress:
 16114                           	opt stack 0
 16115                           tblptru	equ	0xFF8
 16116                           tblptrh	equ	0xFF7
 16117                           tblptrl	equ	0xFF6
 16118                           tablat	equ	0xFF5
 16119                           prodh	equ	0xFF4
 16120                           prodl	equ	0xFF3
 16121                           intcon	equ	0xFF2
 16122                           intcon3	equ	0xFF0
 16123                           indf0	equ	0xFEF
 16124                           postinc0	equ	0xFEE
 16125                           plusw0	equ	0xFEB
 16126                           fsr0h	equ	0xFEA
 16127                           fsr0l	equ	0xFE9
 16128                           wreg	equ	0xFE8
 16129                           indf1	equ	0xFE7
 16130                           postinc1	equ	0xFE6
 16131                           postdec1	equ	0xFE5
 16132                           plusw1	equ	0xFE3
 16133                           fsr1h	equ	0xFE2
 16134                           fsr1l	equ	0xFE1
 16135                           indf2	equ	0xFDF
 16136                           postinc2	equ	0xFDE
 16137                           postdec2	equ	0xFDD
 16138                           plusw2	equ	0xFDB
 16139                           fsr2h	equ	0xFDA
 16140                           fsr2l	equ	0xFD9
 16141                           status	equ	0xFD8
 16142                           
 16143 ;; *************** function _UARTTransmitText *****************
 16144 ;; Defined at:
 16145 ;;		line 53 in file "src/system/uart.c"
 16146 ;; Parameters:    Size  Location     Type
 16147 ;;  str             2   56[BANK0 ] PTR const unsigned char 
 16148 ;;		 -> STR_93(2), STR_92(7), STR_91(11), STR_90(19), 
 16149 ;;		 -> STR_89(2), STR_88(3), STR_87(3), STR_86(3), 
 16150 ;;		 -> STR_85(3), STR_84(5), STR_83(2), STR_82(3), 
 16151 ;;		 -> STR_81(12), STR_80(8), STR_79(2), STR_78(3), 
 16152 ;;		 -> STR_77(16), STR_76(3), STR_75(3), STR_74(15), 
 16153 ;;		 -> STR_73(10), STR_72(2), STR_71(3), STR_70(5), 
 16154 ;;		 -> STR_69(3), STR_68(2), STR_67(39), arpEntryToString@string(50), 
 16155 ;;		 -> ipAdressToString@address(16), STR_66(17), STR_65(4), STR_64(4), 
 16156 ;;		 -> STR_63(5), STR_62(18), STR_61(4), STR_60(5), 
 16157 ;;		 -> macToString@address(18), hexToString@number(10), intToString@number(10), STR_59(5), 
 16158 ;;		 -> STR_58(9), STR_57(30), STR_56(34), STR_55(55), 
 16159 ;;		 -> STR_54(37), STR_53(15), STR_52(14), STR_51(19), 
 16160 ;;		 -> STR_50(30), STR_49(17), STR_48(8), STR_47(29), 
 16161 ;;		 -> STR_46(29), STR_45(20), STR_44(19), STR_43(19), 
 16162 ;;		 -> STR_42(13), STR_41(3), STR_40(3), STR_39(51), 
 16163 ;;		 -> STR_38(28), STR_37(4), STR_36(23), STR_35(4), 
 16164 ;;		 -> STR_34(21), STR_33(12), STR_32(38), STR_31(3), 
 16165 ;;		 -> STR_30(9), STR_29(2), STR_28(12), STR_27(24), 
 16166 ;;		 -> STR_26(51), STR_25(49), STR_24(51), STR_23(2), 
 16167 ;;		 -> STR_22(18), STR_21(3), STR_20(19), STR_19(3), 
 16168 ;;		 -> STR_18(3), STR_17(3), STR_16(5), STR_15(2), 
 16169 ;;		 -> STR_14(2), STR_13(5), STR_12(3), STR_11(3), 
 16170 ;;		 -> STR_10(2), STR_9(7), STR_8(6), STR_7(2), 
 16171 ;;		 -> STR_6(2), STR_5(16), STR_4(10), STR_3(12), 
 16172 ;;		 -> STR_2(2), STR_1(2), ethernetController_getDeviceName@string(11), 
 16173 ;; Auto vars:     Size  Location     Type
 16174 ;;		None
 16175 ;; Return value:  Size  Location     Type
 16176 ;;                  1    wreg      void 
 16177 ;; Registers used:
 16178 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 16179 ;; Tracked objects:
 16180 ;;		On entry : 0/0
 16181 ;;		On exit  : 0/0
 16182 ;;		Unchanged: 0/0
 16183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16184 ;;      Params:         0       2       0       0       0       0       0       0       0
 16185 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16186 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16187 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16188 ;;Total ram usage:        2 bytes
 16189 ;; Hardware stack levels used:    1
 16190 ;; Hardware stack levels required when called:    4
 16191 ;; This function calls:
 16192 ;;		Nothing
 16193 ;; This function is called by:
 16194 ;;		_ethernet_rxGetNewFrame
 16195 ;;		_handleStackBackgroundTasks
 16196 ;;		_main
 16197 ;;		_printEthernetState
 16198 ;;		_printErrorMessage
 16199 ;;		_UARTTransmitInt
 16200 ;;		_ARP_handleNewPacket
 16201 ;;		_ARP_send
 16202 ;;		_ARP_sendReply
 16203 ;;		_ipv4_handleNewPacket
 16204 ;;		_ipv4_checkHeaderChecksum
 16205 ;;		_ARP_probe
 16206 ;;		_printArpTable
 16207 ;; This function uses a non-reentrant model
 16208 ;;
 16209                           
 16210                           	psect	text59
 16211  004612                     __ptext59:
 16212                           	opt stack 0
 16213  004612                     _UARTTransmitText:
 16214                           	opt stack 25
 16215                           
 16216                           ;uart.c: 54: while (*str) {
 16217                           
 16218                           ; BSR set to: 0
 16219                           ;incstack = 0
 16220  004612  D016               	goto	u8930
 16221  004614                     
 16222                           ;uart.c: 55: TXREG1 = *str++;
 16223  004614  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 16224  004618  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 16225  00461C  6AF8               	clrf	tblptru,c
 16226  00461E  0E07               	movlw	(high __ramtop+-1)
 16227  004620  64F7               	cpfsgt	tblptrh,c
 16228  004622  D003               	bra	u8927
 16229  004624  0008               	tblrd		*
 16230  004626  50F5               	movf	tablat,w,c
 16231  004628  D005               	bra	u8920
 16232  00462A                     u8927:
 16233  00462A  CFF6 FFE9          	movff	tblptrl,fsr0l
 16234  00462E  CFF7 FFEA          	movff	tblptrh,fsr0h
 16235  004632  50EF               	movf	indf0,w,c
 16236  004634                     u8920:
 16237  004634  6EAD               	movwf	4013,c	;volatile
 16238  004636  0100               	movlb	0	; () banked
 16239  004638  4B98               	infsnz	UARTTransmitText@str& (0+255),f,b
 16240  00463A  2B99               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 16241  00463C                     
 16242                           ; BSR set to: 0
 16243  00463C  A2AC               	btfss	4012,1,c	;volatile
 16244  00463E  D7FE               	goto	l763
 16245  004640                     u8930:
 16246  004640  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 16247  004644  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 16248  004648  6AF8               	clrf	tblptru,c
 16249  00464A  0E07               	movlw	(high __ramtop+-1)
 16250  00464C  64F7               	cpfsgt	tblptrh,c
 16251  00464E  D003               	bra	u8947
 16252  004650  0008               	tblrd		*
 16253  004652  50F5               	movf	tablat,w,c
 16254  004654  D005               	bra	u8940
 16255  004656                     u8947:
 16256  004656  CFF6 FFE9          	movff	tblptrl,fsr0l
 16257  00465A  CFF7 FFEA          	movff	tblptrh,fsr0h
 16258  00465E  50EF               	movf	indf0,w,c
 16259  004660                     u8940:
 16260  004660  0900               	iorlw	0
 16261  004662  B4D8               	btfsc	status,2,c
 16262  004664  0012               	return	
 16263  004666  D7D6               	goto	l761
 16264  004668                     __end_of_UARTTransmitText:
 16265                           	opt stack 0
 16266                           tblptru	equ	0xFF8
 16267                           tblptrh	equ	0xFF7
 16268                           tblptrl	equ	0xFF6
 16269                           tablat	equ	0xFF5
 16270                           prodh	equ	0xFF4
 16271                           prodl	equ	0xFF3
 16272                           intcon	equ	0xFF2
 16273                           intcon3	equ	0xFF0
 16274                           indf0	equ	0xFEF
 16275                           postinc0	equ	0xFEE
 16276                           plusw0	equ	0xFEB
 16277                           fsr0h	equ	0xFEA
 16278                           fsr0l	equ	0xFE9
 16279                           wreg	equ	0xFE8
 16280                           indf1	equ	0xFE7
 16281                           postinc1	equ	0xFE6
 16282                           postdec1	equ	0xFE5
 16283                           plusw1	equ	0xFE3
 16284                           fsr1h	equ	0xFE2
 16285                           fsr1l	equ	0xFE1
 16286                           indf2	equ	0xFDF
 16287                           postinc2	equ	0xFDE
 16288                           postdec2	equ	0xFDD
 16289                           plusw2	equ	0xFDB
 16290                           fsr2h	equ	0xFDA
 16291                           fsr2l	equ	0xFD9
 16292                           status	equ	0xFD8
 16293                           
 16294 ;; *************** function _ARP_parseFromRXBuffer *****************
 16295 ;; Defined at:
 16296 ;;		line 65 in file "src/stack/protocols/arp.c"
 16297 ;; Parameters:    Size  Location     Type
 16298 ;;  frame           2   23[BANK0 ] PTR struct ethernetFrame
 16299 ;;		 -> stack.ethernet(15), stack(121), 
 16300 ;; Auto vars:     Size  Location     Type
 16301 ;;  i               1   61[BANK0 ] unsigned char 
 16302 ;;  i               1   60[BANK0 ] unsigned char 
 16303 ;;  i               1   59[BANK0 ] unsigned char 
 16304 ;;  i               1   58[BANK0 ] unsigned char 
 16305 ;;  arp            32   64[BANK0 ] struct ARP_message
 16306 ;;  offset          2   62[BANK0 ] const unsigned int 
 16307 ;; Return value:  Size  Location     Type
 16308 ;;                  32   23[BANK0 ] struct ARP_message
 16309 ;; Registers used:
 16310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16311 ;; Tracked objects:
 16312 ;;		On entry : 0/0
 16313 ;;		On exit  : 0/0
 16314 ;;		Unchanged: 0/0
 16315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16316 ;;      Params:         0      32       0       0       0       0       0       0       0
 16317 ;;      Locals:         0      38       0       0       0       0       0       0       0
 16318 ;;      Temps:          0       3       0       0       0       0       0       0       0
 16319 ;;      Totals:         0      73       0       0       0       0       0       0       0
 16320 ;;Total ram usage:       73 bytes
 16321 ;; Hardware stack levels used:    1
 16322 ;; Hardware stack levels required when called:    9
 16323 ;; This function calls:
 16324 ;;		_ethernetController_streamFromRXBuffer
 16325 ;;		_ipv4_cmp
 16326 ;;		_ipv4_isAllZero
 16327 ;;		_mac_cmp
 16328 ;;		_mac_isAllZero
 16329 ;; This function is called by:
 16330 ;;		_ARP_handleNewPacket
 16331 ;; This function uses a non-reentrant model
 16332 ;;
 16333                           
 16334                           	psect	text60
 16335  000F50                     __ptext60:
 16336                           	opt stack 0
 16337  000F50                     _ARP_parseFromRXBuffer:
 16338                           	opt stack 18
 16339                           
 16340                           ;arp.c: 66: ARP_message_t arp;
 16341                           ;arp.c: 67: uint16_t const offset = 22;
 16342                           
 16343                           ;incstack = 0
 16344  000F50  0E00               	movlw	0
 16345  000F52  0100               	movlb	0	; () banked
 16346  000F54  6F9F               	movwf	(ARP_parseFromRXBuffer@offset+1)& (0+255),b
 16347  000F56  0E16               	movlw	22
 16348  000F58  6F9E               	movwf	ARP_parseFromRXBuffer@offset& (0+255),b
 16349                           
 16350                           ; BSR set to: 0
 16351                           ;arp.c: 69: ethernetController_streamFromRXBuffer(0, frame->memory.start + offset);
 16352  000F5A  EE20 F010          	lfsr	2,16
 16353  000F5E  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16354  000F60  26D9               	addwf	fsr2l,f,c
 16355  000F62  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16356  000F64  22DA               	addwfc	fsr2h,f,c
 16357  000F66  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16358  000F6A  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16359  000F6E  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16360  000F70  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16361  000F72  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16362  000F74  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16363  000F76  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16364  000F78  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16365  000F7A  0E00               	movlw	0
 16366  000F7C  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16367                           
 16368                           ;arp.c: 72: arp.htype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 16369  000F80  0100               	movlb	0	; () banked
 16370  000F82  EE20 F010          	lfsr	2,16
 16371  000F86  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16372  000F88  26D9               	addwf	fsr2l,f,c
 16373  000F8A  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16374  000F8C  22DA               	addwfc	fsr2h,f,c
 16375  000F8E  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16376  000F92  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16377  000F96  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16378  000F98  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16379  000F9A  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16380  000F9C  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16381  000F9E  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16382  000FA0  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16383  000FA2  0E01               	movlw	1
 16384  000FA4  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16385  000FA8  0100               	movlb	0	; () banked
 16386  000FAA  6FA1               	movwf	(ARP_parseFromRXBuffer@arp+1)& (0+255),b
 16387  000FAC  6BA0               	clrf	ARP_parseFromRXBuffer@arp& (0+255),b
 16388                           
 16389                           ; BSR set to: 0
 16390                           ;arp.c: 73: arp.htype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 16391  000FAE  EE20 F010          	lfsr	2,16
 16392  000FB2  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16393  000FB4  26D9               	addwf	fsr2l,f,c
 16394  000FB6  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16395  000FB8  22DA               	addwfc	fsr2h,f,c
 16396  000FBA  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16397  000FBE  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16398  000FC2  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16399  000FC4  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16400  000FC6  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16401  000FC8  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16402  000FCA  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16403  000FCC  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16404  000FCE  0E01               	movlw	1
 16405  000FD0  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16406  000FD4  0100               	movlb	0	; () banked
 16407  000FD6  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16408  000FD8  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 16409  000FDA  13A0               	iorwf	ARP_parseFromRXBuffer@arp& (0+255),f,b
 16410                           
 16411                           ; BSR set to: 0
 16412                           ;arp.c: 75: arp.ptype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 16413  000FDC  EE20 F010          	lfsr	2,16
 16414  000FE0  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16415  000FE2  26D9               	addwf	fsr2l,f,c
 16416  000FE4  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16417  000FE6  22DA               	addwfc	fsr2h,f,c
 16418  000FE8  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16419  000FEC  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16420  000FF0  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16421  000FF2  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16422  000FF4  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16423  000FF6  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16424  000FF8  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16425  000FFA  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16426  000FFC  0E01               	movlw	1
 16427  000FFE  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16428  001002  0100               	movlb	0	; () banked
 16429  001004  6FA3               	movwf	(ARP_parseFromRXBuffer@arp+3)& (0+255),b
 16430  001006  6BA2               	clrf	(ARP_parseFromRXBuffer@arp+2)& (0+255),b
 16431                           
 16432                           ; BSR set to: 0
 16433                           ;arp.c: 76: arp.ptype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 16434  001008  EE20 F010          	lfsr	2,16
 16435  00100C  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16436  00100E  26D9               	addwf	fsr2l,f,c
 16437  001010  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16438  001012  22DA               	addwfc	fsr2h,f,c
 16439  001014  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16440  001018  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16441  00101C  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16442  00101E  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16443  001020  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16444  001022  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16445  001024  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16446  001026  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16447  001028  0E01               	movlw	1
 16448  00102A  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16449  00102E  0100               	movlb	0	; () banked
 16450  001030  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16451  001032  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 16452  001034  13A2               	iorwf	(ARP_parseFromRXBuffer@arp+2)& (0+255),f,b
 16453                           
 16454                           ; BSR set to: 0
 16455                           ;arp.c: 78: arp.hlen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 16456  001036  EE20 F010          	lfsr	2,16
 16457  00103A  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16458  00103C  26D9               	addwf	fsr2l,f,c
 16459  00103E  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16460  001040  22DA               	addwfc	fsr2h,f,c
 16461  001042  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16462  001046  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16463  00104A  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16464  00104C  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16465  00104E  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16466  001050  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16467  001052  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16468  001054  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16469  001056  0E01               	movlw	1
 16470  001058  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16471  00105C  0100               	movlb	0	; () banked
 16472  00105E  6FA4               	movwf	(ARP_parseFromRXBuffer@arp+4)& (0+255),b
 16473                           
 16474                           ; BSR set to: 0
 16475                           ;arp.c: 79: arp.plen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 16476  001060  EE20 F010          	lfsr	2,16
 16477  001064  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16478  001066  26D9               	addwf	fsr2l,f,c
 16479  001068  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16480  00106A  22DA               	addwfc	fsr2h,f,c
 16481  00106C  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16482  001070  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16483  001074  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16484  001076  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16485  001078  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16486  00107A  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16487  00107C  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16488  00107E  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16489  001080  0E01               	movlw	1
 16490  001082  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16491  001086  0100               	movlb	0	; () banked
 16492  001088  6FA5               	movwf	(ARP_parseFromRXBuffer@arp+5)& (0+255),b
 16493                           
 16494                           ; BSR set to: 0
 16495                           ;arp.c: 81: arp.operation = (ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset) << 8);
 16496  00108A  EE20 F010          	lfsr	2,16
 16497  00108E  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16498  001090  26D9               	addwf	fsr2l,f,c
 16499  001092  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16500  001094  22DA               	addwfc	fsr2h,f,c
 16501  001096  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16502  00109A  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16503  00109E  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16504  0010A0  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16505  0010A2  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16506  0010A4  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16507  0010A6  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16508  0010A8  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16509  0010AA  0E01               	movlw	1
 16510  0010AC  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16511  0010B0  0100               	movlb	0	; () banked
 16512  0010B2  6FA7               	movwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),b
 16513  0010B4  6BA6               	clrf	(ARP_parseFromRXBuffer@arp+6)& (0+255),b
 16514                           
 16515                           ; BSR set to: 0
 16516                           ;arp.c: 82: arp.operation |= ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset);
 16517  0010B6  EE20 F010          	lfsr	2,16
 16518  0010BA  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16519  0010BC  26D9               	addwf	fsr2l,f,c
 16520  0010BE  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16521  0010C0  22DA               	addwfc	fsr2h,f,c
 16522  0010C2  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16523  0010C6  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16524  0010CA  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16525  0010CC  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16526  0010CE  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16527  0010D0  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16528  0010D2  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16529  0010D4  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16530  0010D6  0E01               	movlw	1
 16531  0010D8  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16532  0010DC  0100               	movlb	0	; () banked
 16533  0010DE  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16534  0010E0  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 16535  0010E2  13A6               	iorwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),f,b
 16536                           
 16537                           ; BSR set to: 0
 16538                           ;arp.c: 85: for (uint8_t i = 0; i < arp.hlen; i++)
 16539  0010E4  0E00               	movlw	0
 16540  0010E6  6F9A               	movwf	ARP_parseFromRXBuffer@i& (0+255),b
 16541  0010E8  D024               	goto	l909
 16542  0010EA                     
 16543                           ; BSR set to: 0
 16544                           ;arp.c: 86: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 16545                           
 16546                           ; BSR set to: 0
 16547  0010EA  EE20 F010          	lfsr	2,16
 16548  0010EE  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16549  0010F0  26D9               	addwf	fsr2l,f,c
 16550  0010F2  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16551  0010F4  22DA               	addwfc	fsr2h,f,c
 16552  0010F6  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16553  0010FA  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16554  0010FE  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16555  001100  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16556  001102  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16557  001104  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16558  001106  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16559  001108  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16560  00110A  0E01               	movlw	1
 16561  00110C  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16562  001110  0100               	movlb	0	; () banked
 16563  001112  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16564  001114  519A               	movf	ARP_parseFromRXBuffer@i& (0+255),w,b
 16565  001116  0D01               	mullw	1
 16566  001118  0E08               	movlw	8
 16567  00111A  26F3               	addwf	prodl,f,c
 16568  00111C  0E00               	movlw	0
 16569  00111E  22F4               	addwfc	prodh,f,c
 16570  001120  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 16571  001122  24F3               	addwf	prodl,w,c
 16572  001124  6ED9               	movwf	fsr2l,c
 16573  001126  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 16574  001128  20F4               	addwfc	prodh,w,c
 16575  00112A  6EDA               	movwf	fsr2h,c
 16576  00112C  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 16577                           
 16578                           ; BSR set to: 0
 16579  001130  2B9A               	incf	ARP_parseFromRXBuffer@i& (0+255),f,b
 16580  001132                     l909:
 16581                           
 16582                           ; BSR set to: 0
 16583                           
 16584                           ; BSR set to: 0
 16585  001132  51A4               	movf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 16586  001134  5D9A               	subwf	ARP_parseFromRXBuffer@i& (0+255),w,b
 16587  001136  A0D8               	btfss	status,0,c
 16588  001138  D7D8               	goto	l910
 16589                           
 16590                           ; BSR set to: 0
 16591                           ;arp.c: 87: for (uint8_t i = 0; i < arp.plen; i++)
 16592                           
 16593                           ; BSR set to: 0
 16594  00113A  0E00               	movlw	0
 16595  00113C  6F9B               	movwf	ARP_parseFromRXBuffer@i_2971& (0+255),b
 16596  00113E  D024               	goto	l912
 16597  001140                     
 16598                           ; BSR set to: 0
 16599                           ;arp.c: 88: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 16600                           
 16601                           ; BSR set to: 0
 16602  001140  EE20 F010          	lfsr	2,16
 16603  001144  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16604  001146  26D9               	addwf	fsr2l,f,c
 16605  001148  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16606  00114A  22DA               	addwfc	fsr2h,f,c
 16607  00114C  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16608  001150  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16609  001154  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16610  001156  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16611  001158  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16612  00115A  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16613  00115C  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16614  00115E  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16615  001160  0E01               	movlw	1
 16616  001162  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16617  001166  0100               	movlb	0	; () banked
 16618  001168  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16619  00116A  519B               	movf	ARP_parseFromRXBuffer@i_2971& (0+255),w,b
 16620  00116C  0D01               	mullw	1
 16621  00116E  0E0E               	movlw	14
 16622  001170  26F3               	addwf	prodl,f,c
 16623  001172  0E00               	movlw	0
 16624  001174  22F4               	addwfc	prodh,f,c
 16625  001176  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 16626  001178  24F3               	addwf	prodl,w,c
 16627  00117A  6ED9               	movwf	fsr2l,c
 16628  00117C  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 16629  00117E  20F4               	addwfc	prodh,w,c
 16630  001180  6EDA               	movwf	fsr2h,c
 16631  001182  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 16632                           
 16633                           ; BSR set to: 0
 16634  001186  2B9B               	incf	ARP_parseFromRXBuffer@i_2971& (0+255),f,b
 16635  001188                     l912:
 16636                           
 16637                           ; BSR set to: 0
 16638                           
 16639                           ; BSR set to: 0
 16640  001188  51A5               	movf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 16641  00118A  5D9B               	subwf	ARP_parseFromRXBuffer@i_2971& (0+255),w,b
 16642  00118C  A0D8               	btfss	status,0,c
 16643  00118E  D7D8               	goto	l913
 16644                           
 16645                           ; BSR set to: 0
 16646                           ;arp.c: 90: for (uint8_t i = 0; i < arp.hlen; i++)
 16647                           
 16648                           ; BSR set to: 0
 16649  001190  0E00               	movlw	0
 16650  001192  6F9C               	movwf	ARP_parseFromRXBuffer@i_2972& (0+255),b
 16651  001194  D024               	goto	l915
 16652  001196                     
 16653                           ; BSR set to: 0
 16654                           ;arp.c: 91: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 16655                           
 16656                           ; BSR set to: 0
 16657  001196  EE20 F010          	lfsr	2,16
 16658  00119A  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16659  00119C  26D9               	addwf	fsr2l,f,c
 16660  00119E  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16661  0011A0  22DA               	addwfc	fsr2h,f,c
 16662  0011A2  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16663  0011A6  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16664  0011AA  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16665  0011AC  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16666  0011AE  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16667  0011B0  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16668  0011B2  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16669  0011B4  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16670  0011B6  0E01               	movlw	1
 16671  0011B8  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16672  0011BC  0100               	movlb	0	; () banked
 16673  0011BE  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16674  0011C0  519C               	movf	ARP_parseFromRXBuffer@i_2972& (0+255),w,b
 16675  0011C2  0D01               	mullw	1
 16676  0011C4  0E12               	movlw	18
 16677  0011C6  26F3               	addwf	prodl,f,c
 16678  0011C8  0E00               	movlw	0
 16679  0011CA  22F4               	addwfc	prodh,f,c
 16680  0011CC  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 16681  0011CE  24F3               	addwf	prodl,w,c
 16682  0011D0  6ED9               	movwf	fsr2l,c
 16683  0011D2  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 16684  0011D4  20F4               	addwfc	prodh,w,c
 16685  0011D6  6EDA               	movwf	fsr2h,c
 16686  0011D8  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 16687                           
 16688                           ; BSR set to: 0
 16689  0011DC  2B9C               	incf	ARP_parseFromRXBuffer@i_2972& (0+255),f,b
 16690  0011DE                     l915:
 16691                           
 16692                           ; BSR set to: 0
 16693                           
 16694                           ; BSR set to: 0
 16695  0011DE  51A4               	movf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 16696  0011E0  5D9C               	subwf	ARP_parseFromRXBuffer@i_2972& (0+255),w,b
 16697  0011E2  A0D8               	btfss	status,0,c
 16698  0011E4  D7D8               	goto	l916
 16699                           
 16700                           ; BSR set to: 0
 16701                           ;arp.c: 92: for (uint8_t i = 0; i < arp.plen; i++)
 16702                           
 16703                           ; BSR set to: 0
 16704  0011E6  0E00               	movlw	0
 16705  0011E8  6F9D               	movwf	ARP_parseFromRXBuffer@i_2973& (0+255),b
 16706  0011EA  D024               	goto	l918
 16707  0011EC                     
 16708                           ; BSR set to: 0
 16709                           ;arp.c: 93: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 16710                           
 16711                           ; BSR set to: 0
 16712  0011EC  EE20 F010          	lfsr	2,16
 16713  0011F0  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16714  0011F2  26D9               	addwf	fsr2l,f,c
 16715  0011F4  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16716  0011F6  22DA               	addwfc	fsr2h,f,c
 16717  0011F8  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16718  0011FC  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16719  001200  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16720  001202  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16721  001204  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16722  001206  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16723  001208  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16724  00120A  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16725  00120C  0E01               	movlw	1
 16726  00120E  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16727  001212  0100               	movlb	0	; () banked
 16728  001214  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16729  001216  519D               	movf	ARP_parseFromRXBuffer@i_2973& (0+255),w,b
 16730  001218  0D01               	mullw	1
 16731  00121A  0E18               	movlw	24
 16732  00121C  26F3               	addwf	prodl,f,c
 16733  00121E  0E00               	movlw	0
 16734  001220  22F4               	addwfc	prodh,f,c
 16735  001222  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 16736  001224  24F3               	addwf	prodl,w,c
 16737  001226  6ED9               	movwf	fsr2l,c
 16738  001228  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 16739  00122A  20F4               	addwfc	prodh,w,c
 16740  00122C  6EDA               	movwf	fsr2h,c
 16741  00122E  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 16742                           
 16743                           ; BSR set to: 0
 16744  001232  2B9D               	incf	ARP_parseFromRXBuffer@i_2973& (0+255),f,b
 16745  001234                     l918:
 16746                           
 16747                           ; BSR set to: 0
 16748                           
 16749                           ; BSR set to: 0
 16750  001234  51A5               	movf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 16751  001236  5D9D               	subwf	ARP_parseFromRXBuffer@i_2973& (0+255),w,b
 16752  001238  A0D8               	btfss	status,0,c
 16753  00123A  D7D8               	goto	l919
 16754                           
 16755                           ; BSR set to: 0
 16756                           ;arp.c: 95: ethernetController_streamFromRXBuffer(2, frame->memory.start + offset);
 16757                           
 16758                           ; BSR set to: 0
 16759  00123C  EE20 F010          	lfsr	2,16
 16760  001240  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16761  001242  26D9               	addwf	fsr2l,f,c
 16762  001244  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16763  001246  22DA               	addwfc	fsr2h,f,c
 16764  001248  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16765  00124C  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16766  001250  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16767  001252  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16768  001254  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16769  001256  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16770  001258  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16771  00125A  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16772  00125C  0E02               	movlw	2
 16773  00125E  EC3F  F01E         	call	_ethernetController_streamFromRXBuffer
 16774                           
 16775                           ;arp.c: 97: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 16776  001262  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 16777  001264  0100               	movlb	0	; () banked
 16778  001266  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 16779  001268  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 16780  00126A  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 16781  00126C  EC85  F025         	call	_ipv4_isAllZero	;wreg free
 16782  001270  0100               	movlb	0	; () banked
 16783  001272  A0D8               	btfss	status,0,c
 16784  001274  D002               	goto	l921
 16785                           
 16786                           ; BSR set to: 0
 16787                           ;arp.c: 98: arp.fIsProbe = 1;
 16788  001276  83BC               	bsf	(ARP_parseFromRXBuffer@arp+28)& (0+255),1,b
 16789  001278  D03C               	goto	l925
 16790  00127A                     l921:
 16791                           
 16792                           ; BSR set to: 0
 16793                           ;arp.c: 101: arp.fIsProbe = 0;
 16794  00127A  93BC               	bcf	(ARP_parseFromRXBuffer@arp+28)& (0+255),1,b
 16795                           
 16796                           ; BSR set to: 0
 16797                           ;arp.c: 103: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 16798                           ;arp.c: 104: mac_isAllZero(&arp.targetMACAddress) &&
 16799                           ;arp.c: 105: arp.operation == ARP_REQUEST) {
 16800  00127C  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 16801  00127E  6F60               	movwf	ipv4_cmp@a& (0+255),b
 16802  001280  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 16803  001282  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 16804  001284  0EB8               	movlw	low (ARP_parseFromRXBuffer@arp+24)
 16805  001286  6F62               	movwf	ipv4_cmp@b& (0+255),b
 16806  001288  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+24)
 16807  00128A  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 16808  00128C  EC84  F024         	call	_ipv4_cmp	;wreg free
 16809  001290  0100               	movlb	0	; () banked
 16810  001292  A0D8               	btfss	status,0,c
 16811  001294  D00D               	goto	l923
 16812                           
 16813                           ; BSR set to: 0
 16814  001296  0EB2               	movlw	low (ARP_parseFromRXBuffer@arp+18)
 16815  001298  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 16816  00129A  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+18)
 16817  00129C  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 16818  00129E  EC6D  F025         	call	_mac_isAllZero	;wreg free
 16819  0012A2  0100               	movlb	0	; () banked
 16820  0012A4  A0D8               	btfss	status,0,c
 16821  0012A6  D004               	goto	l923
 16822                           
 16823                           ; BSR set to: 0
 16824  0012A8  05A6               	decf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 16825  0012AA  11A7               	iorwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 16826  0012AC  B4D8               	btfsc	status,2,c
 16827  0012AE  D01F               	goto	u10170
 16828  0012B0                     l923:
 16829                           
 16830                           ; BSR set to: 0
 16831                           ;arp.c: 109: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 16832                           ;arp.c: 110: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 16833                           ;arp.c: 111: arp.operation == ARP_REPLY) {
 16834                           
 16835                           ; BSR set to: 0
 16836  0012B0  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 16837  0012B2  6F60               	movwf	ipv4_cmp@a& (0+255),b
 16838  0012B4  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 16839  0012B6  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 16840  0012B8  0EB8               	movlw	low (ARP_parseFromRXBuffer@arp+24)
 16841  0012BA  6F62               	movwf	ipv4_cmp@b& (0+255),b
 16842  0012BC  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+24)
 16843  0012BE  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 16844  0012C0  EC84  F024         	call	_ipv4_cmp	;wreg free
 16845  0012C4  0100               	movlb	0	; () banked
 16846  0012C6  A0D8               	btfss	status,0,c
 16847  0012C8  D014               	goto	l925
 16848                           
 16849                           ; BSR set to: 0
 16850  0012CA  0EA8               	movlw	low (ARP_parseFromRXBuffer@arp+8)
 16851  0012CC  6F60               	movwf	mac_cmp@a& (0+255),b
 16852  0012CE  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+8)
 16853  0012D0  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 16854  0012D2  0EB2               	movlw	low (ARP_parseFromRXBuffer@arp+18)
 16855  0012D4  6F62               	movwf	mac_cmp@b& (0+255),b
 16856  0012D6  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+18)
 16857  0012D8  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 16858  0012DA  EC63  F024         	call	_mac_cmp	;wreg free
 16859  0012DE  0100               	movlb	0	; () banked
 16860  0012E0  A0D8               	btfss	status,0,c
 16861  0012E2  D007               	goto	l925
 16862                           
 16863                           ; BSR set to: 0
 16864  0012E4  0E02               	movlw	2
 16865  0012E6  19A6               	xorwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 16866  0012E8  11A7               	iorwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 16867  0012EA  A4D8               	btfss	status,2,c
 16868  0012EC  D002               	goto	l925
 16869  0012EE                     u10170:
 16870                           
 16871                           ; BSR set to: 0
 16872                           ;arp.c: 112: arp.fIsGratuitous = 1;
 16873  0012EE  81BC               	bsf	(ARP_parseFromRXBuffer@arp+28)& (0+255),0,b
 16874                           
 16875                           ;arp.c: 113: } else {
 16876  0012F0  D001               	goto	l926
 16877  0012F2                     l925:
 16878                           
 16879                           ; BSR set to: 0
 16880                           ;arp.c: 114: arp.fIsGratuitous = 0;
 16881  0012F2  91BC               	bcf	(ARP_parseFromRXBuffer@arp+28)& (0+255),0,b
 16882  0012F4                     l926:
 16883                           
 16884                           ; BSR set to: 0
 16885                           ;arp.c: 115: }
 16886                           ;arp.c: 116: }
 16887                           ;arp.c: 117: }
 16888                           ;arp.c: 120: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 16889                           ;arp.c: 121: (arp.ptype != ARP_PTYPE_IPv4) ||
 16890                           ;arp.c: 122: (arp.operation > 2) ||
 16891                           ;arp.c: 123: (arp.hlen != 6) ||
 16892                           ;arp.c: 124: (arp.plen != 4)) {
 16893                           
 16894                           ; BSR set to: 0
 16895                           
 16896                           ; BSR set to: 0
 16897                           
 16898                           ; BSR set to: 0
 16899  0012F4  05A0               	decf	ARP_parseFromRXBuffer@arp& (0+255),w,b
 16900  0012F6  11A1               	iorwf	(ARP_parseFromRXBuffer@arp+1)& (0+255),w,b
 16901  0012F8  A4D8               	btfss	status,2,c
 16902  0012FA  D013               	goto	u10220
 16903                           
 16904                           ; BSR set to: 0
 16905  0012FC  0E08               	movlw	8
 16906  0012FE  19A3               	xorwf	(ARP_parseFromRXBuffer@arp+3)& (0+255),w,b
 16907  001300  11A2               	iorwf	(ARP_parseFromRXBuffer@arp+2)& (0+255),w,b
 16908  001302  A4D8               	btfss	status,2,c
 16909  001304  D00E               	goto	u10220
 16910                           
 16911                           ; BSR set to: 0
 16912  001306  51A7               	movf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 16913  001308  E10C               	bnz	l8359
 16914  00130A  0E03               	movlw	3
 16915  00130C  5DA6               	subwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 16916  00130E  B0D8               	btfsc	status,0,c
 16917  001310  D008               	goto	u10220
 16918                           
 16919                           ; BSR set to: 0
 16920  001312  0E06               	movlw	6
 16921  001314  19A4               	xorwf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 16922  001316  A4D8               	btfss	status,2,c
 16923  001318  D004               	goto	u10220
 16924                           
 16925                           ; BSR set to: 0
 16926  00131A  0E04               	movlw	4
 16927  00131C  19A5               	xorwf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 16928  00131E  B4D8               	btfsc	status,2,c
 16929  001320  D004               	goto	l927
 16930  001322                     u10220:
 16931  001322                     l8359:
 16932                           
 16933                           ; BSR set to: 0
 16934                           ;arp.c: 125: arp.err.code = ERROR_ARP_INVALID_VALUES;
 16935  001322  0E01               	movlw	1
 16936  001324  6FBF               	movwf	(ARP_parseFromRXBuffer@arp+31)& (0+255),b
 16937  001326  0E93               	movlw	147
 16938  001328  D003               	goto	L2
 16939  00132A                     l927:
 16940                           
 16941                           ; BSR set to: 0
 16942                           ;arp.c: 128: arp.err.code = (uint16_t)0;
 16943                           
 16944                           ; BSR set to: 0
 16945  00132A  0E00               	movlw	0
 16946  00132C  6FBF               	movwf	(ARP_parseFromRXBuffer@arp+31)& (0+255),b
 16947  00132E  0E00               	movlw	0
 16948  001330                     L2:
 16949  001330  6FBE               	movwf	(ARP_parseFromRXBuffer@arp+30)& (0+255),b
 16950                           
 16951                           ;arp.c: 129: arp.err.module = ERROR_MODULE_ARP;
 16952  001332  0E03               	movlw	3
 16953  001334  6FBD               	movwf	(ARP_parseFromRXBuffer@arp+29)& (0+255),b
 16954                           
 16955                           ; BSR set to: 0
 16956                           ;arp.c: 130: }
 16957                           ;arp.c: 132: return arp;
 16958                           
 16959                           ; BSR set to: 0
 16960  001336  EE20  F0A0         	lfsr	2,ARP_parseFromRXBuffer@arp
 16961  00133A  EE00  F077         	lfsr	0,?_ARP_parseFromRXBuffer
 16962  00133E  0E1F               	movlw	31
 16963  001340                     u10231:
 16964  001340  CFDB FFEB          	movff	plusw2,plusw0
 16965  001344  06E8               	decf	wreg,f,c
 16966  001346  E2FC               	bc	u10231
 16967  001348  0012               	return	
 16968  00134A                     __end_of_ARP_parseFromRXBuffer:
 16969                           	opt stack 0
 16970                           tblptru	equ	0xFF8
 16971                           tblptrh	equ	0xFF7
 16972                           tblptrl	equ	0xFF6
 16973                           tablat	equ	0xFF5
 16974                           prodh	equ	0xFF4
 16975                           prodl	equ	0xFF3
 16976                           intcon	equ	0xFF2
 16977                           intcon3	equ	0xFF0
 16978                           indf0	equ	0xFEF
 16979                           postinc0	equ	0xFEE
 16980                           plusw0	equ	0xFEB
 16981                           fsr0h	equ	0xFEA
 16982                           fsr0l	equ	0xFE9
 16983                           wreg	equ	0xFE8
 16984                           indf1	equ	0xFE7
 16985                           postinc1	equ	0xFE6
 16986                           postdec1	equ	0xFE5
 16987                           plusw1	equ	0xFE3
 16988                           fsr1h	equ	0xFE2
 16989                           fsr1l	equ	0xFE1
 16990                           indf2	equ	0xFDF
 16991                           postinc2	equ	0xFDE
 16992                           postdec2	equ	0xFDD
 16993                           plusw2	equ	0xFDB
 16994                           fsr2h	equ	0xFDA
 16995                           fsr2l	equ	0xFD9
 16996                           status	equ	0xFD8
 16997                           
 16998 ;; *************** function _mac_isAllZero *****************
 16999 ;; Defined at:
 17000 ;;		line 31 in file "src/eth/mac.c"
 17001 ;; Parameters:    Size  Location     Type
 17002 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 17003 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 17004 ;; Auto vars:     Size  Location     Type
 17005 ;;  i               1    2[BANK0 ] unsigned char 
 17006 ;; Return value:  Size  Location     Type
 17007 ;;		None               void
 17008 ;; Registers used:
 17009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17010 ;; Tracked objects:
 17011 ;;		On entry : 0/0
 17012 ;;		On exit  : 0/0
 17013 ;;		Unchanged: 0/0
 17014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17015 ;;      Params:         0       2       0       0       0       0       0       0       0
 17016 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17017 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17018 ;;      Totals:         0       3       0       0       0       0       0       0       0
 17019 ;;Total ram usage:        3 bytes
 17020 ;; Hardware stack levels used:    1
 17021 ;; Hardware stack levels required when called:    4
 17022 ;; This function calls:
 17023 ;;		Nothing
 17024 ;; This function is called by:
 17025 ;;		_ARP_parseFromRXBuffer
 17026 ;; This function uses a non-reentrant model
 17027 ;;
 17028                           
 17029                           	psect	text61
 17030  004ADA                     __ptext61:
 17031                           	opt stack 0
 17032  004ADA                     _mac_isAllZero:
 17033                           	opt stack 22
 17034                           
 17035                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 17036                           
 17037                           ; BSR set to: 0
 17038                           ;incstack = 0
 17039  004ADA  0E00               	movlw	0
 17040  004ADC  0100               	movlb	0	; () banked
 17041  004ADE  6F62               	movwf	mac_isAllZero@i& (0+255),b
 17042  004AE0                     l7915:
 17043                           
 17044                           ; BSR set to: 0
 17045  004AE0  0E05               	movlw	5
 17046  004AE2  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 17047  004AE4  D001               	goto	l382
 17048  004AE6  D00F               	goto	u9170
 17049  004AE8                     l382:
 17050                           
 17051                           ; BSR set to: 0
 17052                           ;mac.c: 33: if (mac->address[i] != 0x00)
 17053                           
 17054                           ; BSR set to: 0
 17055  004AE8  5162               	movf	mac_isAllZero@i& (0+255),w,b
 17056  004AEA  0D01               	mullw	1
 17057  004AEC  50F3               	movf	prodl,w,c
 17058  004AEE  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 17059  004AF0  6ED9               	movwf	fsr2l,c
 17060  004AF2  50F4               	movf	prodh,w,c
 17061  004AF4  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 17062  004AF6  6EDA               	movwf	fsr2h,c
 17063  004AF8  50DF               	movf	indf2,w,c
 17064  004AFA  B4D8               	btfsc	status,2,c
 17065  004AFC  D002               	goto	l384
 17066                           
 17067                           ; BSR set to: 0
 17068                           ;mac.c: 34: return 0;
 17069  004AFE  90D8               	bcf	status,0,c
 17070                           
 17071                           ; BSR set to: 0
 17072  004B00  0012               	return	
 17073  004B02                     l384:
 17074                           
 17075                           ; BSR set to: 0
 17076                           
 17077                           ; BSR set to: 0
 17078  004B02  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 17079  004B04  D7ED               	goto	l7915
 17080  004B06                     u9170:
 17081                           
 17082                           ; BSR set to: 0
 17083                           ;mac.c: 35: }
 17084                           ;mac.c: 36: return 1;
 17085                           
 17086                           ; BSR set to: 0
 17087  004B06  80D8               	bsf	status,0,c
 17088  004B08  0012               	return	
 17089  004B0A                     __end_of_mac_isAllZero:
 17090                           	opt stack 0
 17091                           tblptru	equ	0xFF8
 17092                           tblptrh	equ	0xFF7
 17093                           tblptrl	equ	0xFF6
 17094                           tablat	equ	0xFF5
 17095                           prodh	equ	0xFF4
 17096                           prodl	equ	0xFF3
 17097                           intcon	equ	0xFF2
 17098                           intcon3	equ	0xFF0
 17099                           indf0	equ	0xFEF
 17100                           postinc0	equ	0xFEE
 17101                           plusw0	equ	0xFEB
 17102                           fsr0h	equ	0xFEA
 17103                           fsr0l	equ	0xFE9
 17104                           wreg	equ	0xFE8
 17105                           indf1	equ	0xFE7
 17106                           postinc1	equ	0xFE6
 17107                           postdec1	equ	0xFE5
 17108                           plusw1	equ	0xFE3
 17109                           fsr1h	equ	0xFE2
 17110                           fsr1l	equ	0xFE1
 17111                           indf2	equ	0xFDF
 17112                           postinc2	equ	0xFDE
 17113                           postdec2	equ	0xFDD
 17114                           plusw2	equ	0xFDB
 17115                           fsr2h	equ	0xFDA
 17116                           fsr2l	equ	0xFD9
 17117                           status	equ	0xFD8
 17118                           
 17119 ;; *************** function _mac_cmp *****************
 17120 ;; Defined at:
 17121 ;;		line 39 in file "src/eth/mac.c"
 17122 ;; Parameters:    Size  Location     Type
 17123 ;;  a               2    0[BANK0 ] PTR struct macaddress
 17124 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 17125 ;;  b               2    2[BANK0 ] PTR struct macaddress
 17126 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 17127 ;; Auto vars:     Size  Location     Type
 17128 ;;  i               1    6[BANK0 ] unsigned char 
 17129 ;; Return value:  Size  Location     Type
 17130 ;;		None               void
 17131 ;; Registers used:
 17132 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17133 ;; Tracked objects:
 17134 ;;		On entry : 0/0
 17135 ;;		On exit  : 0/0
 17136 ;;		Unchanged: 0/0
 17137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17138 ;;      Params:         0       4       0       0       0       0       0       0       0
 17139 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17140 ;;      Temps:          0       2       0       0       0       0       0       0       0
 17141 ;;      Totals:         0       7       0       0       0       0       0       0       0
 17142 ;;Total ram usage:        7 bytes
 17143 ;; Hardware stack levels used:    1
 17144 ;; Hardware stack levels required when called:    4
 17145 ;; This function calls:
 17146 ;;		Nothing
 17147 ;; This function is called by:
 17148 ;;		_ARP_parseFromRXBuffer
 17149 ;; This function uses a non-reentrant model
 17150 ;;
 17151                           
 17152                           	psect	text62
 17153  0048C6                     __ptext62:
 17154                           	opt stack 0
 17155  0048C6                     _mac_cmp:
 17156                           	opt stack 22
 17157                           
 17158                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 17159                           
 17160                           ; BSR set to: 0
 17161                           ;incstack = 0
 17162  0048C6  0E00               	movlw	0
 17163  0048C8  0100               	movlb	0	; () banked
 17164  0048CA  6F66               	movwf	mac_cmp@i& (0+255),b
 17165  0048CC                     l7935:
 17166                           
 17167                           ; BSR set to: 0
 17168  0048CC  0E05               	movlw	5
 17169  0048CE  6566               	cpfsgt	mac_cmp@i& (0+255),b
 17170  0048D0  D001               	goto	l388
 17171  0048D2  D018               	goto	u9200
 17172  0048D4                     l388:
 17173                           
 17174                           ; BSR set to: 0
 17175                           ;mac.c: 41: if (a->address[i] != b->address[i])
 17176                           
 17177                           ; BSR set to: 0
 17178  0048D4  5166               	movf	mac_cmp@i& (0+255),w,b
 17179  0048D6  0D01               	mullw	1
 17180  0048D8  50F3               	movf	prodl,w,c
 17181  0048DA  2562               	addwf	mac_cmp@b& (0+255),w,b
 17182  0048DC  6ED9               	movwf	fsr2l,c
 17183  0048DE  50F4               	movf	prodh,w,c
 17184  0048E0  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 17185  0048E2  6EDA               	movwf	fsr2h,c
 17186  0048E4  5166               	movf	mac_cmp@i& (0+255),w,b
 17187  0048E6  0D01               	mullw	1
 17188  0048E8  50F3               	movf	prodl,w,c
 17189  0048EA  2560               	addwf	mac_cmp@a& (0+255),w,b
 17190  0048EC  6EE1               	movwf	fsr1l,c
 17191  0048EE  50F4               	movf	prodh,w,c
 17192  0048F0  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 17193  0048F2  6EE2               	movwf	fsr1h,c
 17194  0048F4  50DE               	movf	postinc2,w,c
 17195  0048F6  18E6               	xorwf	postinc1,w,c
 17196  0048F8  B4D8               	btfsc	status,2,c
 17197  0048FA  D002               	goto	l390
 17198                           
 17199                           ; BSR set to: 0
 17200                           ;mac.c: 42: return 0;
 17201  0048FC  90D8               	bcf	status,0,c
 17202                           
 17203                           ; BSR set to: 0
 17204  0048FE  0012               	return	
 17205  004900                     l390:
 17206                           
 17207                           ; BSR set to: 0
 17208                           
 17209                           ; BSR set to: 0
 17210  004900  2B66               	incf	mac_cmp@i& (0+255),f,b
 17211  004902  D7E4               	goto	l7935
 17212  004904                     u9200:
 17213                           
 17214                           ; BSR set to: 0
 17215                           ;mac.c: 43: }
 17216                           ;mac.c: 44: return 1;
 17217                           
 17218                           ; BSR set to: 0
 17219  004904  80D8               	bsf	status,0,c
 17220  004906  0012               	return	
 17221  004908                     __end_of_mac_cmp:
 17222                           	opt stack 0
 17223                           tblptru	equ	0xFF8
 17224                           tblptrh	equ	0xFF7
 17225                           tblptrl	equ	0xFF6
 17226                           tablat	equ	0xFF5
 17227                           prodh	equ	0xFF4
 17228                           prodl	equ	0xFF3
 17229                           intcon	equ	0xFF2
 17230                           intcon3	equ	0xFF0
 17231                           indf0	equ	0xFEF
 17232                           postinc0	equ	0xFEE
 17233                           plusw0	equ	0xFEB
 17234                           fsr0h	equ	0xFEA
 17235                           fsr0l	equ	0xFE9
 17236                           wreg	equ	0xFE8
 17237                           indf1	equ	0xFE7
 17238                           postinc1	equ	0xFE6
 17239                           postdec1	equ	0xFE5
 17240                           plusw1	equ	0xFE3
 17241                           fsr1h	equ	0xFE2
 17242                           fsr1l	equ	0xFE1
 17243                           indf2	equ	0xFDF
 17244                           postinc2	equ	0xFDE
 17245                           postdec2	equ	0xFDD
 17246                           plusw2	equ	0xFDB
 17247                           fsr2h	equ	0xFDA
 17248                           fsr2l	equ	0xFD9
 17249                           status	equ	0xFD8
 17250                           
 17251 ;; *************** function _ipv4_isAllZero *****************
 17252 ;; Defined at:
 17253 ;;		line 268 in file "src/stack/protocols/ipv4.c"
 17254 ;; Parameters:    Size  Location     Type
 17255 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 17256 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 17257 ;; Auto vars:     Size  Location     Type
 17258 ;;  i               1    2[BANK0 ] unsigned char 
 17259 ;; Return value:  Size  Location     Type
 17260 ;;		None               void
 17261 ;; Registers used:
 17262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17263 ;; Tracked objects:
 17264 ;;		On entry : 0/0
 17265 ;;		On exit  : 0/0
 17266 ;;		Unchanged: 0/0
 17267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17268 ;;      Params:         0       2       0       0       0       0       0       0       0
 17269 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17270 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17271 ;;      Totals:         0       3       0       0       0       0       0       0       0
 17272 ;;Total ram usage:        3 bytes
 17273 ;; Hardware stack levels used:    1
 17274 ;; Hardware stack levels required when called:    4
 17275 ;; This function calls:
 17276 ;;		Nothing
 17277 ;; This function is called by:
 17278 ;;		_ARP_parseFromRXBuffer
 17279 ;; This function uses a non-reentrant model
 17280 ;;
 17281                           
 17282                           	psect	text63
 17283  004B0A                     __ptext63:
 17284                           	opt stack 0
 17285  004B0A                     _ipv4_isAllZero:
 17286                           	opt stack 22
 17287                           
 17288                           ;ipv4.c: 269: for (uint8_t i = 0; i < 4; i++) {
 17289                           
 17290                           ; BSR set to: 0
 17291                           ;incstack = 0
 17292  004B0A  0E00               	movlw	0
 17293  004B0C  0100               	movlb	0	; () banked
 17294  004B0E  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 17295  004B10                     l8021:
 17296                           
 17297                           ; BSR set to: 0
 17298  004B10  0E03               	movlw	3
 17299  004B12  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 17300  004B14  D001               	goto	l1101
 17301  004B16  D00F               	goto	u9320
 17302  004B18                     l1101:
 17303                           
 17304                           ; BSR set to: 0
 17305                           ;ipv4.c: 270: if (ip->address[i] != 0x00)
 17306                           
 17307                           ; BSR set to: 0
 17308  004B18  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 17309  004B1A  0D01               	mullw	1
 17310  004B1C  50F3               	movf	prodl,w,c
 17311  004B1E  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 17312  004B20  6ED9               	movwf	fsr2l,c
 17313  004B22  50F4               	movf	prodh,w,c
 17314  004B24  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 17315  004B26  6EDA               	movwf	fsr2h,c
 17316  004B28  50DF               	movf	indf2,w,c
 17317  004B2A  B4D8               	btfsc	status,2,c
 17318  004B2C  D002               	goto	l1103
 17319                           
 17320                           ; BSR set to: 0
 17321                           ;ipv4.c: 271: return 0;
 17322  004B2E  90D8               	bcf	status,0,c
 17323                           
 17324                           ; BSR set to: 0
 17325  004B30  0012               	return	
 17326  004B32                     l1103:
 17327                           
 17328                           ; BSR set to: 0
 17329                           
 17330                           ; BSR set to: 0
 17331  004B32  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 17332  004B34  D7ED               	goto	l8021
 17333  004B36                     u9320:
 17334                           
 17335                           ; BSR set to: 0
 17336                           ;ipv4.c: 272: }
 17337                           ;ipv4.c: 273: return 1;
 17338                           
 17339                           ; BSR set to: 0
 17340  004B36  80D8               	bsf	status,0,c
 17341  004B38  0012               	return	
 17342  004B3A                     __end_of_ipv4_isAllZero:
 17343                           	opt stack 0
 17344                           tblptru	equ	0xFF8
 17345                           tblptrh	equ	0xFF7
 17346                           tblptrl	equ	0xFF6
 17347                           tablat	equ	0xFF5
 17348                           prodh	equ	0xFF4
 17349                           prodl	equ	0xFF3
 17350                           intcon	equ	0xFF2
 17351                           intcon3	equ	0xFF0
 17352                           indf0	equ	0xFEF
 17353                           postinc0	equ	0xFEE
 17354                           plusw0	equ	0xFEB
 17355                           fsr0h	equ	0xFEA
 17356                           fsr0l	equ	0xFE9
 17357                           wreg	equ	0xFE8
 17358                           indf1	equ	0xFE7
 17359                           postinc1	equ	0xFE6
 17360                           postdec1	equ	0xFE5
 17361                           plusw1	equ	0xFE3
 17362                           fsr1h	equ	0xFE2
 17363                           fsr1l	equ	0xFE1
 17364                           indf2	equ	0xFDF
 17365                           postinc2	equ	0xFDE
 17366                           postdec2	equ	0xFDD
 17367                           plusw2	equ	0xFDB
 17368                           fsr2h	equ	0xFDA
 17369                           fsr2l	equ	0xFD9
 17370                           status	equ	0xFD8
 17371                           
 17372 ;; *************** function _ipv4_cmp *****************
 17373 ;; Defined at:
 17374 ;;		line 260 in file "src/stack/protocols/ipv4.c"
 17375 ;; Parameters:    Size  Location     Type
 17376 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 17377 ;;		 -> ARP_table(112), ARP_sendReply@request(32), ARP_parseFromRXBuffer@arp(32), 
 17378 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 17379 ;;		 -> ARP_checkForEntry@ip(4), ARP_sendReply@myIP(4), ARP_parseFromRXBuffer@arp(32), 
 17380 ;; Auto vars:     Size  Location     Type
 17381 ;;  i               1    6[BANK0 ] unsigned char 
 17382 ;; Return value:  Size  Location     Type
 17383 ;;		None               void
 17384 ;; Registers used:
 17385 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17386 ;; Tracked objects:
 17387 ;;		On entry : 0/0
 17388 ;;		On exit  : 0/0
 17389 ;;		Unchanged: 0/0
 17390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17391 ;;      Params:         0       4       0       0       0       0       0       0       0
 17392 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17393 ;;      Temps:          0       2       0       0       0       0       0       0       0
 17394 ;;      Totals:         0       7       0       0       0       0       0       0       0
 17395 ;;Total ram usage:        7 bytes
 17396 ;; Hardware stack levels used:    1
 17397 ;; Hardware stack levels required when called:    4
 17398 ;; This function calls:
 17399 ;;		Nothing
 17400 ;; This function is called by:
 17401 ;;		_ARP_parseFromRXBuffer
 17402 ;;		_ARP_sendReply
 17403 ;;		_ARP_checkForEntry
 17404 ;; This function uses a non-reentrant model
 17405 ;;
 17406                           
 17407                           	psect	text64
 17408  004908                     __ptext64:
 17409                           	opt stack 0
 17410  004908                     _ipv4_cmp:
 17411                           	opt stack 24
 17412                           
 17413                           ;ipv4.c: 261: for (uint8_t i = 0; i < 4; i++) {
 17414                           
 17415                           ; BSR set to: 0
 17416                           ;incstack = 0
 17417  004908  0E00               	movlw	0
 17418  00490A  0100               	movlb	0	; () banked
 17419  00490C  6F66               	movwf	ipv4_cmp@i& (0+255),b
 17420  00490E                     l8041:
 17421                           
 17422                           ; BSR set to: 0
 17423  00490E  0E03               	movlw	3
 17424  004910  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 17425  004912  D001               	goto	l1095
 17426  004914  D018               	goto	u9350
 17427  004916                     l1095:
 17428                           
 17429                           ; BSR set to: 0
 17430                           ;ipv4.c: 262: if (a->address[i] != b->address[i])
 17431                           
 17432                           ; BSR set to: 0
 17433  004916  5166               	movf	ipv4_cmp@i& (0+255),w,b
 17434  004918  0D01               	mullw	1
 17435  00491A  50F3               	movf	prodl,w,c
 17436  00491C  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 17437  00491E  6ED9               	movwf	fsr2l,c
 17438  004920  50F4               	movf	prodh,w,c
 17439  004922  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 17440  004924  6EDA               	movwf	fsr2h,c
 17441  004926  5166               	movf	ipv4_cmp@i& (0+255),w,b
 17442  004928  0D01               	mullw	1
 17443  00492A  50F3               	movf	prodl,w,c
 17444  00492C  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 17445  00492E  6EE1               	movwf	fsr1l,c
 17446  004930  50F4               	movf	prodh,w,c
 17447  004932  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 17448  004934  6EE2               	movwf	fsr1h,c
 17449  004936  50DE               	movf	postinc2,w,c
 17450  004938  18E6               	xorwf	postinc1,w,c
 17451  00493A  B4D8               	btfsc	status,2,c
 17452  00493C  D002               	goto	l1097
 17453                           
 17454                           ; BSR set to: 0
 17455                           ;ipv4.c: 263: return 0;
 17456  00493E  90D8               	bcf	status,0,c
 17457                           
 17458                           ; BSR set to: 0
 17459  004940  0012               	return	
 17460  004942                     l1097:
 17461                           
 17462                           ; BSR set to: 0
 17463                           
 17464                           ; BSR set to: 0
 17465  004942  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 17466  004944  D7E4               	goto	l8041
 17467  004946                     u9350:
 17468                           
 17469                           ; BSR set to: 0
 17470                           ;ipv4.c: 264: }
 17471                           ;ipv4.c: 265: return 1;
 17472                           
 17473                           ; BSR set to: 0
 17474  004946  80D8               	bsf	status,0,c
 17475  004948  0012               	return	
 17476  00494A                     __end_of_ipv4_cmp:
 17477                           	opt stack 0
 17478                           tblptru	equ	0xFF8
 17479                           tblptrh	equ	0xFF7
 17480                           tblptrl	equ	0xFF6
 17481                           tablat	equ	0xFF5
 17482                           prodh	equ	0xFF4
 17483                           prodl	equ	0xFF3
 17484                           intcon	equ	0xFF2
 17485                           intcon3	equ	0xFF0
 17486                           indf0	equ	0xFEF
 17487                           postinc0	equ	0xFEE
 17488                           plusw0	equ	0xFEB
 17489                           fsr0h	equ	0xFEA
 17490                           fsr0l	equ	0xFE9
 17491                           wreg	equ	0xFE8
 17492                           indf1	equ	0xFE7
 17493                           postinc1	equ	0xFE6
 17494                           postdec1	equ	0xFE5
 17495                           plusw1	equ	0xFE3
 17496                           fsr1h	equ	0xFE2
 17497                           fsr1l	equ	0xFE1
 17498                           indf2	equ	0xFDF
 17499                           postinc2	equ	0xFDE
 17500                           postdec2	equ	0xFDD
 17501                           plusw2	equ	0xFDB
 17502                           fsr2h	equ	0xFDA
 17503                           fsr2l	equ	0xFD9
 17504                           status	equ	0xFD8
 17505                           
 17506 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 17507 ;; Defined at:
 17508 ;;		line 349 in file "src/enc424j600/ENC424J600.c"
 17509 ;; Parameters:    Size  Location     Type
 17510 ;;  startEnd        1    wreg     unsigned char 
 17511 ;;  startAddress    2   18[BANK0 ] unsigned int 
 17512 ;; Auto vars:     Size  Location     Type
 17513 ;;  startEnd        1   20[BANK0 ] unsigned char 
 17514 ;;  temp            1   22[BANK0 ] unsigned char 
 17515 ;;  opcode          1   21[BANK0 ] unsigned char 
 17516 ;; Return value:  Size  Location     Type
 17517 ;;                  1    wreg      unsigned char 
 17518 ;; Registers used:
 17519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17520 ;; Tracked objects:
 17521 ;;		On entry : 0/0
 17522 ;;		On exit  : 0/0
 17523 ;;		Unchanged: 0/0
 17524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17525 ;;      Params:         0       2       0       0       0       0       0       0       0
 17526 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17527 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17528 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17529 ;;Total ram usage:        5 bytes
 17530 ;; Hardware stack levels used:    1
 17531 ;; Hardware stack levels required when called:    8
 17532 ;; This function calls:
 17533 ;;		_ENC424J600_readSPI
 17534 ;;		_ENC424J600_setERXDATAReadPointer
 17535 ;;		_ENC424J600_setRXTailPointer
 17536 ;;		_ENC424J600_writeSPI
 17537 ;;		_ENC424J600_writeSingleByte
 17538 ;;		_ethernetController_getNextPacketPointer
 17539 ;; This function is called by:
 17540 ;;		_ARP_parseFromRXBuffer
 17541 ;;		_ipv4_parseHeader
 17542 ;; This function uses a non-reentrant model
 17543 ;;
 17544                           
 17545                           	psect	text65
 17546  003C7E                     __ptext65:
 17547                           	opt stack 0
 17548  003C7E                     _ethernetController_streamFromRXBuffer:
 17549                           	opt stack 18
 17550                           
 17551                           ; BSR set to: 0
 17552                           ;incstack = 0
 17553                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 17554  003C7E  0100               	movlb	0	; () banked
 17555  003C80  6F74               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 17556                           
 17557                           ;ENC424J600.c: 350: uint8_t temp;
 17558                           ;ENC424J600.c: 351: uint8_t opcode;
 17559                           ;ENC424J600.c: 352: switch (startEnd) {
 17560  003C82  D03C               	goto	l175
 17561  003C84                     
 17562                           ;ENC424J600.c: 354: ENC424J600_setERXDATAReadPointer(startAddress);
 17563  003C84  C072  F06A         	movff	ethernetController_streamFromRXBuffer@startAddress,ENC424J600_setERXDATAReadPoint
      +                          er@addr
 17564  003C88  C073  F06B         	movff	ethernetController_streamFromRXBuffer@startAddress+1,ENC424J600_setERXDATAReadPoi
      +                          nter@addr+1
 17565  003C8C  ECE1  F024         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
 17566                           
 17567                           ;ENC424J600.c: 355: opcode = 0x2C;
 17568  003C90  0E2C               	movlw	44
 17569  003C92  0100               	movlb	0	; () banked
 17570  003C94  6F75               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 17571                           
 17572                           ; BSR set to: 0
 17573                           ;ENC424J600.c: 356: PORTBbits.RB4=0;
 17574  003C96  9881               	bcf	3969,4,c	;volatile
 17575                           
 17576                           ; BSR set to: 0
 17577                           ;ENC424J600.c: 357: ENC424J600_writeSPI(&opcode);
 17578  003C98  0E75               	movlw	low ethernetController_streamFromRXBuffer@opcode
 17579  003C9A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 17580  003C9C  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 17581  003C9E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 17582  003CA0  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 17583                           
 17584                           ;ENC424J600.c: 358: return 0;
 17585  003CA4  0E00               	movlw	0
 17586  003CA6  0012               	return	
 17587  003CA8                     
 17588                           ;ENC424J600.c: 360: ENC424J600_readSPI(&temp);
 17589  003CA8  0E76               	movlw	low ethernetController_streamFromRXBuffer@temp
 17590  003CAA  0100               	movlb	0	; () banked
 17591  003CAC  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 17592  003CAE  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 17593  003CB0  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 17594  003CB2  EC3B  F022         	call	_ENC424J600_readSPI	;wreg free
 17595                           
 17596                           ;ENC424J600.c: 361: return temp;
 17597  003CB6  0100               	movlb	0	; () banked
 17598  003CB8  5176               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 17599                           
 17600                           ; BSR set to: 0
 17601  003CBA  0012               	return	
 17602  003CBC                     l179:
 17603                           
 17604                           ; BSR set to: 0
 17605                           ;ENC424J600.c: 363: PORTBbits.RB4=1;
 17606  003CBC  8881               	bsf	3969,4,c	;volatile
 17607                           
 17608                           ; BSR set to: 0
 17609                           ;ENC424J600.c: 365: if (ethernetController_getNextPacketPointer() == 0x3000) {
 17610  003CBE  EC5A  F027         	call	_ethernetController_getNextPacketPointer	;wreg free
 17611  003CC2  0E30               	movlw	48
 17612  003CC4  0100               	movlb	0	; () banked
 17613  003CC6  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 17614  003CC8  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 17615  003CCA  A4D8               	btfss	status,2,c
 17616  003CCC  D007               	goto	l180
 17617                           
 17618                           ; BSR set to: 0
 17619                           ;ENC424J600.c: 366: ENC424J600_setRXTailPointer(0x55FE);
 17620  003CCE  0E55               	movlw	85
 17621  003CD0  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 17622  003CD2  0EFE               	movlw	254
 17623  003CD4  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 17624  003CD6  ECDE  F025         	call	_ENC424J600_setRXTailPointer	;wreg free
 17625                           
 17626                           ;ENC424J600.c: 367: } else {
 17627  003CDA  D00B               	goto	l181
 17628  003CDC                     l180:
 17629                           
 17630                           ;ENC424J600.c: 368: ENC424J600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
 17631  003CDC  EC5A  F027         	call	_ethernetController_getNextPacketPointer	;wreg free
 17632  003CE0  0EFE               	movlw	254
 17633  003CE2  0100               	movlb	0	; () banked
 17634  003CE4  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 17635  003CE6  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 17636  003CE8  0EFF               	movlw	255
 17637  003CEA  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 17638  003CEC  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 17639  003CEE  ECDE  F025         	call	_ENC424J600_setRXTailPointer	;wreg free
 17640  003CF2                     l181:
 17641                           
 17642                           ;ENC424J600.c: 369: }
 17643                           ;ENC424J600.c: 372: ENC424J600_writeSingleByte(0b11001100);
 17644  003CF2  0ECC               	movlw	204
 17645  003CF4  EC1A  F027         	call	_ENC424J600_writeSingleByte
 17646                           
 17647                           ;ENC424J600.c: 373: return 0;
 17648  003CF8  0E00               	movlw	0
 17649  003CFA  0012               	return	
 17650  003CFC                     l175:
 17651  003CFC  0100               	movlb	0	; () banked
 17652  003CFE  5174               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 17653                           
 17654                           ; Switch size 1, requested type "space"
 17655                           ; Number of cases is 3, Range of values is 0 to 2
 17656                           ; switch strategies available:
 17657                           ; Name         Instructions Cycles
 17658                           ; simple_byte           10     6 (average)
 17659                           ;	Chosen strategy is simple_byte
 17660  003D00  0A00               	xorlw	0	; case 0
 17661  003D02  B4D8               	btfsc	status,2,c
 17662  003D04  D7BF               	goto	l176
 17663  003D06  0A01               	xorlw	1	; case 1
 17664  003D08  B4D8               	btfsc	status,2,c
 17665  003D0A  D7CE               	goto	l178
 17666  003D0C  0A03               	xorlw	3	; case 2
 17667  003D0E  B4D8               	btfsc	status,2,c
 17668  003D10  D7D5               	goto	l179
 17669                           
 17670                           ;ENC424J600.c: 375: return 0;
 17671                           
 17672                           ; BSR set to: 0
 17673  003D12  0E00               	movlw	0
 17674  003D14  0012               	return	
 17675  003D16                     __end_of_ethernetController_streamFromRXBuffer:
 17676                           	opt stack 0
 17677                           tblptru	equ	0xFF8
 17678                           tblptrh	equ	0xFF7
 17679                           tblptrl	equ	0xFF6
 17680                           tablat	equ	0xFF5
 17681                           prodh	equ	0xFF4
 17682                           prodl	equ	0xFF3
 17683                           intcon	equ	0xFF2
 17684                           intcon3	equ	0xFF0
 17685                           indf0	equ	0xFEF
 17686                           postinc0	equ	0xFEE
 17687                           plusw0	equ	0xFEB
 17688                           fsr0h	equ	0xFEA
 17689                           fsr0l	equ	0xFE9
 17690                           wreg	equ	0xFE8
 17691                           indf1	equ	0xFE7
 17692                           postinc1	equ	0xFE6
 17693                           postdec1	equ	0xFE5
 17694                           plusw1	equ	0xFE3
 17695                           fsr1h	equ	0xFE2
 17696                           fsr1l	equ	0xFE1
 17697                           indf2	equ	0xFDF
 17698                           postinc2	equ	0xFDE
 17699                           postdec2	equ	0xFDD
 17700                           plusw2	equ	0xFDB
 17701                           fsr2h	equ	0xFDA
 17702                           fsr2l	equ	0xFD9
 17703                           status	equ	0xFD8
 17704                           
 17705 ;; *************** function _ethernetController_getNextPacketPointer *****************
 17706 ;; Defined at:
 17707 ;;		line 497 in file "src/enc424j600/ENC424J600.c"
 17708 ;; Parameters:    Size  Location     Type
 17709 ;;		None
 17710 ;; Auto vars:     Size  Location     Type
 17711 ;;		None
 17712 ;; Return value:  Size  Location     Type
 17713 ;;                  2    2[BANK0 ] unsigned int 
 17714 ;; Registers used:
 17715 ;;		cstack
 17716 ;; Tracked objects:
 17717 ;;		On entry : 0/0
 17718 ;;		On exit  : 0/0
 17719 ;;		Unchanged: 0/0
 17720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17721 ;;      Params:         0       2       0       0       0       0       0       0       0
 17722 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17723 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17724 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17725 ;;Total ram usage:        2 bytes
 17726 ;; Hardware stack levels used:    1
 17727 ;; Hardware stack levels required when called:    5
 17728 ;; This function calls:
 17729 ;;		_ENC424J600_getNextPacketPointer
 17730 ;; This function is called by:
 17731 ;;		_ethernetController_streamFromRXBuffer
 17732 ;;		_ethernetController_dropPacket
 17733 ;;		_ethernet_rxGetNewFrame
 17734 ;; This function uses a non-reentrant model
 17735 ;;
 17736                           
 17737                           	psect	text66
 17738  004EB4                     __ptext66:
 17739                           	opt stack 0
 17740  004EB4                     _ethernetController_getNextPacketPointer:
 17741                           	opt stack 20
 17742                           
 17743                           ;ENC424J600.c: 498: return ENC424J600_getNextPacketPointer();
 17744                           
 17745                           ;incstack = 0
 17746  004EB4  EC6F  F027         	call	_ENC424J600_getNextPacketPointer	;wreg free
 17747  004EB8  C060  F062         	movff	?_ENC424J600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
 17748  004EBC  C061  F063         	movff	?_ENC424J600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
 17749  004EC0  0012               	return	
 17750  004EC2                     __end_of_ethernetController_getNextPacketPointer:
 17751                           	opt stack 0
 17752                           tblptru	equ	0xFF8
 17753                           tblptrh	equ	0xFF7
 17754                           tblptrl	equ	0xFF6
 17755                           tablat	equ	0xFF5
 17756                           prodh	equ	0xFF4
 17757                           prodl	equ	0xFF3
 17758                           intcon	equ	0xFF2
 17759                           intcon3	equ	0xFF0
 17760                           indf0	equ	0xFEF
 17761                           postinc0	equ	0xFEE
 17762                           plusw0	equ	0xFEB
 17763                           fsr0h	equ	0xFEA
 17764                           fsr0l	equ	0xFE9
 17765                           wreg	equ	0xFE8
 17766                           indf1	equ	0xFE7
 17767                           postinc1	equ	0xFE6
 17768                           postdec1	equ	0xFE5
 17769                           plusw1	equ	0xFE3
 17770                           fsr1h	equ	0xFE2
 17771                           fsr1l	equ	0xFE1
 17772                           indf2	equ	0xFDF
 17773                           postinc2	equ	0xFDE
 17774                           postdec2	equ	0xFDD
 17775                           plusw2	equ	0xFDB
 17776                           fsr2h	equ	0xFDA
 17777                           fsr2l	equ	0xFD9
 17778                           status	equ	0xFD8
 17779                           
 17780 ;; *************** function _ENC424J600_getNextPacketPointer *****************
 17781 ;; Defined at:
 17782 ;;		line 625 in file "src/enc424j600/ENC424J600.c"
 17783 ;; Parameters:    Size  Location     Type
 17784 ;;		None
 17785 ;; Auto vars:     Size  Location     Type
 17786 ;;		None
 17787 ;; Return value:  Size  Location     Type
 17788 ;;                  2    0[BANK0 ] unsigned int 
 17789 ;; Registers used:
 17790 ;;		None
 17791 ;; Tracked objects:
 17792 ;;		On entry : 0/0
 17793 ;;		On exit  : 0/0
 17794 ;;		Unchanged: 0/0
 17795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17796 ;;      Params:         0       2       0       0       0       0       0       0       0
 17797 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17798 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17799 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17800 ;;Total ram usage:        2 bytes
 17801 ;; Hardware stack levels used:    1
 17802 ;; Hardware stack levels required when called:    4
 17803 ;; This function calls:
 17804 ;;		Nothing
 17805 ;; This function is called by:
 17806 ;;		_ethernetController_updateNextPacketPointer
 17807 ;;		_ethernetController_getNextPacketPointer
 17808 ;; This function uses a non-reentrant model
 17809 ;;
 17810                           
 17811                           	psect	text67
 17812  004EDE                     __ptext67:
 17813                           	opt stack 0
 17814  004EDE                     _ENC424J600_getNextPacketPointer:
 17815                           	opt stack 20
 17816                           
 17817                           ;ENC424J600.c: 626: return nextPacketPointer;
 17818                           
 17819                           ;incstack = 0
 17820  004EDE  C044  F060         	movff	_nextPacketPointer,?_ENC424J600_getNextPacketPointer
 17821  004EE2  C045  F061         	movff	_nextPacketPointer+1,?_ENC424J600_getNextPacketPointer+1
 17822  004EE6  0012               	return		;funcret
 17823  004EE8                     __end_of_ENC424J600_getNextPacketPointer:
 17824                           	opt stack 0
 17825                           tblptru	equ	0xFF8
 17826                           tblptrh	equ	0xFF7
 17827                           tblptrl	equ	0xFF6
 17828                           tablat	equ	0xFF5
 17829                           prodh	equ	0xFF4
 17830                           prodl	equ	0xFF3
 17831                           intcon	equ	0xFF2
 17832                           intcon3	equ	0xFF0
 17833                           indf0	equ	0xFEF
 17834                           postinc0	equ	0xFEE
 17835                           plusw0	equ	0xFEB
 17836                           fsr0h	equ	0xFEA
 17837                           fsr0l	equ	0xFE9
 17838                           wreg	equ	0xFE8
 17839                           indf1	equ	0xFE7
 17840                           postinc1	equ	0xFE6
 17841                           postdec1	equ	0xFE5
 17842                           plusw1	equ	0xFE3
 17843                           fsr1h	equ	0xFE2
 17844                           fsr1l	equ	0xFE1
 17845                           indf2	equ	0xFDF
 17846                           postinc2	equ	0xFDE
 17847                           postdec2	equ	0xFDD
 17848                           plusw2	equ	0xFDB
 17849                           fsr2h	equ	0xFDA
 17850                           fsr2l	equ	0xFD9
 17851                           status	equ	0xFD8
 17852                           
 17853 ;; *************** function _ENC424J600_setERXDATAReadPointer *****************
 17854 ;; Defined at:
 17855 ;;		line 666 in file "src/enc424j600/ENC424J600.c"
 17856 ;; Parameters:    Size  Location     Type
 17857 ;;  addr            2   10[BANK0 ] unsigned int 
 17858 ;; Auto vars:     Size  Location     Type
 17859 ;;  highByte        1   14[BANK0 ] unsigned char 
 17860 ;;  lowByte         1   13[BANK0 ] unsigned char 
 17861 ;;  opcode          1   12[BANK0 ] unsigned char 
 17862 ;; Return value:  Size  Location     Type
 17863 ;;                  1    wreg      void 
 17864 ;; Registers used:
 17865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17866 ;; Tracked objects:
 17867 ;;		On entry : 0/0
 17868 ;;		On exit  : 0/0
 17869 ;;		Unchanged: 0/0
 17870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17871 ;;      Params:         0       2       0       0       0       0       0       0       0
 17872 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17873 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17874 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17875 ;;Total ram usage:        5 bytes
 17876 ;; Hardware stack levels used:    1
 17877 ;; Hardware stack levels required when called:    6
 17878 ;; This function calls:
 17879 ;;		_ENC424J600_writeSPI
 17880 ;; This function is called by:
 17881 ;;		_ethernetController_getSourceMACAddress
 17882 ;;		_ethernetController_getEtherTypeField
 17883 ;;		_ethernetController_getRSV
 17884 ;;		_ethernetController_updateNextPacketPointer
 17885 ;;		_ethernetController_streamFromRXBuffer
 17886 ;;		_ethernetController_getDestinationMACAddress
 17887 ;; This function uses a non-reentrant model
 17888 ;;
 17889                           
 17890                           	psect	text68
 17891  0049C2                     __ptext68:
 17892                           	opt stack 0
 17893  0049C2                     _ENC424J600_setERXDATAReadPointer:
 17894                           	opt stack 19
 17895                           
 17896                           ;ENC424J600.c: 667: uint8_t opcode = 0x64;
 17897                           
 17898                           ;incstack = 0
 17899  0049C2  0E64               	movlw	100
 17900  0049C4  0100               	movlb	0	; () banked
 17901  0049C6  6F6C               	movwf	ENC424J600_setERXDATAReadPointer@opcode& (0+255),b
 17902                           
 17903                           ; BSR set to: 0
 17904                           ;ENC424J600.c: 668: uint8_t lowByte = addr & 0x00ff;
 17905  0049C8  C06A  F06D         	movff	ENC424J600_setERXDATAReadPointer@addr,ENC424J600_setERXDATAReadPointer@lowByte
 17906                           
 17907                           ;ENC424J600.c: 669: uint8_t highByte = (addr >> 8) & 0xff;
 17908  0049CC  516B               	movf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 17909  0049CE  6F6E               	movwf	ENC424J600_setERXDATAReadPointer@highByte& (0+255),b
 17910                           
 17911                           ; BSR set to: 0
 17912                           ;ENC424J600.c: 670: PORTBbits.RB4=0;
 17913  0049D0  9881               	bcf	3969,4,c	;volatile
 17914                           
 17915                           ; BSR set to: 0
 17916                           ;ENC424J600.c: 671: ENC424J600_writeSPI(&opcode);
 17917  0049D2  0E6C               	movlw	low ENC424J600_setERXDATAReadPointer@opcode
 17918  0049D4  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 17919  0049D6  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@opcode
 17920  0049D8  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 17921  0049DA  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 17922                           
 17923                           ;ENC424J600.c: 672: ENC424J600_writeSPI(&lowByte);
 17924  0049DE  0E6D               	movlw	low ENC424J600_setERXDATAReadPointer@lowByte
 17925  0049E0  0100               	movlb	0	; () banked
 17926  0049E2  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 17927  0049E4  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@lowByte
 17928  0049E6  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 17929  0049E8  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 17930                           
 17931                           ;ENC424J600.c: 673: ENC424J600_writeSPI(&highByte);
 17932  0049EC  0E6E               	movlw	low ENC424J600_setERXDATAReadPointer@highByte
 17933  0049EE  0100               	movlb	0	; () banked
 17934  0049F0  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 17935  0049F2  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@highByte
 17936  0049F4  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 17937  0049F6  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 17938                           
 17939                           ;ENC424J600.c: 674: PORTBbits.RB4=1;
 17940  0049FA  8881               	bsf	3969,4,c	;volatile
 17941  0049FC  0012               	return		;funcret
 17942  0049FE                     __end_of_ENC424J600_setERXDATAReadPointer:
 17943                           	opt stack 0
 17944                           tblptru	equ	0xFF8
 17945                           tblptrh	equ	0xFF7
 17946                           tblptrl	equ	0xFF6
 17947                           tablat	equ	0xFF5
 17948                           prodh	equ	0xFF4
 17949                           prodl	equ	0xFF3
 17950                           intcon	equ	0xFF2
 17951                           intcon3	equ	0xFF0
 17952                           indf0	equ	0xFEF
 17953                           postinc0	equ	0xFEE
 17954                           plusw0	equ	0xFEB
 17955                           fsr0h	equ	0xFEA
 17956                           fsr0l	equ	0xFE9
 17957                           wreg	equ	0xFE8
 17958                           indf1	equ	0xFE7
 17959                           postinc1	equ	0xFE6
 17960                           postdec1	equ	0xFE5
 17961                           plusw1	equ	0xFE3
 17962                           fsr1h	equ	0xFE2
 17963                           fsr1l	equ	0xFE1
 17964                           indf2	equ	0xFDF
 17965                           postinc2	equ	0xFDE
 17966                           postdec2	equ	0xFDD
 17967                           plusw2	equ	0xFDB
 17968                           fsr2h	equ	0xFDA
 17969                           fsr2l	equ	0xFD9
 17970                           status	equ	0xFD8
 17971                           
 17972 ;; *************** function _ethernetController_updateLinkStatus *****************
 17973 ;; Defined at:
 17974 ;;		line 406 in file "src/enc424j600/ENC424J600.c"
 17975 ;; Parameters:    Size  Location     Type
 17976 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 17977 ;;		 -> stack(121), 
 17978 ;; Auto vars:     Size  Location     Type
 17979 ;;  temp16          1   35[BANK0 ] unsigned char 
 17980 ;;  temp            1   34[BANK0 ] unsigned char 
 17981 ;; Return value:  Size  Location     Type
 17982 ;;                  1    wreg      void 
 17983 ;; Registers used:
 17984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17985 ;; Tracked objects:
 17986 ;;		On entry : 0/0
 17987 ;;		On exit  : 0/0
 17988 ;;		Unchanged: 0/0
 17989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17990 ;;      Params:         0       2       0       0       0       0       0       0       0
 17991 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17992 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17993 ;;      Totals:         0       4       0       0       0       0       0       0       0
 17994 ;;Total ram usage:        4 bytes
 17995 ;; Hardware stack levels used:    1
 17996 ;; Hardware stack levels required when called:    8
 17997 ;; This function calls:
 17998 ;;		_ENC424J600_readControlRegisterUnbanked
 17999 ;;		_ENC424J600_readPHYRegister
 18000 ;; This function is called by:
 18001 ;;		_handleStackBackgroundTasks
 18002 ;; This function uses a non-reentrant model
 18003 ;;
 18004                           
 18005                           	psect	text69
 18006  003E3A                     __ptext69:
 18007                           	opt stack 0
 18008  003E3A                     _ethernetController_updateLinkStatus:
 18009                           	opt stack 21
 18010                           
 18011                           ;ENC424J600.c: 407: uint8_t temp, temp16;
 18012                           ;ENC424J600.c: 408: ENC424J600_readControlRegisterUnbanked(0x1B, &temp);
 18013                           
 18014                           ;incstack = 0
 18015  003E3A  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 18016  003E3C  0100               	movlb	0	; () banked
 18017  003E3E  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18018  003E40  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 18019  003E42  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18020  003E44  0E1B               	movlw	27
 18021  003E46  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 18022                           
 18023                           ;ENC424J600.c: 409: if (temp & 0x01) {
 18024  003E4A  0100               	movlb	0	; () banked
 18025  003E4C  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 18026  003E4E  D006               	goto	l193
 18027                           
 18028                           ; BSR set to: 0
 18029                           ;ENC424J600.c: 410: state->link = LINK_ESTABLISHED;
 18030  003E50  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 18031  003E54  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 18032  003E58  0E01               	movlw	1
 18033  003E5A  D005               	goto	L3
 18034  003E5C                     l193:
 18035                           
 18036                           ; BSR set to: 0
 18037                           ;ENC424J600.c: 412: state->link = NO_LINK;
 18038                           
 18039                           ; BSR set to: 0
 18040  003E5C  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 18041  003E60  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 18042  003E64  0E00               	movlw	0
 18043  003E66                     L3:
 18044  003E66  6EDF               	movwf	indf2,c
 18045                           
 18046                           ; BSR set to: 0
 18047                           ;ENC424J600.c: 413: }
 18048                           ;ENC424J600.c: 415: ENC424J600_readPHYRegister(0x1F, &temp16);
 18049                           
 18050                           ; BSR set to: 0
 18051  003E68  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 18052  003E6A  6F6E               	movwf	ENC424J600_readPHYRegister@data& (0+255),b
 18053  003E6C  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 18054  003E6E  6F6F               	movwf	(ENC424J600_readPHYRegister@data+1)& (0+255),b
 18055  003E70  0E1F               	movlw	31
 18056  003E72  EC52  F018         	call	_ENC424J600_readPHYRegister
 18057                           
 18058                           ;ENC424J600.c: 417: if (temp16 & (1 << 3)) {
 18059  003E76  0100               	movlb	0	; () banked
 18060  003E78  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 18061  003E7A  D008               	goto	l195
 18062                           
 18063                           ; BSR set to: 0
 18064                           ;ENC424J600.c: 418: state->speed = HUNDRED_MBIT;
 18065  003E7C  EE20 F001          	lfsr	2,1
 18066  003E80  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 18067  003E82  26D9               	addwf	fsr2l,f,c
 18068  003E84  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 18069  003E86  22DA               	addwfc	fsr2h,f,c
 18070  003E88  0E01               	movlw	1
 18071  003E8A  D007               	goto	L4
 18072  003E8C                     l195:
 18073                           
 18074                           ; BSR set to: 0
 18075                           ;ENC424J600.c: 420: state->speed = TEN_MBIT;
 18076                           
 18077                           ; BSR set to: 0
 18078  003E8C  EE20 F001          	lfsr	2,1
 18079  003E90  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 18080  003E92  26D9               	addwf	fsr2l,f,c
 18081  003E94  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 18082  003E96  22DA               	addwfc	fsr2h,f,c
 18083  003E98  0E00               	movlw	0
 18084  003E9A                     L4:
 18085  003E9A  6EDF               	movwf	indf2,c
 18086                           
 18087                           ; BSR set to: 0
 18088                           ;ENC424J600.c: 421: }
 18089                           ;ENC424J600.c: 423: if (temp16 & (1 << 4)) {
 18090                           
 18091                           ; BSR set to: 0
 18092  003E9C  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 18093  003E9E  D009               	goto	l197
 18094                           
 18095                           ; BSR set to: 0
 18096                           ;ENC424J600.c: 424: state->duplex = FULL_DUPLEX;
 18097  003EA0  EE20 F002          	lfsr	2,2
 18098  003EA4  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 18099  003EA6  26D9               	addwf	fsr2l,f,c
 18100  003EA8  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 18101  003EAA  22DA               	addwfc	fsr2h,f,c
 18102  003EAC  0E01               	movlw	1
 18103  003EAE  6EDF               	movwf	indf2,c
 18104                           
 18105                           ;ENC424J600.c: 425: } else {
 18106  003EB0  0012               	return	
 18107  003EB2                     l197:
 18108                           
 18109                           ; BSR set to: 0
 18110                           ;ENC424J600.c: 426: state->duplex = HALF_DUPLEX;
 18111                           
 18112                           ; BSR set to: 0
 18113  003EB2  EE20 F002          	lfsr	2,2
 18114  003EB6  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 18115  003EB8  26D9               	addwf	fsr2l,f,c
 18116  003EBA  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 18117  003EBC  22DA               	addwfc	fsr2h,f,c
 18118  003EBE  0E00               	movlw	0
 18119  003EC0  6EDF               	movwf	indf2,c
 18120  003EC2  0012               	return	
 18121  003EC4                     __end_of_ethernetController_updateLinkStatus:
 18122                           	opt stack 0
 18123                           tblptru	equ	0xFF8
 18124                           tblptrh	equ	0xFF7
 18125                           tblptrl	equ	0xFF6
 18126                           tablat	equ	0xFF5
 18127                           prodh	equ	0xFF4
 18128                           prodl	equ	0xFF3
 18129                           intcon	equ	0xFF2
 18130                           intcon3	equ	0xFF0
 18131                           indf0	equ	0xFEF
 18132                           postinc0	equ	0xFEE
 18133                           plusw0	equ	0xFEB
 18134                           fsr0h	equ	0xFEA
 18135                           fsr0l	equ	0xFE9
 18136                           wreg	equ	0xFE8
 18137                           indf1	equ	0xFE7
 18138                           postinc1	equ	0xFE6
 18139                           postdec1	equ	0xFE5
 18140                           plusw1	equ	0xFE3
 18141                           fsr1h	equ	0xFE2
 18142                           fsr1l	equ	0xFE1
 18143                           indf2	equ	0xFDF
 18144                           postinc2	equ	0xFDE
 18145                           postdec2	equ	0xFDD
 18146                           plusw2	equ	0xFDB
 18147                           fsr2h	equ	0xFDA
 18148                           fsr2l	equ	0xFD9
 18149                           status	equ	0xFD8
 18150                           
 18151 ;; *************** function _ENC424J600_readPHYRegister *****************
 18152 ;; Defined at:
 18153 ;;		line 573 in file "src/enc424j600/ENC424J600.c"
 18154 ;; Parameters:    Size  Location     Type
 18155 ;;  addr            1    wreg     unsigned char 
 18156 ;;  data            2   14[BANK0 ] PTR unsigned int 
 18157 ;;		 -> ethernetController_updateLinkStatus@temp16(1), 
 18158 ;; Auto vars:     Size  Location     Type
 18159 ;;  addr            1   22[BANK0 ] unsigned char 
 18160 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 18161 ;;  temp            1   31[BANK0 ] unsigned char 
 18162 ;;  highByte        1   30[BANK0 ] unsigned char 
 18163 ;;  lowByte         1   29[BANK0 ] unsigned char 
 18164 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 18165 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 18166 ;; Return value:  Size  Location     Type
 18167 ;;                  1    wreg      void 
 18168 ;; Registers used:
 18169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18170 ;; Tracked objects:
 18171 ;;		On entry : 0/0
 18172 ;;		On exit  : 0/0
 18173 ;;		Unchanged: 0/0
 18174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18175 ;;      Params:         0       2       0       0       0       0       0       0       0
 18176 ;;      Locals:         0      10       0       0       0       0       0       0       0
 18177 ;;      Temps:          0       6       0       0       0       0       0       0       0
 18178 ;;      Totals:         0      18       0       0       0       0       0       0       0
 18179 ;;Total ram usage:       18 bytes
 18180 ;; Hardware stack levels used:    1
 18181 ;; Hardware stack levels required when called:    7
 18182 ;; This function calls:
 18183 ;;		_ENC424J600_readControlRegisterUnbanked
 18184 ;;		_ENC424J600_writeControlRegisterUnbanked
 18185 ;; This function is called by:
 18186 ;;		_ethernetController_updateLinkStatus
 18187 ;; This function uses a non-reentrant model
 18188 ;;
 18189                           
 18190                           	psect	text70
 18191  0030A4                     __ptext70:
 18192                           	opt stack 0
 18193  0030A4                     _ENC424J600_readPHYRegister:
 18194                           	opt stack 21
 18195                           
 18196                           ; BSR set to: 0
 18197                           ;incstack = 0
 18198                           ;ENC424J600_readPHYRegister@addr stored from wreg
 18199  0030A4  0100               	movlb	0	; () banked
 18200  0030A6  6F76               	movwf	ENC424J600_readPHYRegister@addr& (0+255),b
 18201                           
 18202                           ;ENC424J600.c: 575: uint8_t PHYaddress = addr & 0x1F;
 18203  0030A8  0100               	movlb	0	; () banked
 18204  0030AA  5176               	movf	ENC424J600_readPHYRegister@addr& (0+255),w,b
 18205  0030AC  0B1F               	andlw	31
 18206  0030AE  6F77               	movwf	ENC424J600_readPHYRegister@PHYaddress& (0+255),b
 18207                           
 18208                           ; BSR set to: 0
 18209                           ;ENC424J600.c: 576: uint8_t unusedBits = 0x01;
 18210  0030B0  0E01               	movlw	1
 18211  0030B2  6F78               	movwf	ENC424J600_readPHYRegister@unusedBits& (0+255),b
 18212                           
 18213                           ; BSR set to: 0
 18214                           ;ENC424J600.c: 577: uint8_t temp;
 18215                           ;ENC424J600.c: 578: uint8_t lowByte;
 18216                           ;ENC424J600.c: 579: uint8_t highByte;
 18217                           ;ENC424J600.c: 580: uint32_t timeoutCounter = 0;
 18218  0030B4  0E00               	movlw	0
 18219  0030B6  6F79               	movwf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),b
 18220  0030B8  0E00               	movlw	0
 18221  0030BA  6F7A               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),b
 18222  0030BC  0E00               	movlw	0
 18223  0030BE  6F7B               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),b
 18224  0030C0  0E00               	movlw	0
 18225  0030C2  6F7C               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),b
 18226                           
 18227                           ; BSR set to: 0
 18228                           ;ENC424J600.c: 582: ENC424J600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 18229  0030C4  0E77               	movlw	low ENC424J600_readPHYRegister@PHYaddress
 18230  0030C6  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18231  0030C8  0E00               	movlw	high ENC424J600_readPHYRegister@PHYaddress
 18232  0030CA  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18233  0030CC  0E54               	movlw	84
 18234  0030CE  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 18235                           
 18236                           ;ENC424J600.c: 583: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 18237  0030D2  0E78               	movlw	low ENC424J600_readPHYRegister@unusedBits
 18238  0030D4  0100               	movlb	0	; () banked
 18239  0030D6  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18240  0030D8  0E00               	movlw	high ENC424J600_readPHYRegister@unusedBits
 18241  0030DA  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18242  0030DC  0E55               	movlw	85
 18243  0030DE  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 18244                           
 18245                           ;ENC424J600.c: 586: ENC424J600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 18246  0030E2  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 18247  0030E4  0100               	movlb	0	; () banked
 18248  0030E6  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18249  0030E8  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 18250  0030EA  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18251  0030EC  0E52               	movlw	82
 18252  0030EE  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 18253                           
 18254                           ;ENC424J600.c: 587: temp |= 0x01;
 18255  0030F2  0100               	movlb	0	; () banked
 18256  0030F4  817F               	bsf	ENC424J600_readPHYRegister@temp& (0+255),0,b
 18257                           
 18258                           ; BSR set to: 0
 18259                           ;ENC424J600.c: 588: ENC424J600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 18260  0030F6  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 18261  0030F8  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18262  0030FA  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 18263  0030FC  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18264  0030FE  0E52               	movlw	82
 18265  003100  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 18266                           
 18267                           ;ENC424J600.c: 590: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 18268  003104  0E45               	movlw	69
 18269  003106                     u11757:
 18270  003106  2EE8               	decfsz	wreg,f,c
 18271  003108  D7FE               	bra	u11757
 18272  00310A  F000               	nop	
 18273  00310C                     
 18274                           ;ENC424J600.c: 593: ENC424J600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 18275  00310C  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 18276  00310E  0100               	movlb	0	; () banked
 18277  003110  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18278  003112  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 18279  003114  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18280  003116  0E6A               	movlw	106
 18281  003118  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 18282                           
 18283                           ;ENC424J600.c: 594: timeoutCounter++;
 18284  00311C  0E01               	movlw	1
 18285  00311E  0100               	movlb	0	; () banked
 18286  003120  2779               	addwf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),f,b
 18287  003122  0E00               	movlw	0
 18288  003124  237A               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 18289  003126  237B               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 18290  003128  237C               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 18291                           
 18292                           ; BSR set to: 0
 18293                           ;ENC424J600.c: 595: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 18294  00312A  A17F               	btfss	ENC424J600_readPHYRegister@temp& (0+255),0,b
 18295  00312C  D008               	goto	u10500
 18296                           
 18297                           ; BSR set to: 0
 18298  00312E  517C               	movf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 18299  003130  117B               	iorwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 18300  003132  E105               	bnz	l8613
 18301  003134  2979               	incf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),w,b
 18302  003136  0E0F               	movlw	15
 18303  003138  597A               	subwfb	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 18304  00313A  A0D8               	btfss	status,0,c
 18305  00313C  D7E7               	goto	l256
 18306  00313E                     u10500:
 18307  00313E                     l8613:
 18308                           
 18309                           ; BSR set to: 0
 18310                           ;ENC424J600.c: 596: if (timeoutCounter >= 0xfff)
 18311  00313E  517C               	movf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 18312  003140  117B               	iorwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 18313  003142  E140               	bnz	l261
 18314  003144  2979               	incf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),w,b
 18315  003146  0E0F               	movlw	15
 18316  003148  597A               	subwfb	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 18317  00314A  B0D8               	btfsc	status,0,c
 18318  00314C  0012               	return	
 18319                           
 18320                           ; BSR set to: 0
 18321                           ;ENC424J600.c: 600: ENC424J600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 18322                           
 18323                           ; BSR set to: 0
 18324                           
 18325                           ; BSR set to: 0
 18326                           ;ENC424J600.c: 597: return;
 18327  00314E  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 18328  003150  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18329  003152  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 18330  003154  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18331  003156  0E52               	movlw	82
 18332  003158  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 18333                           
 18334                           ;ENC424J600.c: 601: temp &= ~0x01;
 18335  00315C  0100               	movlb	0	; () banked
 18336  00315E  917F               	bcf	ENC424J600_readPHYRegister@temp& (0+255),0,b
 18337                           
 18338                           ; BSR set to: 0
 18339                           ;ENC424J600.c: 602: ENC424J600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 18340  003160  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 18341  003162  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18342  003164  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 18343  003166  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18344  003168  0E52               	movlw	82
 18345  00316A  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 18346                           
 18347                           ;ENC424J600.c: 605: ENC424J600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 18348  00316E  0E7D               	movlw	low ENC424J600_readPHYRegister@lowByte
 18349  003170  0100               	movlb	0	; () banked
 18350  003172  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18351  003174  0E00               	movlw	high ENC424J600_readPHYRegister@lowByte
 18352  003176  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18353  003178  0E68               	movlw	104
 18354  00317A  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 18355                           
 18356                           ;ENC424J600.c: 606: ENC424J600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 18357  00317E  0E7E               	movlw	low ENC424J600_readPHYRegister@highByte
 18358  003180  0100               	movlb	0	; () banked
 18359  003182  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18360  003184  0E00               	movlw	high ENC424J600_readPHYRegister@highByte
 18361  003186  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18362  003188  0E69               	movlw	105
 18363  00318A  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 18364                           
 18365                           ;ENC424J600.c: 607: *data = (lowByte | ((highByte << 8)&0xff00));
 18366  00318E  0E00               	movlw	0
 18367  003190  0100               	movlb	0	; () banked
 18368  003192  6F70               	movwf	??_ENC424J600_readPHYRegister& (0+255),b
 18369  003194  0EFF               	movlw	255
 18370  003196  6F71               	movwf	(??_ENC424J600_readPHYRegister+1)& (0+255),b
 18371  003198  517E               	movf	ENC424J600_readPHYRegister@highByte& (0+255),w,b
 18372  00319A  6F73               	movwf	(??_ENC424J600_readPHYRegister+3)& (0+255),b
 18373  00319C  6B72               	clrf	(??_ENC424J600_readPHYRegister+2)& (0+255),b
 18374  00319E  5170               	movf	??_ENC424J600_readPHYRegister& (0+255),w,b
 18375  0031A0  1772               	andwf	(??_ENC424J600_readPHYRegister+2)& (0+255),f,b
 18376  0031A2  5171               	movf	(??_ENC424J600_readPHYRegister+1)& (0+255),w,b
 18377  0031A4  1773               	andwf	(??_ENC424J600_readPHYRegister+3)& (0+255),f,b
 18378  0031A6  517D               	movf	ENC424J600_readPHYRegister@lowByte& (0+255),w,b
 18379  0031A8  6F74               	movwf	(??_ENC424J600_readPHYRegister+4)& (0+255),b
 18380  0031AA  6B75               	clrf	(??_ENC424J600_readPHYRegister+5)& (0+255),b
 18381  0031AC  5172               	movf	(??_ENC424J600_readPHYRegister+2)& (0+255),w,b
 18382  0031AE  1374               	iorwf	(??_ENC424J600_readPHYRegister+4)& (0+255),f,b
 18383  0031B0  5173               	movf	(??_ENC424J600_readPHYRegister+3)& (0+255),w,b
 18384  0031B2  1375               	iorwf	(??_ENC424J600_readPHYRegister+5)& (0+255),f,b
 18385  0031B4  C06E  FFD9         	movff	ENC424J600_readPHYRegister@data,fsr2l
 18386  0031B8  C06F  FFDA         	movff	ENC424J600_readPHYRegister@data+1,fsr2h
 18387  0031BC  C074  FFDE         	movff	??_ENC424J600_readPHYRegister+4,postinc2
 18388  0031C0  C075  FFDD         	movff	??_ENC424J600_readPHYRegister+5,postdec2
 18389  0031C4                     l261:
 18390                           
 18391                           ; BSR set to: 0
 18392  0031C4  0012               	return		;funcret
 18393  0031C6                     __end_of_ENC424J600_readPHYRegister:
 18394                           	opt stack 0
 18395                           tblptru	equ	0xFF8
 18396                           tblptrh	equ	0xFF7
 18397                           tblptrl	equ	0xFF6
 18398                           tablat	equ	0xFF5
 18399                           prodh	equ	0xFF4
 18400                           prodl	equ	0xFF3
 18401                           intcon	equ	0xFF2
 18402                           intcon3	equ	0xFF0
 18403                           indf0	equ	0xFEF
 18404                           postinc0	equ	0xFEE
 18405                           plusw0	equ	0xFEB
 18406                           fsr0h	equ	0xFEA
 18407                           fsr0l	equ	0xFE9
 18408                           wreg	equ	0xFE8
 18409                           indf1	equ	0xFE7
 18410                           postinc1	equ	0xFE6
 18411                           postdec1	equ	0xFE5
 18412                           plusw1	equ	0xFE3
 18413                           fsr1h	equ	0xFE2
 18414                           fsr1l	equ	0xFE1
 18415                           indf2	equ	0xFDF
 18416                           postinc2	equ	0xFDE
 18417                           postdec2	equ	0xFDD
 18418                           plusw2	equ	0xFDB
 18419                           fsr2h	equ	0xFDA
 18420                           fsr2l	equ	0xFD9
 18421                           status	equ	0xFD8
 18422                           
 18423 ;; *************** function _ethernetController_setLEDConfig *****************
 18424 ;; Defined at:
 18425 ;;		line 455 in file "src/enc424j600/ENC424J600.c"
 18426 ;; Parameters:    Size  Location     Type
 18427 ;;  LED             1    wreg     enum E5568
 18428 ;;  conf            1   14[BANK0 ] enum E5572
 18429 ;; Auto vars:     Size  Location     Type
 18430 ;;  LED             1   15[BANK0 ] enum E5568
 18431 ;;  data            1   16[BANK0 ] unsigned char 
 18432 ;; Return value:  Size  Location     Type
 18433 ;;                  1    wreg      void 
 18434 ;; Registers used:
 18435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18436 ;; Tracked objects:
 18437 ;;		On entry : 0/0
 18438 ;;		On exit  : 0/0
 18439 ;;		Unchanged: 0/0
 18440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18441 ;;      Params:         0       1       0       0       0       0       0       0       0
 18442 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18443 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18444 ;;      Totals:         0       3       0       0       0       0       0       0       0
 18445 ;;Total ram usage:        3 bytes
 18446 ;; Hardware stack levels used:    1
 18447 ;; Hardware stack levels required when called:    7
 18448 ;; This function calls:
 18449 ;;		_ENC424J600_readControlRegisterUnbanked
 18450 ;;		_ENC424J600_writeControlRegisterUnbanked
 18451 ;; This function is called by:
 18452 ;;		_handleStackBackgroundTasks
 18453 ;;		_main
 18454 ;; This function uses a non-reentrant model
 18455 ;;
 18456                           
 18457                           	psect	text71
 18458  003DAC                     __ptext71:
 18459                           	opt stack 0
 18460  003DAC                     _ethernetController_setLEDConfig:
 18461                           	opt stack 22
 18462                           
 18463                           ; BSR set to: 0
 18464                           ;incstack = 0
 18465                           ;ethernetController_setLEDConfig@LED stored from wreg
 18466  003DAC  0100               	movlb	0	; () banked
 18467  003DAE  6F6F               	movwf	ethernetController_setLEDConfig@LED& (0+255),b
 18468                           
 18469                           ;ENC424J600.c: 456: uint8_t data;
 18470                           ;ENC424J600.c: 457: ENC424J600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 18471  003DB0  0E70               	movlw	low ethernetController_setLEDConfig@data
 18472  003DB2  0100               	movlb	0	; () banked
 18473  003DB4  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18474  003DB6  0E00               	movlw	high ethernetController_setLEDConfig@data
 18475  003DB8  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18476  003DBA  0E75               	movlw	117
 18477  003DBC  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 18478                           
 18479                           ;ENC424J600.c: 458: if (LED == LEDB) {
 18480  003DC0  0100               	movlb	0	; () banked
 18481  003DC2  056F               	decf	ethernetController_setLEDConfig@LED& (0+255),w,b
 18482  003DC4  B4D8               	btfsc	status,2,c
 18483  003DC6  D00B               	goto	l203
 18484  003DC8  D015               	goto	l202
 18485  003DCA                     
 18486                           ; BSR set to: 0
 18487                           ;ENC424J600.c: 463: data &= ~0x0f;
 18488                           
 18489                           ; BSR set to: 0
 18490                           
 18491                           ;ENC424J600.c: 462: case LED_OFF:
 18492                           
 18493                           ; BSR set to: 0
 18494  003DCA  0EF0               	movlw	240
 18495  003DCC  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 18496                           
 18497                           ; BSR set to: 0
 18498                           ;ENC424J600.c: 464: data |= 0x01;
 18499  003DCE  8170               	bsf	ethernetController_setLEDConfig@data& (0+255),0,b
 18500                           
 18501                           ;ENC424J600.c: 465: break;
 18502  003DD0  D02C               	goto	l214
 18503  003DD2                     
 18504                           ; BSR set to: 0
 18505                           ;ENC424J600.c: 467: data &= ~0x0f;
 18506                           
 18507                           ; BSR set to: 0
 18508  003DD2  0EF0               	movlw	240
 18509  003DD4  D018               	goto	L5
 18510  003DD6                     
 18511                           ; BSR set to: 0
 18512                           ;ENC424J600.c: 470: data &= ~0x0f;
 18513                           
 18514                           ; BSR set to: 0
 18515  003DD6  0EF0               	movlw	240
 18516  003DD8  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 18517                           
 18518                           ;ENC424J600.c: 471: data |= 0x06;
 18519  003DDA  0E06               	movlw	6
 18520  003DDC  D019               	goto	L6
 18521  003DDE                     l203:
 18522                           
 18523                           ; BSR set to: 0
 18524                           
 18525                           ; BSR set to: 0
 18526  003DDE  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 18527                           
 18528                           ; Switch size 1, requested type "space"
 18529                           ; Number of cases is 3, Range of values is 0 to 2
 18530                           ; switch strategies available:
 18531                           ; Name         Instructions Cycles
 18532                           ; simple_byte           10     6 (average)
 18533                           ;	Chosen strategy is simple_byte
 18534  003DE0  0A00               	xorlw	0	; case 0
 18535  003DE2  B4D8               	btfsc	status,2,c
 18536  003DE4  D7F6               	goto	l207
 18537  003DE6  0A01               	xorlw	1	; case 1
 18538  003DE8  B4D8               	btfsc	status,2,c
 18539  003DEA  D7EF               	goto	l204
 18540  003DEC  0A03               	xorlw	3	; case 2
 18541  003DEE  B4D8               	btfsc	status,2,c
 18542  003DF0  D7F2               	goto	l208
 18543  003DF2  D7EB               	goto	l204
 18544  003DF4                     l202:
 18545                           
 18546                           ; BSR set to: 0
 18547                           
 18548                           ; BSR set to: 0
 18549  003DF4  516F               	movf	ethernetController_setLEDConfig@LED& (0+255),w,b
 18550  003DF6  B4D8               	btfsc	status,2,c
 18551  003DF8  D00D               	goto	l211
 18552  003DFA  D017               	goto	l214
 18553  003DFC                     
 18554                           ; BSR set to: 0
 18555                           ;ENC424J600.c: 478: data &= ~(0x0f << 4);
 18556                           
 18557                           ; BSR set to: 0
 18558                           
 18559                           ;ENC424J600.c: 477: case LED_OFF:
 18560                           
 18561                           ; BSR set to: 0
 18562  003DFC  0E0F               	movlw	15
 18563  003DFE  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 18564                           
 18565                           ; BSR set to: 0
 18566                           ;ENC424J600.c: 479: data |= (0x01 << 4);
 18567  003E00  8970               	bsf	ethernetController_setLEDConfig@data& (0+255),4,b
 18568                           
 18569                           ;ENC424J600.c: 480: break;
 18570  003E02  D013               	goto	l214
 18571  003E04                     
 18572                           ; BSR set to: 0
 18573                           ;ENC424J600.c: 482: data &= ~(0x0f << 4);
 18574                           
 18575                           ; BSR set to: 0
 18576  003E04  0E0F               	movlw	15
 18577  003E06                     L5:
 18578  003E06  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 18579                           
 18580                           ;ENC424J600.c: 483: break;
 18581  003E08  D010               	goto	l214
 18582  003E0A                     
 18583                           ; BSR set to: 0
 18584                           ;ENC424J600.c: 485: data &= ~(0x0f << 4);
 18585                           
 18586                           ; BSR set to: 0
 18587  003E0A  0E0F               	movlw	15
 18588  003E0C  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 18589                           
 18590                           ;ENC424J600.c: 486: data |= (0x06 << 4);
 18591  003E0E  0E60               	movlw	96
 18592  003E10                     L6:
 18593  003E10  1370               	iorwf	ethernetController_setLEDConfig@data& (0+255),f,b
 18594                           
 18595                           ; BSR set to: 0
 18596                           ;ENC424J600.c: 488: }
 18597                           
 18598                           ;ENC424J600.c: 487: break;
 18599  003E12  D00B               	goto	l214
 18600  003E14                     l211:
 18601                           
 18602                           ; BSR set to: 0
 18603                           
 18604                           ; BSR set to: 0
 18605  003E14  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 18606                           
 18607                           ; Switch size 1, requested type "space"
 18608                           ; Number of cases is 3, Range of values is 0 to 2
 18609                           ; switch strategies available:
 18610                           ; Name         Instructions Cycles
 18611                           ; simple_byte           10     6 (average)
 18612                           ;	Chosen strategy is simple_byte
 18613  003E16  0A00               	xorlw	0	; case 0
 18614  003E18  B4D8               	btfsc	status,2,c
 18615  003E1A  D7F4               	goto	l215
 18616  003E1C  0A01               	xorlw	1	; case 1
 18617  003E1E  B4D8               	btfsc	status,2,c
 18618  003E20  D7ED               	goto	l212
 18619  003E22  0A03               	xorlw	3	; case 2
 18620  003E24  B4D8               	btfsc	status,2,c
 18621  003E26  D7F1               	goto	l216
 18622  003E28  D7E9               	goto	l212
 18623  003E2A                     l214:
 18624                           
 18625                           ; BSR set to: 0
 18626                           ;ENC424J600.c: 489: }
 18627                           ;ENC424J600.c: 490: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 18628                           
 18629                           ; BSR set to: 0
 18630                           
 18631                           ; BSR set to: 0
 18632                           
 18633                           ; BSR set to: 0
 18634  003E2A  0E70               	movlw	low ethernetController_setLEDConfig@data
 18635  003E2C  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18636  003E2E  0E00               	movlw	high ethernetController_setLEDConfig@data
 18637  003E30  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18638  003E32  0E75               	movlw	117
 18639  003E34  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 18640  003E38  0012               	return		;funcret
 18641  003E3A                     __end_of_ethernetController_setLEDConfig:
 18642                           	opt stack 0
 18643                           tblptru	equ	0xFF8
 18644                           tblptrh	equ	0xFF7
 18645                           tblptrl	equ	0xFF6
 18646                           tablat	equ	0xFF5
 18647                           prodh	equ	0xFF4
 18648                           prodl	equ	0xFF3
 18649                           intcon	equ	0xFF2
 18650                           intcon3	equ	0xFF0
 18651                           indf0	equ	0xFEF
 18652                           postinc0	equ	0xFEE
 18653                           plusw0	equ	0xFEB
 18654                           fsr0h	equ	0xFEA
 18655                           fsr0l	equ	0xFE9
 18656                           wreg	equ	0xFE8
 18657                           indf1	equ	0xFE7
 18658                           postinc1	equ	0xFE6
 18659                           postdec1	equ	0xFE5
 18660                           plusw1	equ	0xFE3
 18661                           fsr1h	equ	0xFE2
 18662                           fsr1l	equ	0xFE1
 18663                           indf2	equ	0xFDF
 18664                           postinc2	equ	0xFDE
 18665                           postdec2	equ	0xFDD
 18666                           plusw2	equ	0xFDB
 18667                           fsr2h	equ	0xFDA
 18668                           fsr2l	equ	0xFD9
 18669                           status	equ	0xFD8
 18670                           
 18671 ;; *************** function _ethernetController_pollInterruptFlags *****************
 18672 ;; Defined at:
 18673 ;;		line 311 in file "src/enc424j600/ENC424J600.c"
 18674 ;; Parameters:    Size  Location     Type
 18675 ;;		None
 18676 ;; Auto vars:     Size  Location     Type
 18677 ;;  reg             2   29[BANK0 ] unsigned int 
 18678 ;;  flags           2   27[BANK0 ] struct interruptFlags
 18679 ;; Return value:  Size  Location     Type
 18680 ;;                  2   24[BANK0 ] struct interruptFlags
 18681 ;; Registers used:
 18682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18683 ;; Tracked objects:
 18684 ;;		On entry : 0/0
 18685 ;;		On exit  : 0/0
 18686 ;;		Unchanged: 0/0
 18687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18688 ;;      Params:         0       2       0       0       0       0       0       0       0
 18689 ;;      Locals:         0       4       0       0       0       0       0       0       0
 18690 ;;      Temps:          0       1       0       0       0       0       0       0       0
 18691 ;;      Totals:         0       7       0       0       0       0       0       0       0
 18692 ;;Total ram usage:        7 bytes
 18693 ;; Hardware stack levels used:    1
 18694 ;; Hardware stack levels required when called:    8
 18695 ;; This function calls:
 18696 ;;		_ENC424J600_getInterruptFlags
 18697 ;; This function is called by:
 18698 ;;		_handleStackBackgroundTasks
 18699 ;; This function uses a non-reentrant model
 18700 ;;
 18701                           
 18702                           	psect	text72
 18703  002F7E                     __ptext72:
 18704                           	opt stack 0
 18705  002F7E                     _ethernetController_pollInterruptFlags:
 18706                           	opt stack 21
 18707                           
 18708                           ;ENC424J600.c: 312: interruptFlags_t flags;
 18709                           ;ENC424J600.c: 313: uint16_t reg = ENC424J600_getInterruptFlags();
 18710                           
 18711                           ;incstack = 0
 18712  002F7E  ECD5  F023         	call	_ENC424J600_getInterruptFlags	;wreg free
 18713  002F82  C06E  F07D         	movff	?_ENC424J600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 18714  002F86  C06F  F07E         	movff	?_ENC424J600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 18715                           
 18716                           ;ENC424J600.c: 314: flags.MODEXIF = (reg & (1 << 14)) != 0 ? 1 : 0;
 18717  002F8A  0100               	movlb	0	; () banked
 18718  002F8C  AD7E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 18719  002F8E  D003               	goto	u10800
 18720  002F90  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18721  002F92  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18722  002F94  D002               	goto	u10818
 18723  002F96                     u10800:
 18724  002F96  0100               	movlb	0	; () banked
 18725  002F98  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18726  002F9A                     u10818:
 18727  002F9A  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18728  002F9C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18729  002F9E  0BFE               	andlw	-2
 18730  002FA0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18731  002FA2  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18732                           
 18733                           ; BSR set to: 0
 18734                           ;ENC424J600.c: 315: flags.HASHIF = (reg & (1 << 13)) != 0 ? 1 : 0;
 18735  002FA4  AB7E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 18736  002FA6  D003               	goto	u10820
 18737  002FA8  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18738  002FAA  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18739  002FAC  D002               	goto	u10838
 18740  002FAE                     u10820:
 18741  002FAE  0100               	movlb	0	; () banked
 18742  002FB0  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18743  002FB2                     u10838:
 18744  002FB2  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18745  002FB4  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18746  002FB6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18747  002FB8  0BFD               	andlw	-3
 18748  002FBA  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18749  002FBC  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18750                           
 18751                           ; BSR set to: 0
 18752                           ;ENC424J600.c: 316: flags.AESIF = (reg & (1 << 12)) != 0 ? 1 : 0;
 18753  002FBE  A97E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 18754  002FC0  D003               	goto	u10840
 18755  002FC2  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18756  002FC4  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18757  002FC6  D002               	goto	u10858
 18758  002FC8                     u10840:
 18759  002FC8  0100               	movlb	0	; () banked
 18760  002FCA  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18761  002FCC                     u10858:
 18762  002FCC  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18763  002FCE  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18764  002FD0  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18765  002FD2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18766  002FD4  0BFB               	andlw	-5
 18767  002FD6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18768  002FD8  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18769                           
 18770                           ; BSR set to: 0
 18771                           ;ENC424J600.c: 317: flags.LINKIF = (reg & (1 << 11)) != 0 ? 1 : 0;
 18772  002FDA  A77E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 18773  002FDC  D003               	goto	u10860
 18774  002FDE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18775  002FE0  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18776  002FE2  D002               	goto	u10878
 18777  002FE4                     u10860:
 18778  002FE4  0100               	movlb	0	; () banked
 18779  002FE6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18780  002FE8                     u10878:
 18781  002FE8  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18782  002FEA  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18783  002FEC  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18784  002FEE  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18785  002FF0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18786  002FF2  0BF7               	andlw	-9
 18787  002FF4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18788  002FF6  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18789                           
 18790                           ; BSR set to: 0
 18791                           ;ENC424J600.c: 319: flags.PKTIF = (reg & (1 << 6)) != 0 ? 1 : 0;
 18792  002FF8  AD7D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 18793  002FFA  D003               	goto	u10880
 18794  002FFC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18795  002FFE  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18796  003000  D002               	goto	u10898
 18797  003002                     u10880:
 18798  003002  0100               	movlb	0	; () banked
 18799  003004  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18800  003006                     u10898:
 18801  003006  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18802  003008  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18803  00300A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18804  00300C  0BEF               	andlw	-17
 18805  00300E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18806  003010  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18807                           
 18808                           ; BSR set to: 0
 18809                           ;ENC424J600.c: 320: flags.DMAIF = (reg & (1 << 5)) != 0 ? 1 : 0;
 18810  003012  AB7D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 18811  003014  D003               	goto	u10900
 18812  003016  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18813  003018  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18814  00301A  D002               	goto	u10918
 18815  00301C                     u10900:
 18816  00301C  0100               	movlb	0	; () banked
 18817  00301E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18818  003020                     u10918:
 18819  003020  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18820  003022  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18821  003024  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18822  003026  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18823  003028  0BDF               	andlw	-33
 18824  00302A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18825  00302C  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18826                           
 18827                           ; BSR set to: 0
 18828                           ;ENC424J600.c: 322: flags.TXIF = (reg & (1 << 3)) != 0 ? 1 : 0;
 18829  00302E  A77D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),3,b
 18830  003030  D003               	goto	u10920
 18831  003032  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18832  003034  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18833  003036  D002               	goto	u10938
 18834  003038                     u10920:
 18835  003038  0100               	movlb	0	; () banked
 18836  00303A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18837  00303C                     u10938:
 18838  00303C  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18839  00303E  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18840  003040  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18841  003042  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18842  003044  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18843  003046  0BBF               	andlw	-65
 18844  003048  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18845  00304A  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18846                           
 18847                           ; BSR set to: 0
 18848                           ;ENC424J600.c: 323: flags.TXABTIF = (reg & (1 << 2)) != 0 ? 1 : 0;
 18849  00304C  A57D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 18850  00304E  D003               	goto	u10940
 18851  003050  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18852  003052  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18853  003054  D002               	goto	u10958
 18854  003056                     u10940:
 18855  003056  0100               	movlb	0	; () banked
 18856  003058  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18857  00305A                     u10958:
 18858  00305A  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18859  00305C  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18860  00305E  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18861  003060  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18862  003062  0B7F               	andlw	-129
 18863  003064  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18864  003066  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18865                           
 18866                           ; BSR set to: 0
 18867                           ;ENC424J600.c: 324: flags.RXABTIF = (reg & (1 << 1)) != 0 ? 1 : 0;
 18868  003068  A37D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 18869  00306A  D003               	goto	u10960
 18870  00306C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18871  00306E  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18872  003070  D002               	goto	u10978
 18873  003072                     u10960:
 18874  003072  0100               	movlb	0	; () banked
 18875  003074  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18876  003076                     u10978:
 18877  003076  517C               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 18878  003078  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18879  00307A  0BFE               	andlw	-2
 18880  00307C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18881  00307E  6F7C               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 18882                           
 18883                           ; BSR set to: 0
 18884                           ;ENC424J600.c: 325: flags.PCFULIF = (reg & (1 << 0)) != 0 ? 1 : 0;
 18885  003080  A17D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 18886  003082  D003               	goto	u10980
 18887  003084  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18888  003086  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18889  003088  D002               	goto	u10998
 18890  00308A                     u10980:
 18891  00308A  0100               	movlb	0	; () banked
 18892  00308C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18893  00308E                     u10998:
 18894  00308E  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18895  003090  517C               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 18896  003092  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18897  003094  0BFD               	andlw	-3
 18898  003096  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18899  003098  6F7C               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 18900                           
 18901                           ; BSR set to: 0
 18902                           ;ENC424J600.c: 326: return flags;
 18903  00309A  C07B  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 18904  00309E  C07C  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 18905  0030A2  0012               	return	
 18906  0030A4                     __end_of_ethernetController_pollInterruptFlags:
 18907                           	opt stack 0
 18908                           tblptru	equ	0xFF8
 18909                           tblptrh	equ	0xFF7
 18910                           tblptrl	equ	0xFF6
 18911                           tablat	equ	0xFF5
 18912                           prodh	equ	0xFF4
 18913                           prodl	equ	0xFF3
 18914                           intcon	equ	0xFF2
 18915                           intcon3	equ	0xFF0
 18916                           indf0	equ	0xFEF
 18917                           postinc0	equ	0xFEE
 18918                           plusw0	equ	0xFEB
 18919                           fsr0h	equ	0xFEA
 18920                           fsr0l	equ	0xFE9
 18921                           wreg	equ	0xFE8
 18922                           indf1	equ	0xFE7
 18923                           postinc1	equ	0xFE6
 18924                           postdec1	equ	0xFE5
 18925                           plusw1	equ	0xFE3
 18926                           fsr1h	equ	0xFE2
 18927                           fsr1l	equ	0xFE1
 18928                           indf2	equ	0xFDF
 18929                           postinc2	equ	0xFDE
 18930                           postdec2	equ	0xFDD
 18931                           plusw2	equ	0xFDB
 18932                           fsr2h	equ	0xFDA
 18933                           fsr2l	equ	0xFD9
 18934                           status	equ	0xFD8
 18935                           
 18936 ;; *************** function _ENC424J600_getInterruptFlags *****************
 18937 ;; Defined at:
 18938 ;;		line 731 in file "src/enc424j600/ENC424J600.c"
 18939 ;; Parameters:    Size  Location     Type
 18940 ;;		None
 18941 ;; Auto vars:     Size  Location     Type
 18942 ;;  high            1   23[BANK0 ] unsigned char 
 18943 ;;  low             1   22[BANK0 ] unsigned char 
 18944 ;; Return value:  Size  Location     Type
 18945 ;;                  2   14[BANK0 ] unsigned int 
 18946 ;; Registers used:
 18947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18948 ;; Tracked objects:
 18949 ;;		On entry : 0/0
 18950 ;;		On exit  : 0/0
 18951 ;;		Unchanged: 0/0
 18952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18953 ;;      Params:         0       2       0       0       0       0       0       0       0
 18954 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18955 ;;      Temps:          0       6       0       0       0       0       0       0       0
 18956 ;;      Totals:         0      10       0       0       0       0       0       0       0
 18957 ;;Total ram usage:       10 bytes
 18958 ;; Hardware stack levels used:    1
 18959 ;; Hardware stack levels required when called:    7
 18960 ;; This function calls:
 18961 ;;		_ENC424J600_readControlRegisterUnbanked
 18962 ;; This function is called by:
 18963 ;;		_ethernetController_pollInterruptFlags
 18964 ;; This function uses a non-reentrant model
 18965 ;;
 18966                           
 18967                           	psect	text73
 18968  0047AA                     __ptext73:
 18969                           	opt stack 0
 18970  0047AA                     _ENC424J600_getInterruptFlags:
 18971                           	opt stack 21
 18972                           
 18973                           ;ENC424J600.c: 732: uint8_t low, high;
 18974                           ;ENC424J600.c: 733: ENC424J600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 18975                           
 18976                           ; BSR set to: 0
 18977                           ;incstack = 0
 18978  0047AA  0E77               	movlw	low ENC424J600_getInterruptFlags@high
 18979  0047AC  0100               	movlb	0	; () banked
 18980  0047AE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18981  0047B0  0E00               	movlw	high ENC424J600_getInterruptFlags@high
 18982  0047B2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18983  0047B4  0E1D               	movlw	29
 18984  0047B6  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 18985                           
 18986                           ;ENC424J600.c: 734: ENC424J600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 18987  0047BA  0E76               	movlw	low ENC424J600_getInterruptFlags@low
 18988  0047BC  0100               	movlb	0	; () banked
 18989  0047BE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18990  0047C0  0E00               	movlw	high ENC424J600_getInterruptFlags@low
 18991  0047C2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18992  0047C4  0E1C               	movlw	28
 18993  0047C6  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 18994                           
 18995                           ;ENC424J600.c: 735: return (((uint16_t) low & 0x00ff) | (((uint16_t) high << 8)&0xff00))
      +                          ;
 18996  0047CA  0E00               	movlw	0
 18997  0047CC  0100               	movlb	0	; () banked
 18998  0047CE  6F70               	movwf	??_ENC424J600_getInterruptFlags& (0+255),b
 18999  0047D0  0EFF               	movlw	255
 19000  0047D2  6F71               	movwf	(??_ENC424J600_getInterruptFlags+1)& (0+255),b
 19001  0047D4  5177               	movf	ENC424J600_getInterruptFlags@high& (0+255),w,b
 19002  0047D6  6F73               	movwf	(??_ENC424J600_getInterruptFlags+3)& (0+255),b
 19003  0047D8  6B72               	clrf	(??_ENC424J600_getInterruptFlags+2)& (0+255),b
 19004  0047DA  5170               	movf	??_ENC424J600_getInterruptFlags& (0+255),w,b
 19005  0047DC  1772               	andwf	(??_ENC424J600_getInterruptFlags+2)& (0+255),f,b
 19006  0047DE  5171               	movf	(??_ENC424J600_getInterruptFlags+1)& (0+255),w,b
 19007  0047E0  1773               	andwf	(??_ENC424J600_getInterruptFlags+3)& (0+255),f,b
 19008  0047E2  5176               	movf	ENC424J600_getInterruptFlags@low& (0+255),w,b
 19009  0047E4  6F74               	movwf	(??_ENC424J600_getInterruptFlags+4)& (0+255),b
 19010  0047E6  6B75               	clrf	(??_ENC424J600_getInterruptFlags+5)& (0+255),b
 19011  0047E8  5172               	movf	(??_ENC424J600_getInterruptFlags+2)& (0+255),w,b
 19012  0047EA  1174               	iorwf	(??_ENC424J600_getInterruptFlags+4)& (0+255),w,b
 19013  0047EC  6F6E               	movwf	?_ENC424J600_getInterruptFlags& (0+255),b
 19014  0047EE  5173               	movf	(??_ENC424J600_getInterruptFlags+3)& (0+255),w,b
 19015  0047F0  1175               	iorwf	(??_ENC424J600_getInterruptFlags+5)& (0+255),w,b
 19016  0047F2  6F6F               	movwf	(?_ENC424J600_getInterruptFlags+1)& (0+255),b
 19017  0047F4  0012               	return	
 19018  0047F6                     __end_of_ENC424J600_getInterruptFlags:
 19019                           	opt stack 0
 19020                           tblptru	equ	0xFF8
 19021                           tblptrh	equ	0xFF7
 19022                           tblptrl	equ	0xFF6
 19023                           tablat	equ	0xFF5
 19024                           prodh	equ	0xFF4
 19025                           prodl	equ	0xFF3
 19026                           intcon	equ	0xFF2
 19027                           intcon3	equ	0xFF0
 19028                           indf0	equ	0xFEF
 19029                           postinc0	equ	0xFEE
 19030                           plusw0	equ	0xFEB
 19031                           fsr0h	equ	0xFEA
 19032                           fsr0l	equ	0xFE9
 19033                           wreg	equ	0xFE8
 19034                           indf1	equ	0xFE7
 19035                           postinc1	equ	0xFE6
 19036                           postdec1	equ	0xFE5
 19037                           plusw1	equ	0xFE3
 19038                           fsr1h	equ	0xFE2
 19039                           fsr1l	equ	0xFE1
 19040                           indf2	equ	0xFDF
 19041                           postinc2	equ	0xFDE
 19042                           postdec2	equ	0xFDD
 19043                           plusw2	equ	0xFDB
 19044                           fsr2h	equ	0xFDA
 19045                           fsr2l	equ	0xFD9
 19046                           status	equ	0xFD8
 19047                           
 19048 ;; *************** function _ethernetController_newPacketAvailable *****************
 19049 ;; Defined at:
 19050 ;;		line 402 in file "src/enc424j600/ENC424J600.c"
 19051 ;; Parameters:    Size  Location     Type
 19052 ;;		None
 19053 ;; Auto vars:     Size  Location     Type
 19054 ;;		None
 19055 ;; Return value:  Size  Location     Type
 19056 ;;                  1    wreg      unsigned char 
 19057 ;; Registers used:
 19058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19059 ;; Tracked objects:
 19060 ;;		On entry : 0/0
 19061 ;;		On exit  : 0/0
 19062 ;;		Unchanged: 0/0
 19063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19064 ;;      Params:         0       0       0       0       0       0       0       0       0
 19065 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19066 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19067 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19068 ;;Total ram usage:        0 bytes
 19069 ;; Hardware stack levels used:    1
 19070 ;; Hardware stack levels required when called:    8
 19071 ;; This function calls:
 19072 ;;		_ENC424J600_getPacketCount
 19073 ;; This function is called by:
 19074 ;;		_handleStackBackgroundTasks
 19075 ;; This function uses a non-reentrant model
 19076 ;;
 19077                           
 19078                           	psect	text74
 19079  004E82                     __ptext74:
 19080                           	opt stack 0
 19081  004E82                     _ethernetController_newPacketAvailable:
 19082                           	opt stack 21
 19083                           
 19084                           ;ENC424J600.c: 403: return (unsigned) (ENC424J600_getPacketCount() != 0);
 19085                           
 19086                           ; BSR set to: 0
 19087                           ;incstack = 0
 19088  004E82  EC0D  F027         	call	_ENC424J600_getPacketCount	;wreg free
 19089  004E86  0900               	iorlw	0
 19090  004E88  B4D8               	btfsc	status,2,c
 19091  004E8A  D002               	goto	u11000
 19092  004E8C  0E01               	movlw	1
 19093  004E8E  0012               	return	
 19094  004E90                     u11000:
 19095  004E90  0E00               	movlw	0
 19096  004E92  0012               	return	
 19097  004E94                     __end_of_ethernetController_newPacketAvailable:
 19098                           	opt stack 0
 19099                           tblptru	equ	0xFF8
 19100                           tblptrh	equ	0xFF7
 19101                           tblptrl	equ	0xFF6
 19102                           tablat	equ	0xFF5
 19103                           prodh	equ	0xFF4
 19104                           prodl	equ	0xFF3
 19105                           intcon	equ	0xFF2
 19106                           intcon3	equ	0xFF0
 19107                           indf0	equ	0xFEF
 19108                           postinc0	equ	0xFEE
 19109                           plusw0	equ	0xFEB
 19110                           fsr0h	equ	0xFEA
 19111                           fsr0l	equ	0xFE9
 19112                           wreg	equ	0xFE8
 19113                           indf1	equ	0xFE7
 19114                           postinc1	equ	0xFE6
 19115                           postdec1	equ	0xFE5
 19116                           plusw1	equ	0xFE3
 19117                           fsr1h	equ	0xFE2
 19118                           fsr1l	equ	0xFE1
 19119                           indf2	equ	0xFDF
 19120                           postinc2	equ	0xFDE
 19121                           postdec2	equ	0xFDD
 19122                           plusw2	equ	0xFDB
 19123                           fsr2h	equ	0xFDA
 19124                           fsr2l	equ	0xFD9
 19125                           status	equ	0xFD8
 19126                           
 19127 ;; *************** function _ethernetController_clearInterruptFlag *****************
 19128 ;; Defined at:
 19129 ;;		line 329 in file "src/enc424j600/ENC424J600.c"
 19130 ;; Parameters:    Size  Location     Type
 19131 ;;  flag            1    wreg     unsigned char 
 19132 ;; Auto vars:     Size  Location     Type
 19133 ;;  flag            1   18[BANK0 ] unsigned char 
 19134 ;; Return value:  Size  Location     Type
 19135 ;;                  1    wreg      void 
 19136 ;; Registers used:
 19137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19138 ;; Tracked objects:
 19139 ;;		On entry : 0/0
 19140 ;;		On exit  : 0/0
 19141 ;;		Unchanged: 0/0
 19142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19143 ;;      Params:         0       0       0       0       0       0       0       0       0
 19144 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19145 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19146 ;;      Totals:         0       1       0       0       0       0       0       0       0
 19147 ;;Total ram usage:        1 bytes
 19148 ;; Hardware stack levels used:    1
 19149 ;; Hardware stack levels required when called:    8
 19150 ;; This function calls:
 19151 ;;		_ENC424J600_clearInterruptFlag
 19152 ;; This function is called by:
 19153 ;;		_handleStackBackgroundTasks
 19154 ;; This function uses a non-reentrant model
 19155 ;;
 19156                           
 19157                           	psect	text75
 19158  004EC2                     __ptext75:
 19159                           	opt stack 0
 19160  004EC2                     _ethernetController_clearInterruptFlag:
 19161                           	opt stack 21
 19162                           
 19163                           ;incstack = 0
 19164                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 19165  004EC2  0100               	movlb	0	; () banked
 19166  004EC4  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 19167                           
 19168                           ;ENC424J600.c: 330: ENC424J600_clearInterruptFlag(flag);
 19169  004EC6  0100               	movlb	0	; () banked
 19170  004EC8  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 19171  004ECA  EC62  F01F         	call	_ENC424J600_clearInterruptFlag
 19172  004ECE  0012               	return		;funcret
 19173  004ED0                     __end_of_ethernetController_clearInterruptFlag:
 19174                           	opt stack 0
 19175                           tblptru	equ	0xFF8
 19176                           tblptrh	equ	0xFF7
 19177                           tblptrl	equ	0xFF6
 19178                           tablat	equ	0xFF5
 19179                           prodh	equ	0xFF4
 19180                           prodl	equ	0xFF3
 19181                           intcon	equ	0xFF2
 19182                           intcon3	equ	0xFF0
 19183                           indf0	equ	0xFEF
 19184                           postinc0	equ	0xFEE
 19185                           plusw0	equ	0xFEB
 19186                           fsr0h	equ	0xFEA
 19187                           fsr0l	equ	0xFE9
 19188                           wreg	equ	0xFE8
 19189                           indf1	equ	0xFE7
 19190                           postinc1	equ	0xFE6
 19191                           postdec1	equ	0xFE5
 19192                           plusw1	equ	0xFE3
 19193                           fsr1h	equ	0xFE2
 19194                           fsr1l	equ	0xFE1
 19195                           indf2	equ	0xFDF
 19196                           postinc2	equ	0xFDE
 19197                           postdec2	equ	0xFDD
 19198                           plusw2	equ	0xFDB
 19199                           fsr2h	equ	0xFDA
 19200                           fsr2l	equ	0xFD9
 19201                           status	equ	0xFD8
 19202                           
 19203 ;; *************** function _ENC424J600_clearInterruptFlag *****************
 19204 ;; Defined at:
 19205 ;;		line 738 in file "src/enc424j600/ENC424J600.c"
 19206 ;; Parameters:    Size  Location     Type
 19207 ;;  flag            1    wreg     unsigned char 
 19208 ;; Auto vars:     Size  Location     Type
 19209 ;;  flag            1   16[BANK0 ] unsigned char 
 19210 ;;  temp            1   17[BANK0 ] unsigned char 
 19211 ;; Return value:  Size  Location     Type
 19212 ;;                  1    wreg      void 
 19213 ;; Registers used:
 19214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19215 ;; Tracked objects:
 19216 ;;		On entry : 0/0
 19217 ;;		On exit  : 0/0
 19218 ;;		Unchanged: 0/0
 19219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19220 ;;      Params:         0       0       0       0       0       0       0       0       0
 19221 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19222 ;;      Temps:          0       2       0       0       0       0       0       0       0
 19223 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19224 ;;Total ram usage:        4 bytes
 19225 ;; Hardware stack levels used:    1
 19226 ;; Hardware stack levels required when called:    7
 19227 ;; This function calls:
 19228 ;;		_ENC424J600_readControlRegisterUnbanked
 19229 ;;		_ENC424J600_writeControlRegisterUnbanked
 19230 ;; This function is called by:
 19231 ;;		_ethernetController_clearInterruptFlag
 19232 ;; This function uses a non-reentrant model
 19233 ;;
 19234                           
 19235                           	psect	text76
 19236  003EC4                     __ptext76:
 19237                           	opt stack 0
 19238  003EC4                     _ENC424J600_clearInterruptFlag:
 19239                           	opt stack 21
 19240                           
 19241                           ;incstack = 0
 19242                           ;ENC424J600_clearInterruptFlag@flag stored from wreg
 19243  003EC4  0100               	movlb	0	; () banked
 19244  003EC6  6F70               	movwf	ENC424J600_clearInterruptFlag@flag& (0+255),b
 19245                           
 19246                           ;ENC424J600.c: 739: uint8_t temp;
 19247                           ;ENC424J600.c: 740: if (flag < 8) {
 19248  003EC8  0E08               	movlw	8
 19249  003ECA  0100               	movlb	0	; () banked
 19250  003ECC  6170               	cpfslt	ENC424J600_clearInterruptFlag@flag& (0+255),b
 19251  003ECE  D01E               	goto	l315
 19252                           
 19253                           ; BSR set to: 0
 19254                           ;ENC424J600.c: 741: ENC424J600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 19255  003ED0  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 19256  003ED2  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19257  003ED4  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 19258  003ED6  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19259  003ED8  0E1C               	movlw	28
 19260  003EDA  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 19261                           
 19262                           ;ENC424J600.c: 742: temp &= ~(1 << flag);
 19263  003EDE  C070  F06E         	movff	ENC424J600_clearInterruptFlag@flag,??_ENC424J600_clearInterruptFlag
 19264  003EE2  0E01               	movlw	1
 19265  003EE4  0100               	movlb	0	; () banked
 19266  003EE6  6F6F               	movwf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),b
 19267  003EE8  2B6E               	incf	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 19268  003EEA  D002               	goto	u10474
 19269  003EEC                     u10475:
 19270  003EEC  90D8               	bcf	status,0,c
 19271  003EEE  376F               	rlcf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),f,b
 19272  003EF0                     u10474:
 19273  003EF0  2F6E               	decfsz	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 19274  003EF2  D7FC               	goto	u10475
 19275  003EF4  0100               	movlb	0	; () banked
 19276  003EF6  516F               	movf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),w,b
 19277  003EF8  0AFF               	xorlw	255
 19278  003EFA  1771               	andwf	ENC424J600_clearInterruptFlag@temp& (0+255),f,b
 19279                           
 19280                           ; BSR set to: 0
 19281                           ;ENC424J600.c: 743: ENC424J600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 19282  003EFC  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 19283  003EFE  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19284  003F00  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 19285  003F02  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19286  003F04  0E1C               	movlw	28
 19287  003F06  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 19288                           
 19289                           ;ENC424J600.c: 744: } else {
 19290  003F0A  0012               	return	
 19291  003F0C                     l315:
 19292                           
 19293                           ;ENC424J600.c: 745: flag -= 8;
 19294  003F0C  0E08               	movlw	8
 19295  003F0E  0100               	movlb	0	; () banked
 19296  003F10  5F70               	subwf	ENC424J600_clearInterruptFlag@flag& (0+255),f,b
 19297                           
 19298                           ; BSR set to: 0
 19299                           ;ENC424J600.c: 746: ENC424J600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 19300  003F12  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 19301  003F14  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19302  003F16  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 19303  003F18  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19304  003F1A  0E1D               	movlw	29
 19305  003F1C  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 19306                           
 19307                           ;ENC424J600.c: 747: temp &= ~(1 << flag);
 19308  003F20  C070  F06E         	movff	ENC424J600_clearInterruptFlag@flag,??_ENC424J600_clearInterruptFlag
 19309  003F24  0E01               	movlw	1
 19310  003F26  0100               	movlb	0	; () banked
 19311  003F28  6F6F               	movwf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),b
 19312  003F2A  2B6E               	incf	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 19313  003F2C  D002               	goto	u10484
 19314  003F2E                     u10485:
 19315  003F2E  90D8               	bcf	status,0,c
 19316  003F30  376F               	rlcf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),f,b
 19317  003F32                     u10484:
 19318  003F32  2F6E               	decfsz	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 19319  003F34  D7FC               	goto	u10485
 19320  003F36  0100               	movlb	0	; () banked
 19321  003F38  516F               	movf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),w,b
 19322  003F3A  0AFF               	xorlw	255
 19323  003F3C  1771               	andwf	ENC424J600_clearInterruptFlag@temp& (0+255),f,b
 19324                           
 19325                           ;ENC424J600.c: 748: ENC424J600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 19326  003F3E  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 19327  003F40  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19328  003F42  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 19329  003F44  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19330  003F46  0E1D               	movlw	29
 19331  003F48  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 19332  003F4C  0012               	return	
 19333  003F4E                     __end_of_ENC424J600_clearInterruptFlag:
 19334                           	opt stack 0
 19335                           tblptru	equ	0xFF8
 19336                           tblptrh	equ	0xFF7
 19337                           tblptrl	equ	0xFF6
 19338                           tablat	equ	0xFF5
 19339                           prodh	equ	0xFF4
 19340                           prodl	equ	0xFF3
 19341                           intcon	equ	0xFF2
 19342                           intcon3	equ	0xFF0
 19343                           indf0	equ	0xFEF
 19344                           postinc0	equ	0xFEE
 19345                           plusw0	equ	0xFEB
 19346                           fsr0h	equ	0xFEA
 19347                           fsr0l	equ	0xFE9
 19348                           wreg	equ	0xFE8
 19349                           indf1	equ	0xFE7
 19350                           postinc1	equ	0xFE6
 19351                           postdec1	equ	0xFE5
 19352                           plusw1	equ	0xFE3
 19353                           fsr1h	equ	0xFE2
 19354                           fsr1l	equ	0xFE1
 19355                           indf2	equ	0xFDF
 19356                           postinc2	equ	0xFDE
 19357                           postdec2	equ	0xFDD
 19358                           plusw2	equ	0xFDB
 19359                           fsr2h	equ	0xFDA
 19360                           fsr2l	equ	0xFD9
 19361                           status	equ	0xFD8
 19362                           
 19363 ;; *************** function _ethernetController_init *****************
 19364 ;; Defined at:
 19365 ;;		line 33 in file "src/enc424j600/ENC424J600.c"
 19366 ;; Parameters:    Size  Location     Type
 19367 ;;		None
 19368 ;; Auto vars:     Size  Location     Type
 19369 ;;  err             3   29[BANK0 ] struct error
 19370 ;; Return value:  Size  Location     Type
 19371 ;;                  3   26[BANK0 ] struct error
 19372 ;; Registers used:
 19373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19374 ;; Tracked objects:
 19375 ;;		On entry : 0/0
 19376 ;;		On exit  : 0/0
 19377 ;;		Unchanged: 0/0
 19378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19379 ;;      Params:         0       3       0       0       0       0       0       0       0
 19380 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19381 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19382 ;;      Totals:         0       6       0       0       0       0       0       0       0
 19383 ;;Total ram usage:        6 bytes
 19384 ;; Hardware stack levels used:    1
 19385 ;; Hardware stack levels required when called:    8
 19386 ;; This function calls:
 19387 ;;		_ENC424J600_enableAutoMACInsertion
 19388 ;;		_ENC424J600_enableReception
 19389 ;;		_ENC424J600_initSPI
 19390 ;;		_ENC424J600_setNextPacketPointer
 19391 ;;		_ENC424J600_setRXBufferStartAddress
 19392 ;;		_ENC424J600_setRXTailPointer
 19393 ;;		_ethernetController_checkDeviceId
 19394 ;;		_ethernetController_softReset
 19395 ;; This function is called by:
 19396 ;;		_main
 19397 ;; This function uses a non-reentrant model
 19398 ;;
 19399                           
 19400                           	psect	text77
 19401  004324                     __ptext77:
 19402                           	opt stack 0
 19403  004324                     _ethernetController_init:
 19404                           	opt stack 22
 19405                           
 19406                           ;ENC424J600.c: 34: error_t err;
 19407                           ;ENC424J600.c: 35: ENC424J600_initSPI();
 19408                           
 19409                           ;incstack = 0
 19410  004324  ECF2  F026         	call	_ENC424J600_initSPI	;wreg free
 19411                           
 19412                           ;ENC424J600.c: 36: err = ethernetController_softReset();
 19413  004328  ECE3  F018         	call	_ethernetController_softReset	;wreg free
 19414  00432C  C06E  F07D         	movff	?_ethernetController_softReset,ethernetController_init@err
 19415  004330  C06F  F07E         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 19416  004334  C070  F07F         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 19417                           
 19418                           ;ENC424J600.c: 39: }
 19419                           ;ENC424J600.c: 40: err = ethernetController_checkDeviceId();
 19420  004338  ECAE  F023         	call	_ethernetController_checkDeviceId	;wreg free
 19421  00433C  C06E  F07D         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 19422  004340  C06F  F07E         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 19423  004344  C070  F07F         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 19424                           
 19425                           ;ENC424J600.c: 43: }
 19426                           ;ENC424J600.c: 62: ENC424J600_setRXBufferStartAddress(0x3000);
 19427  004348  0E30               	movlw	48
 19428  00434A  0100               	movlb	0	; () banked
 19429  00434C  6F6F               	movwf	(ENC424J600_setRXBufferStartAddress@addr+1)& (0+255),b
 19430  00434E  0E00               	movlw	0
 19431  004350  6F6E               	movwf	ENC424J600_setRXBufferStartAddress@addr& (0+255),b
 19432  004352  ECF3  F025         	call	_ENC424J600_setRXBufferStartAddress	;wreg free
 19433                           
 19434                           ;ENC424J600.c: 63: ENC424J600_setNextPacketPointer(0x3000);
 19435  004356  0E30               	movlw	48
 19436  004358  0100               	movlb	0	; () banked
 19437  00435A  6F61               	movwf	(ENC424J600_setNextPacketPointer@ptr+1)& (0+255),b
 19438  00435C  0E00               	movlw	0
 19439  00435E  6F60               	movwf	ENC424J600_setNextPacketPointer@ptr& (0+255),b
 19440  004360  EC74  F027         	call	_ENC424J600_setNextPacketPointer	;wreg free
 19441                           
 19442                           ;ENC424J600.c: 64: ENC424J600_setRXTailPointer(0x5FFE);
 19443  004364  0E5F               	movlw	95
 19444  004366  0100               	movlb	0	; () banked
 19445  004368  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 19446  00436A  0EFE               	movlw	254
 19447  00436C  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 19448  00436E  ECDE  F025         	call	_ENC424J600_setRXTailPointer	;wreg free
 19449                           
 19450                           ;ENC424J600.c: 66: ENC424J600_enableReception();
 19451  004372  EC79  F027         	call	_ENC424J600_enableReception	;wreg free
 19452                           
 19453                           ;ENC424J600.c: 67: ENC424J600_enableAutoMACInsertion();
 19454  004376  EC44  F026         	call	_ENC424J600_enableAutoMACInsertion	;wreg free
 19455                           
 19456                           ;ENC424J600.c: 69: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 19457  00437A  0E01               	movlw	1
 19458  00437C  0100               	movlb	0	; () banked
 19459  00437E  6F7D               	movwf	ethernetController_init@err& (0+255),b
 19460                           
 19461                           ; BSR set to: 0
 19462                           ;ENC424J600.c: 70: err.code = (uint16_t)0;
 19463  004380  0E00               	movlw	0
 19464  004382  6F7F               	movwf	(ethernetController_init@err+2)& (0+255),b
 19465  004384  0E00               	movlw	0
 19466  004386  6F7E               	movwf	(ethernetController_init@err+1)& (0+255),b
 19467                           
 19468                           ; BSR set to: 0
 19469                           ;ENC424J600.c: 71: return err;
 19470  004388  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 19471  00438C  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 19472  004390  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 19473  004394  0012               	return	
 19474  004396                     __end_of_ethernetController_init:
 19475                           	opt stack 0
 19476                           tblptru	equ	0xFF8
 19477                           tblptrh	equ	0xFF7
 19478                           tblptrl	equ	0xFF6
 19479                           tablat	equ	0xFF5
 19480                           prodh	equ	0xFF4
 19481                           prodl	equ	0xFF3
 19482                           intcon	equ	0xFF2
 19483                           intcon3	equ	0xFF0
 19484                           indf0	equ	0xFEF
 19485                           postinc0	equ	0xFEE
 19486                           plusw0	equ	0xFEB
 19487                           fsr0h	equ	0xFEA
 19488                           fsr0l	equ	0xFE9
 19489                           wreg	equ	0xFE8
 19490                           indf1	equ	0xFE7
 19491                           postinc1	equ	0xFE6
 19492                           postdec1	equ	0xFE5
 19493                           plusw1	equ	0xFE3
 19494                           fsr1h	equ	0xFE2
 19495                           fsr1l	equ	0xFE1
 19496                           indf2	equ	0xFDF
 19497                           postinc2	equ	0xFDE
 19498                           postdec2	equ	0xFDD
 19499                           plusw2	equ	0xFDB
 19500                           fsr2h	equ	0xFDA
 19501                           fsr2l	equ	0xFD9
 19502                           status	equ	0xFD8
 19503                           
 19504 ;; *************** function _ethernetController_softReset *****************
 19505 ;; Defined at:
 19506 ;;		line 74 in file "src/enc424j600/ENC424J600.c"
 19507 ;; Parameters:    Size  Location     Type
 19508 ;;		None
 19509 ;; Auto vars:     Size  Location     Type
 19510 ;;  err             3   23[BANK0 ] struct error
 19511 ;;  receivedData    2   21[BANK0 ] unsigned char [2]
 19512 ;;  dataToSend      2   19[BANK0 ] unsigned char [2]
 19513 ;;  comFailCount    1   18[BANK0 ] unsigned char 
 19514 ;; Return value:  Size  Location     Type
 19515 ;;                  3   14[BANK0 ] struct error
 19516 ;; Registers used:
 19517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19518 ;; Tracked objects:
 19519 ;;		On entry : 0/0
 19520 ;;		On exit  : 0/0
 19521 ;;		Unchanged: 0/0
 19522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19523 ;;      Params:         0       3       0       0       0       0       0       0       0
 19524 ;;      Locals:         0       8       0       0       0       0       0       0       0
 19525 ;;      Temps:          0       1       0       0       0       0       0       0       0
 19526 ;;      Totals:         0      12       0       0       0       0       0       0       0
 19527 ;;Total ram usage:       12 bytes
 19528 ;; Hardware stack levels used:    1
 19529 ;; Hardware stack levels required when called:    7
 19530 ;; This function calls:
 19531 ;;		_ENC424J600_readControlRegisterUnbanked
 19532 ;;		_ENC424J600_writeControlRegisterUnbanked
 19533 ;;		_ENC424J600_writeSingleByte
 19534 ;; This function is called by:
 19535 ;;		_ethernetController_init
 19536 ;; This function uses a non-reentrant model
 19537 ;;
 19538                           
 19539                           	psect	text78
 19540  0031C6                     __ptext78:
 19541                           	opt stack 0
 19542  0031C6                     _ethernetController_softReset:
 19543                           	opt stack 22
 19544                           
 19545                           ;ENC424J600.c: 92: uint8_t comFailCount = 0;
 19546                           
 19547                           ; BSR set to: 0
 19548                           ;incstack = 0
 19549  0031C6  0E00               	movlw	0
 19550  0031C8  0100               	movlb	0	; () banked
 19551  0031CA  6F72               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 19552                           
 19553                           ; BSR set to: 0
 19554                           ;ENC424J600.c: 93: uint8_t dataToSend[2] = {0x12, 0x34};
 19555  0031CC  C04D  F073         	movff	ethernetController_softReset@F5848,ethernetController_softReset@dataToSend
 19556  0031D0  C04E  F074         	movff	ethernetController_softReset@F5848+1,ethernetController_softReset@dataToSend+1
 19557                           
 19558                           ; BSR set to: 0
 19559                           ;ENC424J600.c: 94: uint8_t receivedData[2] = {0, 0};
 19560  0031D4  C042  F075         	movff	ethernetController_softReset@F5850,ethernetController_softReset@receivedData
 19561  0031D8  C043  F076         	movff	ethernetController_softReset@F5850+1,ethernetController_softReset@receivedData+1
 19562                           
 19563                           ;ENC424J600.c: 95: error_t err;
 19564                           ;ENC424J600.c: 96: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 19565  0031DC  0E01               	movlw	1
 19566  0031DE  6F77               	movwf	ethernetController_softReset@err& (0+255),b
 19567                           
 19568                           ;ENC424J600.c: 97: err.code = (uint16_t)0;
 19569  0031E0  0E00               	movlw	0
 19570  0031E2  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 19571  0031E4  0E00               	movlw	0
 19572  0031E6  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 19573                           
 19574                           ; BSR set to: 0
 19575                           ;ENC424J600.c: 98: if (comFailCount < 5) {
 19576  0031E8  0E05               	movlw	5
 19577  0031EA  6172               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 19578  0031EC  D05F               	goto	l80
 19579                           
 19580                           ; BSR set to: 0
 19581                           ;ENC424J600.c: 100: ENC424J600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0])
      +                          ;
 19582  0031EE  0E73               	movlw	low ethernetController_softReset@dataToSend
 19583  0031F0  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19584  0031F2  0E00               	movlw	high ethernetController_softReset@dataToSend
 19585  0031F4  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19586  0031F6  0E16               	movlw	22
 19587  0031F8  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 19588                           
 19589                           ;ENC424J600.c: 101: ENC424J600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1])
      +                          ;
 19590  0031FC  0E74               	movlw	low (ethernetController_softReset@dataToSend+1)
 19591  0031FE  0100               	movlb	0	; () banked
 19592  003200  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19593  003202  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 19594  003204  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19595  003206  0E17               	movlw	23
 19596  003208  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 19597                           
 19598                           ;ENC424J600.c: 103: ENC424J600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 19599  00320C  0E75               	movlw	low ethernetController_softReset@receivedData
 19600  00320E  0100               	movlb	0	; () banked
 19601  003210  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19602  003212  0E00               	movlw	high ethernetController_softReset@receivedData
 19603  003214  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19604  003216  0E16               	movlw	22
 19605  003218  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 19606                           
 19607                           ;ENC424J600.c: 104: ENC424J600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 19608  00321C  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 19609  00321E  0100               	movlb	0	; () banked
 19610  003220  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19611  003222  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 19612  003224  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19613  003226  0E17               	movlw	23
 19614  003228  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 19615                           
 19616                           ;ENC424J600.c: 106: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 19617  00322C  0100               	movlb	0	; () banked
 19618  00322E  5173               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 19619  003230  1975               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 19620  003232  A4D8               	btfss	status,2,c
 19621  003234  D038               	goto	l84
 19622                           
 19623                           ; BSR set to: 0
 19624  003236  5174               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 19625  003238  1976               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 19626  00323A  A4D8               	btfss	status,2,c
 19627  00323C  D034               	goto	l84
 19628                           
 19629                           ; BSR set to: 0
 19630                           ;ENC424J600.c: 108: ENC424J600_writeSingleByte(0b11001010);
 19631  00323E  0ECA               	movlw	202
 19632  003240  EC1A  F027         	call	_ENC424J600_writeSingleByte
 19633                           
 19634                           ;ENC424J600.c: 109: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 19635  003244  0E42               	movlw	66
 19636  003246                     u11767:
 19637  003246  2EE8               	decfsz	wreg,f,c
 19638  003248  D7FE               	bra	u11767
 19639  00324A  D000               	nop2	
 19640                           
 19641                           ;ENC424J600.c: 111: ENC424J600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 19642  00324C  0E75               	movlw	low ethernetController_softReset@receivedData
 19643  00324E  0100               	movlb	0	; () banked
 19644  003250  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19645  003252  0E00               	movlw	high ethernetController_softReset@receivedData
 19646  003254  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19647  003256  0E16               	movlw	22
 19648  003258  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 19649                           
 19650                           ;ENC424J600.c: 112: ENC424J600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 19651  00325C  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 19652  00325E  0100               	movlb	0	; () banked
 19653  003260  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19654  003262  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 19655  003264  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19656  003266  0E17               	movlw	23
 19657  003268  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 19658                           
 19659                           ;ENC424J600.c: 114: if (!receivedData[0] && !receivedData[1]) {
 19660  00326C  0100               	movlb	0	; () banked
 19661  00326E  5175               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 19662  003270  A4D8               	btfss	status,2,c
 19663  003272  D00D               	goto	l82
 19664                           
 19665                           ; BSR set to: 0
 19666  003274  5176               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 19667  003276  A4D8               	btfss	status,2,c
 19668  003278  D00A               	goto	l82
 19669                           
 19670                           ; BSR set to: 0
 19671                           ;ENC424J600.c: 116: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 19672  00327A  0E03               	movlw	3
 19673  00327C  0100               	movlb	0	; () banked
 19674  00327E  6F71               	movwf	??_ethernetController_softReset& (0+255),b
 19675  003280  0EA7               	movlw	167
 19676  003282                     u11777:
 19677  003282  2EE8               	decfsz	wreg,f,c
 19678  003284  D7FE               	bra	u11777
 19679  003286  2F71               	decfsz	??_ethernetController_softReset& (0+255),f,b
 19680  003288  D7FC               	bra	u11777
 19681  00328A  D000               	nop2	
 19682  00328C  D005               	goto	l8829
 19683  00328E                     l82:
 19684                           
 19685                           ;ENC424J600.c: 119: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 19686  00328E  0E01               	movlw	1
 19687  003290  0100               	movlb	0	; () banked
 19688  003292  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 19689  003294  0E2E               	movlw	46
 19690  003296  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 19691  003298                     l8829:
 19692                           
 19693                           ; BSR set to: 0
 19694                           ;ENC424J600.c: 120: return err;
 19695  003298  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 19696  00329C  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 19697  0032A0  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 19698                           
 19699                           ; BSR set to: 0
 19700  0032A4  0012               	return	
 19701  0032A6                     l84:
 19702                           
 19703                           ;ENC424J600.c: 121: }
 19704                           ;ENC424J600.c: 122: }
 19705                           ;ENC424J600.c: 123: comFailCount++;
 19706                           
 19707                           ; BSR set to: 0
 19708                           
 19709                           ; BSR set to: 0
 19710  0032A6  0100               	movlb	0	; () banked
 19711  0032A8  2B72               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 19712                           
 19713                           ;ENC424J600.c: 124: } else {
 19714  0032AA  D00B               	goto	l85
 19715  0032AC                     l80:
 19716                           
 19717                           ; BSR set to: 0
 19718                           ;ENC424J600.c: 125: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 19719                           
 19720                           ; BSR set to: 0
 19721  0032AC  0E01               	movlw	1
 19722  0032AE  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 19723  0032B0  0E2E               	movlw	46
 19724  0032B2  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 19725                           
 19726                           ; BSR set to: 0
 19727                           ;ENC424J600.c: 126: return err;
 19728  0032B4  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 19729  0032B8  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 19730  0032BC  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 19731                           
 19732                           ; BSR set to: 0
 19733  0032C0  0012               	return	
 19734  0032C2                     l85:
 19735                           
 19736                           ; BSR set to: 0
 19737                           ;ENC424J600.c: 127: }
 19738                           ;ENC424J600.c: 128: return err;
 19739  0032C2  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 19740  0032C6  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 19741  0032CA  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 19742  0032CE  0012               	return		;funcret
 19743  0032D0                     __end_of_ethernetController_softReset:
 19744                           	opt stack 0
 19745                           tblptru	equ	0xFF8
 19746                           tblptrh	equ	0xFF7
 19747                           tblptrl	equ	0xFF6
 19748                           tablat	equ	0xFF5
 19749                           prodh	equ	0xFF4
 19750                           prodl	equ	0xFF3
 19751                           intcon	equ	0xFF2
 19752                           intcon3	equ	0xFF0
 19753                           indf0	equ	0xFEF
 19754                           postinc0	equ	0xFEE
 19755                           plusw0	equ	0xFEB
 19756                           fsr0h	equ	0xFEA
 19757                           fsr0l	equ	0xFE9
 19758                           wreg	equ	0xFE8
 19759                           indf1	equ	0xFE7
 19760                           postinc1	equ	0xFE6
 19761                           postdec1	equ	0xFE5
 19762                           plusw1	equ	0xFE3
 19763                           fsr1h	equ	0xFE2
 19764                           fsr1l	equ	0xFE1
 19765                           indf2	equ	0xFDF
 19766                           postinc2	equ	0xFDE
 19767                           postdec2	equ	0xFDD
 19768                           plusw2	equ	0xFDB
 19769                           fsr2h	equ	0xFDA
 19770                           fsr2l	equ	0xFD9
 19771                           status	equ	0xFD8
 19772                           
 19773 ;; *************** function _ethernetController_checkDeviceId *****************
 19774 ;; Defined at:
 19775 ;;		line 131 in file "src/enc424j600/ENC424J600.c"
 19776 ;; Parameters:    Size  Location     Type
 19777 ;;		None
 19778 ;; Auto vars:     Size  Location     Type
 19779 ;;  err             3   18[BANK0 ] struct error
 19780 ;;  data            1   17[BANK0 ] unsigned char 
 19781 ;; Return value:  Size  Location     Type
 19782 ;;                  3   14[BANK0 ] struct error
 19783 ;; Registers used:
 19784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19785 ;; Tracked objects:
 19786 ;;		On entry : 0/0
 19787 ;;		On exit  : 0/0
 19788 ;;		Unchanged: 0/0
 19789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19790 ;;      Params:         0       3       0       0       0       0       0       0       0
 19791 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19792 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19793 ;;      Totals:         0       7       0       0       0       0       0       0       0
 19794 ;;Total ram usage:        7 bytes
 19795 ;; Hardware stack levels used:    1
 19796 ;; Hardware stack levels required when called:    7
 19797 ;; This function calls:
 19798 ;;		_ENC424J600_readControlRegisterUnbanked
 19799 ;; This function is called by:
 19800 ;;		_ethernetController_init
 19801 ;;		_main
 19802 ;; This function uses a non-reentrant model
 19803 ;;
 19804                           
 19805                           	psect	text79
 19806  00475C                     __ptext79:
 19807                           	opt stack 0
 19808  00475C                     _ethernetController_checkDeviceId:
 19809                           	opt stack 22
 19810                           
 19811                           ;ENC424J600.c: 132: error_t err;
 19812                           ;ENC424J600.c: 133: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 19813                           
 19814                           ;incstack = 0
 19815  00475C  0E01               	movlw	1
 19816  00475E  0100               	movlb	0	; () banked
 19817  004760  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 19818                           
 19819                           ;ENC424J600.c: 134: err.code = (uint16_t)0;
 19820  004762  0E00               	movlw	0
 19821  004764  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 19822  004766  0E00               	movlw	0
 19823  004768  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 19824                           
 19825                           ;ENC424J600.c: 135: uint8_t data = 0;
 19826  00476A  0E00               	movlw	0
 19827  00476C  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 19828                           
 19829                           ; BSR set to: 0
 19830                           ;ENC424J600.c: 136: ENC424J600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 19831  00476E  0E71               	movlw	low ethernetController_checkDeviceId@data
 19832  004770  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19833  004772  0E00               	movlw	high ethernetController_checkDeviceId@data
 19834  004774  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19835  004776  0E74               	movlw	116
 19836  004778  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 19837                           
 19838                           ;ENC424J600.c: 137: if (((data >> 5)&0x07) == 0b001)
 19839  00477C  0100               	movlb	0	; () banked
 19840  00477E  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 19841  004780  42E8               	rrncf	wreg,f,c
 19842  004782  0B07               	andlw	7
 19843  004784  0B07               	andlw	7
 19844  004786  06E8               	decf	wreg,f,c
 19845  004788  A4D8               	btfss	status,2,c
 19846  00478A  D004               	goto	l88
 19847                           
 19848                           ; BSR set to: 0
 19849                           ;ENC424J600.c: 138: err.code = (uint16_t)0;
 19850  00478C  0E00               	movlw	0
 19851  00478E  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 19852  004790  0E00               	movlw	0
 19853  004792  D003               	goto	L7
 19854  004794                     l88:
 19855                           
 19856                           ; BSR set to: 0
 19857                           ;ENC424J600.c: 139: else
 19858                           ;ENC424J600.c: 140: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 19859                           
 19860                           ; BSR set to: 0
 19861  004794  0E01               	movlw	1
 19862  004796  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 19863  004798  0E2D               	movlw	45
 19864  00479A                     L7:
 19865  00479A  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 19866                           
 19867                           ; BSR set to: 0
 19868                           ;ENC424J600.c: 141: return err;
 19869                           
 19870                           ; BSR set to: 0
 19871  00479C  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 19872  0047A0  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 19873  0047A4  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 19874  0047A8  0012               	return	
 19875  0047AA                     __end_of_ethernetController_checkDeviceId:
 19876                           	opt stack 0
 19877                           tblptru	equ	0xFF8
 19878                           tblptrh	equ	0xFF7
 19879                           tblptrl	equ	0xFF6
 19880                           tablat	equ	0xFF5
 19881                           prodh	equ	0xFF4
 19882                           prodl	equ	0xFF3
 19883                           intcon	equ	0xFF2
 19884                           intcon3	equ	0xFF0
 19885                           indf0	equ	0xFEF
 19886                           postinc0	equ	0xFEE
 19887                           plusw0	equ	0xFEB
 19888                           fsr0h	equ	0xFEA
 19889                           fsr0l	equ	0xFE9
 19890                           wreg	equ	0xFE8
 19891                           indf1	equ	0xFE7
 19892                           postinc1	equ	0xFE6
 19893                           postdec1	equ	0xFE5
 19894                           plusw1	equ	0xFE3
 19895                           fsr1h	equ	0xFE2
 19896                           fsr1l	equ	0xFE1
 19897                           indf2	equ	0xFDF
 19898                           postinc2	equ	0xFDE
 19899                           postdec2	equ	0xFDD
 19900                           plusw2	equ	0xFDB
 19901                           fsr2h	equ	0xFDA
 19902                           fsr2l	equ	0xFD9
 19903                           status	equ	0xFD8
 19904                           
 19905 ;; *************** function _ENC424J600_setRXTailPointer *****************
 19906 ;; Defined at:
 19907 ;;		line 684 in file "src/enc424j600/ENC424J600.c"
 19908 ;; Parameters:    Size  Location     Type
 19909 ;;  addr            2   14[BANK0 ] unsigned int 
 19910 ;; Auto vars:     Size  Location     Type
 19911 ;;  highByte        1   17[BANK0 ] unsigned char 
 19912 ;;  lowByte         1   16[BANK0 ] unsigned char 
 19913 ;; Return value:  Size  Location     Type
 19914 ;;                  1    wreg      void 
 19915 ;; Registers used:
 19916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19917 ;; Tracked objects:
 19918 ;;		On entry : 0/0
 19919 ;;		On exit  : 0/0
 19920 ;;		Unchanged: 0/0
 19921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19922 ;;      Params:         0       2       0       0       0       0       0       0       0
 19923 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19924 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19925 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19926 ;;Total ram usage:        4 bytes
 19927 ;; Hardware stack levels used:    1
 19928 ;; Hardware stack levels required when called:    7
 19929 ;; This function calls:
 19930 ;;		_ENC424J600_writeControlRegisterUnbanked
 19931 ;; This function is called by:
 19932 ;;		_ethernetController_init
 19933 ;;		_ethernetController_streamFromRXBuffer
 19934 ;;		_ethernetController_dropPacket
 19935 ;; This function uses a non-reentrant model
 19936 ;;
 19937                           
 19938                           	psect	text80
 19939  004BBC                     __ptext80:
 19940                           	opt stack 0
 19941  004BBC                     _ENC424J600_setRXTailPointer:
 19942                           	opt stack 18
 19943                           
 19944                           ;ENC424J600.c: 685: uint8_t lowByte = addr & 0x00ff;
 19945                           
 19946                           ; BSR set to: 0
 19947                           ;incstack = 0
 19948  004BBC  C06E  F070         	movff	ENC424J600_setRXTailPointer@addr,ENC424J600_setRXTailPointer@lowByte
 19949                           
 19950                           ;ENC424J600.c: 686: uint8_t highByte = (addr >> 8) & 0xff;
 19951  004BC0  0100               	movlb	0	; () banked
 19952  004BC2  516F               	movf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),w,b
 19953  004BC4  6F71               	movwf	ENC424J600_setRXTailPointer@highByte& (0+255),b
 19954                           
 19955                           ; BSR set to: 0
 19956                           ;ENC424J600.c: 687: ENC424J600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 19957  004BC6  0E70               	movlw	low ENC424J600_setRXTailPointer@lowByte
 19958  004BC8  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19959  004BCA  0E00               	movlw	high ENC424J600_setRXTailPointer@lowByte
 19960  004BCC  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19961  004BCE  0E06               	movlw	6
 19962  004BD0  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 19963                           
 19964                           ;ENC424J600.c: 688: ENC424J600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 19965  004BD4  0E71               	movlw	low ENC424J600_setRXTailPointer@highByte
 19966  004BD6  0100               	movlb	0	; () banked
 19967  004BD8  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19968  004BDA  0E00               	movlw	high ENC424J600_setRXTailPointer@highByte
 19969  004BDC  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19970  004BDE  0E07               	movlw	7
 19971  004BE0  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 19972  004BE4  0012               	return		;funcret
 19973  004BE6                     __end_of_ENC424J600_setRXTailPointer:
 19974                           	opt stack 0
 19975                           tblptru	equ	0xFF8
 19976                           tblptrh	equ	0xFF7
 19977                           tblptrl	equ	0xFF6
 19978                           tablat	equ	0xFF5
 19979                           prodh	equ	0xFF4
 19980                           prodl	equ	0xFF3
 19981                           intcon	equ	0xFF2
 19982                           intcon3	equ	0xFF0
 19983                           indf0	equ	0xFEF
 19984                           postinc0	equ	0xFEE
 19985                           plusw0	equ	0xFEB
 19986                           fsr0h	equ	0xFEA
 19987                           fsr0l	equ	0xFE9
 19988                           wreg	equ	0xFE8
 19989                           indf1	equ	0xFE7
 19990                           postinc1	equ	0xFE6
 19991                           postdec1	equ	0xFE5
 19992                           plusw1	equ	0xFE3
 19993                           fsr1h	equ	0xFE2
 19994                           fsr1l	equ	0xFE1
 19995                           indf2	equ	0xFDF
 19996                           postinc2	equ	0xFDE
 19997                           postdec2	equ	0xFDD
 19998                           plusw2	equ	0xFDB
 19999                           fsr2h	equ	0xFDA
 20000                           fsr2l	equ	0xFD9
 20001                           status	equ	0xFD8
 20002                           
 20003 ;; *************** function _ENC424J600_setRXBufferStartAddress *****************
 20004 ;; Defined at:
 20005 ;;		line 677 in file "src/enc424j600/ENC424J600.c"
 20006 ;; Parameters:    Size  Location     Type
 20007 ;;  addr            2   14[BANK0 ] unsigned int 
 20008 ;; Auto vars:     Size  Location     Type
 20009 ;;  highByte        1   17[BANK0 ] unsigned char 
 20010 ;;  lowByte         1   16[BANK0 ] unsigned char 
 20011 ;; Return value:  Size  Location     Type
 20012 ;;                  1    wreg      void 
 20013 ;; Registers used:
 20014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20015 ;; Tracked objects:
 20016 ;;		On entry : 0/0
 20017 ;;		On exit  : 0/0
 20018 ;;		Unchanged: 0/0
 20019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20020 ;;      Params:         0       2       0       0       0       0       0       0       0
 20021 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20022 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20023 ;;      Totals:         0       4       0       0       0       0       0       0       0
 20024 ;;Total ram usage:        4 bytes
 20025 ;; Hardware stack levels used:    1
 20026 ;; Hardware stack levels required when called:    7
 20027 ;; This function calls:
 20028 ;;		_ENC424J600_writeControlRegisterUnbanked
 20029 ;; This function is called by:
 20030 ;;		_ethernetController_init
 20031 ;; This function uses a non-reentrant model
 20032 ;;
 20033                           
 20034                           	psect	text81
 20035  004BE6                     __ptext81:
 20036                           	opt stack 0
 20037  004BE6                     _ENC424J600_setRXBufferStartAddress:
 20038                           	opt stack 22
 20039                           
 20040                           ;ENC424J600.c: 678: uint8_t lowByte = addr & 0x00ff;
 20041                           
 20042                           ;incstack = 0
 20043  004BE6  C06E  F070         	movff	ENC424J600_setRXBufferStartAddress@addr,ENC424J600_setRXBufferStartAddress@lowByt
      +                          e
 20044                           
 20045                           ;ENC424J600.c: 679: uint8_t highByte = (addr >> 8) & 0xff;
 20046  004BEA  0100               	movlb	0	; () banked
 20047  004BEC  516F               	movf	(ENC424J600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 20048  004BEE  6F71               	movwf	ENC424J600_setRXBufferStartAddress@highByte& (0+255),b
 20049                           
 20050                           ; BSR set to: 0
 20051                           ;ENC424J600.c: 680: ENC424J600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 20052  004BF0  0E70               	movlw	low ENC424J600_setRXBufferStartAddress@lowByte
 20053  004BF2  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 20054  004BF4  0E00               	movlw	high ENC424J600_setRXBufferStartAddress@lowByte
 20055  004BF6  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20056  004BF8  0E04               	movlw	4
 20057  004BFA  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 20058                           
 20059                           ;ENC424J600.c: 681: ENC424J600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 20060  004BFE  0E71               	movlw	low ENC424J600_setRXBufferStartAddress@highByte
 20061  004C00  0100               	movlb	0	; () banked
 20062  004C02  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 20063  004C04  0E00               	movlw	high ENC424J600_setRXBufferStartAddress@highByte
 20064  004C06  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20065  004C08  0E05               	movlw	5
 20066  004C0A  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 20067  004C0E  0012               	return		;funcret
 20068  004C10                     __end_of_ENC424J600_setRXBufferStartAddress:
 20069                           	opt stack 0
 20070                           tblptru	equ	0xFF8
 20071                           tblptrh	equ	0xFF7
 20072                           tblptrl	equ	0xFF6
 20073                           tablat	equ	0xFF5
 20074                           prodh	equ	0xFF4
 20075                           prodl	equ	0xFF3
 20076                           intcon	equ	0xFF2
 20077                           intcon3	equ	0xFF0
 20078                           indf0	equ	0xFEF
 20079                           postinc0	equ	0xFEE
 20080                           plusw0	equ	0xFEB
 20081                           fsr0h	equ	0xFEA
 20082                           fsr0l	equ	0xFE9
 20083                           wreg	equ	0xFE8
 20084                           indf1	equ	0xFE7
 20085                           postinc1	equ	0xFE6
 20086                           postdec1	equ	0xFE5
 20087                           plusw1	equ	0xFE3
 20088                           fsr1h	equ	0xFE2
 20089                           fsr1l	equ	0xFE1
 20090                           indf2	equ	0xFDF
 20091                           postinc2	equ	0xFDE
 20092                           postdec2	equ	0xFDD
 20093                           plusw2	equ	0xFDB
 20094                           fsr2h	equ	0xFDA
 20095                           fsr2l	equ	0xFD9
 20096                           status	equ	0xFD8
 20097                           
 20098 ;; *************** function _ENC424J600_setNextPacketPointer *****************
 20099 ;; Defined at:
 20100 ;;		line 621 in file "src/enc424j600/ENC424J600.c"
 20101 ;; Parameters:    Size  Location     Type
 20102 ;;  ptr             2    0[BANK0 ] unsigned int 
 20103 ;; Auto vars:     Size  Location     Type
 20104 ;;		None
 20105 ;; Return value:  Size  Location     Type
 20106 ;;                  1    wreg      void 
 20107 ;; Registers used:
 20108 ;;		None
 20109 ;; Tracked objects:
 20110 ;;		On entry : 0/0
 20111 ;;		On exit  : 0/0
 20112 ;;		Unchanged: 0/0
 20113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20114 ;;      Params:         0       2       0       0       0       0       0       0       0
 20115 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20116 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20117 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20118 ;;Total ram usage:        2 bytes
 20119 ;; Hardware stack levels used:    1
 20120 ;; Hardware stack levels required when called:    4
 20121 ;; This function calls:
 20122 ;;		Nothing
 20123 ;; This function is called by:
 20124 ;;		_ethernetController_init
 20125 ;;		_ethernetController_updateNextPacketPointer
 20126 ;; This function uses a non-reentrant model
 20127 ;;
 20128                           
 20129                           	psect	text82
 20130  004EE8                     __ptext82:
 20131                           	opt stack 0
 20132  004EE8                     _ENC424J600_setNextPacketPointer:
 20133                           	opt stack 23
 20134                           
 20135                           ;ENC424J600.c: 622: nextPacketPointer = ptr;
 20136                           
 20137                           ;incstack = 0
 20138  004EE8  C060  F044         	movff	ENC424J600_setNextPacketPointer@ptr,_nextPacketPointer
 20139  004EEC  C061  F045         	movff	ENC424J600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 20140  004EF0  0012               	return		;funcret
 20141  004EF2                     __end_of_ENC424J600_setNextPacketPointer:
 20142                           	opt stack 0
 20143                           tblptru	equ	0xFF8
 20144                           tblptrh	equ	0xFF7
 20145                           tblptrl	equ	0xFF6
 20146                           tablat	equ	0xFF5
 20147                           prodh	equ	0xFF4
 20148                           prodl	equ	0xFF3
 20149                           intcon	equ	0xFF2
 20150                           intcon3	equ	0xFF0
 20151                           indf0	equ	0xFEF
 20152                           postinc0	equ	0xFEE
 20153                           plusw0	equ	0xFEB
 20154                           fsr0h	equ	0xFEA
 20155                           fsr0l	equ	0xFE9
 20156                           wreg	equ	0xFE8
 20157                           indf1	equ	0xFE7
 20158                           postinc1	equ	0xFE6
 20159                           postdec1	equ	0xFE5
 20160                           plusw1	equ	0xFE3
 20161                           fsr1h	equ	0xFE2
 20162                           fsr1l	equ	0xFE1
 20163                           indf2	equ	0xFDF
 20164                           postinc2	equ	0xFDE
 20165                           postdec2	equ	0xFDD
 20166                           plusw2	equ	0xFDB
 20167                           fsr2h	equ	0xFDA
 20168                           fsr2l	equ	0xFD9
 20169                           status	equ	0xFD8
 20170                           
 20171 ;; *************** function _ENC424J600_enableReception *****************
 20172 ;; Defined at:
 20173 ;;		line 707 in file "src/enc424j600/ENC424J600.c"
 20174 ;; Parameters:    Size  Location     Type
 20175 ;;		None
 20176 ;; Auto vars:     Size  Location     Type
 20177 ;;		None
 20178 ;; Return value:  Size  Location     Type
 20179 ;;                  1    wreg      void 
 20180 ;; Registers used:
 20181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20182 ;; Tracked objects:
 20183 ;;		On entry : 0/0
 20184 ;;		On exit  : 0/0
 20185 ;;		Unchanged: 0/0
 20186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20187 ;;      Params:         0       0       0       0       0       0       0       0       0
 20188 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20189 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20190 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20191 ;;Total ram usage:        0 bytes
 20192 ;; Hardware stack levels used:    1
 20193 ;; Hardware stack levels required when called:    7
 20194 ;; This function calls:
 20195 ;;		_ENC424J600_writeSingleByte
 20196 ;; This function is called by:
 20197 ;;		_ethernetController_init
 20198 ;;		_ethernetController_enableReception
 20199 ;; This function uses a non-reentrant model
 20200 ;;
 20201                           
 20202                           	psect	text83
 20203  004EF2                     __ptext83:
 20204                           	opt stack 0
 20205  004EF2                     _ENC424J600_enableReception:
 20206                           	opt stack 22
 20207                           
 20208                           ;ENC424J600.c: 708: ENC424J600_writeSingleByte(0b11101000);
 20209                           
 20210                           ;incstack = 0
 20211  004EF2  0EE8               	movlw	232
 20212  004EF4  EC1A  F027         	call	_ENC424J600_writeSingleByte
 20213  004EF8  0012               	return		;funcret
 20214  004EFA                     __end_of_ENC424J600_enableReception:
 20215                           	opt stack 0
 20216                           tblptru	equ	0xFF8
 20217                           tblptrh	equ	0xFF7
 20218                           tblptrl	equ	0xFF6
 20219                           tablat	equ	0xFF5
 20220                           prodh	equ	0xFF4
 20221                           prodl	equ	0xFF3
 20222                           intcon	equ	0xFF2
 20223                           intcon3	equ	0xFF0
 20224                           indf0	equ	0xFEF
 20225                           postinc0	equ	0xFEE
 20226                           plusw0	equ	0xFEB
 20227                           fsr0h	equ	0xFEA
 20228                           fsr0l	equ	0xFE9
 20229                           wreg	equ	0xFE8
 20230                           indf1	equ	0xFE7
 20231                           postinc1	equ	0xFE6
 20232                           postdec1	equ	0xFE5
 20233                           plusw1	equ	0xFE3
 20234                           fsr1h	equ	0xFE2
 20235                           fsr1l	equ	0xFE1
 20236                           indf2	equ	0xFDF
 20237                           postinc2	equ	0xFDE
 20238                           postdec2	equ	0xFDD
 20239                           plusw2	equ	0xFDB
 20240                           fsr2h	equ	0xFDA
 20241                           fsr2l	equ	0xFD9
 20242                           status	equ	0xFD8
 20243                           
 20244 ;; *************** function _ENC424J600_writeSingleByte *****************
 20245 ;; Defined at:
 20246 ;;		line 547 in file "src/enc424j600/ENC424J600.c"
 20247 ;; Parameters:    Size  Location     Type
 20248 ;;  opcode          1    wreg     unsigned char 
 20249 ;; Auto vars:     Size  Location     Type
 20250 ;;  opcode          1   10[BANK0 ] unsigned char 
 20251 ;; Return value:  Size  Location     Type
 20252 ;;                  1    wreg      void 
 20253 ;; Registers used:
 20254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20255 ;; Tracked objects:
 20256 ;;		On entry : 0/0
 20257 ;;		On exit  : 0/0
 20258 ;;		Unchanged: 0/0
 20259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20260 ;;      Params:         0       0       0       0       0       0       0       0       0
 20261 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20262 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20263 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20264 ;;Total ram usage:        1 bytes
 20265 ;; Hardware stack levels used:    1
 20266 ;; Hardware stack levels required when called:    6
 20267 ;; This function calls:
 20268 ;;		_ENC424J600_writeSPI
 20269 ;; This function is called by:
 20270 ;;		_ethernetController_softReset
 20271 ;;		_ethernetController_sendPacket
 20272 ;;		_ethernetController_streamFromRXBuffer
 20273 ;;		_ethernetController_dropPacket
 20274 ;;		_ENC424J600_enableReception
 20275 ;;		_ENC424J600_disableReception
 20276 ;; This function uses a non-reentrant model
 20277 ;;
 20278                           
 20279                           	psect	text84
 20280  004E34                     __ptext84:
 20281                           	opt stack 0
 20282  004E34                     _ENC424J600_writeSingleByte:
 20283                           	opt stack 21
 20284                           
 20285                           ;incstack = 0
 20286                           ;ENC424J600_writeSingleByte@opcode stored from wreg
 20287  004E34  0100               	movlb	0	; () banked
 20288  004E36  6F6A               	movwf	ENC424J600_writeSingleByte@opcode& (0+255),b
 20289                           
 20290                           ;ENC424J600.c: 548: PORTBbits.RB4=0;
 20291  004E38  9881               	bcf	3969,4,c	;volatile
 20292                           
 20293                           ;ENC424J600.c: 549: ENC424J600_writeSPI(&opcode);
 20294  004E3A  0E6A               	movlw	low ENC424J600_writeSingleByte@opcode
 20295  004E3C  0100               	movlb	0	; () banked
 20296  004E3E  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 20297  004E40  0E00               	movlw	high ENC424J600_writeSingleByte@opcode
 20298  004E42  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 20299  004E44  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 20300                           
 20301                           ;ENC424J600.c: 550: PORTBbits.RB4=1;
 20302  004E48  8881               	bsf	3969,4,c	;volatile
 20303  004E4A  0012               	return		;funcret
 20304  004E4C                     __end_of_ENC424J600_writeSingleByte:
 20305                           	opt stack 0
 20306                           tblptru	equ	0xFF8
 20307                           tblptrh	equ	0xFF7
 20308                           tblptrl	equ	0xFF6
 20309                           tablat	equ	0xFF5
 20310                           prodh	equ	0xFF4
 20311                           prodl	equ	0xFF3
 20312                           intcon	equ	0xFF2
 20313                           intcon3	equ	0xFF0
 20314                           indf0	equ	0xFEF
 20315                           postinc0	equ	0xFEE
 20316                           plusw0	equ	0xFEB
 20317                           fsr0h	equ	0xFEA
 20318                           fsr0l	equ	0xFE9
 20319                           wreg	equ	0xFE8
 20320                           indf1	equ	0xFE7
 20321                           postinc1	equ	0xFE6
 20322                           postdec1	equ	0xFE5
 20323                           plusw1	equ	0xFE3
 20324                           fsr1h	equ	0xFE2
 20325                           fsr1l	equ	0xFE1
 20326                           indf2	equ	0xFDF
 20327                           postinc2	equ	0xFDE
 20328                           postdec2	equ	0xFDD
 20329                           plusw2	equ	0xFDB
 20330                           fsr2h	equ	0xFDA
 20331                           fsr2l	equ	0xFD9
 20332                           status	equ	0xFD8
 20333                           
 20334 ;; *************** function _ENC424J600_enableAutoMACInsertion *****************
 20335 ;; Defined at:
 20336 ;;		line 693 in file "src/enc424j600/ENC424J600.c"
 20337 ;; Parameters:    Size  Location     Type
 20338 ;;		None
 20339 ;; Auto vars:     Size  Location     Type
 20340 ;;  temp            1   14[BANK0 ] unsigned char 
 20341 ;; Return value:  Size  Location     Type
 20342 ;;                  1    wreg      void 
 20343 ;; Registers used:
 20344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20345 ;; Tracked objects:
 20346 ;;		On entry : 0/0
 20347 ;;		On exit  : 0/0
 20348 ;;		Unchanged: 0/0
 20349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20350 ;;      Params:         0       0       0       0       0       0       0       0       0
 20351 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20352 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20353 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20354 ;;Total ram usage:        1 bytes
 20355 ;; Hardware stack levels used:    1
 20356 ;; Hardware stack levels required when called:    7
 20357 ;; This function calls:
 20358 ;;		_ENC424J600_readControlRegisterUnbanked
 20359 ;;		_ENC424J600_writeControlRegisterUnbanked
 20360 ;; This function is called by:
 20361 ;;		_ethernetController_init
 20362 ;; This function uses a non-reentrant model
 20363 ;;
 20364                           
 20365                           	psect	text85
 20366  004C88                     __ptext85:
 20367                           	opt stack 0
 20368  004C88                     _ENC424J600_enableAutoMACInsertion:
 20369                           	opt stack 22
 20370                           
 20371                           ;ENC424J600.c: 694: uint8_t temp = 0;
 20372                           
 20373                           ;incstack = 0
 20374  004C88  0E00               	movlw	0
 20375  004C8A  0100               	movlb	0	; () banked
 20376  004C8C  6F6E               	movwf	ENC424J600_enableAutoMACInsertion@temp& (0+255),b
 20377                           
 20378                           ; BSR set to: 0
 20379                           ;ENC424J600.c: 695: ENC424J600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 20380  004C8E  0E6E               	movlw	low ENC424J600_enableAutoMACInsertion@temp
 20381  004C90  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 20382  004C92  0E00               	movlw	high ENC424J600_enableAutoMACInsertion@temp
 20383  004C94  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 20384  004C96  0E6F               	movlw	111
 20385  004C98  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 20386                           
 20387                           ;ENC424J600.c: 696: temp |= (1 << 5);
 20388  004C9C  0100               	movlb	0	; () banked
 20389  004C9E  8B6E               	bsf	ENC424J600_enableAutoMACInsertion@temp& (0+255),5,b
 20390                           
 20391                           ; BSR set to: 0
 20392                           ;ENC424J600.c: 697: ENC424J600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 20393  004CA0  0E6E               	movlw	low ENC424J600_enableAutoMACInsertion@temp
 20394  004CA2  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 20395  004CA4  0E00               	movlw	high ENC424J600_enableAutoMACInsertion@temp
 20396  004CA6  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20397  004CA8  0E6F               	movlw	111
 20398  004CAA  EC37  F025         	call	_ENC424J600_writeControlRegisterUnbanked
 20399  004CAE  0012               	return		;funcret
 20400  004CB0                     __end_of_ENC424J600_enableAutoMACInsertion:
 20401                           	opt stack 0
 20402                           tblptru	equ	0xFF8
 20403                           tblptrh	equ	0xFF7
 20404                           tblptrl	equ	0xFF6
 20405                           tablat	equ	0xFF5
 20406                           prodh	equ	0xFF4
 20407                           prodl	equ	0xFF3
 20408                           intcon	equ	0xFF2
 20409                           intcon3	equ	0xFF0
 20410                           indf0	equ	0xFEF
 20411                           postinc0	equ	0xFEE
 20412                           plusw0	equ	0xFEB
 20413                           fsr0h	equ	0xFEA
 20414                           fsr0l	equ	0xFE9
 20415                           wreg	equ	0xFE8
 20416                           indf1	equ	0xFE7
 20417                           postinc1	equ	0xFE6
 20418                           postdec1	equ	0xFE5
 20419                           plusw1	equ	0xFE3
 20420                           fsr1h	equ	0xFE2
 20421                           fsr1l	equ	0xFE1
 20422                           indf2	equ	0xFDF
 20423                           postinc2	equ	0xFDE
 20424                           postdec2	equ	0xFDD
 20425                           plusw2	equ	0xFDB
 20426                           fsr2h	equ	0xFDA
 20427                           fsr2l	equ	0xFD9
 20428                           status	equ	0xFD8
 20429                           
 20430 ;; *************** function _ENC424J600_writeControlRegisterUnbanked *****************
 20431 ;; Defined at:
 20432 ;;		line 553 in file "src/enc424j600/ENC424J600.c"
 20433 ;; Parameters:    Size  Location     Type
 20434 ;;  addr            1    wreg     unsigned char 
 20435 ;;  data            2   10[BANK0 ] PTR unsigned char 
 20436 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_disable@temp(1), ENC424J600_enable@temp(1), ENC424J600_disable
      +AutoMACInsertion@temp(1), 
 20437 ;;		 -> ENC424J600_enableAutoMACInsertion@temp(1), ENC424J600_setRXTailPointer@highByte(1), ENC424J600_setRXTailPointer@
      +lowByte(1), ENC424J600_setRXBufferStartAddress@highByte(1), 
 20438 ;;		 -> ENC424J600_setRXBufferStartAddress@lowByte(1), ENC424J600_setTXStartAddress@highByte(1), ENC424J600_setTXStartAd
      +dress@lowByte(1), ENC424J600_setTXLength@highByte(1), 
 20439 ;;		 -> ENC424J600_setTXLength@lowByte(1), ENC424J600_readPHYRegister@temp(1), ENC424J600_readPHYRegister@unusedBits(1),
      + ENC424J600_readPHYRegister@PHYaddress(1), 
 20440 ;;		 -> ethernetController_setLEDConfig@data(1), mac.address(6), ethernetController_setMacAddress@mac(6), ethernetContro
      +ller_softReset@dataToSend(2), 
 20441 ;; Auto vars:     Size  Location     Type
 20442 ;;  addr            1   12[BANK0 ] unsigned char 
 20443 ;;  opcode          1   13[BANK0 ] unsigned char 
 20444 ;; Return value:  Size  Location     Type
 20445 ;;                  1    wreg      void 
 20446 ;; Registers used:
 20447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20448 ;; Tracked objects:
 20449 ;;		On entry : 0/0
 20450 ;;		On exit  : 0/0
 20451 ;;		Unchanged: 0/0
 20452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20453 ;;      Params:         0       2       0       0       0       0       0       0       0
 20454 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20455 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20456 ;;      Totals:         0       4       0       0       0       0       0       0       0
 20457 ;;Total ram usage:        4 bytes
 20458 ;; Hardware stack levels used:    1
 20459 ;; Hardware stack levels required when called:    6
 20460 ;; This function calls:
 20461 ;;		_ENC424J600_writeSPI
 20462 ;; This function is called by:
 20463 ;;		_ethernetController_softReset
 20464 ;;		_ethernetController_setLEDConfig
 20465 ;;		_ENC424J600_readPHYRegister
 20466 ;;		_ENC424J600_setTXLength
 20467 ;;		_ENC424J600_setTXStartAddress
 20468 ;;		_ENC424J600_setRXBufferStartAddress
 20469 ;;		_ENC424J600_setRXTailPointer
 20470 ;;		_ENC424J600_enableAutoMACInsertion
 20471 ;;		_ENC424J600_clearInterruptFlag
 20472 ;;		_ethernetController_setMacAddress
 20473 ;;		_ENC424J600_disableAutoMACInsertion
 20474 ;;		_ENC424J600_enable
 20475 ;;		_ENC424J600_disable
 20476 ;; This function uses a non-reentrant model
 20477 ;;
 20478                           
 20479                           	psect	text86
 20480  004A6E                     __ptext86:
 20481                           	opt stack 0
 20482  004A6E                     _ENC424J600_writeControlRegisterUnbanked:
 20483                           	opt stack 20
 20484                           
 20485                           ;incstack = 0
 20486                           ;ENC424J600_writeControlRegisterUnbanked@addr stored from wreg
 20487  004A6E  0100               	movlb	0	; () banked
 20488  004A70  6F6C               	movwf	ENC424J600_writeControlRegisterUnbanked@addr& (0+255),b
 20489                           
 20490                           ;ENC424J600.c: 554: uint8_t opcode = 0x22;
 20491  004A72  0E22               	movlw	34
 20492  004A74  0100               	movlb	0	; () banked
 20493  004A76  6F6D               	movwf	ENC424J600_writeControlRegisterUnbanked@opcode& (0+255),b
 20494                           
 20495                           ; BSR set to: 0
 20496                           ;ENC424J600.c: 555: PORTBbits.RB4=0;
 20497  004A78  9881               	bcf	3969,4,c	;volatile
 20498                           
 20499                           ; BSR set to: 0
 20500                           ;ENC424J600.c: 556: ENC424J600_writeSPI(&opcode);
 20501  004A7A  0E6D               	movlw	low ENC424J600_writeControlRegisterUnbanked@opcode
 20502  004A7C  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 20503  004A7E  0E00               	movlw	high ENC424J600_writeControlRegisterUnbanked@opcode
 20504  004A80  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 20505  004A82  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 20506                           
 20507                           ;ENC424J600.c: 557: ENC424J600_writeSPI(&addr);
 20508  004A86  0E6C               	movlw	low ENC424J600_writeControlRegisterUnbanked@addr
 20509  004A88  0100               	movlb	0	; () banked
 20510  004A8A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 20511  004A8C  0E00               	movlw	high ENC424J600_writeControlRegisterUnbanked@addr
 20512  004A8E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 20513  004A90  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 20514                           
 20515                           ;ENC424J600.c: 558: ENC424J600_writeSPI(data);
 20516  004A94  C06A  F060         	movff	ENC424J600_writeControlRegisterUnbanked@data,ENC424J600_writeSPI@data
 20517  004A98  C06B  F061         	movff	ENC424J600_writeControlRegisterUnbanked@data+1,ENC424J600_writeSPI@data+1
 20518  004A9C  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 20519                           
 20520                           ;ENC424J600.c: 559: PORTBbits.RB4=1;
 20521  004AA0  8881               	bsf	3969,4,c	;volatile
 20522  004AA2  0012               	return		;funcret
 20523  004AA4                     __end_of_ENC424J600_writeControlRegisterUnbanked:
 20524                           	opt stack 0
 20525                           tblptru	equ	0xFF8
 20526                           tblptrh	equ	0xFF7
 20527                           tblptrl	equ	0xFF6
 20528                           tablat	equ	0xFF5
 20529                           prodh	equ	0xFF4
 20530                           prodl	equ	0xFF3
 20531                           intcon	equ	0xFF2
 20532                           intcon3	equ	0xFF0
 20533                           indf0	equ	0xFEF
 20534                           postinc0	equ	0xFEE
 20535                           plusw0	equ	0xFEB
 20536                           fsr0h	equ	0xFEA
 20537                           fsr0l	equ	0xFE9
 20538                           wreg	equ	0xFE8
 20539                           indf1	equ	0xFE7
 20540                           postinc1	equ	0xFE6
 20541                           postdec1	equ	0xFE5
 20542                           plusw1	equ	0xFE3
 20543                           fsr1h	equ	0xFE2
 20544                           fsr1l	equ	0xFE1
 20545                           indf2	equ	0xFDF
 20546                           postinc2	equ	0xFDE
 20547                           postdec2	equ	0xFDD
 20548                           plusw2	equ	0xFDB
 20549                           fsr2h	equ	0xFDA
 20550                           fsr2l	equ	0xFD9
 20551                           status	equ	0xFD8
 20552                           
 20553 ;; *************** function _ethernetController_getSiliconRevision *****************
 20554 ;; Defined at:
 20555 ;;		line 149 in file "src/enc424j600/ENC424J600.c"
 20556 ;; Parameters:    Size  Location     Type
 20557 ;;		None
 20558 ;; Auto vars:     Size  Location     Type
 20559 ;;  data            1   14[BANK0 ] unsigned char 
 20560 ;; Return value:  Size  Location     Type
 20561 ;;                  1    wreg      unsigned char 
 20562 ;; Registers used:
 20563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20564 ;; Tracked objects:
 20565 ;;		On entry : 0/0
 20566 ;;		On exit  : 0/0
 20567 ;;		Unchanged: 0/0
 20568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20569 ;;      Params:         0       0       0       0       0       0       0       0       0
 20570 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20571 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20572 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20573 ;;Total ram usage:        1 bytes
 20574 ;; Hardware stack levels used:    1
 20575 ;; Hardware stack levels required when called:    7
 20576 ;; This function calls:
 20577 ;;		_ENC424J600_readControlRegisterUnbanked
 20578 ;; This function is called by:
 20579 ;;		_main
 20580 ;; This function uses a non-reentrant model
 20581 ;;
 20582                           
 20583                           	psect	text87
 20584  004DA8                     __ptext87:
 20585                           	opt stack 0
 20586  004DA8                     _ethernetController_getSiliconRevision:
 20587                           	opt stack 23
 20588                           
 20589                           ;ENC424J600.c: 150: uint8_t data = 0;
 20590                           
 20591                           ;incstack = 0
 20592  004DA8  0E00               	movlw	0
 20593  004DAA  0100               	movlb	0	; () banked
 20594  004DAC  6F6E               	movwf	ethernetController_getSiliconRevision@data& (0+255),b
 20595                           
 20596                           ; BSR set to: 0
 20597                           ;ENC424J600.c: 151: ENC424J600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 20598  004DAE  0E6E               	movlw	low ethernetController_getSiliconRevision@data
 20599  004DB0  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 20600  004DB2  0E00               	movlw	high ethernetController_getSiliconRevision@data
 20601  004DB4  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 20602  004DB6  0E74               	movlw	116
 20603  004DB8  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 20604                           
 20605                           ;ENC424J600.c: 152: data &= 0x1F;
 20606  004DBC  0E1F               	movlw	31
 20607  004DBE  0100               	movlb	0	; () banked
 20608  004DC0  176E               	andwf	ethernetController_getSiliconRevision@data& (0+255),f,b
 20609                           
 20610                           ; BSR set to: 0
 20611                           ;ENC424J600.c: 153: return data;
 20612  004DC2  516E               	movf	ethernetController_getSiliconRevision@data& (0+255),w,b
 20613  004DC4  0012               	return	
 20614  004DC6                     __end_of_ethernetController_getSiliconRevision:
 20615                           	opt stack 0
 20616                           tblptru	equ	0xFF8
 20617                           tblptrh	equ	0xFF7
 20618                           tblptrl	equ	0xFF6
 20619                           tablat	equ	0xFF5
 20620                           prodh	equ	0xFF4
 20621                           prodl	equ	0xFF3
 20622                           intcon	equ	0xFF2
 20623                           intcon3	equ	0xFF0
 20624                           indf0	equ	0xFEF
 20625                           postinc0	equ	0xFEE
 20626                           plusw0	equ	0xFEB
 20627                           fsr0h	equ	0xFEA
 20628                           fsr0l	equ	0xFE9
 20629                           wreg	equ	0xFE8
 20630                           indf1	equ	0xFE7
 20631                           postinc1	equ	0xFE6
 20632                           postdec1	equ	0xFE5
 20633                           plusw1	equ	0xFE3
 20634                           fsr1h	equ	0xFE2
 20635                           fsr1l	equ	0xFE1
 20636                           indf2	equ	0xFDF
 20637                           postinc2	equ	0xFDE
 20638                           postdec2	equ	0xFDD
 20639                           plusw2	equ	0xFDB
 20640                           fsr2h	equ	0xFDA
 20641                           fsr2l	equ	0xFD9
 20642                           status	equ	0xFD8
 20643                           
 20644 ;; *************** function _ethernetController_getDeviceName *****************
 20645 ;; Defined at:
 20646 ;;		line 144 in file "src/enc424j600/ENC424J600.c"
 20647 ;; Parameters:    Size  Location     Type
 20648 ;;		None
 20649 ;; Auto vars:     Size  Location     Type
 20650 ;;  string         11    2[BANK0 ] const unsigned char [11]
 20651 ;; Return value:  Size  Location     Type
 20652 ;;                  2    0[BANK0 ] PTR unsigned char 
 20653 ;; Registers used:
 20654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20655 ;; Tracked objects:
 20656 ;;		On entry : 0/0
 20657 ;;		On exit  : 0/0
 20658 ;;		Unchanged: 0/0
 20659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20660 ;;      Params:         0       2       0       0       0       0       0       0       0
 20661 ;;      Locals:         0      11       0       0       0       0       0       0       0
 20662 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20663 ;;      Totals:         0      13       0       0       0       0       0       0       0
 20664 ;;Total ram usage:       13 bytes
 20665 ;; Hardware stack levels used:    1
 20666 ;; Hardware stack levels required when called:    4
 20667 ;; This function calls:
 20668 ;;		Nothing
 20669 ;; This function is called by:
 20670 ;;		_main
 20671 ;; This function uses a non-reentrant model
 20672 ;;
 20673                           
 20674                           	psect	text88
 20675  004D20                     __ptext88:
 20676                           	opt stack 0
 20677  004D20                     _ethernetController_getDeviceName:
 20678                           	opt stack 26
 20679                           
 20680                           ;ENC424J600.c: 145: const char string [] = "ENC424J600";
 20681                           
 20682                           ; BSR set to: 0
 20683                           ;incstack = 0
 20684  004D20  0E1F               	movlw	low ethernetController_getDeviceName@F5860
 20685  004D22  6EF6               	movwf	tblptrl,c
 20686  004D24                     	if	1	;There is more than 1 active tblptr byte
 20687  004D24  0E7C               	movlw	high ethernetController_getDeviceName@F5860
 20688  004D26  6EF7               	movwf	tblptrh,c
 20689  004D28                     	endif
 20690  004D28                     	if	0	;There are less than 3 active tblptr bytes
 20691  004D28                     	endif
 20692  004D28  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 20693  004D2C  0E0A               	movlw	10
 20694  004D2E                     u11250:
 20695  004D2E  0009               	tblrd		*+
 20696  004D30  CFF5 FFDE          	movff	tablat,postinc2
 20697  004D34  06E8               	decf	wreg,f,c
 20698  004D36  E2FB               	bc	u11250
 20699                           
 20700                           ;ENC424J600.c: 146: return string;
 20701  004D38  0E62               	movlw	low ethernetController_getDeviceName@string
 20702  004D3A  0100               	movlb	0	; () banked
 20703  004D3C  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 20704  004D3E  0E00               	movlw	high ethernetController_getDeviceName@string
 20705  004D40  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 20706  004D42  0012               	return	
 20707  004D44                     __end_of_ethernetController_getDeviceName:
 20708                           	opt stack 0
 20709                           tblptru	equ	0xFF8
 20710                           tblptrh	equ	0xFF7
 20711                           tblptrl	equ	0xFF6
 20712                           tablat	equ	0xFF5
 20713                           prodh	equ	0xFF4
 20714                           prodl	equ	0xFF3
 20715                           intcon	equ	0xFF2
 20716                           intcon3	equ	0xFF0
 20717                           indf0	equ	0xFEF
 20718                           postinc0	equ	0xFEE
 20719                           plusw0	equ	0xFEB
 20720                           fsr0h	equ	0xFEA
 20721                           fsr0l	equ	0xFE9
 20722                           wreg	equ	0xFE8
 20723                           indf1	equ	0xFE7
 20724                           postinc1	equ	0xFE6
 20725                           postdec1	equ	0xFE5
 20726                           plusw1	equ	0xFE3
 20727                           fsr1h	equ	0xFE2
 20728                           fsr1l	equ	0xFE1
 20729                           indf2	equ	0xFDF
 20730                           postinc2	equ	0xFDE
 20731                           postdec2	equ	0xFDD
 20732                           plusw2	equ	0xFDB
 20733                           fsr2h	equ	0xFDA
 20734                           fsr2l	equ	0xFD9
 20735                           status	equ	0xFD8
 20736                           
 20737 ;; *************** function _ethernetController_getCurrentPacketCount *****************
 20738 ;; Defined at:
 20739 ;;		line 493 in file "src/enc424j600/ENC424J600.c"
 20740 ;; Parameters:    Size  Location     Type
 20741 ;;		None
 20742 ;; Auto vars:     Size  Location     Type
 20743 ;;		None
 20744 ;; Return value:  Size  Location     Type
 20745 ;;                  1    wreg      unsigned char 
 20746 ;; Registers used:
 20747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20748 ;; Tracked objects:
 20749 ;;		On entry : 0/0
 20750 ;;		On exit  : 0/0
 20751 ;;		Unchanged: 0/0
 20752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20753 ;;      Params:         0       0       0       0       0       0       0       0       0
 20754 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20755 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20756 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20757 ;;Total ram usage:        0 bytes
 20758 ;; Hardware stack levels used:    1
 20759 ;; Hardware stack levels required when called:    8
 20760 ;; This function calls:
 20761 ;;		_ENC424J600_getPacketCount
 20762 ;; This function is called by:
 20763 ;;		_main
 20764 ;; This function uses a non-reentrant model
 20765 ;;
 20766                           
 20767                           	psect	text89
 20768  004EFA                     __ptext89:
 20769                           	opt stack 0
 20770  004EFA                     _ethernetController_getCurrentPacketCount:
 20771                           	opt stack 22
 20772                           
 20773                           ;ENC424J600.c: 494: return ENC424J600_getPacketCount();
 20774                           
 20775                           ; BSR set to: 0
 20776                           ;incstack = 0
 20777  004EFA  EC0D  F027         	call	_ENC424J600_getPacketCount	;wreg free
 20778  004EFE  0012               	return	
 20779  004F00                     __end_of_ethernetController_getCurrentPacketCount:
 20780                           	opt stack 0
 20781                           tblptru	equ	0xFF8
 20782                           tblptrh	equ	0xFF7
 20783                           tblptrl	equ	0xFF6
 20784                           tablat	equ	0xFF5
 20785                           prodh	equ	0xFF4
 20786                           prodl	equ	0xFF3
 20787                           intcon	equ	0xFF2
 20788                           intcon3	equ	0xFF0
 20789                           indf0	equ	0xFEF
 20790                           postinc0	equ	0xFEE
 20791                           plusw0	equ	0xFEB
 20792                           fsr0h	equ	0xFEA
 20793                           fsr0l	equ	0xFE9
 20794                           wreg	equ	0xFE8
 20795                           indf1	equ	0xFE7
 20796                           postinc1	equ	0xFE6
 20797                           postdec1	equ	0xFE5
 20798                           plusw1	equ	0xFE3
 20799                           fsr1h	equ	0xFE2
 20800                           fsr1l	equ	0xFE1
 20801                           indf2	equ	0xFDF
 20802                           postinc2	equ	0xFDE
 20803                           postdec2	equ	0xFDD
 20804                           plusw2	equ	0xFDB
 20805                           fsr2h	equ	0xFDA
 20806                           fsr2l	equ	0xFD9
 20807                           status	equ	0xFD8
 20808                           
 20809 ;; *************** function _ENC424J600_getPacketCount *****************
 20810 ;; Defined at:
 20811 ;;		line 629 in file "src/enc424j600/ENC424J600.c"
 20812 ;; Parameters:    Size  Location     Type
 20813 ;;		None
 20814 ;; Auto vars:     Size  Location     Type
 20815 ;;  lowByte         1   14[BANK0 ] unsigned char 
 20816 ;; Return value:  Size  Location     Type
 20817 ;;                  1    wreg      unsigned char 
 20818 ;; Registers used:
 20819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20820 ;; Tracked objects:
 20821 ;;		On entry : 0/0
 20822 ;;		On exit  : 0/0
 20823 ;;		Unchanged: 0/0
 20824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20825 ;;      Params:         0       0       0       0       0       0       0       0       0
 20826 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20827 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20828 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20829 ;;Total ram usage:        1 bytes
 20830 ;; Hardware stack levels used:    1
 20831 ;; Hardware stack levels required when called:    7
 20832 ;; This function calls:
 20833 ;;		_ENC424J600_readControlRegisterUnbanked
 20834 ;; This function is called by:
 20835 ;;		_ethernetController_newPacketAvailable
 20836 ;;		_ethernetController_getCurrentPacketCount
 20837 ;; This function uses a non-reentrant model
 20838 ;;
 20839                           
 20840                           	psect	text90
 20841  004E1A                     __ptext90:
 20842                           	opt stack 0
 20843  004E1A                     _ENC424J600_getPacketCount:
 20844                           	opt stack 21
 20845                           
 20846                           ;ENC424J600.c: 630: uint8_t lowByte = 0;
 20847                           
 20848                           ;incstack = 0
 20849  004E1A  0E00               	movlw	0
 20850  004E1C  0100               	movlb	0	; () banked
 20851  004E1E  6F6E               	movwf	ENC424J600_getPacketCount@lowByte& (0+255),b
 20852                           
 20853                           ; BSR set to: 0
 20854                           ;ENC424J600.c: 631: ENC424J600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 20855  004E20  0E6E               	movlw	low ENC424J600_getPacketCount@lowByte
 20856  004E22  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 20857  004E24  0E00               	movlw	high ENC424J600_getPacketCount@lowByte
 20858  004E26  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 20859  004E28  0E1A               	movlw	26
 20860  004E2A  EC52  F025         	call	_ENC424J600_readControlRegisterUnbanked
 20861                           
 20862                           ;ENC424J600.c: 632: return (uint32_t) lowByte;
 20863  004E2E  0100               	movlb	0	; () banked
 20864  004E30  516E               	movf	ENC424J600_getPacketCount@lowByte& (0+255),w,b
 20865  004E32  0012               	return	
 20866  004E34                     __end_of_ENC424J600_getPacketCount:
 20867                           	opt stack 0
 20868                           tblptru	equ	0xFF8
 20869                           tblptrh	equ	0xFF7
 20870                           tblptrl	equ	0xFF6
 20871                           tablat	equ	0xFF5
 20872                           prodh	equ	0xFF4
 20873                           prodl	equ	0xFF3
 20874                           intcon	equ	0xFF2
 20875                           intcon3	equ	0xFF0
 20876                           indf0	equ	0xFEF
 20877                           postinc0	equ	0xFEE
 20878                           plusw0	equ	0xFEB
 20879                           fsr0h	equ	0xFEA
 20880                           fsr0l	equ	0xFE9
 20881                           wreg	equ	0xFE8
 20882                           indf1	equ	0xFE7
 20883                           postinc1	equ	0xFE6
 20884                           postdec1	equ	0xFE5
 20885                           plusw1	equ	0xFE3
 20886                           fsr1h	equ	0xFE2
 20887                           fsr1l	equ	0xFE1
 20888                           indf2	equ	0xFDF
 20889                           postinc2	equ	0xFDE
 20890                           postdec2	equ	0xFDD
 20891                           plusw2	equ	0xFDB
 20892                           fsr2h	equ	0xFDA
 20893                           fsr2l	equ	0xFD9
 20894                           status	equ	0xFD8
 20895                           
 20896 ;; *************** function _ENC424J600_readControlRegisterUnbanked *****************
 20897 ;; Defined at:
 20898 ;;		line 562 in file "src/enc424j600/ENC424J600.c"
 20899 ;; Parameters:    Size  Location     Type
 20900 ;;  addr            1    wreg     unsigned char 
 20901 ;;  data            2   10[BANK0 ] PTR unsigned char 
 20902 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_getInterruptFlags@low(1), ENC424J600_getInterruptFlags@high(1)
      +, ENC424J600_disable@temp(1), 
 20903 ;;		 -> ENC424J600_enable@temp(1), ENC424J600_disableAutoMACInsertion@temp(1), ENC424J600_enableAutoMACInsertion@temp(1)
      +, ENC424J600_getPacketCount@lowByte(1), 
 20904 ;;		 -> ENC424J600_readPHYRegister@highByte(1), ENC424J600_readPHYRegister@lowByte(1), ENC424J600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 20905 ;;		 -> ethernetController_updateLinkStatus@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), ethernetCo
      +ntroller_getSiliconRevision@data(1), 
 20906 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 20907 ;; Auto vars:     Size  Location     Type
 20908 ;;  addr            1   12[BANK0 ] unsigned char 
 20909 ;;  opcode          1   13[BANK0 ] unsigned char 
 20910 ;; Return value:  Size  Location     Type
 20911 ;;                  1    wreg      void 
 20912 ;; Registers used:
 20913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20914 ;; Tracked objects:
 20915 ;;		On entry : 0/0
 20916 ;;		On exit  : 0/0
 20917 ;;		Unchanged: 0/0
 20918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20919 ;;      Params:         0       2       0       0       0       0       0       0       0
 20920 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20921 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20922 ;;      Totals:         0       4       0       0       0       0       0       0       0
 20923 ;;Total ram usage:        4 bytes
 20924 ;; Hardware stack levels used:    1
 20925 ;; Hardware stack levels required when called:    6
 20926 ;; This function calls:
 20927 ;;		_ENC424J600_readSPI
 20928 ;;		_ENC424J600_writeSPI
 20929 ;; This function is called by:
 20930 ;;		_ethernetController_softReset
 20931 ;;		_ethernetController_checkDeviceId
 20932 ;;		_ethernetController_getSiliconRevision
 20933 ;;		_ethernetController_getMacAddress
 20934 ;;		_ethernetController_updateLinkStatus
 20935 ;;		_ethernetController_setLEDConfig
 20936 ;;		_ENC424J600_readPHYRegister
 20937 ;;		_ENC424J600_getPacketCount
 20938 ;;		_ENC424J600_enableAutoMACInsertion
 20939 ;;		_ENC424J600_getInterruptFlags
 20940 ;;		_ENC424J600_clearInterruptFlag
 20941 ;;		_ENC424J600_disableAutoMACInsertion
 20942 ;;		_ENC424J600_enable
 20943 ;;		_ENC424J600_disable
 20944 ;; This function uses a non-reentrant model
 20945 ;;
 20946                           
 20947                           	psect	text91
 20948  004AA4                     __ptext91:
 20949                           	opt stack 0
 20950  004AA4                     _ENC424J600_readControlRegisterUnbanked:
 20951                           	opt stack 21
 20952                           
 20953                           ; BSR set to: 0
 20954                           ;incstack = 0
 20955                           ;ENC424J600_readControlRegisterUnbanked@addr stored from wreg
 20956  004AA4  0100               	movlb	0	; () banked
 20957  004AA6  6F6C               	movwf	ENC424J600_readControlRegisterUnbanked@addr& (0+255),b
 20958                           
 20959                           ;ENC424J600.c: 563: uint8_t opcode = 0x20;
 20960  004AA8  0E20               	movlw	32
 20961  004AAA  0100               	movlb	0	; () banked
 20962  004AAC  6F6D               	movwf	ENC424J600_readControlRegisterUnbanked@opcode& (0+255),b
 20963                           
 20964                           ; BSR set to: 0
 20965                           ;ENC424J600.c: 564: PORTBbits.RB4=0;
 20966  004AAE  9881               	bcf	3969,4,c	;volatile
 20967                           
 20968                           ; BSR set to: 0
 20969                           ;ENC424J600.c: 565: ENC424J600_writeSPI(&opcode);
 20970  004AB0  0E6D               	movlw	low ENC424J600_readControlRegisterUnbanked@opcode
 20971  004AB2  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 20972  004AB4  0E00               	movlw	high ENC424J600_readControlRegisterUnbanked@opcode
 20973  004AB6  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 20974  004AB8  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 20975                           
 20976                           ;ENC424J600.c: 566: ENC424J600_writeSPI(&addr);
 20977  004ABC  0E6C               	movlw	low ENC424J600_readControlRegisterUnbanked@addr
 20978  004ABE  0100               	movlb	0	; () banked
 20979  004AC0  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 20980  004AC2  0E00               	movlw	high ENC424J600_readControlRegisterUnbanked@addr
 20981  004AC4  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 20982  004AC6  ECD7  F022         	call	_ENC424J600_writeSPI	;wreg free
 20983                           
 20984                           ;ENC424J600.c: 567: ENC424J600_readSPI(data);
 20985  004ACA  C06A  F060         	movff	ENC424J600_readControlRegisterUnbanked@data,ENC424J600_readSPI@data
 20986  004ACE  C06B  F061         	movff	ENC424J600_readControlRegisterUnbanked@data+1,ENC424J600_readSPI@data+1
 20987  004AD2  EC3B  F022         	call	_ENC424J600_readSPI	;wreg free
 20988                           
 20989                           ;ENC424J600.c: 568: PORTBbits.RB4=1;
 20990  004AD6  8881               	bsf	3969,4,c	;volatile
 20991  004AD8  0012               	return		;funcret
 20992  004ADA                     __end_of_ENC424J600_readControlRegisterUnbanked:
 20993                           	opt stack 0
 20994                           tblptru	equ	0xFF8
 20995                           tblptrh	equ	0xFF7
 20996                           tblptrl	equ	0xFF6
 20997                           tablat	equ	0xFF5
 20998                           prodh	equ	0xFF4
 20999                           prodl	equ	0xFF3
 21000                           intcon	equ	0xFF2
 21001                           intcon3	equ	0xFF0
 21002                           indf0	equ	0xFEF
 21003                           postinc0	equ	0xFEE
 21004                           plusw0	equ	0xFEB
 21005                           fsr0h	equ	0xFEA
 21006                           fsr0l	equ	0xFE9
 21007                           wreg	equ	0xFE8
 21008                           indf1	equ	0xFE7
 21009                           postinc1	equ	0xFE6
 21010                           postdec1	equ	0xFE5
 21011                           plusw1	equ	0xFE3
 21012                           fsr1h	equ	0xFE2
 21013                           fsr1l	equ	0xFE1
 21014                           indf2	equ	0xFDF
 21015                           postinc2	equ	0xFDE
 21016                           postdec2	equ	0xFDD
 21017                           plusw2	equ	0xFDB
 21018                           fsr2h	equ	0xFDA
 21019                           fsr2l	equ	0xFD9
 21020                           status	equ	0xFD8
 21021                           
 21022 ;; *************** function _ENC424J600_writeSPI *****************
 21023 ;; Defined at:
 21024 ;;		line 522 in file "src/enc424j600/ENC424J600.c"
 21025 ;; Parameters:    Size  Location     Type
 21026 ;;  data            2    0[BANK0 ] PTR unsigned char 
 21027 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_disable@temp(1), ENC424J600_enable@temp(1), ENC424J600_disable
      +AutoMACInsertion@temp(1), 
 21028 ;;		 -> ENC424J600_enableAutoMACInsertion@temp(1), ENC424J600_setRXTailPointer@highByte(1), ENC424J600_setRXTailPointer@
      +lowByte(1), ENC424J600_setRXBufferStartAddress@highByte(1), 
 21029 ;;		 -> ENC424J600_setRXBufferStartAddress@lowByte(1), ENC424J600_setERXDATAReadPointer@highByte(1), ENC424J600_setERXDA
      +TAReadPointer@lowByte(1), ENC424J600_setERXDATAReadPointer@opcode(1), 
 21030 ;;		 -> ENC424J600_setGPDATAReadPointer@highByte(1), ENC424J600_setGPDATAReadPointer@lowByte(1), ENC424J600_setGPDATARea
      +dPointer@opcode(1), ENC424J600_setGPDATAWritePointer@highByte(1), 
 21031 ;;		 -> ENC424J600_setGPDATAWritePointer@lowByte(1), ENC424J600_setGPDATAWritePointer@opcode(1), ENC424J600_setTXStartAd
      +dress@highByte(1), ENC424J600_setTXStartAddress@lowByte(1), 
 21032 ;;		 -> ENC424J600_setTXLength@highByte(1), ENC424J600_setTXLength@lowByte(1), ENC424J600_readPHYRegister@temp(1), ENC42
      +4J600_readPHYRegister@unusedBits(1), 
 21033 ;;		 -> ENC424J600_readPHYRegister@PHYaddress(1), ENC424J600_readControlRegisterUnbanked@addr(1), ENC424J600_readControl
      +RegisterUnbanked@opcode(1), ENC424J600_writeControlRegisterUnbanked@addr(1), 
 21034 ;;		 -> ENC424J600_writeControlRegisterUnbanked@opcode(1), ENC424J600_writeSingleByte@opcode(1), ethernetController_setL
      +EDConfig@data(1), ethernetController_streamFromRXBuffer@opcode(1), 
 21035 ;;		 -> ethernetController_updateNextPacketPointer@opcode(1), ethernetController_getRSV@opcode(1), ethernetController_ge
      +tEtherTypeField@opcode(1), ethernetController_getSourceMACAddress@opcode(1), 
 21036 ;;		 -> ethernetController_getDestinationMACAddress@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@opcode(1),
      + ethernetController_writeEtherTypeFieldToBuffer@highByte(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), 
 21037 ;;		 -> ethernetController_writeDestinationMACAddress@opcode(1), ethernetController_writeDestinationMACAddress@data(6), 
      +ethernetController_streamToTransmitBuffer@data(1), ethernetController_streamToTransmitBuffer@opcode(1), 
 21038 ;;		 -> mac.address(6), ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 21039 ;; Auto vars:     Size  Location     Type
 21040 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 21041 ;; Return value:  Size  Location     Type
 21042 ;;                  1    wreg      void 
 21043 ;; Registers used:
 21044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21045 ;; Tracked objects:
 21046 ;;		On entry : 0/0
 21047 ;;		On exit  : 0/0
 21048 ;;		Unchanged: 0/0
 21049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21050 ;;      Params:         0       2       0       0       0       0       0       0       0
 21051 ;;      Locals:         0       4       0       0       0       0       0       0       0
 21052 ;;      Temps:          0       4       0       0       0       0       0       0       0
 21053 ;;      Totals:         0      10       0       0       0       0       0       0       0
 21054 ;;Total ram usage:       10 bytes
 21055 ;; Hardware stack levels used:    1
 21056 ;; Hardware stack levels required when called:    5
 21057 ;; This function calls:
 21058 ;;		_ENC424J600_initSPI
 21059 ;; This function is called by:
 21060 ;;		_ethernetController_streamToTransmitBuffer
 21061 ;;		_ethernetController_writeDestinationMACAddress
 21062 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 21063 ;;		_ethernetController_getSourceMACAddress
 21064 ;;		_ethernetController_getEtherTypeField
 21065 ;;		_ethernetController_getRSV
 21066 ;;		_ethernetController_updateNextPacketPointer
 21067 ;;		_ethernetController_streamFromRXBuffer
 21068 ;;		_ENC424J600_writeSingleByte
 21069 ;;		_ENC424J600_writeControlRegisterUnbanked
 21070 ;;		_ENC424J600_readControlRegisterUnbanked
 21071 ;;		_ENC424J600_setGPDATAWritePointer
 21072 ;;		_ENC424J600_setERXDATAReadPointer
 21073 ;;		_ethernetController_getDestinationMACAddress
 21074 ;;		_ENC424J600_setGPDATAReadPointer
 21075 ;; This function uses a non-reentrant model
 21076 ;;
 21077                           
 21078                           	psect	text92
 21079  0045AE                     __ptext92:
 21080                           	opt stack 0
 21081  0045AE                     _ENC424J600_writeSPI:
 21082                           	opt stack 22
 21083                           
 21084                           ;ENC424J600.c: 524: uint32_t timeoutCounter = 0;
 21085                           
 21086                           ;incstack = 0
 21087  0045AE  0E00               	movlw	0
 21088  0045B0  0100               	movlb	0	; () banked
 21089  0045B2  6F66               	movwf	ENC424J600_writeSPI@timeoutCounter& (0+255),b
 21090  0045B4  0E00               	movlw	0
 21091  0045B6  6F67               	movwf	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),b
 21092  0045B8  0E00               	movlw	0
 21093  0045BA  6F68               	movwf	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),b
 21094  0045BC  0E00               	movlw	0
 21095  0045BE  6F69               	movwf	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),b
 21096                           
 21097                           ; BSR set to: 0
 21098                           ;ENC424J600.c: 525: SSP1BUF = *data;
 21099  0045C0  C060  FFD9         	movff	ENC424J600_writeSPI@data,fsr2l
 21100  0045C4  C061  FFDA         	movff	ENC424J600_writeSPI@data+1,fsr2h
 21101  0045C8  50DF               	movf	indf2,w,c
 21102  0045CA  6EC9               	movwf	4041,c	;volatile
 21103  0045CC                     
 21104                           ; BSR set to: 0
 21105                           
 21106                           ; BSR set to: 0
 21107  0045CC  B0C7               	btfsc	4039,0,c	;volatile
 21108  0045CE  D015               	goto	u8000
 21109                           
 21110                           ; BSR set to: 0
 21111  0045D0  C066  F062         	movff	ENC424J600_writeSPI@timeoutCounter,??_ENC424J600_writeSPI
 21112  0045D4  C067  F063         	movff	ENC424J600_writeSPI@timeoutCounter+1,??_ENC424J600_writeSPI+1
 21113  0045D8  C068  F064         	movff	ENC424J600_writeSPI@timeoutCounter+2,??_ENC424J600_writeSPI+2
 21114  0045DC  C069  F065         	movff	ENC424J600_writeSPI@timeoutCounter+3,??_ENC424J600_writeSPI+3
 21115  0045E0  2B66               	incf	ENC424J600_writeSPI@timeoutCounter& (0+255),f,b
 21116  0045E2  0E00               	movlw	0
 21117  0045E4  2367               	addwfc	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),f,b
 21118  0045E6  2368               	addwfc	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),f,b
 21119  0045E8  2369               	addwfc	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),f,b
 21120  0045EA  5165               	movf	(??_ENC424J600_writeSPI+3)& (0+255),w,b
 21121  0045EC  1164               	iorwf	(??_ENC424J600_writeSPI+2)& (0+255),w,b
 21122  0045EE  E105               	bnz	l7205
 21123  0045F0  2962               	incf	??_ENC424J600_writeSPI& (0+255),w,b
 21124  0045F2  0E0F               	movlw	15
 21125  0045F4  5963               	subwfb	(??_ENC424J600_writeSPI+1)& (0+255),w,b
 21126  0045F6  A0D8               	btfss	status,0,c
 21127  0045F8  D7E9               	goto	l230
 21128  0045FA                     u8000:
 21129  0045FA                     l7205:
 21130                           
 21131                           ; BSR set to: 0
 21132                           ;ENC424J600.c: 527: if (timeoutCounter >= 0xfff) {
 21133  0045FA  5169               	movf	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),w,b
 21134  0045FC  1168               	iorwf	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),w,b
 21135  0045FE  E105               	bnz	u8010
 21136  004600  2966               	incf	ENC424J600_writeSPI@timeoutCounter& (0+255),w,b
 21137  004602  0E0F               	movlw	15
 21138  004604  5967               	subwfb	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),w,b
 21139  004606  A0D8               	btfss	status,0,c
 21140  004608  0012               	return	
 21141  00460A                     u8010:
 21142                           
 21143                           ; BSR set to: 0
 21144                           ;ENC424J600.c: 528: PORTBbits.RB4=1;
 21145  00460A  8881               	bsf	3969,4,c	;volatile
 21146                           
 21147                           ; BSR set to: 0
 21148                           ;ENC424J600.c: 529: ENC424J600_initSPI();
 21149  00460C  ECF2  F026         	call	_ENC424J600_initSPI	;wreg free
 21150                           
 21151                           ;ENC424J600.c: 530: return;
 21152  004610  0012               	return	
 21153  004612                     __end_of_ENC424J600_writeSPI:
 21154                           	opt stack 0
 21155                           tblptru	equ	0xFF8
 21156                           tblptrh	equ	0xFF7
 21157                           tblptrl	equ	0xFF6
 21158                           tablat	equ	0xFF5
 21159                           prodh	equ	0xFF4
 21160                           prodl	equ	0xFF3
 21161                           intcon	equ	0xFF2
 21162                           intcon3	equ	0xFF0
 21163                           indf0	equ	0xFEF
 21164                           postinc0	equ	0xFEE
 21165                           plusw0	equ	0xFEB
 21166                           fsr0h	equ	0xFEA
 21167                           fsr0l	equ	0xFE9
 21168                           wreg	equ	0xFE8
 21169                           indf1	equ	0xFE7
 21170                           postinc1	equ	0xFE6
 21171                           postdec1	equ	0xFE5
 21172                           plusw1	equ	0xFE3
 21173                           fsr1h	equ	0xFE2
 21174                           fsr1l	equ	0xFE1
 21175                           indf2	equ	0xFDF
 21176                           postinc2	equ	0xFDE
 21177                           postdec2	equ	0xFDD
 21178                           plusw2	equ	0xFDB
 21179                           fsr2h	equ	0xFDA
 21180                           fsr2l	equ	0xFD9
 21181                           status	equ	0xFD8
 21182                           
 21183 ;; *************** function _ENC424J600_readSPI *****************
 21184 ;; Defined at:
 21185 ;;		line 534 in file "src/enc424j600/ENC424J600.c"
 21186 ;; Parameters:    Size  Location     Type
 21187 ;;  data            2    0[BANK0 ] PTR unsigned char 
 21188 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_getInterruptFlags@low(1), ENC424J600_getInterruptFlags@high(1)
      +, ENC424J600_disable@temp(1), 
 21189 ;;		 -> ENC424J600_enable@temp(1), ENC424J600_disableAutoMACInsertion@temp(1), ENC424J600_enableAutoMACInsertion@temp(1)
      +, ENC424J600_getPacketCount@lowByte(1), 
 21190 ;;		 -> ENC424J600_readPHYRegister@highByte(1), ENC424J600_readPHYRegister@lowByte(1), ENC424J600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 21191 ;;		 -> ethernetController_updateLinkStatus@temp(1), ethernetController_streamFromRXBuffer@temp(1), ethernetController_u
      +pdateNextPacketPointer@newPointerH(1), ethernetController_updateNextPacketPointer@newPointerL(1), 
 21192 ;;		 -> ethernetController_getRSV@temp(6), ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherT
      +ypeField@highByte(1), ethernetController_getSourceMACAddress@temp(1), 
 21193 ;;		 -> ethernetController_getDestinationMACAddress@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), et
      +hernetController_getSiliconRevision@data(1), 
 21194 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 21195 ;; Auto vars:     Size  Location     Type
 21196 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 21197 ;; Return value:  Size  Location     Type
 21198 ;;                  1    wreg      void 
 21199 ;; Registers used:
 21200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21201 ;; Tracked objects:
 21202 ;;		On entry : 0/0
 21203 ;;		On exit  : 0/0
 21204 ;;		Unchanged: 0/0
 21205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21206 ;;      Params:         0       2       0       0       0       0       0       0       0
 21207 ;;      Locals:         0       4       0       0       0       0       0       0       0
 21208 ;;      Temps:          0       4       0       0       0       0       0       0       0
 21209 ;;      Totals:         0      10       0       0       0       0       0       0       0
 21210 ;;Total ram usage:       10 bytes
 21211 ;; Hardware stack levels used:    1
 21212 ;; Hardware stack levels required when called:    5
 21213 ;; This function calls:
 21214 ;;		_ENC424J600_initSPI
 21215 ;; This function is called by:
 21216 ;;		_ethernetController_getSourceMACAddress
 21217 ;;		_ethernetController_getEtherTypeField
 21218 ;;		_ethernetController_getRSV
 21219 ;;		_ethernetController_updateNextPacketPointer
 21220 ;;		_ethernetController_streamFromRXBuffer
 21221 ;;		_ENC424J600_readControlRegisterUnbanked
 21222 ;;		_ethernetController_getDestinationMACAddress
 21223 ;; This function uses a non-reentrant model
 21224 ;;
 21225                           
 21226                           	psect	text93
 21227  004476                     __ptext93:
 21228                           	opt stack 0
 21229  004476                     _ENC424J600_readSPI:
 21230                           	opt stack 21
 21231                           
 21232                           ;ENC424J600.c: 536: uint32_t timeoutCounter = 0;
 21233                           
 21234                           ;incstack = 0
 21235  004476  0E00               	movlw	0
 21236  004478  0100               	movlb	0	; () banked
 21237  00447A  6F66               	movwf	ENC424J600_readSPI@timeoutCounter& (0+255),b
 21238  00447C  0E00               	movlw	0
 21239  00447E  6F67               	movwf	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),b
 21240  004480  0E00               	movlw	0
 21241  004482  6F68               	movwf	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),b
 21242  004484  0E00               	movlw	0
 21243  004486  6F69               	movwf	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),b
 21244                           
 21245                           ;ENC424J600.c: 537: SSP1BUF = 0x00;
 21246  004488  0E00               	movlw	0
 21247  00448A  6EC9               	movwf	4041,c	;volatile
 21248  00448C                     
 21249                           ; BSR set to: 0
 21250                           
 21251                           ; BSR set to: 0
 21252  00448C  B0C7               	btfsc	4039,0,c	;volatile
 21253  00448E  D015               	goto	u8430
 21254                           
 21255                           ; BSR set to: 0
 21256  004490  C066  F062         	movff	ENC424J600_readSPI@timeoutCounter,??_ENC424J600_readSPI
 21257  004494  C067  F063         	movff	ENC424J600_readSPI@timeoutCounter+1,??_ENC424J600_readSPI+1
 21258  004498  C068  F064         	movff	ENC424J600_readSPI@timeoutCounter+2,??_ENC424J600_readSPI+2
 21259  00449C  C069  F065         	movff	ENC424J600_readSPI@timeoutCounter+3,??_ENC424J600_readSPI+3
 21260  0044A0  2B66               	incf	ENC424J600_readSPI@timeoutCounter& (0+255),f,b
 21261  0044A2  0E00               	movlw	0
 21262  0044A4  2367               	addwfc	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),f,b
 21263  0044A6  2368               	addwfc	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),f,b
 21264  0044A8  2369               	addwfc	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),f,b
 21265  0044AA  5165               	movf	(??_ENC424J600_readSPI+3)& (0+255),w,b
 21266  0044AC  1164               	iorwf	(??_ENC424J600_readSPI+2)& (0+255),w,b
 21267  0044AE  E105               	bnz	l7479
 21268  0044B0  2962               	incf	??_ENC424J600_readSPI& (0+255),w,b
 21269  0044B2  0E0F               	movlw	15
 21270  0044B4  5963               	subwfb	(??_ENC424J600_readSPI+1)& (0+255),w,b
 21271  0044B6  A0D8               	btfss	status,0,c
 21272  0044B8  D7E9               	goto	l239
 21273  0044BA                     u8430:
 21274  0044BA                     l7479:
 21275                           
 21276                           ; BSR set to: 0
 21277                           ;ENC424J600.c: 539: if (timeoutCounter >= 0xfff) {
 21278  0044BA  5169               	movf	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),w,b
 21279  0044BC  1168               	iorwf	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),w,b
 21280  0044BE  E105               	bnz	u8440
 21281  0044C0  2966               	incf	ENC424J600_readSPI@timeoutCounter& (0+255),w,b
 21282  0044C2  0E0F               	movlw	15
 21283  0044C4  5967               	subwfb	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),w,b
 21284  0044C6  A0D8               	btfss	status,0,c
 21285  0044C8  D004               	goto	l243
 21286  0044CA                     u8440:
 21287                           
 21288                           ; BSR set to: 0
 21289                           ;ENC424J600.c: 540: PORTBbits.RB4=1;
 21290  0044CA  8881               	bsf	3969,4,c	;volatile
 21291                           
 21292                           ; BSR set to: 0
 21293                           ;ENC424J600.c: 541: ENC424J600_initSPI();
 21294  0044CC  ECF2  F026         	call	_ENC424J600_initSPI	;wreg free
 21295                           
 21296                           ;ENC424J600.c: 542: return;
 21297  0044D0  0012               	return	
 21298  0044D2                     l243:
 21299                           
 21300                           ;ENC424J600.c: 543: }
 21301                           ;ENC424J600.c: 544: *data = SSP1BUF;
 21302  0044D2  C060  FFD9         	movff	ENC424J600_readSPI@data,fsr2l
 21303  0044D6  C061  FFDA         	movff	ENC424J600_readSPI@data+1,fsr2h
 21304  0044DA  CFC9 FFDF          	movff	4041,indf2	;volatile
 21305  0044DE  0012               	return		;funcret
 21306  0044E0                     __end_of_ENC424J600_readSPI:
 21307                           	opt stack 0
 21308                           tblptru	equ	0xFF8
 21309                           tblptrh	equ	0xFF7
 21310                           tblptrl	equ	0xFF6
 21311                           tablat	equ	0xFF5
 21312                           prodh	equ	0xFF4
 21313                           prodl	equ	0xFF3
 21314                           intcon	equ	0xFF2
 21315                           intcon3	equ	0xFF0
 21316                           indf0	equ	0xFEF
 21317                           postinc0	equ	0xFEE
 21318                           plusw0	equ	0xFEB
 21319                           fsr0h	equ	0xFEA
 21320                           fsr0l	equ	0xFE9
 21321                           wreg	equ	0xFE8
 21322                           indf1	equ	0xFE7
 21323                           postinc1	equ	0xFE6
 21324                           postdec1	equ	0xFE5
 21325                           plusw1	equ	0xFE3
 21326                           fsr1h	equ	0xFE2
 21327                           fsr1l	equ	0xFE1
 21328                           indf2	equ	0xFDF
 21329                           postinc2	equ	0xFDE
 21330                           postdec2	equ	0xFDD
 21331                           plusw2	equ	0xFDB
 21332                           fsr2h	equ	0xFDA
 21333                           fsr2l	equ	0xFD9
 21334                           status	equ	0xFD8
 21335                           
 21336 ;; *************** function _ENC424J600_initSPI *****************
 21337 ;; Defined at:
 21338 ;;		line 504 in file "src/enc424j600/ENC424J600.c"
 21339 ;; Parameters:    Size  Location     Type
 21340 ;;		None
 21341 ;; Auto vars:     Size  Location     Type
 21342 ;;		None
 21343 ;; Return value:  Size  Location     Type
 21344 ;;                  1    wreg      void 
 21345 ;; Registers used:
 21346 ;;		None
 21347 ;; Tracked objects:
 21348 ;;		On entry : 0/0
 21349 ;;		On exit  : 0/0
 21350 ;;		Unchanged: 0/0
 21351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21352 ;;      Params:         0       0       0       0       0       0       0       0       0
 21353 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21354 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21355 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21356 ;;Total ram usage:        0 bytes
 21357 ;; Hardware stack levels used:    1
 21358 ;; Hardware stack levels required when called:    4
 21359 ;; This function calls:
 21360 ;;		Nothing
 21361 ;; This function is called by:
 21362 ;;		_ethernetController_init
 21363 ;;		_ENC424J600_writeSPI
 21364 ;;		_ENC424J600_readSPI
 21365 ;; This function uses a non-reentrant model
 21366 ;;
 21367                           
 21368                           	psect	text94
 21369  004DE4                     __ptext94:
 21370                           	opt stack 0
 21371  004DE4                     _ENC424J600_initSPI:
 21372                           	opt stack 22
 21373                           
 21374                           ;ENC424J600.c: 505: SSP1CON1bits.SSPEN = 0;
 21375                           
 21376                           ;incstack = 0
 21377  004DE4  9AC6               	bcf	4038,5,c	;volatile
 21378                           
 21379                           ;ENC424J600.c: 506: SSP1STATbits.CKE = 1;
 21380  004DE6  8CC7               	bsf	4039,6,c	;volatile
 21381                           
 21382                           ;ENC424J600.c: 508: TRISBbits.TRISB0 = 1;
 21383  004DE8  8093               	bsf	3987,0,c	;volatile
 21384                           
 21385                           ;ENC424J600.c: 509: ANSELBbits.ANSB0 = 0;
 21386  004DEA  010F               	movlb	15	; () banked
 21387  004DEC  915C               	bcf	92,0,b	;volatile
 21388                           
 21389                           ;ENC424J600.c: 510: TRISBbits.TRISB1 = 0;
 21390  004DEE  9293               	bcf	3987,1,c	;volatile
 21391                           
 21392                           ;ENC424J600.c: 511: ANSELBbits.ANSB1 = 0;
 21393  004DF0  935C               	bcf	92,1,b	;volatile
 21394                           
 21395                           ;ENC424J600.c: 512: TRISBbits.TRISB3 = 0;
 21396  004DF2  9693               	bcf	3987,3,c	;volatile
 21397                           
 21398                           ;ENC424J600.c: 513: ANSELBbits.ANSB3 = 0;
 21399  004DF4  975C               	bcf	92,3,b	;volatile
 21400                           
 21401                           ;ENC424J600.c: 514: TRISBbits.TRISB4 = 0;
 21402  004DF6  9893               	bcf	3987,4,c	;volatile
 21403                           
 21404                           ;ENC424J600.c: 515: ANSELBbits.ANSB4 = 0;
 21405  004DF8  995C               	bcf	92,4,b	;volatile
 21406                           
 21407                           ;ENC424J600.c: 516: PORTBbits.RB4=1;
 21408  004DFA  8881               	bsf	3969,4,c	;volatile
 21409                           
 21410                           ;ENC424J600.c: 517: SSP1CON1bits.SSPEN = 1;
 21411  004DFC  8AC6               	bsf	4038,5,c	;volatile
 21412                           
 21413                           ; BSR set to: 15
 21414  004DFE  0012               	return		;funcret
 21415  004E00                     __end_of_ENC424J600_initSPI:
 21416                           	opt stack 0
 21417                           tblptru	equ	0xFF8
 21418                           tblptrh	equ	0xFF7
 21419                           tblptrl	equ	0xFF6
 21420                           tablat	equ	0xFF5
 21421                           prodh	equ	0xFF4
 21422                           prodl	equ	0xFF3
 21423                           intcon	equ	0xFF2
 21424                           intcon3	equ	0xFF0
 21425                           indf0	equ	0xFEF
 21426                           postinc0	equ	0xFEE
 21427                           plusw0	equ	0xFEB
 21428                           fsr0h	equ	0xFEA
 21429                           fsr0l	equ	0xFE9
 21430                           wreg	equ	0xFE8
 21431                           indf1	equ	0xFE7
 21432                           postinc1	equ	0xFE6
 21433                           postdec1	equ	0xFE5
 21434                           plusw1	equ	0xFE3
 21435                           fsr1h	equ	0xFE2
 21436                           fsr1l	equ	0xFE1
 21437                           indf2	equ	0xFDF
 21438                           postinc2	equ	0xFDE
 21439                           postdec2	equ	0xFDD
 21440                           plusw2	equ	0xFDB
 21441                           fsr2h	equ	0xFDA
 21442                           fsr2l	equ	0xFD9
 21443                           status	equ	0xFD8
 21444                           
 21445 ;; *************** function _UARTInit *****************
 21446 ;; Defined at:
 21447 ;;		line 26 in file "src/system/uart.c"
 21448 ;; Parameters:    Size  Location     Type
 21449 ;;		None
 21450 ;; Auto vars:     Size  Location     Type
 21451 ;;		None
 21452 ;; Return value:  Size  Location     Type
 21453 ;;                  1    wreg      void 
 21454 ;; Registers used:
 21455 ;;		wreg, status,2
 21456 ;; Tracked objects:
 21457 ;;		On entry : 0/0
 21458 ;;		On exit  : 0/0
 21459 ;;		Unchanged: 0/0
 21460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21461 ;;      Params:         0       0       0       0       0       0       0       0       0
 21462 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21463 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21464 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21465 ;;Total ram usage:        0 bytes
 21466 ;; Hardware stack levels used:    1
 21467 ;; Hardware stack levels required when called:    4
 21468 ;; This function calls:
 21469 ;;		Nothing
 21470 ;; This function is called by:
 21471 ;;		_main
 21472 ;; This function uses a non-reentrant model
 21473 ;;
 21474                           
 21475                           	psect	text95
 21476  004EA4                     __ptext95:
 21477                           	opt stack 0
 21478  004EA4                     _UARTInit:
 21479                           	opt stack 26
 21480                           
 21481                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 21482                           
 21483                           ; BSR set to: 15
 21484                           ;incstack = 0
 21485  004EA4  8AAC               	bsf	4012,5,c	;volatile
 21486                           
 21487                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 21488  004EA6  98AC               	bcf	4012,4,c	;volatile
 21489                           
 21490                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 21491  004EA8  8EAB               	bsf	4011,7,c	;volatile
 21492                           
 21493                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 21494  004EAA  8CAC               	bsf	4012,6,c	;volatile
 21495                           
 21496                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 21497  004EAC  80AC               	bsf	4012,0,c	;volatile
 21498                           
 21499                           ;uart.c: 32: SPBRG = 3;
 21500  004EAE  0E03               	movlw	3
 21501  004EB0  6EAF               	movwf	4015,c	;volatile
 21502  004EB2  0012               	return		;funcret
 21503  004EB4                     __end_of_UARTInit:
 21504                           	opt stack 0
 21505                           tblptru	equ	0xFF8
 21506                           tblptrh	equ	0xFF7
 21507                           tblptrl	equ	0xFF6
 21508                           tablat	equ	0xFF5
 21509                           prodh	equ	0xFF4
 21510                           prodl	equ	0xFF3
 21511                           intcon	equ	0xFF2
 21512                           intcon3	equ	0xFF0
 21513                           indf0	equ	0xFEF
 21514                           postinc0	equ	0xFEE
 21515                           plusw0	equ	0xFEB
 21516                           fsr0h	equ	0xFEA
 21517                           fsr0l	equ	0xFE9
 21518                           wreg	equ	0xFE8
 21519                           indf1	equ	0xFE7
 21520                           postinc1	equ	0xFE6
 21521                           postdec1	equ	0xFE5
 21522                           plusw1	equ	0xFE3
 21523                           fsr1h	equ	0xFE2
 21524                           fsr1l	equ	0xFE1
 21525                           indf2	equ	0xFDF
 21526                           postinc2	equ	0xFDE
 21527                           postdec2	equ	0xFDD
 21528                           plusw2	equ	0xFDB
 21529                           fsr2h	equ	0xFDA
 21530                           fsr2l	equ	0xFD9
 21531                           status	equ	0xFD8
 21532                           
 21533 ;; *************** function _ARP_initTable *****************
 21534 ;; Defined at:
 21535 ;;		line 307 in file "src/stack/protocols/arp.c"
 21536 ;; Parameters:    Size  Location     Type
 21537 ;;		None
 21538 ;; Auto vars:     Size  Location     Type
 21539 ;;  i               1   38[BANK0 ] unsigned char 
 21540 ;;  mac             6   28[BANK0 ] struct macaddress
 21541 ;;  ip              4   34[BANK0 ] struct ipv4_address
 21542 ;; Return value:  Size  Location     Type
 21543 ;;                  1    wreg      void 
 21544 ;; Registers used:
 21545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21546 ;; Tracked objects:
 21547 ;;		On entry : 0/0
 21548 ;;		On exit  : 0/0
 21549 ;;		Unchanged: 0/0
 21550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21551 ;;      Params:         0       0       0       0       0       0       0       0       0
 21552 ;;      Locals:         0      11       0       0       0       0       0       0       0
 21553 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21554 ;;      Totals:         0      11       0       0       0       0       0       0       0
 21555 ;;Total ram usage:       11 bytes
 21556 ;; Hardware stack levels used:    1
 21557 ;; Hardware stack levels required when called:    5
 21558 ;; This function calls:
 21559 ;;		_ARP_setNewEntry
 21560 ;;		_ipv4_setToAllZero
 21561 ;;		_mac_setAllZero
 21562 ;; This function is called by:
 21563 ;;		_main
 21564 ;; This function uses a non-reentrant model
 21565 ;;
 21566                           
 21567                           	psect	text96
 21568  004548                     __ptext96:
 21569                           	opt stack 0
 21570  004548                     _ARP_initTable:
 21571                           	opt stack 25
 21572                           
 21573                           ;arp.c: 308: macaddress_t mac;
 21574                           ;arp.c: 309: ipv4_address_t ip;
 21575                           ;arp.c: 310: mac_setAllZero(&mac);
 21576                           
 21577                           ;incstack = 0
 21578  004548  0E7C               	movlw	low ARP_initTable@mac
 21579  00454A  0100               	movlb	0	; () banked
 21580  00454C  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 21581  00454E  0E00               	movlw	high ARP_initTable@mac
 21582  004550  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 21583  004552  EC6B  F026         	call	_mac_setAllZero	;wreg free
 21584                           
 21585                           ;arp.c: 311: ipv4_setToAllZero(&ip);
 21586  004556  0E82               	movlw	low ARP_initTable@ip
 21587  004558  0100               	movlb	0	; () banked
 21588  00455A  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 21589  00455C  0E00               	movlw	high ARP_initTable@ip
 21590  00455E  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 21591  004560  ECE3  F026         	call	_ipv4_setToAllZero	;wreg free
 21592                           
 21593                           ;arp.c: 312: for (uint8_t i = 0; i < 8; i++)
 21594  004564  0E00               	movlw	0
 21595  004566  0100               	movlb	0	; () banked
 21596  004568  6F86               	movwf	ARP_initTable@i& (0+255),b
 21597  00456A                     l9261:
 21598                           
 21599                           ; BSR set to: 0
 21600  00456A  0E07               	movlw	7
 21601  00456C  6586               	cpfsgt	ARP_initTable@i& (0+255),b
 21602  00456E  D001               	goto	l983
 21603  004570  0012               	return	
 21604  004572                     l983:
 21605                           
 21606                           ; BSR set to: 0
 21607                           ;arp.c: 313: ARP_setNewEntry(mac, ip, 0xffffffff);
 21608                           
 21609                           ; BSR set to: 0
 21610  004572  EE20  F07C         	lfsr	2,ARP_initTable@mac
 21611  004576  EE00  F064         	lfsr	0,ARP_setNewEntry@mac
 21612  00457A  0E05               	movlw	5
 21613  00457C                     u11371:
 21614  00457C  CFDB FFEB          	movff	plusw2,plusw0
 21615  004580  06E8               	decf	wreg,f,c
 21616  004582  E2FC               	bc	u11371
 21617  004584  C082  F06A         	movff	ARP_initTable@ip,ARP_setNewEntry@ip
 21618  004588  C083  F06B         	movff	ARP_initTable@ip+1,ARP_setNewEntry@ip+1
 21619  00458C  C084  F06C         	movff	ARP_initTable@ip+2,ARP_setNewEntry@ip+2
 21620  004590  C085  F06D         	movff	ARP_initTable@ip+3,ARP_setNewEntry@ip+3
 21621  004594  0EFF               	movlw	255
 21622  004596  6F6E               	movwf	ARP_setNewEntry@timestamp& (0+255),b
 21623  004598  0EFF               	movlw	255
 21624  00459A  6F6F               	movwf	(ARP_setNewEntry@timestamp+1)& (0+255),b
 21625  00459C  0EFF               	movlw	255
 21626  00459E  6F70               	movwf	(ARP_setNewEntry@timestamp+2)& (0+255),b
 21627  0045A0  0EFF               	movlw	255
 21628  0045A2  6F71               	movwf	(ARP_setNewEntry@timestamp+3)& (0+255),b
 21629  0045A4  ECE7  F01A         	call	_ARP_setNewEntry	;wreg free
 21630  0045A8  0100               	movlb	0	; () banked
 21631  0045AA  2B86               	incf	ARP_initTable@i& (0+255),f,b
 21632  0045AC  D7DE               	goto	l9261
 21633  0045AE                     __end_of_ARP_initTable:
 21634                           	opt stack 0
 21635                           tblptru	equ	0xFF8
 21636                           tblptrh	equ	0xFF7
 21637                           tblptrl	equ	0xFF6
 21638                           tablat	equ	0xFF5
 21639                           prodh	equ	0xFF4
 21640                           prodl	equ	0xFF3
 21641                           intcon	equ	0xFF2
 21642                           intcon3	equ	0xFF0
 21643                           indf0	equ	0xFEF
 21644                           postinc0	equ	0xFEE
 21645                           plusw0	equ	0xFEB
 21646                           fsr0h	equ	0xFEA
 21647                           fsr0l	equ	0xFE9
 21648                           wreg	equ	0xFE8
 21649                           indf1	equ	0xFE7
 21650                           postinc1	equ	0xFE6
 21651                           postdec1	equ	0xFE5
 21652                           plusw1	equ	0xFE3
 21653                           fsr1h	equ	0xFE2
 21654                           fsr1l	equ	0xFE1
 21655                           indf2	equ	0xFDF
 21656                           postinc2	equ	0xFDE
 21657                           postdec2	equ	0xFDD
 21658                           plusw2	equ	0xFDB
 21659                           fsr2h	equ	0xFDA
 21660                           fsr2l	equ	0xFD9
 21661                           status	equ	0xFD8
 21662                           
 21663 ;; *************** function _mac_setAllZero *****************
 21664 ;; Defined at:
 21665 ;;		line 47 in file "src/eth/mac.c"
 21666 ;; Parameters:    Size  Location     Type
 21667 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 21668 ;;		 -> ARP_initTable@mac(6), ARP_sendRequest@targetMAC(6), 
 21669 ;; Auto vars:     Size  Location     Type
 21670 ;;  i               1    2[BANK0 ] unsigned char 
 21671 ;; Return value:  Size  Location     Type
 21672 ;;                  1    wreg      void 
 21673 ;; Registers used:
 21674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21675 ;; Tracked objects:
 21676 ;;		On entry : 0/0
 21677 ;;		On exit  : 0/0
 21678 ;;		Unchanged: 0/0
 21679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21680 ;;      Params:         0       2       0       0       0       0       0       0       0
 21681 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21682 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21683 ;;      Totals:         0       3       0       0       0       0       0       0       0
 21684 ;;Total ram usage:        3 bytes
 21685 ;; Hardware stack levels used:    1
 21686 ;; Hardware stack levels required when called:    4
 21687 ;; This function calls:
 21688 ;;		Nothing
 21689 ;; This function is called by:
 21690 ;;		_ARP_sendRequest
 21691 ;;		_ARP_initTable
 21692 ;; This function uses a non-reentrant model
 21693 ;;
 21694                           
 21695                           	psect	text97
 21696  004CD6                     __ptext97:
 21697                           	opt stack 0
 21698  004CD6                     _mac_setAllZero:
 21699                           	opt stack 23
 21700                           
 21701                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 21702                           
 21703                           ; BSR set to: 0
 21704                           ;incstack = 0
 21705  004CD6  0E00               	movlw	0
 21706  004CD8  0100               	movlb	0	; () banked
 21707  004CDA  6F62               	movwf	mac_setAllZero@i& (0+255),b
 21708  004CDC                     l8243:
 21709                           
 21710                           ; BSR set to: 0
 21711  004CDC  0E05               	movlw	5
 21712  004CDE  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 21713  004CE0  D001               	goto	l394
 21714  004CE2  0012               	return	
 21715  004CE4                     l394:
 21716                           
 21717                           ; BSR set to: 0
 21718                           ;mac.c: 49: mac->address[i] = 0x00;
 21719                           
 21720                           ; BSR set to: 0
 21721  004CE4  5162               	movf	mac_setAllZero@i& (0+255),w,b
 21722  004CE6  0D01               	mullw	1
 21723  004CE8  50F3               	movf	prodl,w,c
 21724  004CEA  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 21725  004CEC  6ED9               	movwf	fsr2l,c
 21726  004CEE  50F4               	movf	prodh,w,c
 21727  004CF0  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 21728  004CF2  6EDA               	movwf	fsr2h,c
 21729  004CF4  0E00               	movlw	0
 21730  004CF6  6EDF               	movwf	indf2,c
 21731                           
 21732                           ; BSR set to: 0
 21733  004CF8  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 21734  004CFA  D7F0               	goto	l8243
 21735  004CFC                     __end_of_mac_setAllZero:
 21736                           	opt stack 0
 21737                           tblptru	equ	0xFF8
 21738                           tblptrh	equ	0xFF7
 21739                           tblptrl	equ	0xFF6
 21740                           tablat	equ	0xFF5
 21741                           prodh	equ	0xFF4
 21742                           prodl	equ	0xFF3
 21743                           intcon	equ	0xFF2
 21744                           intcon3	equ	0xFF0
 21745                           indf0	equ	0xFEF
 21746                           postinc0	equ	0xFEE
 21747                           plusw0	equ	0xFEB
 21748                           fsr0h	equ	0xFEA
 21749                           fsr0l	equ	0xFE9
 21750                           wreg	equ	0xFE8
 21751                           indf1	equ	0xFE7
 21752                           postinc1	equ	0xFE6
 21753                           postdec1	equ	0xFE5
 21754                           plusw1	equ	0xFE3
 21755                           fsr1h	equ	0xFE2
 21756                           fsr1l	equ	0xFE1
 21757                           indf2	equ	0xFDF
 21758                           postinc2	equ	0xFDE
 21759                           postdec2	equ	0xFDD
 21760                           plusw2	equ	0xFDB
 21761                           fsr2h	equ	0xFDA
 21762                           fsr2l	equ	0xFD9
 21763                           status	equ	0xFD8
 21764                           
 21765 ;; *************** function _ipv4_setToAllZero *****************
 21766 ;; Defined at:
 21767 ;;		line 276 in file "src/stack/protocols/ipv4.c"
 21768 ;; Parameters:    Size  Location     Type
 21769 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 21770 ;;		 -> ARP_initTable@ip(4), ARP_probe@ipSender(4), 
 21771 ;; Auto vars:     Size  Location     Type
 21772 ;;  i               1    2[BANK0 ] unsigned char 
 21773 ;; Return value:  Size  Location     Type
 21774 ;;                  1    wreg      void 
 21775 ;; Registers used:
 21776 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21777 ;; Tracked objects:
 21778 ;;		On entry : 0/0
 21779 ;;		On exit  : 0/0
 21780 ;;		Unchanged: 0/0
 21781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21782 ;;      Params:         0       2       0       0       0       0       0       0       0
 21783 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21784 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21785 ;;      Totals:         0       3       0       0       0       0       0       0       0
 21786 ;;Total ram usage:        3 bytes
 21787 ;; Hardware stack levels used:    1
 21788 ;; Hardware stack levels required when called:    4
 21789 ;; This function calls:
 21790 ;;		Nothing
 21791 ;; This function is called by:
 21792 ;;		_ARP_initTable
 21793 ;;		_ARP_probe
 21794 ;; This function uses a non-reentrant model
 21795 ;;
 21796                           
 21797                           	psect	text98
 21798  004DC6                     __ptext98:
 21799                           	opt stack 0
 21800  004DC6                     _ipv4_setToAllZero:
 21801                           	opt stack 25
 21802                           
 21803                           ;ipv4.c: 277: for (uint8_t i = 0; i < 4; i++) {
 21804                           
 21805                           ; BSR set to: 0
 21806                           ;incstack = 0
 21807  004DC6  0E00               	movlw	0
 21808  004DC8  0100               	movlb	0	; () banked
 21809  004DCA  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 21810  004DCC                     l9105:
 21811                           
 21812                           ; BSR set to: 0
 21813  004DCC  0E03               	movlw	3
 21814  004DCE  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 21815  004DD0  D001               	goto	l1107
 21816  004DD2  0012               	return	
 21817  004DD4                     l1107:
 21818                           
 21819                           ; BSR set to: 0
 21820                           ;ipv4.c: 278: ip->address[0] = 0x00;
 21821                           
 21822                           ; BSR set to: 0
 21823  004DD4  C060  FFD9         	movff	ipv4_setToAllZero@ip,fsr2l
 21824  004DD8  C061  FFDA         	movff	ipv4_setToAllZero@ip+1,fsr2h
 21825  004DDC  0E00               	movlw	0
 21826  004DDE  6EDF               	movwf	indf2,c
 21827                           
 21828                           ; BSR set to: 0
 21829  004DE0  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 21830  004DE2  D7F4               	goto	l9105
 21831  004DE4                     __end_of_ipv4_setToAllZero:
 21832                           	opt stack 0
 21833                           tblptru	equ	0xFF8
 21834                           tblptrh	equ	0xFF7
 21835                           tblptrl	equ	0xFF6
 21836                           tablat	equ	0xFF5
 21837                           prodh	equ	0xFF4
 21838                           prodl	equ	0xFF3
 21839                           intcon	equ	0xFF2
 21840                           intcon3	equ	0xFF0
 21841                           indf0	equ	0xFEF
 21842                           postinc0	equ	0xFEE
 21843                           plusw0	equ	0xFEB
 21844                           fsr0h	equ	0xFEA
 21845                           fsr0l	equ	0xFE9
 21846                           wreg	equ	0xFE8
 21847                           indf1	equ	0xFE7
 21848                           postinc1	equ	0xFE6
 21849                           postdec1	equ	0xFE5
 21850                           plusw1	equ	0xFE3
 21851                           fsr1h	equ	0xFE2
 21852                           fsr1l	equ	0xFE1
 21853                           indf2	equ	0xFDF
 21854                           postinc2	equ	0xFDE
 21855                           postdec2	equ	0xFDD
 21856                           plusw2	equ	0xFDB
 21857                           fsr2h	equ	0xFDA
 21858                           fsr2l	equ	0xFD9
 21859                           status	equ	0xFD8
 21860                           
 21861 ;; *************** function _ARP_setNewEntry *****************
 21862 ;; Defined at:
 21863 ;;		line 291 in file "src/stack/protocols/arp.c"
 21864 ;; Parameters:    Size  Location     Type
 21865 ;;  mac             6    4[BANK0 ] struct macaddress
 21866 ;;  ip              4   10[BANK0 ] struct ipv4_address
 21867 ;;  timestamp       4   14[BANK0 ] unsigned long 
 21868 ;; Auto vars:     Size  Location     Type
 21869 ;;  i               1   27[BANK0 ] unsigned char 
 21870 ;;  maxSeconds      4   22[BANK0 ] unsigned long 
 21871 ;;  oldestIndex     1   26[BANK0 ] unsigned char 
 21872 ;; Return value:  Size  Location     Type
 21873 ;;                  1    wreg      void 
 21874 ;; Registers used:
 21875 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21876 ;; Tracked objects:
 21877 ;;		On entry : 0/0
 21878 ;;		On exit  : 0/0
 21879 ;;		Unchanged: 0/0
 21880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21881 ;;      Params:         0      14       0       0       0       0       0       0       0
 21882 ;;      Locals:         0       6       0       0       0       0       0       0       0
 21883 ;;      Temps:          0       4       0       0       0       0       0       0       0
 21884 ;;      Totals:         0      24       0       0       0       0       0       0       0
 21885 ;;Total ram usage:       24 bytes
 21886 ;; Hardware stack levels used:    1
 21887 ;; Hardware stack levels required when called:    4
 21888 ;; This function calls:
 21889 ;;		Nothing
 21890 ;; This function is called by:
 21891 ;;		_ARP_handleNewPacket
 21892 ;;		_ARP_initTable
 21893 ;; This function uses a non-reentrant model
 21894 ;;
 21895                           
 21896                           	psect	text99
 21897  0035CE                     __ptext99:
 21898                           	opt stack 0
 21899  0035CE                     _ARP_setNewEntry:
 21900                           	opt stack 23
 21901                           
 21902                           ;arp.c: 292: uint32_t maxSeconds = 0;
 21903                           
 21904                           ; BSR set to: 0
 21905                           ;incstack = 0
 21906  0035CE  0E00               	movlw	0
 21907  0035D0  0100               	movlb	0	; () banked
 21908  0035D2  6F76               	movwf	ARP_setNewEntry@maxSeconds& (0+255),b
 21909  0035D4  0E00               	movlw	0
 21910  0035D6  6F77               	movwf	(ARP_setNewEntry@maxSeconds+1)& (0+255),b
 21911  0035D8  0E00               	movlw	0
 21912  0035DA  6F78               	movwf	(ARP_setNewEntry@maxSeconds+2)& (0+255),b
 21913  0035DC  0E00               	movlw	0
 21914  0035DE  6F79               	movwf	(ARP_setNewEntry@maxSeconds+3)& (0+255),b
 21915                           
 21916                           ;arp.c: 293: uint8_t oldestIndex = 0;
 21917  0035E0  0E00               	movlw	0
 21918  0035E2  6F7A               	movwf	ARP_setNewEntry@oldestIndex& (0+255),b
 21919                           
 21920                           ;arp.c: 295: for (uint8_t i = 0; i < 8; i++) {
 21921  0035E4  0E00               	movlw	0
 21922  0035E6  6F7B               	movwf	ARP_setNewEntry@i& (0+255),b
 21923  0035E8                     l8417:
 21924                           
 21925                           ; BSR set to: 0
 21926  0035E8  0E07               	movlw	7
 21927  0035EA  657B               	cpfsgt	ARP_setNewEntry@i& (0+255),b
 21928  0035EC  D001               	goto	l977
 21929  0035EE  D02E               	goto	u10340
 21930  0035F0                     l977:
 21931                           
 21932                           ; BSR set to: 0
 21933                           ;arp.c: 296: if (ARP_table[i].timeCreated > maxSeconds) {
 21934                           
 21935                           ; BSR set to: 0
 21936  0035F0  517B               	movf	ARP_setNewEntry@i& (0+255),w,b
 21937  0035F2  0D0E               	mullw	14
 21938  0035F4  0E0A               	movlw	10
 21939  0035F6  26F3               	addwf	prodl,f,c
 21940  0035F8  0E00               	movlw	0
 21941  0035FA  22F4               	addwfc	prodh,f,c
 21942  0035FC  0E00               	movlw	low _ARP_table
 21943  0035FE  24F3               	addwf	prodl,w,c
 21944  003600  6ED9               	movwf	fsr2l,c
 21945  003602  0E03               	movlw	high _ARP_table
 21946  003604  20F4               	addwfc	prodh,w,c
 21947  003606  6EDA               	movwf	fsr2h,c
 21948  003608  50DE               	movf	postinc2,w,c
 21949  00360A  5D76               	subwf	ARP_setNewEntry@maxSeconds& (0+255),w,b
 21950  00360C  50DE               	movf	postinc2,w,c
 21951  00360E  5977               	subwfb	(ARP_setNewEntry@maxSeconds+1)& (0+255),w,b
 21952  003610  50DE               	movf	postinc2,w,c
 21953  003612  5978               	subwfb	(ARP_setNewEntry@maxSeconds+2)& (0+255),w,b
 21954  003614  50DE               	movf	postinc2,w,c
 21955  003616  5979               	subwfb	(ARP_setNewEntry@maxSeconds+3)& (0+255),w,b
 21956  003618  B0D8               	btfsc	status,0,c
 21957  00361A  D016               	goto	l979
 21958                           
 21959                           ; BSR set to: 0
 21960                           ;arp.c: 297: maxSeconds = ARP_table[i].timeCreated;
 21961  00361C  517B               	movf	ARP_setNewEntry@i& (0+255),w,b
 21962  00361E  0D0E               	mullw	14
 21963  003620  0E0A               	movlw	10
 21964  003622  26F3               	addwf	prodl,f,c
 21965  003624  0E00               	movlw	0
 21966  003626  22F4               	addwfc	prodh,f,c
 21967  003628  0E00               	movlw	low _ARP_table
 21968  00362A  24F3               	addwf	prodl,w,c
 21969  00362C  6ED9               	movwf	fsr2l,c
 21970  00362E  0E03               	movlw	high _ARP_table
 21971  003630  20F4               	addwfc	prodh,w,c
 21972  003632  6EDA               	movwf	fsr2h,c
 21973  003634  CFDE F076          	movff	postinc2,ARP_setNewEntry@maxSeconds
 21974  003638  CFDE F077          	movff	postinc2,ARP_setNewEntry@maxSeconds+1
 21975  00363C  CFDE F078          	movff	postinc2,ARP_setNewEntry@maxSeconds+2
 21976  003640  CFDE F079          	movff	postinc2,ARP_setNewEntry@maxSeconds+3
 21977                           
 21978                           ; BSR set to: 0
 21979                           ;arp.c: 298: oldestIndex = i;
 21980  003644  C07B  F07A         	movff	ARP_setNewEntry@i,ARP_setNewEntry@oldestIndex
 21981  003648                     l979:
 21982                           
 21983                           ; BSR set to: 0
 21984                           
 21985                           ; BSR set to: 0
 21986  003648  2B7B               	incf	ARP_setNewEntry@i& (0+255),f,b
 21987  00364A  D7CE               	goto	l8417
 21988  00364C                     u10340:
 21989                           
 21990                           ; BSR set to: 0
 21991                           ;arp.c: 299: }
 21992                           ;arp.c: 300: }
 21993                           ;arp.c: 302: ARP_table[oldestIndex].ip = ip;
 21994                           
 21995                           ; BSR set to: 0
 21996  00364C  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 21997  00364E  0D0E               	mullw	14
 21998  003650  0E00               	movlw	low _ARP_table
 21999  003652  24F3               	addwf	prodl,w,c
 22000  003654  6ED9               	movwf	fsr2l,c
 22001  003656  0E03               	movlw	high _ARP_table
 22002  003658  20F4               	addwfc	prodh,w,c
 22003  00365A  6EDA               	movwf	fsr2h,c
 22004  00365C  C06A  FFDE         	movff	ARP_setNewEntry@ip,postinc2
 22005  003660  C06B  FFDE         	movff	ARP_setNewEntry@ip+1,postinc2
 22006  003664  C06C  FFDE         	movff	ARP_setNewEntry@ip+2,postinc2
 22007  003668  C06D  FFDE         	movff	ARP_setNewEntry@ip+3,postinc2
 22008                           
 22009                           ; BSR set to: 0
 22010                           ;arp.c: 303: ARP_table[oldestIndex].mac = mac;
 22011  00366C  EE20  F064         	lfsr	2,ARP_setNewEntry@mac
 22012  003670  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 22013  003672  0D0E               	mullw	14
 22014  003674  0E04               	movlw	4
 22015  003676  26F3               	addwf	prodl,f,c
 22016  003678  0E00               	movlw	0
 22017  00367A  22F4               	addwfc	prodh,f,c
 22018  00367C  0E00               	movlw	low _ARP_table
 22019  00367E  24F3               	addwf	prodl,w,c
 22020  003680  6EE1               	movwf	fsr1l,c
 22021  003682  0E03               	movlw	high _ARP_table
 22022  003684  20F4               	addwfc	prodh,w,c
 22023  003686  6EE2               	movwf	fsr1h,c
 22024  003688  0E05               	movlw	5
 22025  00368A                     u10351:
 22026  00368A  CFDB FFE3          	movff	plusw2,plusw1
 22027  00368E  06E8               	decf	wreg,f,c
 22028  003690  E2FC               	bc	u10351
 22029                           
 22030                           ; BSR set to: 0
 22031                           ;arp.c: 304: ARP_table[oldestIndex].timeCreated = timestamp;
 22032  003692  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 22033  003694  0D0E               	mullw	14
 22034  003696  0E0A               	movlw	10
 22035  003698  26F3               	addwf	prodl,f,c
 22036  00369A  0E00               	movlw	0
 22037  00369C  22F4               	addwfc	prodh,f,c
 22038  00369E  0E00               	movlw	low _ARP_table
 22039  0036A0  24F3               	addwf	prodl,w,c
 22040  0036A2  6ED9               	movwf	fsr2l,c
 22041  0036A4  0E03               	movlw	high _ARP_table
 22042  0036A6  20F4               	addwfc	prodh,w,c
 22043  0036A8  6EDA               	movwf	fsr2h,c
 22044  0036AA  C06E  FFDE         	movff	ARP_setNewEntry@timestamp,postinc2
 22045  0036AE  C06F  FFDE         	movff	ARP_setNewEntry@timestamp+1,postinc2
 22046  0036B2  C070  FFDE         	movff	ARP_setNewEntry@timestamp+2,postinc2
 22047  0036B6  C071  FFDE         	movff	ARP_setNewEntry@timestamp+3,postinc2
 22048                           
 22049                           ; BSR set to: 0
 22050  0036BA  0012               	return		;funcret
 22051  0036BC                     __end_of_ARP_setNewEntry:
 22052                           	opt stack 0
 22053                           tblptru	equ	0xFF8
 22054                           tblptrh	equ	0xFF7
 22055                           tblptrl	equ	0xFF6
 22056                           tablat	equ	0xFF5
 22057                           prodh	equ	0xFF4
 22058                           prodl	equ	0xFF3
 22059                           intcon	equ	0xFF2
 22060                           intcon3	equ	0xFF0
 22061                           indf0	equ	0xFEF
 22062                           postinc0	equ	0xFEE
 22063                           plusw0	equ	0xFEB
 22064                           fsr0h	equ	0xFEA
 22065                           fsr0l	equ	0xFE9
 22066                           wreg	equ	0xFE8
 22067                           indf1	equ	0xFE7
 22068                           postinc1	equ	0xFE6
 22069                           postdec1	equ	0xFE5
 22070                           plusw1	equ	0xFE3
 22071                           fsr1h	equ	0xFE2
 22072                           fsr1l	equ	0xFE1
 22073                           indf2	equ	0xFDF
 22074                           postinc2	equ	0xFDE
 22075                           postdec2	equ	0xFDD
 22076                           plusw2	equ	0xFDB
 22077                           fsr2h	equ	0xFDA
 22078                           fsr2l	equ	0xFD9
 22079                           status	equ	0xFD8
 22080                           
 22081 ;; *************** function _ISR *****************
 22082 ;; Defined at:
 22083 ;;		line 270 in file "src/system/main.c"
 22084 ;; Parameters:    Size  Location     Type
 22085 ;;		None
 22086 ;; Auto vars:     Size  Location     Type
 22087 ;;		None
 22088 ;; Return value:  Size  Location     Type
 22089 ;;                  1    wreg      void 
 22090 ;; Registers used:
 22091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22092 ;; Tracked objects:
 22093 ;;		On entry : 0/0
 22094 ;;		On exit  : 0/0
 22095 ;;		Unchanged: 0/0
 22096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22097 ;;      Params:         0       0       0       0       0       0       0       0       0
 22098 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22099 ;;      Temps:         19       0       0       0       0       0       0       0       0
 22100 ;;      Totals:        19       0       0       0       0       0       0       0       0
 22101 ;;Total ram usage:       19 bytes
 22102 ;; Hardware stack levels used:    1
 22103 ;; Hardware stack levels required when called:    3
 22104 ;; This function calls:
 22105 ;;		_buttonHandler
 22106 ;;		_sevenSegmentUpdate
 22107 ;;		_updateTime
 22108 ;; This function is called by:
 22109 ;;		Interrupt level 2
 22110 ;; This function uses a non-reentrant model
 22111 ;;
 22112                           
 22113                           	psect	intcode
 22114  000008                     __pintcode:
 22115                           	opt stack 0
 22116  000008                     _ISR:
 22117                           	opt stack 17
 22118                           
 22119                           ; BSR set to: 0
 22120                           ;incstack = 0
 22121  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22122  00000A  CFFA F017          	movff	pclath,??_ISR+1
 22123  00000E  CFFB F018          	movff	pclatu,??_ISR+2
 22124  000012  CFE9 F019          	movff	fsr0l,??_ISR+3
 22125  000016  CFEA F01A          	movff	fsr0h,??_ISR+4
 22126  00001A  CFE1 F01B          	movff	fsr1l,??_ISR+5
 22127  00001E  CFE2 F01C          	movff	fsr1h,??_ISR+6
 22128  000022  CFD9 F01D          	movff	fsr2l,??_ISR+7
 22129  000026  CFDA F01E          	movff	fsr2h,??_ISR+8
 22130  00002A  CFF3 F01F          	movff	prodl,??_ISR+9
 22131  00002E  CFF4 F020          	movff	prodh,??_ISR+10
 22132  000032  CFF6 F021          	movff	tblptrl,??_ISR+11
 22133  000036  CFF7 F022          	movff	tblptrh,??_ISR+12
 22134  00003A  CFF8 F023          	movff	tblptru,??_ISR+13
 22135  00003E  CFF5 F024          	movff	tablat,??_ISR+14
 22136  000042  C04F  F025         	movff	btemp,??_ISR+15
 22137  000046  C050  F026         	movff	btemp+1,??_ISR+16
 22138  00004A  C051  F027         	movff	btemp+2,??_ISR+17
 22139  00004E  C052  F028         	movff	btemp+3,??_ISR+18
 22140                           
 22141                           ;main.c: 272: if (PIR1bits.CCP1IF) {
 22142  000052  A49E               	btfss	3998,2,c	;volatile
 22143  000054  D012               	goto	i2l696
 22144                           
 22145                           ;main.c: 273: PIR1bits.CCP1IF = 0;
 22146  000056  949E               	bcf	3998,2,c	;volatile
 22147                           
 22148                           ;main.c: 274: PORTBbits.RB6 = ~PORTBbits.RB6;
 22149  000058  AC81               	btfss	3969,6,c	;volatile
 22150  00005A  D002               	goto	i2u793_40
 22151  00005C  0E01               	movlw	1
 22152  00005E  D001               	goto	i2u793_46
 22153  000060                     i2u793_40:
 22154  000060  0E00               	movlw	0
 22155  000062                     i2u793_46:
 22156  000062  0AFF               	xorlw	255
 22157  000064  6E16               	movwf	??_ISR& (0+255),c
 22158  000066  3A16               	swapf	??_ISR,f,c
 22159  000068  4616               	rlncf	??_ISR,f,c
 22160  00006A  4616               	rlncf	??_ISR,f,c
 22161  00006C  5081               	movf	3969,w,c	;volatile
 22162  00006E  1816               	xorwf	??_ISR,w,c
 22163  000070  0BBF               	andlw	-65
 22164  000072  1816               	xorwf	??_ISR,w,c
 22165  000074  6E81               	movwf	3969,c	;volatile
 22166                           
 22167                           ;main.c: 275: updateTime();
 22168  000076  EC68  F027         	call	_updateTime	;wreg free
 22169  00007A                     i2l696:
 22170                           
 22171                           ;main.c: 276: }
 22172                           ;main.c: 278: if (INTCONbits.TMR0IF) {
 22173  00007A  A4F2               	btfss	intcon,2,c	;volatile
 22174  00007C  D00D               	goto	i2l697
 22175                           
 22176                           ;main.c: 279: INTCONbits.TMR0IF = 0;
 22177  00007E  94F2               	bcf	intcon,2,c	;volatile
 22178                           
 22179                           ;main.c: 280: sevenSegmentUpdate(numberToDisplay);
 22180  000080  C035  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 22181  000084  C036  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 22182  000088  EC36  F01C         	call	_sevenSegmentUpdate	;wreg free
 22183                           
 22184                           ;main.c: 281: buttonHandler(&buttonState);
 22185  00008C  0EB5               	movlw	low _buttonState
 22186  00008E  6E01               	movwf	buttonHandler@state,c
 22187  000090  0E01               	movlw	high _buttonState
 22188  000092  6E02               	movwf	buttonHandler@state+1,c
 22189  000094  ECF1  F01D         	call	_buttonHandler	;wreg free
 22190  000098                     i2l697:
 22191                           
 22192                           ;main.c: 284: }
 22193                           ;main.c: 286: if (INTCON3bits.INT2IF) {
 22194  000098  B2F0               	btfsc	intcon3,1,c	;volatile
 22195                           
 22196                           ;main.c: 287: INTCON3bits.INT2IF = 0;
 22197  00009A  92F0               	bcf	intcon3,1,c	;volatile
 22198                           
 22199                           ;main.c: 294: }
 22200                           ;main.c: 295: if (RCIF) {
 22201  00009C  C028  F052         	movff	??_ISR+18,btemp+3
 22202  0000A0  C027  F051         	movff	??_ISR+17,btemp+2
 22203  0000A4  C026  F050         	movff	??_ISR+16,btemp+1
 22204  0000A8  C025  F04F         	movff	??_ISR+15,btemp
 22205  0000AC  C024  FFF5         	movff	??_ISR+14,tablat
 22206  0000B0  C023  FFF8         	movff	??_ISR+13,tblptru
 22207  0000B4  C022  FFF7         	movff	??_ISR+12,tblptrh
 22208  0000B8  C021  FFF6         	movff	??_ISR+11,tblptrl
 22209  0000BC  C020  FFF4         	movff	??_ISR+10,prodh
 22210  0000C0  C01F  FFF3         	movff	??_ISR+9,prodl
 22211  0000C4  C01E  FFDA         	movff	??_ISR+8,fsr2h
 22212  0000C8  C01D  FFD9         	movff	??_ISR+7,fsr2l
 22213  0000CC  C01C  FFE2         	movff	??_ISR+6,fsr1h
 22214  0000D0  C01B  FFE1         	movff	??_ISR+5,fsr1l
 22215  0000D4  C01A  FFEA         	movff	??_ISR+4,fsr0h
 22216  0000D8  C019  FFE9         	movff	??_ISR+3,fsr0l
 22217  0000DC  C018  FFFB         	movff	??_ISR+2,pclatu
 22218  0000E0  C017  FFFA         	movff	??_ISR+1,pclath
 22219  0000E4  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22220  0000E6  0011               	retfie		f
 22221  0000E8                     __end_of_ISR:
 22222                           	opt stack 0
 22223                           pclatu	equ	0xFFB
 22224                           pclath	equ	0xFFA
 22225                           tblptru	equ	0xFF8
 22226                           tblptrh	equ	0xFF7
 22227                           tblptrl	equ	0xFF6
 22228                           tablat	equ	0xFF5
 22229                           prodh	equ	0xFF4
 22230                           prodl	equ	0xFF3
 22231                           intcon	equ	0xFF2
 22232                           intcon3	equ	0xFF0
 22233                           indf0	equ	0xFEF
 22234                           postinc0	equ	0xFEE
 22235                           plusw0	equ	0xFEB
 22236                           fsr0h	equ	0xFEA
 22237                           fsr0l	equ	0xFE9
 22238                           wreg	equ	0xFE8
 22239                           indf1	equ	0xFE7
 22240                           postinc1	equ	0xFE6
 22241                           postdec1	equ	0xFE5
 22242                           plusw1	equ	0xFE3
 22243                           fsr1h	equ	0xFE2
 22244                           fsr1l	equ	0xFE1
 22245                           indf2	equ	0xFDF
 22246                           postinc2	equ	0xFDE
 22247                           postdec2	equ	0xFDD
 22248                           plusw2	equ	0xFDB
 22249                           fsr2h	equ	0xFDA
 22250                           fsr2l	equ	0xFD9
 22251                           status	equ	0xFD8
 22252                           
 22253 ;; *************** function _updateTime *****************
 22254 ;; Defined at:
 22255 ;;		line 29 in file "src/stack/time.c"
 22256 ;; Parameters:    Size  Location     Type
 22257 ;;		None
 22258 ;; Auto vars:     Size  Location     Type
 22259 ;;		None
 22260 ;; Return value:  Size  Location     Type
 22261 ;;                  1    wreg      void 
 22262 ;; Registers used:
 22263 ;;		wreg, status,2, status,0
 22264 ;; Tracked objects:
 22265 ;;		On entry : 0/0
 22266 ;;		On exit  : 0/0
 22267 ;;		Unchanged: 0/0
 22268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22269 ;;      Params:         0       0       0       0       0       0       0       0       0
 22270 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22271 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22272 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22273 ;;Total ram usage:        0 bytes
 22274 ;; Hardware stack levels used:    1
 22275 ;; This function calls:
 22276 ;;		Nothing
 22277 ;; This function is called by:
 22278 ;;		_ISR
 22279 ;; This function uses a non-reentrant model
 22280 ;;
 22281                           
 22282                           	psect	text101
 22283  004ED0                     __ptext101:
 22284                           	opt stack 0
 22285  004ED0                     _updateTime:
 22286                           	opt stack 19
 22287                           
 22288                           ;time.c: 30: time++;
 22289                           
 22290                           ;incstack = 0
 22291  004ED0  0E01               	movlw	1
 22292  004ED2  2629               	addwf	_time,f,c	;volatile
 22293  004ED4  0E00               	movlw	0
 22294  004ED6  222A               	addwfc	_time+1,f,c	;volatile
 22295  004ED8  222B               	addwfc	_time+2,f,c	;volatile
 22296  004EDA  222C               	addwfc	_time+3,f,c	;volatile
 22297  004EDC  0012               	return		;funcret
 22298  004EDE                     __end_of_updateTime:
 22299                           	opt stack 0
 22300                           pclatu	equ	0xFFB
 22301                           pclath	equ	0xFFA
 22302                           tblptru	equ	0xFF8
 22303                           tblptrh	equ	0xFF7
 22304                           tblptrl	equ	0xFF6
 22305                           tablat	equ	0xFF5
 22306                           prodh	equ	0xFF4
 22307                           prodl	equ	0xFF3
 22308                           intcon	equ	0xFF2
 22309                           intcon3	equ	0xFF0
 22310                           indf0	equ	0xFEF
 22311                           postinc0	equ	0xFEE
 22312                           plusw0	equ	0xFEB
 22313                           fsr0h	equ	0xFEA
 22314                           fsr0l	equ	0xFE9
 22315                           wreg	equ	0xFE8
 22316                           indf1	equ	0xFE7
 22317                           postinc1	equ	0xFE6
 22318                           postdec1	equ	0xFE5
 22319                           plusw1	equ	0xFE3
 22320                           fsr1h	equ	0xFE2
 22321                           fsr1l	equ	0xFE1
 22322                           indf2	equ	0xFDF
 22323                           postinc2	equ	0xFDE
 22324                           postdec2	equ	0xFDD
 22325                           plusw2	equ	0xFDB
 22326                           fsr2h	equ	0xFDA
 22327                           fsr2l	equ	0xFD9
 22328                           status	equ	0xFD8
 22329                           
 22330 ;; *************** function _sevenSegmentUpdate *****************
 22331 ;; Defined at:
 22332 ;;		line 41 in file "src/system/sevenseg.c"
 22333 ;; Parameters:    Size  Location     Type
 22334 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 22335 ;; Auto vars:     Size  Location     Type
 22336 ;;  i               1   20[COMRAM] unsigned char 
 22337 ;; Return value:  Size  Location     Type
 22338 ;;                  1    wreg      void 
 22339 ;; Registers used:
 22340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22341 ;; Tracked objects:
 22342 ;;		On entry : 0/0
 22343 ;;		On exit  : 0/0
 22344 ;;		Unchanged: 0/0
 22345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22346 ;;      Params:         2       0       0       0       0       0       0       0       0
 22347 ;;      Locals:         3       0       0       0       0       0       0       0       0
 22348 ;;      Temps:          2       0       0       0       0       0       0       0       0
 22349 ;;      Totals:         7       0       0       0       0       0       0       0       0
 22350 ;;Total ram usage:        7 bytes
 22351 ;; Hardware stack levels used:    1
 22352 ;; Hardware stack levels required when called:    2
 22353 ;; This function calls:
 22354 ;;		_parseNumber
 22355 ;; This function is called by:
 22356 ;;		_ISR
 22357 ;; This function uses a non-reentrant model
 22358 ;;
 22359                           
 22360                           	psect	text102
 22361  00386C                     __ptext102:
 22362                           	opt stack 0
 22363  00386C                     _sevenSegmentUpdate:
 22364                           	opt stack 17
 22365                           
 22366                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 22367                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 22368                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 22369                           
 22370                           ;incstack = 0
 22371  00386C  C049  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 22372  003870  0E01               	movlw	1
 22373  003872  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 22374  003874  2A11               	incf	??_sevenSegmentUpdate,f,c
 22375  003876  D002               	goto	i2u761_44
 22376  003878                     i2u761_45:
 22377  003878  90D8               	bcf	status,0,c
 22378  00387A  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 22379  00387C                     i2u761_44:
 22380  00387C  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 22381  00387E  D7FC               	goto	i2u761_45
 22382  003880  5012               	movf	??_sevenSegmentUpdate+1,w,c
 22383  003882  0AFF               	xorlw	255
 22384  003884  1682               	andwf	3970,f,c	;volatile
 22385                           
 22386                           ;sevenseg.c: 46: PORTA = 0x00;
 22387  003886  0E00               	movlw	0
 22388  003888  6E80               	movwf	3968,c	;volatile
 22389                           
 22390                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 22391  00388A  0E02               	movlw	2
 22392  00388C  6049               	cpfslt	sevenSegmentUpdate@digitPointer,c
 22393  00388E  D007               	goto	i2l727
 22394  003890  0E01               	movlw	1
 22395  003892  2449               	addwf	sevenSegmentUpdate@digitPointer,w,c
 22396  003894  6E13               	movwf	_sevenSegmentUpdate$2455,c
 22397  003896  6A14               	clrf	_sevenSegmentUpdate$2455+1,c
 22398  003898  0E00               	movlw	0
 22399  00389A  2214               	addwfc	_sevenSegmentUpdate$2455+1,f,c
 22400  00389C  D004               	goto	i2l729
 22401  00389E                     i2l727:
 22402  00389E  0E00               	movlw	0
 22403  0038A0  6E14               	movwf	_sevenSegmentUpdate$2455+1,c
 22404  0038A2  0E00               	movlw	0
 22405  0038A4  6E13               	movwf	_sevenSegmentUpdate$2455,c
 22406  0038A6                     i2l729:
 22407  0038A6  C013  F049         	movff	_sevenSegmentUpdate$2455,sevenSegmentUpdate@digitPointer
 22408                           
 22409                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 22410  0038AA  0EE8               	movlw	232
 22411  0038AC  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 22412  0038AE  0E03               	movlw	3
 22413  0038B0  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 22414  0038B2  B0D8               	btfsc	status,0,c
 22415  0038B4  0012               	return	
 22416                           
 22417                           ;sevenseg.c: 51: }
 22418                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 22419                           
 22420                           ;sevenseg.c: 50: return;
 22421  0038B6  0E00               	movlw	0
 22422  0038B8  6E15               	movwf	sevenSegmentUpdate@i,c
 22423  0038BA                     i2l6739:
 22424  0038BA  0E02               	movlw	2
 22425  0038BC  6415               	cpfsgt	sevenSegmentUpdate@i,c
 22426  0038BE  D001               	goto	i2l732
 22427  0038C0  D013               	goto	i2u765_40
 22428  0038C2                     i2l732:
 22429                           
 22430                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 22431  0038C2  5015               	movf	sevenSegmentUpdate@i,w,c
 22432  0038C4  0D01               	mullw	1
 22433  0038C6  0E3D               	movlw	low sevenSegmentUpdate@digitsToDisplay
 22434  0038C8  24F3               	addwf	prodl,w,c
 22435  0038CA  6ED9               	movwf	fsr2l,c
 22436  0038CC  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 22437  0038CE  20F4               	addwfc	prodh,w,c
 22438  0038D0  6EDA               	movwf	fsr2h,c
 22439  0038D2  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 22440  0038D6  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 22441  0038DA  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 22442  0038DE  EC29  F020         	call	_parseNumber	;wreg free
 22443  0038E2  6EDF               	movwf	indf2,c
 22444  0038E4  2A15               	incf	sevenSegmentUpdate@i,f,c
 22445  0038E6  D7E9               	goto	i2l6739
 22446  0038E8                     i2u765_40:
 22447                           
 22448                           ;sevenseg.c: 54: }
 22449                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 22450  0038E8  C049  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 22451  0038EC  0E01               	movlw	1
 22452  0038EE  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 22453  0038F0  2A11               	incf	??_sevenSegmentUpdate,f,c
 22454  0038F2  D002               	goto	i2u766_44
 22455  0038F4                     i2u766_45:
 22456  0038F4  90D8               	bcf	status,0,c
 22457  0038F6  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 22458  0038F8                     i2u766_44:
 22459  0038F8  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 22460  0038FA  D7FC               	goto	i2u766_45
 22461  0038FC  5012               	movf	??_sevenSegmentUpdate+1,w,c
 22462  0038FE  1282               	iorwf	3970,f,c	;volatile
 22463                           
 22464                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 22465  003900  5049               	movf	sevenSegmentUpdate@digitPointer,w,c
 22466  003902  0D01               	mullw	1
 22467  003904  0E3D               	movlw	low sevenSegmentUpdate@digitsToDisplay
 22468  003906  24F3               	addwf	prodl,w,c
 22469  003908  6ED9               	movwf	fsr2l,c
 22470  00390A  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 22471  00390C  20F4               	addwfc	prodh,w,c
 22472  00390E  6EDA               	movwf	fsr2h,c
 22473  003910  50DF               	movf	indf2,w,c
 22474  003912  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 22475  003914  5011               	movf	??_sevenSegmentUpdate,w,c
 22476  003916  0D01               	mullw	1
 22477  003918  0EB6               	movlw	low _sevenSegCharacters
 22478  00391A  24F3               	addwf	prodl,w,c
 22479  00391C  6ED9               	movwf	fsr2l,c
 22480  00391E  0E01               	movlw	high _sevenSegCharacters
 22481  003920  20F4               	addwfc	prodh,w,c
 22482  003922  6EDA               	movwf	fsr2h,c
 22483  003924  50DF               	movf	indf2,w,c
 22484  003926  6E80               	movwf	3968,c	;volatile
 22485  003928  0012               	return		;funcret
 22486  00392A                     __end_of_sevenSegmentUpdate:
 22487                           	opt stack 0
 22488                           pclatu	equ	0xFFB
 22489                           pclath	equ	0xFFA
 22490                           tblptru	equ	0xFF8
 22491                           tblptrh	equ	0xFF7
 22492                           tblptrl	equ	0xFF6
 22493                           tablat	equ	0xFF5
 22494                           prodh	equ	0xFF4
 22495                           prodl	equ	0xFF3
 22496                           intcon	equ	0xFF2
 22497                           intcon3	equ	0xFF0
 22498                           indf0	equ	0xFEF
 22499                           postinc0	equ	0xFEE
 22500                           plusw0	equ	0xFEB
 22501                           fsr0h	equ	0xFEA
 22502                           fsr0l	equ	0xFE9
 22503                           wreg	equ	0xFE8
 22504                           indf1	equ	0xFE7
 22505                           postinc1	equ	0xFE6
 22506                           postdec1	equ	0xFE5
 22507                           plusw1	equ	0xFE3
 22508                           fsr1h	equ	0xFE2
 22509                           fsr1l	equ	0xFE1
 22510                           indf2	equ	0xFDF
 22511                           postinc2	equ	0xFDE
 22512                           postdec2	equ	0xFDD
 22513                           plusw2	equ	0xFDB
 22514                           fsr2h	equ	0xFDA
 22515                           fsr2l	equ	0xFD9
 22516                           status	equ	0xFD8
 22517                           
 22518 ;; *************** function _parseNumber *****************
 22519 ;; Defined at:
 22520 ;;		line 59 in file "src/system/sevenseg.c"
 22521 ;; Parameters:    Size  Location     Type
 22522 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 22523 ;;  digit           1    9[COMRAM] unsigned char 
 22524 ;; Auto vars:     Size  Location     Type
 22525 ;;  hundreds        1   13[COMRAM] unsigned char 
 22526 ;;  tens            1   12[COMRAM] unsigned char 
 22527 ;;  ones            1   11[COMRAM] unsigned char 
 22528 ;; Return value:  Size  Location     Type
 22529 ;;                  1    wreg      unsigned char 
 22530 ;; Registers used:
 22531 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 22532 ;; Tracked objects:
 22533 ;;		On entry : 0/0
 22534 ;;		On exit  : 0/0
 22535 ;;		Unchanged: 0/0
 22536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22537 ;;      Params:         3       0       0       0       0       0       0       0       0
 22538 ;;      Locals:         3       0       0       0       0       0       0       0       0
 22539 ;;      Temps:          1       0       0       0       0       0       0       0       0
 22540 ;;      Totals:         7       0       0       0       0       0       0       0       0
 22541 ;;Total ram usage:        7 bytes
 22542 ;; Hardware stack levels used:    1
 22543 ;; Hardware stack levels required when called:    1
 22544 ;; This function calls:
 22545 ;;		i2___lwdiv
 22546 ;; This function is called by:
 22547 ;;		_sevenSegmentUpdate
 22548 ;; This function uses a non-reentrant model
 22549 ;;
 22550                           
 22551                           	psect	text103
 22552  004052                     __ptext103:
 22553                           	opt stack 0
 22554  004052                     _parseNumber:
 22555                           	opt stack 17
 22556                           
 22557                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 22558                           
 22559                           ;incstack = 0
 22560  004052  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 22561  004056  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 22562  00405A  0E00               	movlw	0
 22563  00405C  6E04               	movwf	i2___lwdiv@divisor+1,c
 22564  00405E  0E64               	movlw	100
 22565  004060  6E03               	movwf	i2___lwdiv@divisor,c
 22566  004062  EC5E  F023         	call	i2___lwdiv	;wreg free
 22567  004066  5001               	movf	?i2___lwdiv,w,c
 22568  004068  6E0E               	movwf	parseNumber@hundreds,c
 22569                           
 22570                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 22571  00406A  500E               	movf	parseNumber@hundreds,w,c
 22572  00406C  0D64               	mullw	100
 22573  00406E  1EF3               	comf	prodl,f,c
 22574  004070  1EF4               	comf	prodh,f,c
 22575  004072  4AF3               	infsnz	prodl,f,c
 22576  004074  2AF4               	incf	prodh,f,c
 22577  004076  5008               	movf	parseNumber@numberToDisplay,w,c
 22578  004078  24F3               	addwf	prodl,w,c
 22579  00407A  6E01               	movwf	i2___lwdiv@dividend,c
 22580  00407C  5009               	movf	parseNumber@numberToDisplay+1,w,c
 22581  00407E  20F4               	addwfc	prodh,w,c
 22582  004080  6E02               	movwf	i2___lwdiv@dividend+1,c
 22583  004082  0E00               	movlw	0
 22584  004084  6E04               	movwf	i2___lwdiv@divisor+1,c
 22585  004086  0E0A               	movlw	10
 22586  004088  6E03               	movwf	i2___lwdiv@divisor,c
 22587  00408A  EC5E  F023         	call	i2___lwdiv	;wreg free
 22588  00408E  5001               	movf	?i2___lwdiv,w,c
 22589  004090  6E0D               	movwf	parseNumber@tens,c
 22590                           
 22591                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 22592  004092  500D               	movf	parseNumber@tens,w,c
 22593  004094  0D0A               	mullw	10
 22594  004096  CFF3 F00B          	movff	prodl,??_parseNumber
 22595  00409A  500E               	movf	parseNumber@hundreds,w,c
 22596  00409C  0D64               	mullw	100
 22597  00409E  50F3               	movf	prodl,w,c
 22598  0040A0  240B               	addwf	??_parseNumber,w,c
 22599  0040A2  0800               	sublw	0
 22600  0040A4  2408               	addwf	parseNumber@numberToDisplay,w,c
 22601  0040A6  6E0C               	movwf	parseNumber@ones,c
 22602                           
 22603                           ;sevenseg.c: 64: switch (digit) {
 22604  0040A8  D008               	goto	i2l736
 22605  0040AA                     
 22606                           ;sevenseg.c: 66: return ones;
 22607  0040AA  500C               	movf	parseNumber@ones,w,c
 22608  0040AC  0012               	return	
 22609  0040AE                     
 22610                           ;sevenseg.c: 68: return tens;
 22611  0040AE  500D               	movf	parseNumber@tens,w,c
 22612  0040B0  0012               	return	
 22613  0040B2                     
 22614                           ;sevenseg.c: 70: return hundreds;
 22615  0040B2  500E               	movf	parseNumber@hundreds,w,c
 22616  0040B4  0012               	return	
 22617  0040B6  0E00               	movlw	0
 22618                           
 22619                           ;sevenseg.c: 72: }
 22620  0040B8  0012               	return	
 22621  0040BA                     i2l736:
 22622  0040BA  500A               	movf	parseNumber@digit,w,c
 22623                           
 22624                           ; Switch size 1, requested type "space"
 22625                           ; Number of cases is 3, Range of values is 0 to 2
 22626                           ; switch strategies available:
 22627                           ; Name         Instructions Cycles
 22628                           ; simple_byte           10     6 (average)
 22629                           ;	Chosen strategy is simple_byte
 22630  0040BC  0A00               	xorlw	0	; case 0
 22631  0040BE  B4D8               	btfsc	status,2,c
 22632  0040C0  D7F8               	goto	i2l740
 22633  0040C2  0A01               	xorlw	1	; case 1
 22634  0040C4  B4D8               	btfsc	status,2,c
 22635  0040C6  D7F3               	goto	i2l739
 22636  0040C8  0A03               	xorlw	3	; case 2
 22637  0040CA  B4D8               	btfsc	status,2,c
 22638  0040CC  D7EE               	goto	i2l737
 22639  0040CE  D7F3               	goto	i2l741
 22640  0040D0                     __end_of_parseNumber:
 22641                           	opt stack 0
 22642                           pclatu	equ	0xFFB
 22643                           pclath	equ	0xFFA
 22644                           tblptru	equ	0xFF8
 22645                           tblptrh	equ	0xFF7
 22646                           tblptrl	equ	0xFF6
 22647                           tablat	equ	0xFF5
 22648                           prodh	equ	0xFF4
 22649                           prodl	equ	0xFF3
 22650                           intcon	equ	0xFF2
 22651                           intcon3	equ	0xFF0
 22652                           indf0	equ	0xFEF
 22653                           postinc0	equ	0xFEE
 22654                           plusw0	equ	0xFEB
 22655                           fsr0h	equ	0xFEA
 22656                           fsr0l	equ	0xFE9
 22657                           wreg	equ	0xFE8
 22658                           indf1	equ	0xFE7
 22659                           postinc1	equ	0xFE6
 22660                           postdec1	equ	0xFE5
 22661                           plusw1	equ	0xFE3
 22662                           fsr1h	equ	0xFE2
 22663                           fsr1l	equ	0xFE1
 22664                           indf2	equ	0xFDF
 22665                           postinc2	equ	0xFDE
 22666                           postdec2	equ	0xFDD
 22667                           plusw2	equ	0xFDB
 22668                           fsr2h	equ	0xFDA
 22669                           fsr2l	equ	0xFD9
 22670                           status	equ	0xFD8
 22671                           
 22672 ;; *************** function i2___lwdiv *****************
 22673 ;; Defined at:
 22674 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 22675 ;; Parameters:    Size  Location     Type
 22676 ;;  dividend        2    0[COMRAM] unsigned int 
 22677 ;;  divisor         2    2[COMRAM] unsigned int 
 22678 ;; Auto vars:     Size  Location     Type
 22679 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 22680 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 22681 ;; Return value:  Size  Location     Type
 22682 ;;                  2    0[COMRAM] unsigned int 
 22683 ;; Registers used:
 22684 ;;		wreg, status,2, status,0
 22685 ;; Tracked objects:
 22686 ;;		On entry : 0/0
 22687 ;;		On exit  : 0/0
 22688 ;;		Unchanged: 0/0
 22689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22690 ;;      Params:         4       0       0       0       0       0       0       0       0
 22691 ;;      Locals:         3       0       0       0       0       0       0       0       0
 22692 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22693 ;;      Totals:         7       0       0       0       0       0       0       0       0
 22694 ;;Total ram usage:        7 bytes
 22695 ;; Hardware stack levels used:    1
 22696 ;; This function calls:
 22697 ;;		Nothing
 22698 ;; This function is called by:
 22699 ;;		_parseNumber
 22700 ;; This function uses a non-reentrant model
 22701 ;;
 22702                           
 22703                           	psect	text104
 22704  0046BC                     __ptext104:
 22705                           	opt stack 0
 22706  0046BC                     i2___lwdiv:
 22707                           	opt stack 17
 22708                           
 22709                           ;incstack = 0
 22710  0046BC  0E00               	movlw	0
 22711  0046BE  6E06               	movwf	i2___lwdiv@quotient+1,c
 22712  0046C0  0E00               	movlw	0
 22713  0046C2  6E05               	movwf	i2___lwdiv@quotient,c
 22714  0046C4  5003               	movf	i2___lwdiv@divisor,w,c
 22715  0046C6  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 22716  0046C8  B4D8               	btfsc	status,2,c
 22717  0046CA  D01C               	goto	i2l1526
 22718  0046CC  0E01               	movlw	1
 22719  0046CE  6E07               	movwf	i2___lwdiv@counter,c
 22720  0046D0  D004               	goto	i2l1521
 22721  0046D2  90D8               	bcf	status,0,c
 22722  0046D4  3603               	rlcf	i2___lwdiv@divisor,f,c
 22723  0046D6  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 22724  0046D8  2A07               	incf	i2___lwdiv@counter,f,c
 22725  0046DA                     i2l1521:
 22726  0046DA  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 22727  0046DC  D7FA               	goto	i2l1522
 22728  0046DE                     i2u676_40:
 22729  0046DE  90D8               	bcf	status,0,c
 22730  0046E0  3605               	rlcf	i2___lwdiv@quotient,f,c
 22731  0046E2  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 22732  0046E4  5003               	movf	i2___lwdiv@divisor,w,c
 22733  0046E6  5C01               	subwf	i2___lwdiv@dividend,w,c
 22734  0046E8  5004               	movf	i2___lwdiv@divisor+1,w,c
 22735  0046EA  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 22736  0046EC  A0D8               	btfss	status,0,c
 22737  0046EE  D005               	goto	i2l1525
 22738  0046F0  5003               	movf	i2___lwdiv@divisor,w,c
 22739  0046F2  5E01               	subwf	i2___lwdiv@dividend,f,c
 22740  0046F4  5004               	movf	i2___lwdiv@divisor+1,w,c
 22741  0046F6  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 22742  0046F8  8005               	bsf	i2___lwdiv@quotient,0,c
 22743  0046FA                     i2l1525:
 22744  0046FA  90D8               	bcf	status,0,c
 22745  0046FC  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 22746  0046FE  3203               	rrcf	i2___lwdiv@divisor,f,c
 22747  004700  2E07               	decfsz	i2___lwdiv@counter,f,c
 22748  004702  D7ED               	goto	i2u676_40
 22749  004704                     i2l1526:
 22750  004704  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 22751  004708  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22752  00470C  0012               	return		;funcret
 22753  00470E                     __end_ofi2___lwdiv:
 22754                           	opt stack 0
 22755                           pclatu	equ	0xFFB
 22756                           pclath	equ	0xFFA
 22757                           tblptru	equ	0xFF8
 22758                           tblptrh	equ	0xFF7
 22759                           tblptrl	equ	0xFF6
 22760                           tablat	equ	0xFF5
 22761                           prodh	equ	0xFF4
 22762                           prodl	equ	0xFF3
 22763                           intcon	equ	0xFF2
 22764                           intcon3	equ	0xFF0
 22765                           indf0	equ	0xFEF
 22766                           postinc0	equ	0xFEE
 22767                           plusw0	equ	0xFEB
 22768                           fsr0h	equ	0xFEA
 22769                           fsr0l	equ	0xFE9
 22770                           wreg	equ	0xFE8
 22771                           indf1	equ	0xFE7
 22772                           postinc1	equ	0xFE6
 22773                           postdec1	equ	0xFE5
 22774                           plusw1	equ	0xFE3
 22775                           fsr1h	equ	0xFE2
 22776                           fsr1l	equ	0xFE1
 22777                           indf2	equ	0xFDF
 22778                           postinc2	equ	0xFDE
 22779                           postdec2	equ	0xFDD
 22780                           plusw2	equ	0xFDB
 22781                           fsr2h	equ	0xFDA
 22782                           fsr2l	equ	0xFD9
 22783                           status	equ	0xFD8
 22784                           
 22785 ;; *************** function _buttonHandler *****************
 22786 ;; Defined at:
 22787 ;;		line 249 in file "src/system/main.c"
 22788 ;; Parameters:    Size  Location     Type
 22789 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 22790 ;;		 -> buttonState(1), 
 22791 ;; Auto vars:     Size  Location     Type
 22792 ;;  debounceValu    4    2[COMRAM] const unsigned long 
 22793 ;; Return value:  Size  Location     Type
 22794 ;;                  1    wreg      void 
 22795 ;; Registers used:
 22796 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22797 ;; Tracked objects:
 22798 ;;		On entry : 0/0
 22799 ;;		On exit  : 0/0
 22800 ;;		Unchanged: 0/0
 22801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22802 ;;      Params:         2       0       0       0       0       0       0       0       0
 22803 ;;      Locals:         4       0       0       0       0       0       0       0       0
 22804 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22805 ;;      Totals:         6       0       0       0       0       0       0       0       0
 22806 ;;Total ram usage:        6 bytes
 22807 ;; Hardware stack levels used:    1
 22808 ;; This function calls:
 22809 ;;		Nothing
 22810 ;; This function is called by:
 22811 ;;		_ISR
 22812 ;; This function uses a non-reentrant model
 22813 ;;
 22814                           
 22815                           	psect	text105
 22816  003BE2                     __ptext105:
 22817                           	opt stack 0
 22818  003BE2                     _buttonHandler:
 22819                           	opt stack 19
 22820                           
 22821                           ;main.c: 250: uint8_t static oldState = 0;
 22822                           ;main.c: 251: uint8_t static newState = 0;
 22823                           ;main.c: 252: uint32_t static debounceCounter = 0;
 22824                           ;main.c: 253: const uint32_t debounceValue = 0xfff;
 22825                           
 22826                           ;incstack = 0
 22827  003BE2  0EFF               	movlw	255
 22828  003BE4  6E03               	movwf	buttonHandler@debounceValue,c
 22829  003BE6  0E0F               	movlw	15
 22830  003BE8  6E04               	movwf	buttonHandler@debounceValue+1,c
 22831  003BEA  0E00               	movlw	0
 22832  003BEC  6E05               	movwf	buttonHandler@debounceValue+2,c
 22833  003BEE  0E00               	movlw	0
 22834  003BF0  6E06               	movwf	buttonHandler@debounceValue+3,c
 22835                           
 22836                           ;main.c: 254: if ((unsigned)(!(PORTB & (1<<5)))) {
 22837  003BF2  BA81               	btfsc	3969,5,c	;volatile
 22838  003BF4  D011               	goto	i2l686
 22839                           
 22840                           ;main.c: 255: if (debounceCounter < debounceValue)
 22841  003BF6  5003               	movf	buttonHandler@debounceValue,w,c
 22842  003BF8  5C31               	subwf	buttonHandler@debounceCounter,w,c
 22843  003BFA  5004               	movf	buttonHandler@debounceValue+1,w,c
 22844  003BFC  5832               	subwfb	buttonHandler@debounceCounter+1,w,c
 22845  003BFE  5005               	movf	buttonHandler@debounceValue+2,w,c
 22846  003C00  5833               	subwfb	buttonHandler@debounceCounter+2,w,c
 22847  003C02  5006               	movf	buttonHandler@debounceValue+3,w,c
 22848  003C04  5834               	subwfb	buttonHandler@debounceCounter+3,w,c
 22849  003C06  B0D8               	btfsc	status,0,c
 22850  003C08  D00F               	goto	i2l688
 22851                           
 22852                           ;main.c: 256: debounceCounter++;
 22853  003C0A  0E01               	movlw	1
 22854  003C0C  2631               	addwf	buttonHandler@debounceCounter,f,c
 22855  003C0E  0E00               	movlw	0
 22856  003C10  2232               	addwfc	buttonHandler@debounceCounter+1,f,c
 22857  003C12  2233               	addwfc	buttonHandler@debounceCounter+2,f,c
 22858  003C14  2234               	addwfc	buttonHandler@debounceCounter+3,f,c
 22859                           
 22860                           ;main.c: 257: } else {
 22861  003C16  D008               	goto	i2l688
 22862  003C18                     i2l686:
 22863                           
 22864                           ;main.c: 258: debounceCounter = 0;
 22865  003C18  0E00               	movlw	0
 22866  003C1A  6E31               	movwf	buttonHandler@debounceCounter,c
 22867  003C1C  0E00               	movlw	0
 22868  003C1E  6E32               	movwf	buttonHandler@debounceCounter+1,c
 22869  003C20  0E00               	movlw	0
 22870  003C22  6E33               	movwf	buttonHandler@debounceCounter+2,c
 22871  003C24  0E00               	movlw	0
 22872  003C26  6E34               	movwf	buttonHandler@debounceCounter+3,c
 22873  003C28                     i2l688:
 22874                           
 22875                           ;main.c: 259: }
 22876                           ;main.c: 260: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 22877  003C28  5003               	movf	buttonHandler@debounceValue,w,c
 22878  003C2A  5C31               	subwf	buttonHandler@debounceCounter,w,c
 22879  003C2C  5004               	movf	buttonHandler@debounceValue+1,w,c
 22880  003C2E  5832               	subwfb	buttonHandler@debounceCounter+1,w,c
 22881  003C30  5005               	movf	buttonHandler@debounceValue+2,w,c
 22882  003C32  5833               	subwfb	buttonHandler@debounceCounter+2,w,c
 22883  003C34  5006               	movf	buttonHandler@debounceValue+3,w,c
 22884  003C36  5834               	subwfb	buttonHandler@debounceCounter+3,w,c
 22885  003C38  A0D8               	btfss	status,0,c
 22886  003C3A  D002               	goto	i2u757_40
 22887  003C3C  0E01               	movlw	1
 22888  003C3E  D001               	goto	i2u758_40
 22889  003C40                     i2u757_40:
 22890  003C40  0E00               	movlw	0
 22891  003C42                     i2u758_40:
 22892  003C42  6E4A               	movwf	buttonHandler@newState,c
 22893                           
 22894                           ;main.c: 261: if (newState && !oldState) {
 22895  003C44  504A               	movf	buttonHandler@newState,w,c
 22896  003C46  B4D8               	btfsc	status,2,c
 22897  003C48  D011               	goto	i2l689
 22898  003C4A  504B               	movf	buttonHandler@oldState,w,c
 22899  003C4C  A4D8               	btfss	status,2,c
 22900  003C4E  D00E               	goto	i2l689
 22901                           
 22902                           ;main.c: 262: debounceCounter = debounceValue;
 22903  003C50  C003  F031         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 22904  003C54  C004  F032         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 22905  003C58  C005  F033         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 22906  003C5C  C006  F034         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 22907                           
 22908                           ;main.c: 263: *state = 1;
 22909  003C60  C001  FFD9         	movff	buttonHandler@state,fsr2l
 22910  003C64  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 22911  003C68  0E01               	movlw	1
 22912  003C6A  D005               	goto	L8
 22913  003C6C                     i2l689:
 22914                           
 22915                           ;main.c: 265: *state = 0;
 22916  003C6C  C001  FFD9         	movff	buttonHandler@state,fsr2l
 22917  003C70  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 22918  003C74  0E00               	movlw	0
 22919  003C76                     L8:
 22920  003C76  6EDF               	movwf	indf2,c
 22921                           
 22922                           ;main.c: 266: }
 22923                           ;main.c: 267: oldState = newState;
 22924  003C78  C04A  F04B         	movff	buttonHandler@newState,buttonHandler@oldState
 22925  003C7C  0012               	return		;funcret
 22926  003C7E                     __end_of_buttonHandler:
 22927                           	opt stack 0
 22928                           pclatu	equ	0xFFB
 22929                           pclath	equ	0xFFA
 22930                           tblptru	equ	0xFF8
 22931                           tblptrh	equ	0xFF7
 22932                           tblptrl	equ	0xFF6
 22933                           tablat	equ	0xFF5
 22934                           prodh	equ	0xFF4
 22935                           prodl	equ	0xFF3
 22936                           intcon	equ	0xFF2
 22937                           intcon3	equ	0xFF0
 22938                           indf0	equ	0xFEF
 22939                           postinc0	equ	0xFEE
 22940                           plusw0	equ	0xFEB
 22941                           fsr0h	equ	0xFEA
 22942                           fsr0l	equ	0xFE9
 22943                           wreg	equ	0xFE8
 22944                           indf1	equ	0xFE7
 22945                           postinc1	equ	0xFE6
 22946                           postdec1	equ	0xFE5
 22947                           plusw1	equ	0xFE3
 22948                           fsr1h	equ	0xFE2
 22949                           fsr1l	equ	0xFE1
 22950                           indf2	equ	0xFDF
 22951                           postinc2	equ	0xFDE
 22952                           postdec2	equ	0xFDD
 22953                           plusw2	equ	0xFDB
 22954                           fsr2h	equ	0xFDA
 22955                           fsr2l	equ	0xFD9
 22956                           status	equ	0xFD8
 22957                           pclatu	equ	0xFFB
 22958                           pclath	equ	0xFFA
 22959                           tblptru	equ	0xFF8
 22960                           tblptrh	equ	0xFF7
 22961                           tblptrl	equ	0xFF6
 22962                           tablat	equ	0xFF5
 22963                           prodh	equ	0xFF4
 22964                           prodl	equ	0xFF3
 22965                           intcon	equ	0xFF2
 22966                           intcon3	equ	0xFF0
 22967                           indf0	equ	0xFEF
 22968                           postinc0	equ	0xFEE
 22969                           plusw0	equ	0xFEB
 22970                           fsr0h	equ	0xFEA
 22971                           fsr0l	equ	0xFE9
 22972                           wreg	equ	0xFE8
 22973                           indf1	equ	0xFE7
 22974                           postinc1	equ	0xFE6
 22975                           postdec1	equ	0xFE5
 22976                           plusw1	equ	0xFE3
 22977                           fsr1h	equ	0xFE2
 22978                           fsr1l	equ	0xFE1
 22979                           indf2	equ	0xFDF
 22980                           postinc2	equ	0xFDE
 22981                           postdec2	equ	0xFDD
 22982                           plusw2	equ	0xFDB
 22983                           fsr2h	equ	0xFDA
 22984                           fsr2l	equ	0xFD9
 22985                           status	equ	0xFD8
 22986                           
 22987                           	psect	rparam
 22988  0000                     pclatu	equ	0xFFB
 22989                           pclath	equ	0xFFA
 22990                           tblptru	equ	0xFF8
 22991                           tblptrh	equ	0xFF7
 22992                           tblptrl	equ	0xFF6
 22993                           tablat	equ	0xFF5
 22994                           prodh	equ	0xFF4
 22995                           prodl	equ	0xFF3
 22996                           intcon	equ	0xFF2
 22997                           intcon3	equ	0xFF0
 22998                           indf0	equ	0xFEF
 22999                           postinc0	equ	0xFEE
 23000                           plusw0	equ	0xFEB
 23001                           fsr0h	equ	0xFEA
 23002                           fsr0l	equ	0xFE9
 23003                           wreg	equ	0xFE8
 23004                           indf1	equ	0xFE7
 23005                           postinc1	equ	0xFE6
 23006                           postdec1	equ	0xFE5
 23007                           plusw1	equ	0xFE3
 23008                           fsr1h	equ	0xFE2
 23009                           fsr1l	equ	0xFE1
 23010                           indf2	equ	0xFDF
 23011                           postinc2	equ	0xFDE
 23012                           postdec2	equ	0xFDD
 23013                           plusw2	equ	0xFDB
 23014                           fsr2h	equ	0xFDA
 23015                           fsr2l	equ	0xFD9
 23016                           status	equ	0xFD8
 23017                           
 23018                           	psect	temp
 23019  00004F                     btemp:
 23020                           	opt stack 0
 23021  00004F                     	ds	1
 23022  0000                     int$flags	set	btemp
 23023  0000                     wtemp6	set	btemp+1
 23024                           pclatu	equ	0xFFB
 23025                           pclath	equ	0xFFA
 23026                           tblptru	equ	0xFF8
 23027                           tblptrh	equ	0xFF7
 23028                           tblptrl	equ	0xFF6
 23029                           tablat	equ	0xFF5
 23030                           prodh	equ	0xFF4
 23031                           prodl	equ	0xFF3
 23032                           intcon	equ	0xFF2
 23033                           intcon3	equ	0xFF0
 23034                           indf0	equ	0xFEF
 23035                           postinc0	equ	0xFEE
 23036                           plusw0	equ	0xFEB
 23037                           fsr0h	equ	0xFEA
 23038                           fsr0l	equ	0xFE9
 23039                           wreg	equ	0xFE8
 23040                           indf1	equ	0xFE7
 23041                           postinc1	equ	0xFE6
 23042                           postdec1	equ	0xFE5
 23043                           plusw1	equ	0xFE3
 23044                           fsr1h	equ	0xFE2
 23045                           fsr1l	equ	0xFE1
 23046                           indf2	equ	0xFDF
 23047                           postinc2	equ	0xFDE
 23048                           postdec2	equ	0xFDD
 23049                           plusw2	equ	0xFDB
 23050                           fsr2h	equ	0xFDA
 23051                           fsr2l	equ	0xFD9
 23052                           status	equ	0xFD8


Data Sizes:
    Strings     980
    Constant    11
    Data        52
    BSS         442
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      78
    BANK0           160    160     160
    BANK1           256    146     214
    BANK2           256      0     226
    BANK3           256     50     212
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ethernetController_dropPacket@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK2[15]), stack(BANK2[121]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> ARP_initTable@ip(BANK0[4]), ARP_probe@ipSender(COMRAM[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> ARP_checkForEntry@ip(BANK0[4]), ARP_sendReply@myIP(BANK1[4]), ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> ARP_table(BANK3[112]), ARP_sendReply@request(BANK1[32]), ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_checkHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_handleNewPacket@ip(BANK0[23]), 

    ipv4_parseHeader@field	PTR struct memoryField size(2) Largest target is 9
		 -> ipv4_handleNewPacket@headerField(BANK0[9]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK2[15]), stack(BANK2[121]), 

    ipv4_writeHeaderIntoBuffer@ptr	PTR unsigned char  size(2) Largest target is 32
		 -> main@headerBuf(BANK3[32]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 121
		 -> ipv4_checkHeaderChecksum@testHeader(BANK0[23]), stack.pendingPacketToSend(BANK2[66]), stack(BANK2[121]), 

    ipv4_txFrameRequest@packet	PTR struct ipv4_packet size(2) Largest target is 121
		 -> stack(BANK2[121]), 

    ARP_checkForEntry@index	PTR unsigned char  size(2) Largest target is 1
		 -> ipv4_setIPSourceAddress@index(BANK0[1]), ipv4_sendFrame@index(BANK1[1]), 

    ARP_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK2[15]), stack(BANK2[121]), 

    ARP_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK2[15]), stack(BANK2[121]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK3[50]), 

    sp__ipProtocolToString	PTR unsigned char  size(2) Largest target is 17
		 -> STR_66(CODE[17]), STR_65(CODE[4]), STR_64(CODE[4]), STR_63(CODE[5]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 55
		 -> STR_93(CODE[2]), STR_92(CODE[7]), STR_91(CODE[11]), STR_90(CODE[19]), 
		 -> STR_89(CODE[2]), STR_88(CODE[3]), STR_87(CODE[3]), STR_86(CODE[3]), 
		 -> STR_85(CODE[3]), STR_84(CODE[5]), STR_83(CODE[2]), STR_82(CODE[3]), 
		 -> STR_81(CODE[12]), STR_80(CODE[8]), STR_79(CODE[2]), STR_78(CODE[3]), 
		 -> STR_77(CODE[16]), STR_76(CODE[3]), STR_75(CODE[3]), STR_74(CODE[15]), 
		 -> STR_73(CODE[10]), STR_72(CODE[2]), STR_71(CODE[3]), STR_70(CODE[5]), 
		 -> STR_69(CODE[3]), STR_68(CODE[2]), STR_67(CODE[39]), arpEntryToString@string(BANK3[50]), 
		 -> ipAdressToString@address(BANK1[16]), STR_66(CODE[17]), STR_65(CODE[4]), STR_64(CODE[4]), 
		 -> STR_63(CODE[5]), STR_62(CODE[18]), STR_61(CODE[4]), STR_60(CODE[5]), 
		 -> macToString@address(BANK0[18]), hexToString@number(BANK1[10]), intToString@number(BANK1[10]), STR_59(CODE[5]), 
		 -> STR_58(CODE[9]), STR_57(CODE[30]), STR_56(CODE[34]), STR_55(CODE[55]), 
		 -> STR_54(CODE[37]), STR_53(CODE[15]), STR_52(CODE[14]), STR_51(CODE[19]), 
		 -> STR_50(CODE[30]), STR_49(CODE[17]), STR_48(CODE[8]), STR_47(CODE[29]), 
		 -> STR_46(CODE[29]), STR_45(CODE[20]), STR_44(CODE[19]), STR_43(CODE[19]), 
		 -> STR_42(CODE[13]), STR_41(CODE[3]), STR_40(CODE[3]), STR_39(CODE[51]), 
		 -> STR_38(CODE[28]), STR_37(CODE[4]), STR_36(CODE[23]), STR_35(CODE[4]), 
		 -> STR_34(CODE[21]), STR_33(CODE[12]), STR_32(CODE[38]), STR_31(CODE[3]), 
		 -> STR_30(CODE[9]), STR_29(CODE[2]), STR_28(CODE[12]), STR_27(CODE[24]), 
		 -> STR_26(CODE[51]), STR_25(CODE[49]), STR_24(CODE[51]), STR_23(CODE[2]), 
		 -> STR_22(CODE[18]), STR_21(CODE[3]), STR_20(CODE[19]), STR_19(CODE[3]), 
		 -> STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[5]), STR_15(CODE[2]), 
		 -> STR_14(CODE[2]), STR_13(CODE[5]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[2]), STR_9(CODE[7]), STR_8(CODE[6]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[16]), STR_4(CODE[10]), STR_3(CODE[12]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), ethernetController_getDeviceName@string(BANK0[11]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK1[1]), 

    sp__hexToString	PTR unsigned char  size(2) Largest target is 10
		 -> hexToString@number(BANK1[10]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 16
		 -> ipAdressToString@address(BANK1[16]), 

    handleStackBackgroundTasks@stack	PTR volatile struct stack size(2) Largest target is 121
		 -> stack(BANK2[121]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> ARP_initTable@mac(BANK0[6]), ARP_sendRequest@targetMAC(BANK1[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> ARP_send@destination(BANK0[6]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_62(CODE[18]), STR_61(CODE[4]), STR_60(CODE[5]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 18
		 -> macToString@address(BANK0[18]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK2[15]), stack(BANK2[121]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> ARP_send@ethFrame(BANK0[34]), stack(BANK2[121]), 

    ENC424J600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK1[6]), 

    ENC424J600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 1
		 -> ethernetController_updateLinkStatus@temp16(BANK0[1]), 

    ENC424J600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_getInterruptFlags@low(BANK0[1]), ENC424J600_getInterruptFlags@high(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), 
		 -> ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_getPacketCount@lowByte(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@highByte(BANK0[1]), ENC424J600_readPHYRegister@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(BANK0[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    ENC424J600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_setRXTailPointer@highByte(BANK0[1]), ENC424J600_setRXTailPointer@lowByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> ENC424J600_setRXBufferStartAddress@lowByte(BANK0[1]), ENC424J600_setTXStartAddress@highByte(BANK0[1]), ENC424J600_setTXStartAddress@lowByte(BANK0[1]), ENC424J600_setTXLength@highByte(BANK0[1]), 
		 -> ENC424J600_setTXLength@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_readPHYRegister@unusedBits(BANK0[1]), ENC424J600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ethernetController_setLEDConfig@data(BANK0[1]), mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ENC424J600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_getInterruptFlags@low(BANK0[1]), ENC424J600_getInterruptFlags@high(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), 
		 -> ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_getPacketCount@lowByte(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@highByte(BANK0[1]), ENC424J600_readPHYRegister@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerH(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerL(BANK0[1]), 
		 -> ethernetController_getRSV@temp(BANK1[6]), ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@temp(COMRAM[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(BANK0[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    ENC424J600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_setRXTailPointer@highByte(BANK0[1]), ENC424J600_setRXTailPointer@lowByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> ENC424J600_setRXBufferStartAddress@lowByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@highByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@lowByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@opcode(BANK0[1]), 
		 -> ENC424J600_setGPDATAReadPointer@highByte(COMRAM[1]), ENC424J600_setGPDATAReadPointer@lowByte(COMRAM[1]), ENC424J600_setGPDATAReadPointer@opcode(COMRAM[1]), ENC424J600_setGPDATAWritePointer@highByte(BANK0[1]), 
		 -> ENC424J600_setGPDATAWritePointer@lowByte(BANK0[1]), ENC424J600_setGPDATAWritePointer@opcode(BANK0[1]), ENC424J600_setTXStartAddress@highByte(BANK0[1]), ENC424J600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> ENC424J600_setTXLength@highByte(BANK0[1]), ENC424J600_setTXLength@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_readPHYRegister@unusedBits(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@PHYaddress(BANK0[1]), ENC424J600_readControlRegisterUnbanked@addr(BANK0[1]), ENC424J600_readControlRegisterUnbanked@opcode(BANK0[1]), ENC424J600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> ENC424J600_writeControlRegisterUnbanked@opcode(BANK0[1]), ENC424J600_writeSingleByte@opcode(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), 
		 -> ethernetController_updateNextPacketPointer@opcode(BANK0[1]), ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@opcode(COMRAM[1]), ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 121
		 -> stack(BANK2[121]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _srand->_ethernetController_getMacAddress
    _printEthernetState->_UARTTransmitText
    _printErrorMessage->_UARTTransmitText
    _ipv4_txFrameRequest->_ethernet_txFrameRequest
    _ipv4_streamToTransmissionBuffer->_ethernetController_streamToTransmitBuffer
    _ipv4_setIPSourceAddress->_ARP_checkForEntry
    _ARP_sendRequest->_ARP_send
    _ARP_checkForEntry->_ipv4_cmp
    _ethernet_rxGetNewFrame->_ARP_handleNewPacket
    _ipv4_handleNewPacket->_ipv4_checkHeaderChecksum
    _ipv4_parseHeader->_ethernetController_streamFromRXBuffer
    _ipv4_checkHeaderChecksum->_UARTTransmitText
    _ethernetController_updateNextPacketPointer->_ENC424J600_setERXDATAReadPointer
    _ethernetController_getRSV->_ENC424J600_updateReceiveStatusVector
    _ethernetController_getEtherTypeField->_ENC424J600_setERXDATAReadPointer
    _UARTTransmitInt->_UARTTransmitText
    _intToString->___lldiv
    ___lldiv->___wmul
    _ethernetController_dropPacket->_ENC424J600_setRXTailPointer
    _ARP_sendReply->_ARP_send
    _macToString->_ethernetController_getMacAddress
    _ipAdressToString->___lwdiv
    _ethernetController_getMacAddress->_ENC424J600_readControlRegisterUnbanked
    _ARP_send->_ethernet_txFrameRequest
    _hexToString->_hexToChar
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    _ethernetController_writeEtherTypeFieldToBuffer->_ENC424J600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_ENC424J600_setGPDATAWritePointer
    _ethernetController_streamToTransmitBuffer->_ENC424J600_setGPDATAWritePointer
    _ENC424J600_setGPDATAWritePointer->_ENC424J600_writeSPI
    _ethernetController_sendPacket->_ENC424J600_setTXLength
    _ethernetController_sendPacket->_ENC424J600_setTXStartAddress
    _ENC424J600_setTXStartAddress->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_setTXLength->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_getSourceMACAddress->_ENC424J600_setERXDATAReadPointer
    _UARTTransmitText->_macToString
    _ARP_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_ENC424J600_setRXTailPointer
    _ethernetController_getNextPacketPointer->_ENC424J600_getNextPacketPointer
    _ENC424J600_setERXDATAReadPointer->_ENC424J600_writeSPI
    _ethernetController_updateLinkStatus->_ENC424J600_readPHYRegister
    _ENC424J600_readPHYRegister->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_readPHYRegister->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfig->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_setLEDConfig->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_ENC424J600_getInterruptFlags
    _ENC424J600_getInterruptFlags->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_ENC424J600_getPacketCount
    _ethernetController_clearInterruptFlag->_ENC424J600_clearInterruptFlag
    _ENC424J600_clearInterruptFlag->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_clearInterruptFlag->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_softReset->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_checkDeviceId->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_setRXTailPointer->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_setRXBufferStartAddress->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_enableReception->_ENC424J600_writeSingleByte
    _ENC424J600_writeSingleByte->_ENC424J600_writeSPI
    _ENC424J600_enableAutoMACInsertion->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_enableAutoMACInsertion->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_writeControlRegisterUnbanked->_ENC424J600_writeSPI
    _ethernetController_getSiliconRevision->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_getCurrentPacketCount->_ENC424J600_getPacketCount
    _ENC424J600_getPacketCount->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_readControlRegisterUnbanked->_ENC424J600_readSPI
    _ENC424J600_readControlRegisterUnbanked->_ENC424J600_writeSPI
    _ARP_initTable->_ARP_setNewEntry
    _ARP_setNewEntry->_getMillis

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ipv4_sendFrame
    _ipv4_sendFrame->_ARP_sendRequest
    _ethernet_rxGetNewFrame->_ARP_handleNewPacket
    _ARP_handleNewPacket->_ARP_sendReply

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                54    54      0  598703
                                            143 BANK1      3     3      0
                                              0 BANK3     50    50      0
                      _ARP_initTable
                           _UARTInit
                    _UARTTransmitInt
                   _UARTTransmitText
   _ethernetController_checkDeviceId
_ethernetController_getCurrentPacket
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
_ethernetController_getSiliconRevisi
            _ethernetController_init
    _ethernetController_setLEDConfig
         _handleStackBackgroundTasks
                        _hexToString
       _ipv4_calculateHeaderChecksum
            _ipv4_setIPSourceAddress
    _ipv4_streamToTransmissionBuffer
                _ipv4_txFrameRequest
         _ipv4_writeHeaderIntoBuffer
                        _macToString
                  _printErrorMessage
                 _printEthernetState
                   _sevenSegmentInit
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     121
                                             26 BANK0      2     0      2
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15   11156
                                             58 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    5     2      3   15754
                                             58 BANK0      5     2      3
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_writeHeaderIntoBuffer                          27     2     25    1579
                                              0 BANK0     27     2     25
 ---------------------------------------------------------------------------------
 (1) _ipv4_txFrameRequest                                  6     4      2   19470
                                             71 BANK0      6     4      2
            _ethernet_txFrameRequest
 ---------------------------------------------------------------------------------
 (1) _ipv4_streamToTransmissionBuffer                     71     5     66    7263
                                             30 BANK0     69     3     66
_ethernetController_streamToTransmit
 ---------------------------------------------------------------------------------
 (1) _ipv4_setIPSourceAddress                             10     6      4    1777
                                             22 BANK0     10     6      4
                  _ARP_checkForEntry
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                           4     2      2  425278
                                            139 BANK1      4     2      2
                   _UARTTransmitText
_ethernetController_clearInterruptFl
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
    _ethernetController_setLEDConfig
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                   _ipAdressToString
                     _ipv4_sendFrame
 ---------------------------------------------------------------------------------
 (2) _ipv4_sendFrame                                      87    21     66   96998
                                             52 BANK1     87    21     66
                  _ARP_checkForEntry
              _ARP_getEntryFromTable
                    _ARP_sendRequest
   _ethernetController_getMacAddress
      _ethernetController_sendPacket
_ethernetController_writeDestination
                          _getMillis
            _ipv4_getIPSourceAddress
 ---------------------------------------------------------------------------------
 (3) _ARP_sendRequest                                     52    44      8   68246
                                              0 BANK1     52    44      8
                           _ARP_send
   _ethernetController_getMacAddress
            _ipv4_getIPSourceAddress
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (3) _ARP_getEntryFromTable                                8     1      7      31
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (2) _ARP_checkForEntry                                   15     9      6    1498
                                              7 BANK0     15     9      6
                          _getMillis
                           _ipv4_cmp
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              14    11      3  258635
                                            120 BANK1     14    11      3
                _ARP_handleNewPacket
                    _UARTTransmitInt
                   _UARTTransmitText
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
_ethernetController_updateNextPacket
                          _getMillis
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                36    34      2   60772
                                             85 BANK0     36    34      2
                   _UARTTransmitText
      _ethernetController_dropPacket
                        _intToString
                   _ipAdressToString
                 _ipProtocolToString
           _ipv4_checkHeaderChecksum
                   _ipv4_parseHeader
 ---------------------------------------------------------------------------------
 (4) _ipv4_parseHeader                                    50    27     23   19707
                                             23 BANK0     50    27     23
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (4) _ipv4_checkHeaderChecksum                            27    25      2   13078
                                             58 BANK0     27    25      2
                   _UARTTransmitText
                        _hexToString
       _ipv4_calculateHeaderChecksum
 ---------------------------------------------------------------------------------
 (1) _ipv4_calculateHeaderChecksum                        18    16      2     929
                                              0 BANK0     18    16      2
 ---------------------------------------------------------------------------------
 (4) _ipProtocolToString                                   3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_updateNextPacketPointer          11    11      0    7269
                                             15 BANK0     11    11      0
    _ENC424J600_getNextPacketPointer
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
    _ENC424J600_setNextPacketPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    8464
                                             17 BANK0      7     2      5
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
_ENC424J600_updateReceiveStatusVecto
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_updateReceiveStatusVector                17    12      5    1356
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                18     9      9    7182
                                             15 BANK0     18     9      9
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     121
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _UARTTransmitInt                                      4     0      4   15773
                                             58 BANK0      4     0      4
                   _UARTTransmitText
_ethernetController_getSiliconRevisi (ARG)
                        _intToString
 ---------------------------------------------------------------------------------
 (2) _intToString                                         20    16      4    4787
                                             19 BANK0     20    16      4
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     592
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     961
                                              6 BANK0     13     5      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _ARP_handleNewPacket                                 36    34      2  132032
                                            156 BANK0      4     2      2
                                             88 BANK1     32    32      0
              _ARP_parseFromRXBuffer
                      _ARP_sendReply
                    _ARP_setNewEntry
                   _UARTTransmitText
      _ethernetController_dropPacket
                          _getMillis
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _getMillis                                            4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                        2     0      2    8834
                                             18 BANK0      2     0      2
        _ENC424J600_setRXTailPointer
         _ENC424J600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (4) _ARP_sendReply                                       88    56     32   84025
                                              0 BANK1     88    56     32
                           _ARP_send
                   _UARTTransmitText
   _ethernetController_getMacAddress
                   _ipAdressToString
                           _ipv4_cmp
            _ipv4_getIPSourceAddress
                        _macToString
 ---------------------------------------------------------------------------------
 (1) _macToString                                         30    24      6    1473
                                             26 BANK0     30    24      6
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (3) _ipv4_getIPSourceAddress                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _ipAdressToString                                    22    18      4    2986
                                              7 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     821
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getMacAddress                    12     6      6    6367
                                             14 BANK0     12     6      6
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _ARP_send                                            85    53     32   60715
                                             71 BANK0     85    53     32
                   _UARTTransmitText
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                        _hexToString
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (5) _mac_setToBroadcast                                   3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _hexToString                                          9     5      4     992
                                              1 BANK0      9     5      4
                          _hexToChar
 ---------------------------------------------------------------------------------
 (2) _hexToChar                                            1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ethernet_txFrameRequest                              5     3      2   18884
                                             66 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (3) _memory_txFrameRequest                               30    21      9    5819
                                             36 BANK0     30    21      9
                             ___wmul
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (4) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _checkForOverlap                                     18     0     18    2268
                                             18 BANK0     18     0     18
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (5) _checkForOverlapSwitched                             18     0     18    1072
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1312
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeEtherTypeFieldToBuffer      14     3     11    6059
                                             15 BANK0     14     3     11
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeDestinationMACAddress       24     9     15    6437
                                             15 BANK0     24     9     15
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ethernetController_streamToTransmitBuffer           15     6      9    6981
                                             15 BANK0     15     6      9
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setGPDATAWritePointer                     5     3      2    3059
                                             10 BANK0      5     3      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_sendPacket                        9     0      9   13708
                                             18 BANK0      9     0      9
             _ENC424J600_setTXLength
       _ENC424J600_setTXStartAddress
         _ENC424J600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (4) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setTXStartAddress                         4     2      2    5374
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setTXLength                               4     2      2    5374
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getSourceMACAddress              18     9      9    7244
                                             15 BANK0     18     9      9
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _UARTTransmitText                                     2     0      2   10775
                                             56 BANK0      2     0      2
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
   _ethernetController_getMacAddress (ARG)
                        _hexToString (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                 _ipProtocolToString (ARG)
                        _macToString (ARG)
 ---------------------------------------------------------------------------------
 (4) _ARP_parseFromRXBuffer                               73    41     32   22455
                                             23 BANK0     73    41     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_isAllZero                                        3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     372
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ipv4_isAllZero                                       3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ipv4_cmp                                             7     3      4     912
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamFromRXBuffer                5     3      2   18102
                                             18 BANK0      5     3      2
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
        _ENC424J600_setRXTailPointer
                _ENC424J600_writeSPI
         _ENC424J600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (6) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _ENC424J600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (7) _ENC424J600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _ENC424J600_setERXDATAReadPointer                     5     3      2    3329
                                             10 BANK0      5     3      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  4     2      2   18510
                                             32 BANK0      4     2      2
_ENC424J600_readControlRegisterUnban
         _ENC424J600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_readPHYRegister                          18    16      2   11923
                                             14 BANK0     18    16      2
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfig                      3     2      1   12237
                                             14 BANK0      3     2      1
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags                7     5      2    6716
                                             24 BANK0      7     5      2
       _ENC424J600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_getInterruptFlags                        10     8      2    6280
                                             14 BANK0     10     8      2
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    6215
          _ENC424J600_getPacketCount
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   11558
                                             18 BANK0      1     1      0
      _ENC424J600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_clearInterruptFlag                        4     4      0   11527
                                             14 BANK0      4     4      0
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (1) _ethernetController_init                              6     3      3   46456
                                             26 BANK0      6     3      3
  _ENC424J600_enableAutoMACInsertion
         _ENC424J600_enableReception
                 _ENC424J600_initSPI
    _ENC424J600_setNextPacketPointer
 _ENC424J600_setRXBufferStartAddress
        _ENC424J600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (2) _ethernetController_softReset                        12     9      3   14613
                                             14 BANK0     12     9      3
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
         _ENC424J600_writeSingleByte
 ---------------------------------------------------------------------------------
 (2) _ethernetController_checkDeviceId                     7     4      3    6360
                                             14 BANK0      7     4      3
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (6) _ENC424J600_setRXTailPointer                          4     2      2    5734
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
_ethernetController_getNextPacketPoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_setRXBufferStartAddress                   4     2      2    5374
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setNextPacketPointer                      2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_enableReception                           0     0      0    2650
         _ENC424J600_writeSingleByte
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_writeSingleByte                           1     1      0    2650
                                             10 BANK0      1     1      0
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_enableAutoMACInsertion                    1     1      0   11369
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_writeControlRegisterUnbanked              4     2      2    5148
                                             10 BANK0      4     2      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getSiliconRevision                1     1      0    6218
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getCurrentPacketCount             0     0      0    6215
          _ENC424J600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_getPacketCount                            1     1      0    6215
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_readControlRegisterUnbanked               4     2      2    6144
                                             10 BANK0      4     2      2
                 _ENC424J600_readSPI
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_writeSPI                                 10     8      2    2616
                                              0 BANK0     10     8      2
                 _ENC424J600_initSPI
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_readSPI                                  10     8      2     906
                                              0 BANK0     10     8      2
                 _ENC424J600_initSPI
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ARP_initTable                                       11    11      0    1720
                                             28 BANK0     11    11      0
                    _ARP_setNewEntry
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (4) _mac_setAllZero                                       3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ipv4_setToAllZero                                    3     1      2     279
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _ARP_setNewEntry                                     24    10     14     930
                                              4 BANK0     24    10     14
                          _getMillis (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                19    19      0    1062
                                             21 COMRAM    19    19      0
                      _buttonHandler
                 _sevenSegmentUpdate
                         _updateTime
 ---------------------------------------------------------------------------------
 (12) _updateTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _sevenSegmentUpdate                                  7     5      2     875
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (13) _parseNumber                                         7     4      3     641
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _buttonHandler                                       6     4      2     187
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ARP_initTable
     _ARP_setNewEntry
       _getMillis (ARG)
     _ipv4_setToAllZero
     _mac_setAllZero
   _UARTInit
   _UARTTransmitInt
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ethernetController_getSiliconRevision (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _intToString (ARG)
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
   _UARTTransmitText
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _hexToString (ARG)
       _hexToChar
     _intToString (ARG)
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
     _ipAdressToString (ARG)
       ___lwdiv
       ___lwmod
     _ipProtocolToString (ARG)
     _macToString (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
   _ethernetController_checkDeviceId
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_getCurrentPacketCount
     _ENC424J600_getPacketCount
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_getSiliconRevision
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_init
     _ENC424J600_enableAutoMACInsertion
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_enableReception
       _ENC424J600_writeSingleByte
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_initSPI
     _ENC424J600_setNextPacketPointer
     _ENC424J600_setRXBufferStartAddress
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_setRXTailPointer
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_getNextPacketPointer (ARG)
         _ENC424J600_getNextPacketPointer
     _ethernetController_checkDeviceId
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_softReset
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeSingleByte
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _ethernetController_setLEDConfig
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
     _ENC424J600_writeControlRegisterUnbanked
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _handleStackBackgroundTasks
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ethernetController_clearInterruptFlag
       _ENC424J600_clearInterruptFlag
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeControlRegisterUnbanked
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_newPacketAvailable
       _ENC424J600_getPacketCount
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_pollInterruptFlags
       _ENC424J600_getInterruptFlags
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_setLEDConfig
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_updateLinkStatus
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_readPHYRegister
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeControlRegisterUnbanked
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernet_rxGetNewFrame
       _ARP_handleNewPacket
         _ARP_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_setRXTailPointer
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_getNextPacketPointer (ARG)
                 _ENC424J600_getNextPacketPointer
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer
               _ENC424J600_getNextPacketPointer
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _ARP_sendReply
           _ARP_send
             _UARTTransmitText
               _etherTypeToString (ARG)
               _ethernetController_getDeviceName (ARG)
               _ethernetController_getMacAddress (ARG)
                 _ENC424J600_readControlRegisterUnbanked
                   _ENC424J600_readSPI
                     _ENC424J600_initSPI
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _hexToString (ARG)
                 _hexToChar
               _intToString (ARG)
                 ___lldiv
                   ___wmul (ARG)
                 ___llmod
                 ___wmul
               _ipAdressToString (ARG)
                 ___lwdiv
                 ___lwmod
               _ipProtocolToString (ARG)
               _macToString (ARG)
                 _ethernetController_getMacAddress (ARG)
                   _ENC424J600_readControlRegisterUnbanked
                     _ENC424J600_readSPI
                       _ENC424J600_initSPI
                     _ENC424J600_writeSPI
                       _ENC424J600_initSPI
             _ethernetController_getSourceMACAddress
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_setERXDATAReadPointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_sendPacket
               _ENC424J600_setTXLength
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_setTXStartAddress
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_writeSingleByte
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _hexToString
               _hexToChar
             _mac_setToBroadcast
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               ___lldiv
                 ___wmul (ARG)
               ___llmod
               ___wmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
             _ipProtocolToString (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _ENC424J600_readControlRegisterUnbanked
                   _ENC424J600_readSPI
                     _ENC424J600_initSPI
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
           _ethernetController_getMacAddress
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _ipAdressToString
             ___lwdiv
             ___lwmod
           _ipv4_cmp
           _ipv4_getIPSourceAddress
           _macToString
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ARP_setNewEntry
           _getMillis (ARG)
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_dropPacket
           _ENC424J600_setRXTailPointer
             _ENC424J600_writeControlRegisterUnbanked
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _ENC424J600_getNextPacketPointer
           _ENC424J600_writeSingleByte
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer
             _ENC424J600_getNextPacketPointer
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
         _macToString
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _UARTTransmitInt
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_getSiliconRevision (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
         _ipProtocolToString (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _etherTypeToString
       _ethernetController_dropPacket
         _ENC424J600_setRXTailPointer
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer (ARG)
             _ENC424J600_getNextPacketPointer
         _ENC424J600_writeSingleByte
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ethernetController_getNextPacketPointer
           _ENC424J600_getNextPacketPointer
       _ethernetController_getEtherTypeField
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_getNextPacketPointer
         _ENC424J600_getNextPacketPointer
       _ethernetController_getRSV
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_updateReceiveStatusVector
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_updateNextPacketPointer
         _ENC424J600_getNextPacketPointer
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_setNextPacketPointer
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _getMillis
       _intToString
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipv4_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_dropPacket
           _ENC424J600_setRXTailPointer
             _ENC424J600_writeControlRegisterUnbanked
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _ENC424J600_getNextPacketPointer
           _ENC424J600_writeSingleByte
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer
             _ENC424J600_getNextPacketPointer
         _intToString
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString
           ___lwdiv
           ___lwmod
         _ipProtocolToString
         _ipv4_checkHeaderChecksum
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               ___lldiv
                 ___wmul (ARG)
               ___llmod
               ___wmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
             _ipProtocolToString (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _ENC424J600_readControlRegisterUnbanked
                   _ENC424J600_readSPI
                     _ENC424J600_initSPI
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
           _hexToString
             _hexToChar
           _ipv4_calculateHeaderChecksum
         _ipv4_parseHeader
           _ethernetController_streamFromRXBuffer
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_setRXTailPointer
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_getNextPacketPointer (ARG)
                 _ENC424J600_getNextPacketPointer
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer
               _ENC424J600_getNextPacketPointer
       _macToString
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ipAdressToString
       ___lwdiv
       ___lwmod
     _ipv4_sendFrame
       _ARP_checkForEntry
         _getMillis
         _ipv4_cmp
       _ARP_getEntryFromTable
       _ARP_sendRequest
         _ARP_send
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               ___lldiv
                 ___wmul (ARG)
               ___llmod
               ___wmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
             _ipProtocolToString (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _ENC424J600_readControlRegisterUnbanked
                   _ENC424J600_readSPI
                     _ENC424J600_initSPI
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
           _ethernetController_getSourceMACAddress
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_sendPacket
             _ENC424J600_setTXLength
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _ENC424J600_setTXStartAddress
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _memory_txFrameClear
           _ethernetController_streamToTransmitBuffer
             _ENC424J600_setGPDATAWritePointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernet_txFrameRequest
             _ethernetController_writeDestinationMACAddress
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_writeEtherTypeFieldToBuffer
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _memory_txFrameRequest
               ___wmul
               _checkForOverlap
                 _checkForOverlapSwitched
               _entireMemoryEmpty
               _entireMemoryFull
           _hexToString
             _hexToChar
           _mac_setToBroadcast
         _ethernetController_getMacAddress
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _ipv4_getIPSourceAddress
         _mac_setAllZero
       _ethernetController_getMacAddress
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _ethernetController_sendPacket
         _ENC424J600_setTXLength
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _ENC424J600_setTXStartAddress
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _ENC424J600_writeSingleByte
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _memory_txFrameClear
       _ethernetController_writeDestinationMACAddress
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _getMillis
       _ipv4_getIPSourceAddress
   _hexToString
     _hexToChar
   _ipv4_calculateHeaderChecksum
   _ipv4_setIPSourceAddress
     _ARP_checkForEntry
       _getMillis
       _ipv4_cmp
   _ipv4_streamToTransmissionBuffer
     _ethernetController_streamToTransmitBuffer
       _ENC424J600_setGPDATAWritePointer
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ipv4_txFrameRequest
     _ethernet_txFrameRequest
       _ethernetController_writeDestinationMACAddress
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_writeEtherTypeFieldToBuffer
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _memory_txFrameRequest
         ___wmul
         _checkForOverlap
           _checkForOverlapSwitched
         _entireMemoryEmpty
         _entireMemoryFull
   _ipv4_writeHeaderIntoBuffer
   _macToString
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _printErrorMessage
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _intToString
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
   _printEthernetState
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
   _sevenSegmentInit
   _srand
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100     32      D4      12       82.8%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      E2      10       88.3%
BITBANK1           100      0       0       7        0.0%
BANK1              100     92      D6       8       83.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      4E       1       83.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     37A       6        0.0%
DATA                 0      0     37A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 07 20:14:39 2019

                                            main@IPsource 03D0  
                                            ?_hexToString 0061  
                __end_of_ethernetController_getMacAddress 4324  
               __size_of_ethernetController_getMacAddress 0074  
                      ??_ethernetController_getMacAddress 0074  
                       ?_ethernetController_getMacAddress 006E  
                        _ethernetController_getMacAddress 42B0  
                                                      l80 32AC  
                                                      l82 328E  
                                                      l84 32A6  
                                                      l85 32C2  
                                                      l88 4794  
                     __size_of_ipv4_writeHeaderIntoBuffer 016E  
                        __end_of_ipv4_checkHeaderChecksum 386C  
                 ethernetController_getSourceMACAddress@i 0080  
                   ipv4_setIPSourceAddress@numberOfProbes 007A  
                                     ___wmul@multiplicand 0062  
                                      i2___lwdiv@dividend 0001  
                      ipv4_calculateHeaderChecksum@header 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                 ??_memory_txFrameRequest 008D  
                                  __size_of_ARP_sendReply 016C  
                                                     l202 3DF4  
                                                     l130 41F0  
                                                     l211 3E14  
                                                     l203 3DDE  
                                                     l131 4236  
                                                     l212 3DFC  
                                                     l204 3DCA  
                                                     l230 45CC  
                                                     l214 3E2A  
                                                     l215 3E04  
                                                     l207 3DD2  
                                                     l151 443A  
                                                     l216 3E0A  
                                                     l208 3DD6  
                                                     l136 3FEC  
                                                     l161 4270  
                                                     l138 4034  
                                                     l410 4A44  
                                                     l243 44D2  
                                                     l315 3F0C  
                                                     l180 3CDC  
                                                     l412 4A66  
                                                     l261 31C4  
                                                     l181 3CF2  
                                                     l430 343E  
                                                     l239 448C  
                                                     l175 3CFC  
                                                     l256 310C  
                                                     l176 3C84  
                                                     l416 4A0C  
                                                     l520 2522  
                                                     l193 3E5C  
                                                     l441 34B2  
                                                     l185 4968  
                                                     l513 239E  
                                                     l178 3CA8  
                                                     l434 34B6  
                                                     l418 4A2E  
                                                     l186 497E  
                                                     l362 024E  
                                                     l195 3E8C  
                                                     l179 3CBC  
                                                     l451 3B2C  
                                                     l435 34A0  
                                                     l355 3716  
                                                     l371 03D6  
                                                     l363 0292  
                                                     l436 3476  
                                                     l460 0634  
                                                     l364 032E  
                                                     l516 247E  
                                                     l197 3EB2  
                                                     l453 3B28  
                                                     l437 3472  
                                                     l357 3736  
                                                     l373 03F2  
                                                     l365 034E  
                                                     l517 24C6  
                                                     l390 4900  
                                                     l382 4AE8  
                                                     l446 3AF4  
                                                     l470 06EE  
                                                     l462 0658  
                                                     l366 036E  
                                                     l367 04E6  
                                                     l519 250A  
                                                     l631 0DC6  
                                                     l384 4B02  
                                                     l456 3B3C  
                                                     l480 0966  
                                                     l472 06F6  
                                                     l464 0684  
                                                     l368 03BA  
                                                     l377 4CBE  
                                                     l801 33C0  
                                                     l369 052A  
                                                     l633 0DD0  
                                                     l394 4CE4  
                                                     l474 0914  
                                                     l626 0B7C  
                                                     l475 0830  
                                                     l467 06BA  
                                                     l651 3B74  
                                                     l627 0BFA  
                                                     l388 48D4  
                                                     l636 0ED4  
                                                     l628 0C32  
                                                     l485 09D8  
                                                     l805 4860  
                                                     l813 4826  
                                                     l653 3B90  
                                                     l637 0E68  
                                                     l629 0D86  
                                                     l910 10EA  
                                                     l486 0AB8  
                                                     l830 231E  
                                                     l902 28BC  
                                                     l806 4840  
                                                     l814 47FC  
                                                     l670 2F10  
                                                     l662 2EB0  
                                                     l638 0EB8  
                                                     l487 0ADA  
                                                     l479 08B6  
                                                     l671 2ED4  
                                                     l663 2E60  
                                                     l655 3BA4  
                                                     l639 0ED0  
                                                     l912 1188  
                                                     l824 2164  
                                                     l904 28FC  
                                                     l808 484C  
                                                     l816 4808  
                                                     l672 2F42  
                                                     l656 3BBA  
                                                     l921 127A  
                                                     l913 1140  
                                                     l761 4614  
                                                     l905 29DA  
                                                     l809 4856  
                                                     l817 4812  
                                                     l673 2EE2  
                                                     l665 2E70  
                                                     l649 3B60  
                                                     l826 2284  
                                                     l906 29EE  
                                                     l818 481C  
                                                     l674 2EF2  
                                                     l666 2E80  
                                                     l658 3BCE  
                                                     l923 12B0  
                                                     l915 11DE  
                                                     l763 463C  
                                                     l827 22D8  
                                                     l675 2F00  
                                                     l667 2E90  
                                                     l916 1196  
                                                     l940 1B6A  
                                                     l668 2EA0  
                                                     l925 12F2  
                                                     l909 1132  
                                                     l781 4D78  
                                                     l926 12F4  
                                                     l918 1234  
                                                     l942 1BE0  
                                                     l774 1E56  
                                                     l927 132A  
                                                     l919 11EC  
                                                     l943 1BAC  
                                                     l775 1E80  
                                                     l784 4D84  
                                                     l936 1B5C  
                                                     l776 1EA8  
                                                     l945 1C22  
                                                     l937 1B28  
                                                     l777 1ED0  
                                                     l946 1BEE  
                                                     l970 3A86  
                                                     l939 1B9E  
                                                     l795 3300  
                                                     l796 33CE  
                                                     l789 3550  
                                                     l797 3350  
                                                     l983 4572  
                                                     l799 3384  
                                                     l967 39EA  
                                                     l977 35F0  
                                                     l979 3648  
                                            __CFG_CPB$OFF 000000  
                             __end_of_ipv4_txFrameRequest 2E50  
                                            __CFG_CPD$OFF 000000  
                                                     _ISR 0008  
           ENC424J600_writeControlRegisterUnbanked@opcode 006D  
                __end_of_ethernetController_getDeviceName 4D44  
               __size_of_ethernetController_getDeviceName 0024  
                      ??_ethernetController_getDeviceName 0062  
                       ?_ethernetController_getDeviceName 0060  
                        _ethernetController_getDeviceName 4D20  
                                memory_txFrameClear@index 0060  
                    ENC424J600_readPHYRegister@unusedBits 0078  
                     ethernetController_getMacAddress@mac 0074  
                          memory_txFrameRequest@freeIndex 00A1  
                            ??_ENC424J600_enableReception 006B  
                                                     prod 000FF3  
                            ipv4_setIPSourceAddress@index 007C  
                                            hexToChar@val 0060  
           ethernetController_streamFromRXBuffer@startEnd 0074  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                      _sevenSegmentUpdate 386C  
                            ipv4_setIPSourceAddress@state 0047  
               ethernetController_getEtherTypeField@field 006F  
                                  _numberOfOccupiedFields 004C  
                      ethernetController_setLEDConfig@LED 006F  
                      __size_of_ethernetController_getRSV 0074  
                            ipv4_sendFrame@requestCounter 019A  
                                                    ?_ISR 0001  
                          ?_ethernetController_sendPacket 0072  
                                                    l1101 4B18  
                                                    l1103 4B32  
                                                    l1042 279E  
                                                    l1107 4DD4  
                                                    l1061 26D4  
                                                    l1046 285E  
                                                    l1071 37F0  
                                                    l1047 287A  
                                                    l1064 20A8  
                                                    l1066 20EE  
                                                    l1082 413A  
                                                    l1059 2552  
                                                    l1083 40E0  
                                                    l1084 4122  
                                                    l1085 4116  
                                                    l1095 4916  
                                                    l1097 4942  
                                                    l1521 4688  
                                                    l1089 4128  
                                                    l1522 4680  
                                                    l1531 489A  
                                                    l1532 4892  
                                                    l1525 46A8  
                                                    l1526 46B2  
                                                    l1535 48B2  
                                                    l1536 48BC  
                                                    l1472 3FB2  
                                                    l1473 3FC0  
                                                    l1482 4528  
                                                    l1483 4536  
                                                    l1468 3F7E  
                                                    l1469 3F72  
                                                    l1478 4500  
                                                    l1479 44F4  
                                                    l7205 45FA  
                                                    l8021 4B10  
                                                    l7311 4A04  
                                                    l8041 490E  
                                                    l7421 3FE4  
                                                    l9105 4DCC  
                                                    l8243 4CDC  
                                                    l7291 4A3C  
                                                    l7439 402C  
                                                    l7551 0828  
                                                    l8417 35E8  
                                                    l9261 456A  
                                                    l8613 313E  
                                                    l8453 20A0  
                                                    l7479 44BA  
                                                    l8359 1322  
                                                    l7585 095E  
                                                    l7905 33C0  
                                                    l8529 4268  
                                                    l8465 20E6  
                                                    l7915 4AE0  
                                                    l7747 4CB6  
         ethernetController_streamToTransmitBuffer@opcode 007D  
                                                    l7685 4236  
                                                    l7909 33CE  
                                                    l8493 37F0  
                                                    l9189 247E  
                                                    l7935 48CC  
                                                    l7695 4432  
                                                    l7955 215C  
                                                    l8829 3298  
                                                    l8781 3A86  
                                                    l7887 3364  
                                                    l8767 39E2  
                                                    l7897 3398  
                                                    l9767 050C  
                                                    STR_1 7FCE  
                                                    STR_2 7FFA  
                                                    l9769 0522  
                                                    STR_3 7F65  
                                                    STR_4 7F86  
                                                    STR_5 7EF8  
                           ?_ethernetController_softReset 006E  
                                                    STR_6 7FCE  
                                                    STR_7 7FFA  
                                                    STR_8 7FC0  
                                                    STR_9 7FB9  
               ethernetController_clearInterruptFlag@flag 0072  
               ENC424J600_setRXBufferStartAddress@lowByte 0070  
                                                    u8000 45FA  
                                                    u8010 460A  
                                                    _RCIE 007CED  
                                                    u8020 3A9E  
                                                    _RCIF 007CF5  
                                                    u8030 3AAC  
                                                    u8040 3ABA  
                                                    u8200 4A32  
                                                    u9000 357E  
                                                    u8050 3AC8  
                                                    u8210 33E8  
                                                    u8220 33F6  
                                                    u9020 468C  
                                                    u9005 3574  
                                                    u8230 3404  
                                                    _RCIP 007CFD  
                                                    u9200 4904  
                                                    u8240 3412  
                                                    u8410 404E  
                                                    u8090 3AF0  
                                                    u8170 4A6A  
                                                    u9050 489E  
                                                    u9130 33AA  
                                                    u8331 3480  
                                                    u9140 33CE  
                                                    u8341 3492  
                                                    u8430 44BA  
                                                    u8511 067A  
                                                    u9071 431A  
                                                    u8440 44CA  
                                                    u9320 4B36  
                                                    u8280 343A  
                                                    u9240 22B0  
                                                    u8361 34C0  
                                                    u8601 084E  
                                                    u8521 06B0  
                                                    u9401 1A5A  
                                                    u9170 4B06  
                                                    u8371 34D2  
                                                    u8611 086C  
                                                    u9411 1A74  
                                                    u9091 32DA  
                                                    u9260 2322  
                                                    u8701 09A2  
                                                    u8461 062A  
                                                    u9501 1B74  
                                                    u9421 1A8E  
                                                    u9350 4946  
                                                    u8390 4014  
                                                    u8711 09C0  
                                                    u9431 1AA8  
                                                    u8641 08AC  
                                                    u8481 064E  
                                                    u9521 1BB6  
                                                    u9441 1AC2  
                                                    u9361 1994  
                                                    u8730 09DE  
                                                    u8650 08BC  
                                                    u9610 4504  
                                                    u9290 18E8  
                                                    u9451 1ADC  
                                                    u9371 19A6  
                                                    u9275 16BC  
                                                    u8661 090A  
                                                    u8901 3762  
                                                    u9541 1BF8  
                                                    u9461 1AF6  
                                                    u9381 19B8  
                                                    u9285 176A  
                                                    u9710 143E  
                                                    u9630 13A2  
                                                    u8751 0AAE  
                                                    u8911 3796  
                                                    u9471 1B10  
                                                    u9295 18DE  
                                                    u8920 4634  
                                                    u8840 4460  
                                                    u9561 1C34  
                                                    u9481 1B32  
                                                    u8930 4640  
                                                    u9810 1504  
                                                    u9730 1464  
                                                    u9650 13C6  
                                                    u8851 446C  
                                                    u8771 0AD0  
                                                    u8940 4660  
                                                    u9580 3F82  
                                                    u9708 1418  
                                                    u8861 36EE  
                                                    u9910 15CE  
                                                    u9830 152C  
                                                    u9750 148C  
                                                    u9670 13EC  
                                                    u8927 462A  
                                                    u9808 14E2  
                                                    u9728 1442  
                                                    u9648 13A6  
                                                    u9930 15F6  
                                                    u9850 1556  
                                                    u9770 14B6  
                                                    u9690 1414  
                                                    u8947 4656  
                                                    u8891 3748  
                                                    u8980 34F2  
                                                    u9908 15A8  
                                                    u9828 1508  
                                                    u9748 1468  
                                                    u9668 13CA  
                                                    u8990 3520  
                                                    u9950 161A  
                                                    u9870 157C  
                                                    u9790 14DE  
                                                    u9928 15D2  
                                                    u9848 1530  
                                                    u9768 1490  
                                                    u9688 13F0  
                                                    u9970 1640  
                                                    u9890 15A4  
                                                    u8995 3516  
                                                    u9948 15FA  
                                                    u9868 155A  
                                                    u9788 14BA  
                                                    u9991 165C  
                                                    u9968 161E  
                                                    u9888 1580  
                                                    u9988 1644  
                                                    _TRMT 007D61  
                                          mac_isAllZero@i 0062  
                                     ?_sevenSegmentUpdate 000F  
                            ipv4_sendFrame@requestTimeout 017E  
                                       _ipv4_setToAllZero 4DC6  
                                                    _main 0AE4  
                                 printEthernetState@state 009A  
                                                    _time 0029  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                      i2___lwdiv@quotient 0005  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf1 000FE7  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                                    btemp 004F  
                                           __CFG_BORV$190 000000  
                                      intToString@pointer 0086  
                               __size_of_sevenSegmentInit 001A  
                                 _ethernetController_init 4324  
                                      ?_ipv4_setToAllZero 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                     __size_of_handleStackBackgroundTasks 01EA  
                                                    start 00E8  
          __end_of_ethernetController_getSourceMACAddress 4476  
         __size_of_ethernetController_getSourceMACAddress 0070  
                ??_ethernetController_getSourceMACAddress 0078  
                 ?_ethernetController_getSourceMACAddress 006F  
                  _ethernetController_getSourceMACAddress 4406  
                                           __CFG_IESO$OFF 000000  
                                 __end_of_UARTTransmitInt 4D66  
                               _ENC424J600_getPacketCount 4E1A  
                             __end_of_ENC424J600_writeSPI 4612  
                                         ??_mac_isAllZero 0062  
                                           __CFG_MCLRE$ON 000000  
                              memory_txFrameRequest@field 0098  
                                            ___param_bank 000000  
                           ethernet_rxGetNewFrame@counter 0039  
                                        ARP_setNewEntry@i 007B  
                                 _checkForOverlapSwitched 3A8E  
              ENC424J600_setRXBufferStartAddress@highByte 0071  
            __end_of_ethernetController_getEtherTypeField 4406  
           __size_of_ethernetController_getEtherTypeField 0070  
                  ??_ethernetController_getEtherTypeField 0078  
                   ?_ethernetController_getEtherTypeField 006F  
                    _ethernetController_getEtherTypeField 4396  
                                                   ??_ISR 0016  
                                     ??_ipv4_setToAllZero 0062  
                     __size_of_ENC424J600_enableReception 0008  
                                          _ipv4_isAllZero 4B0A  
                     ethernetController_setLEDConfig@data 0070  
                                    ??_sevenSegmentUpdate 0011  
                                            ?_intToString 0073  
                                          ARP_probe@state 0048  
                     ethernetController_setLEDConfig@conf 006E  
                                     _ipv4_sendFrame$4461 0182  
        __end_of_ethernetController_getCurrentPacketCount 4F00  
       __size_of_ethernetController_getCurrentPacketCount 0006  
               ?_ethernetController_getCurrentPacketCount 0001  
              ??_ethernetController_getCurrentPacketCount 006F  
                _ethernetController_getCurrentPacketCount 4EFA  
                                __size_of_ARP_setNewEntry 00EE  
                                        __end_of_ARP_send 1C42  
                                       _nextPacketPointer 0044  
                                __size_of_ARP_sendRequest 00B2  
                                                   ?_main 0001  
                                                   _CCPR1 000FBE  
                                                   STR_10 7FCE  
                                                   STR_11 7FF3  
                                                   STR_12 7FF6  
                                                   STR_20 7E8F  
                                                   STR_21 7CC2  
                                                   STR_13 7FDF  
                                                   STR_14 7FFA  
                                                   STR_30 7F99  
                                                   STR_22 7EB4  
                                                   STR_31 7CC2  
                                                   STR_15 7FCE  
                                                   STR_23 7FFC  
                                                   STR_40 7E40  
                                                   STR_16 7EF3  
                                                   STR_32 7CEC  
                                                   STR_24 7C61  
                                                   STR_41 7CC2  
                                                   STR_17 7FF0  
                                                   STR_33 7F4D  
                                                   STR_25 7C94  
                                                   STR_26 7C61  
                                                   STR_18 7FF9  
                                                   STR_42 7F34  
                                                   STR_34 7E1A  
                                                   STR_50 7D59  
                                                   STR_19 7CC2  
                                                   STR_35 7FDB  
                                                   STR_51 7E7C  
                                                   STR_43 7E69  
                                                   STR_27 7DEB  
                                                   STR_60 7FD0  
                                                   STR_28 7F59  
                                                   STR_52 7F26  
                                                   STR_44 7E56  
                                                   STR_36 7E03  
                                                   STR_37 7FDB  
                                                   STR_29 7E41  
                                                   STR_61 7FEC  
                                                   STR_53 7F17  
                                                   STR_45 7E2F  
                                                   STR_70 7FCB  
                                                   STR_62 7EA2  
                                                   STR_38 7DCF  
                                                   STR_46 7D95  
                                                   STR_54 7D12  
                                                   STR_39 7C61  
                                                   STR_71 7E40  
                                                   STR_63 7FD5  
                                                   STR_47 7DB2  
                                                   STR_55 7C2A  
                                                   STR_72 7FFA  
                                                   STR_64 7FE4  
                                                   STR_48 7FAA  
                                                   STR_80 7FA2  
                                                   STR_56 7D37  
                                                   STR_65 7FE8  
                                                   STR_73 7F7C  
                                                   STR_81 7F41  
                                                   STR_49 7ED7  
                                                   STR_57 7D77  
                                                   STR_58 7F90  
                                                   STR_74 7F08  
                                                   STR_66 7EC6  
                                                   STR_90 7E43  
                                                   STR_75 7E40  
                                                   STR_83 7FCE  
                                                   STR_59 7FDA  
                                                   STR_91 7F71  
                                                   STR_67 7CC5  
                                                   STR_76 7CC2  
                                                   STR_68 7FCE  
                                                   STR_84 7FC6  
                                                   STR_92 7FB2  
                                                   STR_69 7E40  
                                                   STR_85 7FF6  
                                                   STR_93 7FFA  
                                                   STR_77 7EE8  
                                                   STR_78 7E40  
                                                   STR_86 7FF6  
                                                   STR_87 7FF6  
                                                   STR_79 7FFA  
                                                   STR_88 7E40  
                                                   STR_89 7FFA  
                                                   u10010 1E3E  
                                         __end_of___lldiv 3FD2  
                                                   u10020 1E68  
                                                   u10030 1E90  
                                                   u11000 4E90  
                                                   u10040 1EB8  
                                                   u10220 1322  
                                                   u10301 2CA0  
                                                   u10231 1340  
                                                   u10311 2CC4  
                                                   u10401 2148  
                                                   u11201 277A  
                                                   u10170 12EE  
                                                   u10411 37B2  
                                                   u11131 0414  
                                                   u10340 364C  
                                                   u10500 313E  
                                                   u10261 2BF2  
                                                   u11141 044E  
                                                   u10351 368A  
                                                   u10271 2C04  
                                                   u11071 0178  
                                                   u10520 28AE  
                                                   u10440 428A  
                                                   u10281 2C6C  
                                                   u10601 2A0E  
                                                   u11161 272E  
                                                   u11250 4D2E  
                                                   u10370 20E2  
                                                   u10610 2544  
                                                   u10291 2C8E  
                                                   u10531 28CE  
                                                   u10451 42A6  
                                                   u11091 02A4  
                                                   u11171 2740  
                                                   u10621 2566  
                                                   u11181 2752  
                                                   u11501 4C26  
                                                   u10390 2128  
                                                   u10551 2914  
                                                   u10631 25A0  
                                                   u11191 2764  
                                                   u10800 2F96  
                                                   u10720 3A8A  
                                                   u10561 2972  
                                         __end_of___llmod 4548  
                                                   u11601 0C86  
                                                   u10474 3EF0  
                                                   u11371 457C  
                                                   u10475 3EEC  
                                                   u10731 4B5E  
                                                   u10651 3934  
                                                   u11291 23C4  
                                                   u11611 0DA0  
                                                   u10484 3F32  
                                                   u10900 301C  
                                                   u10820 2FAE  
                                                   u10485 3F2E  
                                                   u10661 399A  
                                                   u10591 29F8  
                                                   u10671 39BC  
                                                   u10920 3038  
                                                   u10840 2FC8  
                                                   u10681 39CE  
                                                   u10818 2F9A  
                                                   u11491 3BD8  
                                                   u11651 0E3C  
                                                   u10940 3056  
                                                   u10860 2FE4  
                                                   u10918 3020  
                                                   u10838 2FB2  
                                                   u11671 0E96  
                                                   u10960 3072  
                                                   u10880 3002  
                                                   u11681 0EC2  
                                                   u11737 0B36  
                                                   u10938 303C  
                                                   u10858 2FCC  
                                                   u11747 0CF0  
                                                   u10980 308A  
                                                   u11757 3106  
                                                   u10958 305A  
                                                   u10878 2FE8  
                                                   u11767 3246  
                                                   u11777 3282  
                                                   u10978 3076  
                                                   u10898 3006  
                                                   u10998 308E  
                                         __end_of___lwdiv 46BC  
                              __end_of_printEthernetState 3BE2  
                                         __end_of___lwmod 48C6  
                                           __CFG_WDTEN$ON 000000  
        ethernetController_streamToTransmitBuffer@pointer 0040  
                                                   i2l740 40B2  
                                                   i2l732 38C2  
                                                   i2l741 40B6  
                                                   i2l727 389E  
                                                   i2l736 40BA  
                                                   i2l737 40AA  
                                                   i2l729 38A6  
                                                   i2l739 40AE  
                                                   i2l686 3C18  
                                                   i2l688 3C28  
                                                   i2l696 007A  
                                                   i2l689 3C6C  
                                                   i2l697 0098  
                                                   _SPBRG 000FAF  
                                                   _PORTA 000F80  
                                                   _PORTB 000F81  
                                                   _PORTC 000F82  
                        __size_of_ethernet_txFrameRequest 00E8  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
                        ENC424J600_setTXStartAddress@addr 006E  
         __end_of_ENC424J600_writeControlRegisterUnbanked 4AA4  
        __size_of_ENC424J600_writeControlRegisterUnbanked 0036  
               ??_ENC424J600_writeControlRegisterUnbanked 006C  
                ?_ENC424J600_writeControlRegisterUnbanked 006A  
                 _ENC424J600_writeControlRegisterUnbanked 4A6E  
                                ARP_parseFromRXBuffer@arp 00A0  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                                           __CFG_WRT2$OFF 000000  
                                           __CFG_WRT3$OFF 000000  
                                           _ARP_initTable 4548  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                         __end_of_mac_cmp 4908  
                                        __end_of_UARTInit 4EB4  
                                     intToString@hundreds 0083  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          __CFG_EBTRB$OFF 000000  
                __end_of_ENC424J600_setGPDATAWritePointer 49C2  
               __size_of_ENC424J600_setGPDATAWritePointer 003C  
                      ??_ENC424J600_setGPDATAWritePointer 006C  
                       ?_ENC424J600_setGPDATAWritePointer 006A  
                        _ENC424J600_setGPDATAWritePointer 4986  
                                                   _randx 01C2  
                               __end_of_ipv4_setToAllZero 4DE4  
                                                   _srand 4E94  
                                                   _stack 0257  
                                                   main@i 03C8  
           ethernetController_streamToTransmitBuffer@data 007C  
                       __end_of_ethernetController_getRSV 42B0  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                            ethernet_txFrameRequest@frame 00A2  
                             ARP_parseFromRXBuffer@i_2971 009B  
                             ARP_parseFromRXBuffer@i_2972 009C  
                             ARP_parseFromRXBuffer@i_2973 009D  
                                        ?_checkForOverlap 0072  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                                  ENC424J600_readSPI@data 0060  
                             memory_txFrameRequest@i_1167 0097  
                                                   status 000FD8  
                                           _ARP_sendReply 2BAE  
                                          __CFG_T3CMX$RC0 000000  
                                                   wtemp6 0050  
                       ENC424J600_clearInterruptFlag@flag 0070  
                             __size_of_mac_setToBroadcast 0026  
                                          __CFG_ICPRT$OFF 000000  
                       ENC424J600_clearInterruptFlag@temp 0071  
                                __end_of_UARTTransmitText 4668  
                                             ARP_send@arp 00A7  
                                          __CFG_PBADEN$ON 000000  
                                          _ipv4_sendFrame 26E2  
                                      __size_ofi2___lwdiv 0052  
                                            ?_parseNumber 0008  
                                         intToString@ones 0082  
                                        _ipAdressToString 2152  
                                         intToString@tens 0081  
                             ARP_parseFromRXBuffer@offset 009E  
                             ?_ENC424J600_readPHYRegister 006E  
                                         __initialization 3D16  
                       ethernetController_softReset@F5850 0042  
                       ethernetController_softReset@F5848 004D  
                             memory_txFrameRequest@length 0084  
                                       ARP_setNewEntry@ip 006A  
                          __size_of_ARP_getEntryFromTable 002E  
                                            __end_of_main 0F50  
                                  __end_of_ipv4_isAllZero 4B3A  
                           __end_of_ARP_getEntryFromTable 4B68  
                                ?_ipv4_getIPSourceAddress 0060  
                                  arpEntryToString@string 0370  
                                ?_ipv4_setIPSourceAddress 0076  
                                    _ipv4_handleNewPacket 252A  
                                          __CFG_PCLKEN$ON 000000  
                              _memory_txFrameRequest$1163 0093  
                                       ARP_sendReply@myIP 0134  
                                           main@headerBuf 03A6  
                                                  ??_main 018F  
                               __size_of_entireMemoryFull 0038  
                                           __activetblptr 000002  
                      __end_of_ipv4_writeHeaderIntoBuffer 2BAE  
                              _ipv4_writeHeaderIntoBuffer 2A40  
                                          ?_ARP_initTable 0001  
                         handleStackBackgroundTasks@stack 018B  
                                          __CFG_SDOMX$RB3 000000  
                                         __CFG_CCP2MX$RC1 000000  
       ethernetController_writeDestinationMACAddress@addr 006F  
       ethernetController_writeDestinationMACAddress@data 007E  
                ethernetController_pollInterruptFlags@reg 007D  
                                        ___llmod@dividend 0060  
                                    __size_of_macToString 0108  
                                                  ?_srand 007A  
                                                  _ANSELA 000F5B  
                                                  _ANSELB 000F5C  
                                                  _ANSELC 000F5D  
                              ethernetController_getRSV@i 0077  
                                    ipv4_parseHeader@temp 0091  
                       __size_of_ipv4_checkHeaderChecksum 00C8  
                              printEthernetState@oldState 0248  
                                                  i2l1521 46DA  
                                                  i2l1522 46D2  
                                                  i2l1525 46FA  
                                                  i2l1526 4704  
                                  ARP_sendRequest@request 0114  
                               ??_ethernetController_init 007D  
                                                  i2l6739 38BA  
                               ?_ipv4_checkHeaderChecksum 009A  
                                          ?_ARP_sendReply 0100  
       __end_of_ethernetController_streamToTransmitBuffer 423C  
      __size_of_ethernetController_streamToTransmitBuffer 0078  
             ??_ethernetController_streamToTransmitBuffer 0078  
              ?_ethernetController_streamToTransmitBuffer 006F  
               _ethernetController_streamToTransmitBuffer 41C4  
                            __size_of_ARP_handleNewPacket 01AE  
                                  __end_of_ipv4_sendFrame 2892  
                                                  _TXREG1 000FAD  
                             __size_of_ENC424J600_initSPI 001C  
                             __size_of_ENC424J600_readSPI 006A  
                                        mac_isAllZero@mac 0060  
                          ??_ethernetController_softReset 0071  
                               ??_checkForOverlapSwitched 0072  
                              ethernetController_init@err 007D  
                                  __size_of_buttonHandler 009C  
                                 ?_ethernet_rxGetNewFrame 0178  
                                        ?_UARTTransmitInt 009A  
                                    ARP_sendReply@request 0100  
                                          __CFG_XINST$OFF 000000  
                                        __end_of_ipv4_cmp 494A  
                                         ?_ipv4_isAllZero 0060  
                                                  ___wmul 4C38  
                                   ?_ipv4_handleNewPacket 00B5  
                      __end_of_handleStackBackgroundTasks 252A  
                              _handleStackBackgroundTasks 2340  
                                          __CFG_STVREN$ON 000000  
                                   buttonHandler@oldState 004B  
                                               ??___lldiv 006E  
             ENC424J600_writeControlRegisterUnbanked@addr 006C  
                                   buttonHandler@newState 004A  
             ENC424J600_writeControlRegisterUnbanked@data 006A  
                                               ??___llmod 0068  
                                               ??___lwdiv 0064  
                                               ??___lwmod 0064  
                                    __size_of_hexToString 00EE  
                            buttonHandler@debounceCounter 0031  
                                                  clear_0 3D74  
                                                  clear_1 3D80  
                                                  clear_2 3D8C  
                                                  clear_3 3D98  
                              parseNumber@numberToDisplay 0008  
                          __size_of_ARP_parseFromRXBuffer 03FA  
                           __end_of_ARP_parseFromRXBuffer 134A  
  __end_of_ethernetController_writeEtherTypeFieldToBuffer 475C  
 __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
        ??_ethernetController_writeEtherTypeFieldToBuffer 007A  
         ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
          _ethernetController_writeEtherTypeFieldToBuffer 470E  
                                               ??_mac_cmp 0064  
                                        ??_mac_setAllZero 0062  
                                           main@prescaler 03A2  
                      __end_of_ENC424J600_enableReception 4EFA  
                              _ENC424J600_enableReception 4EF2  
          ethernetController_streamToTransmitBuffer@field 006F  
          __end_of_ENC424J600_readControlRegisterUnbanked 4ADA  
         __size_of_ENC424J600_readControlRegisterUnbanked 0036  
                ??_ENC424J600_readControlRegisterUnbanked 006C  
                 ?_ENC424J600_readControlRegisterUnbanked 006A  
                  _ENC424J600_readControlRegisterUnbanked 4AA4  
                                            __pdataCOMRAM 004D  
                ethernetController_softReset@comFailCount 0072  
                                       __end_ofi2___lwdiv 470E  
                    __end_of_ENC424J600_setTXStartAddress 4B92  
                   __size_of_ENC424J600_setTXStartAddress 002A  
                            _ENC424J600_setTXStartAddress 4B68  
                                            __mediumconst 7C1E  
                             __size_of_ipProtocolToString 0048  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                       ??_ARP_setNewEntry 0072  
                          ipv4_sendFrame@numberOfRequests 0186  
                                                  srand@x 007A  
           __end_of_ethernetController_clearInterruptFlag 4ED0  
          __size_of_ethernetController_clearInterruptFlag 000E  
                  ?_ethernetController_clearInterruptFlag 0001  
                 ??_ethernetController_clearInterruptFlag 0072  
                   _ethernetController_clearInterruptFlag 4EC2  
                                       ??_ARP_sendRequest 00FC  
                                    intToString@thousands 0084  
                                     mac_setToBroadcast@i 0062  
                              __size_of_ipv4_setToAllZero 001E  
                         ethernetController_softReset@err 0077  
                                         _numberToDisplay 0035  
                                    __CFG_LS48MHZ$SYS24X4 000000  
                                 ipAdressToString@address 01C6  
      __end_of_ethernetController_updateNextPacketPointer 41C4  
     __size_of_ethernetController_updateNextPacketPointer 007A  
             ?_ethernetController_updateNextPacketPointer 0001  
            ??_ethernetController_updateNextPacketPointer 006F  
              _ethernetController_updateNextPacketPointer 414A  
                       sevenSegmentUpdate@digitsToDisplay 003D  
                                              __accesstop 0060  
                                 __end_of__initialization 3D9E  
                                       _printErrorMessage 2E50  
           ethernetController_getEtherTypeField@ethertype 007C  
                                         ?_ipv4_sendFrame 0134  
                                 ?_ENC424J600_setTXLength 006E  
                                               ?_ARP_send 00A7  
                          __end_of_ethernet_rxGetNewFrame 060E  
                                        _sevenSegmentInit 4E00  
               ethernetController_updateLinkStatus@temp16 0083  
                                           ___rparam_used 000001  
                                      ?_printErrorMessage 009A  
               ethernetController_getSiliconRevision@data 006E  
              ethernetController_pollInterruptFlags@flags 007B  
                                          __pcstackCOMRAM 0001  
                                        __CFG_nPWRTEN$OFF 000000  
                                 ipAdressToString@pointer 007B  
 ENC424J600_updateReceiveStatusVector@receiveStatusVector 006C  
                                            __pidataBANK1 4D88  
                                            __pidataBANK2 4E4C  
                                       ipv4_parseHeader@i 008F  
                                               ?_UARTInit 0001  
                                      ARP_setNewEntry@mac 0064  
                                     ??_printErrorMessage 009D  
                         __end_of_ethernetController_init 4396  
                                           __end_of_srand 4EA4  
                         ??_ethernetController_dropPacket 0074  
                                               ARP_send@i 00CD  
     ethernetController_getSourceMACAddress@sourceAddress 0079  
                                         ??_ARP_initTable 007C  
                                 _ethernet_txFrameRequest 36BC  
                    __end_of_ENC424J600_getInterruptFlags 47F6  
                   __size_of_ENC424J600_getInterruptFlags 004C  
                            _ENC424J600_getInterruptFlags 47AA  
                               __size_of_ipv4_parseHeader 024A  
                              ipProtocolToString@protocol 0062  
                                    __size_of_intToString 02C6  
                         __end_of_checkForOverlapSwitched 3B40  
                                      __size_of_getMillis 0012  
                                           _buttonHandler 3BE2  
                      ethernetController_dropPacket@frame 0072  
                          __size_of_memory_txFrameRequest 04D6  
                           __end_of_memory_txFrameRequest 0AE4  
                                      ARP_sendReply@reply 0138  
                                      __size_of_hexToChar 0022  
                           ?_ENC424J600_setTXStartAddress 006E  
                                         ??_ARP_sendReply 00FC  
                                                 ??_srand 007C  
                               __end_of_printErrorMessage 2F7E  
                                              __pbssBANK1 0192  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                          __end_of_ENC424J600_setTXLength 4BBC  
                             __end_of_memory_txFrameClear 4D20  
                                              ??_ARP_send 00C7  
                                       _etherTypeToString 483E  
                                      ?_etherTypeToString 0060  
                                 ARP_sendRequest@ipSender 0100  
                                 ARP_sendRequest@ipTarget 0104  
                                       __CFG_PLLSEL$PLL4X 000000  
                                  ??_ipv4_handleNewPacket 00B7  
           __end_of_ethernetController_getSiliconRevision 4DC6  
          __size_of_ethernetController_getSiliconRevision 001E  
                  ?_ethernetController_getSiliconRevision 0001  
                 ??_ethernetController_getSiliconRevision 006E  
                   _ethernetController_getSiliconRevision 4DA8  
                         ??_ethernetController_sendPacket 007B  
                                                 ?___wmul 0060  
                                              ??_UARTInit 0060  
                                    __size_of_parseNumber 007E  
                                          hexToString@val 0061  
                                   macToString@firstDigit 0093  
                                     ??_etherTypeToString 0062  
          ethernetController_writeDestinationMACAddress@i 0086  
                                        _entireMemoryFull 49FE  
                                   ipv4_parseHeader@field 0077  
                                          ?_buttonHandler 0001  
                              etherTypeToString@ethertype 0060  
                              ipv4_setIPSourceAddress@err 007D  
                 ENC424J600_updateReceiveStatusVector@rsv 0060  
                           ?_ENC424J600_getInterruptFlags 006E  
                       ENC424J600_readPHYRegister@lowByte 007D  
                                __end_of_ipAdressToString 2340  
                                         __CFG_WDTPS$1024 000000  
                ENC424J600_setERXDATAReadPointer@highByte 006E  
                                 ENC424J600_writeSPI@data 0060  
                                                 _SSP1BUF 000FC9  
                                       ipv4_sendFrame@err 0188  
  ethernetController_writeEtherTypeFieldToBuffer@highByte 007B  
                            __size_of_ipv4_txFrameRequest 0136  
                                               ?_ipv4_cmp 0060  
                                        __CFG_CFGPLLEN$ON 000000  
                                      _printEthernetState 3B40  
                            ?_ENC424J600_setRXTailPointer 006E  
                               __end_of_etherTypeToString 4882  
                  ENC424J600_setRXBufferStartAddress@addr 006E  
           __end_of_ethernetController_streamFromRXBuffer 3D16  
          __size_of_ethernetController_streamFromRXBuffer 0098  
                 ??_ethernetController_streamFromRXBuffer 0074  
                  ?_ethernetController_streamFromRXBuffer 0072  
                   _ethernetController_streamFromRXBuffer 3C7E  
                          sevenSegmentUpdate@digitPointer 0049  
                                   ARP_sendReply@senderIP 012C  
                                   ARP_sendReply@targetIP 0130  
                                       ?_UARTTransmitText 0098  
                                       __end_of_getMillis 4E70  
                                                 __Hparam 0000  
ethernetController_updateNextPacketPointer@nextPktPointer 0075  
                                                 __Lparam 0000  
                                         ipv4_isAllZero@i 0062  
                                     ?_printEthernetState 009A  
                                       __end_of_hexToChar 4D88  
                                      ??_UARTTransmitText 009A  
                                checkForOverlapSwitched@a 0060  
                                checkForOverlapSwitched@b 0069  
                                      buttonHandler@state 0001  
                                   __end_of_mac_isAllZero 4B0A  
                                                 ___lldiv 3F4E  
                                         __size_of___wmul 0028  
                                                 ___llmod 44E0  
                                                 ___lwdiv 4668  
                                                 ___lwmod 4882  
                    ENC424J600_setGPDATAWritePointer@addr 006A  
                               ??_ethernet_txFrameRequest 00A4  
                                     sevenSegmentUpdate@i 0015  
                                                 __pcinit 3D16  
                             __size_of_sevenSegmentUpdate 00BE  
                                     parseNumber@hundreds 000E  
                                                 __ramtop 0800  
                            __size_of_ENC424J600_writeSPI 0064  
                                     _ARP_handleNewPacket 2892  
                                                 __ptext0 0AE4  
                                                 __ptext1 4E94  
                                                 __ptext2 4E00  
                                                 __ptext3 3B40  
                                                 __ptext4 2E50  
                                                 __ptext5 2A40  
                                                 __ptext6 2D1A  
                                                 __ptext7 4C10  
                                                 __ptext8 40D0  
                                                 __ptext9 2340  
                                                 _mac_cmp 48C6  
                                  ipv4_handleNewPacket@ip 00C2  
                                               _T0CONbits 000FD5  
                            ??_handleStackBackgroundTasks 018D  
                                            __size_of_ISR 00E0  
                                               _T1CONbits 000FCD  
                  ENC424J600_setGPDATAWritePointer@opcode 006C  
                      ENC424J600_setRXTailPointer@lowByte 0070  
              __end_of_ENC424J600_setRXBufferStartAddress 4C10  
             __size_of_ENC424J600_setRXBufferStartAddress 002A  
                    ??_ENC424J600_setRXBufferStartAddress 0070  
                     ?_ENC424J600_setRXBufferStartAddress 006E  
                      _ENC424J600_setRXBufferStartAddress 4BE6  
                         ENC424J600_setRXTailPointer@addr 006E  
                   __end_of_ethernetController_dropPacket 4986  
                  __size_of_ethernetController_dropPacket 003C  
                           _ethernetController_dropPacket 494A  
                             ?_ipv4_writeHeaderIntoBuffer 0060  
                                    ??_printEthernetState 00A9  
           __end_of_ethernetController_pollInterruptFlags 30A4  
          __size_of_ethernetController_pollInterruptFlags 0126  
                 ??_ethernetController_pollInterruptFlags 007A  
                  ?_ethernetController_pollInterruptFlags 0078  
                   _ethernetController_pollInterruptFlags 2F7E  
                        __size_of_ipv4_getIPSourceAddress 0012  
                 ENC424J600_setGPDATAWritePointer@lowByte 006D  
                        __size_of_ipv4_setIPSourceAddress 007A  
                                                 main@err 03C9  
                            ??_ENC424J600_writeSingleByte 006A  
                                    end_of_initialization 3D9E  
                              __size_of_printErrorMessage 012E  
                                               _ARP_table 0300  
                                              ??_ipv4_cmp 0064  
                              __end_of_mac_setToBroadcast 4CD6  
                                    ?_ARP_handleNewPacket 00FC  
                              ?_ethernetController_getRSV 0071  
                                           __Lmediumconst 7C1E  
                                        ??_ipv4_isAllZero 0062  
                         ipv4_calculateHeaderChecksum@sum 006E  
                                         mac_setAllZero@i 0062  
             ethernetController_streamFromRXBuffer@opcode 0075  
                                         ___lldiv@divisor 006A  
                              ARP_getEntryFromTable@index 0067  
                                         ___lldiv@counter 0072  
                                      entireMemoryEmpty@i 0060  
                              ARP_setNewEntry@oldestIndex 007A  
                                __size_of_checkForOverlap 0108  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                         macToString@addr 007A  
                ipv4_setIPSourceAddress@timeBetweenProbes 007B  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                             ?_handleStackBackgroundTasks 018B  
                                         _ARP_setNewEntry 35CE  
                   memory_txFrameRequest@fNoOverlapMarker 0095  
                    ENC424J600_readPHYRegister@PHYaddress 0077  
                                         _ARP_sendRequest 392A  
                                   _ARP_getEntryFromTable 4B3A  
                          ENC424J600_setTXLength@highByte 0071  
                                         ??_buttonHandler 0003  
                   __end_of_ethernetController_sendPacket 4C88  
                  __size_of_ethernetController_sendPacket 0028  
                           _ethernetController_sendPacket 4C60  
                                               _PORTBbits 000F81  
                                        _ipv4_parseHeader 1F08  
                                     ipv4_sendFrame@index 0187  
                     __size_of_ENC424J600_writeSingleByte 0018  
                       sevenSegmentUpdate@numberToDisplay 000F  
                                __end_of_sevenSegmentInit 4E1A  
                 __end_of_ipv4_streamToTransmissionBuffer 4C38  
                __size_of_ipv4_streamToTransmissionBuffer 0028  
                       ??_ipv4_streamToTransmissionBuffer 00C0  
                        ?_ipv4_streamToTransmissionBuffer 007E  
                         _ipv4_streamToTransmissionBuffer 4C10  
                             ?_ENC424J600_enableReception 0001  
                                           ??_macToString 0080  
                  ethernetController_softReset@dataToSend 0073  
                                           ARP_send@field 00F3  
                                               _TRISBbits 000F93  
                                              _updateTime 4ED0  
         __end_of_ethernetController_getNextPacketPointer 4EC2  
        __size_of_ethernetController_getNextPacketPointer 000E  
               ??_ethernetController_getNextPacketPointer 0064  
                ?_ethernetController_getNextPacketPointer 0062  
                 _ethernetController_getNextPacketPointer 4EB4  
                                        ??_ipv4_sendFrame 0176  
                                       i2___lwdiv@divisor 0003  
                         __end_of_ethernet_txFrameRequest 37A4  
                        ethernetController_getRSV@address 0071  
                                               i2___lwdiv 46BC  
                                       i2___lwdiv@counter 0007  
                                   ??_ARP_handleNewPacket 00FE  
                              __end_of_ENC424J600_initSPI 4E00  
                              __end_of_ENC424J600_readSPI 44E0  
                              __size_of_etherTypeToString 0044  
                                     UARTTransmitText@str 0098  
                                             _CCP1CONbits 000FBD  
                    __end_of_ipv4_calculateHeaderChecksum 1972  
                   __size_of_ipv4_calculateHeaderChecksum 030C  
                            _ipv4_calculateHeaderChecksum 1666  
                    ENC424J600_setTXStartAddress@highByte 0071  
                                  ARP_parseFromRXBuffer@i 009A  
                                       intToString@number 01A5  
                                ipAdressToString@hundreds 0077  
                                       __size_of_ARP_send 02D0  
                                           ??_hexToString 0065  
                                      ipv4_parseHeader@ip 0092  
        ethernetController_updateNextPacketPointer@opcode 0077  
                                          __end_of___wmul 4C60  
                                           __pidataCOMRAM 4F00  
                                        parseNumber@digit 000A  
                                __size_of_UARTTransmitInt 0022  
                                       __size_of_UARTInit 0010  
                    __size_of_ENC424J600_setRXTailPointer 002A  
                  ENC424J600_setERXDATAReadPointer@opcode 006C  
                              __end_of_ipProtocolToString 483E  
                                      hexToString@pointer 0069  
                      ipv4_checkHeaderChecksum@testHeader 009E  
                                   _ARP_parseFromRXBuffer 0F50  
             __end_of_ethernetController_updateLinkStatus 3EC4  
            __size_of_ethernetController_updateLinkStatus 008A  
                   ??_ethernetController_updateLinkStatus 0082  
                    ?_ethernetController_updateLinkStatus 0080  
                     _ethernetController_updateLinkStatus 3E3A  
                                     start_initialization 3D16  
                              ARP_parseFromRXBuffer@frame 0077  
                                             __end_of_ISR 00E8  
                                          intToString@val 0073  
                          ipv4_checkHeaderChecksum@header 009A  
                                ?_ethernetController_init 007A  
                                _ipv4_checkHeaderChecksum 37A4  
                         ipv4_handleNewPacket@headerField 00B9  
                                              ?i2___lwdiv 0001  
                           ipv4_writeHeaderIntoBuffer@ptr 0077  
                                ?_checkForOverlapSwitched 0060  
                                     __end_of_macToString 33D8  
                                         __CFG_nLPBOR$OFF 000000  
                                __end_of_entireMemoryFull 4A36  
   __end_of_ethernetController_writeDestinationMACAddress 4052  
  __size_of_ethernetController_writeDestinationMACAddress 0080  
         ??_ethernetController_writeDestinationMACAddress 007E  
          ?_ethernetController_writeDestinationMACAddress 006F  
           _ethernetController_writeDestinationMACAddress 3FD2  
                                         ___llmod@divisor 0064  
                     ethernetController_checkDeviceId@err 0072  
                                         ___llmod@counter 0068  
                         ??_ENC424J600_clearInterruptFlag 006E  
                                 __end_of_ARP_setNewEntry 36BC  
                           ?_ipv4_calculateHeaderChecksum 0060  
                           ethernetController_getRSV@temp 01AF  
                                 __end_of_ARP_sendRequest 39DC  
                                ARP_setNewEntry@timestamp 006E  
                                    printErrorMessage@err 009A  
                                          _occupiedMemory 0200  
                                         _sourceIPAddress 002D  
                                                ??___wmul 0064  
                        ENC424J600_getPacketCount@lowByte 006E  
                                     _ipv4_txFrameRequest 2D1A  
                                  ?_ARP_getEntryFromTable 0060  
                  ethernetController_getDeviceName@string 0062  
                                    _destinationIPAddress 0196  
                                             __pdataBANK1 01B6  
                                             __pdataBANK2 02D0  
                                           ??_intToString 0077  
                                        checkForOverlap@a 0072  
                                        checkForOverlap@b 007B  
                                       ??_checkForOverlap 0084  
                                     __end_of_hexToString 35CE  
                                   __end_of_ARP_initTable 45AE  
                                             __pbssCOMRAM 0029  
                                 _ipv4_getIPSourceAddress 4E70  
                                 _ipv4_setIPSourceAddress 40D0  
                ethernetController_updateLinkStatus@state 0080  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK3 03A2  
                                             ?_updateTime 0001  
                                       ?_ipAdressToString 0067  
                      __end_of_ENC424J600_writeSingleByte 4E4C  
                              _ENC424J600_writeSingleByte 4E34  
                                   _memory_txFrameRequest 060E  
           __end_of_ethernetController_newPacketAvailable 4E94  
          __size_of_ethernetController_newPacketAvailable 0012  
                  ?_ethernetController_newPacketAvailable 0001  
                 ??_ethernetController_newPacketAvailable 006F  
                   _ethernetController_newPacketAvailable 4E82  
                                    ?_ipv4_txFrameRequest 00A7  
                ethernetController_softReset@receivedData 0075  
                                      ??_ipAdressToString 006B  
                                 __size_of_mac_setAllZero 0026  
                                   __end_of_ARP_sendReply 2D1A  
                                     _ENC424J600_writeSPI 45AE  
                                       __size_of_ipv4_cmp 0042  
                               ipv4_txFrameRequest@packet 00A7  
                              buttonHandler@debounceValue 0003  
                                           ??_parseNumber 000B  
                                               _main$2371 03C6  
                                        ___lwdiv@dividend 0060  
                                      _sevenSegCharacters 01B6  
              ethernetController_getEtherTypeField@opcode 007E  
                                               __pintcode 0008  
                            ??_ENC424J600_readPHYRegister 0070  
                            __size_of_memory_txFrameClear 0024  
                                           __pmediumconst 7C1E  
                                               _getMillis 4E5E  
                                               __ptext101 4ED0  
                                               __ptext102 386C  
                                               __ptext103 4052  
                                               __ptext104 46BC  
                                               __ptext105 3BE2  
                                                ?___lldiv 0066  
                                                ?___llmod 0060  
                           __size_of_ipv4_handleNewPacket 01B8  
                                                ?___lwdiv 0060  
                                                ?___lwmod 0060  
     ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                               _hexToChar 4D66  
                                    ?_ENC424J600_writeSPI 0060  
                                     ipv4_setToAllZero@ip 0060  
                                                ?_mac_cmp 0060  
                               ARP_setNewEntry@maxSeconds 0076  
                                  ?_ARP_parseFromRXBuffer 0077  
                               __size_of_UARTTransmitText 0056  
              ethernetController_getSourceMACAddress@temp 007F  
                    ENC424J600_setERXDATAReadPointer@addr 006A  
                      __size_of_ENC424J600_getPacketCount 001A  
                 ENC424J600_setERXDATAReadPointer@lowByte 006D  
                                  ipv4_parseHeader@i_3618 0090  
               __end_of_ENC424J600_enableAutoMACInsertion 4CB0  
              __size_of_ENC424J600_enableAutoMACInsertion 0028  
                      ?_ENC424J600_enableAutoMACInsertion 0001  
                     ??_ENC424J600_enableAutoMACInsertion 006E  
                       _ENC424J600_enableAutoMACInsertion 4C88  
                                      ipAdressToString@ip 0067  
                                     __end_of_intToString 1F08  
                              ?_ENC424J600_getPacketCount 0001  
                                             _macToString 32D0  
                                       ??_UARTTransmitInt 009E  
                                   ??_ipv4_txFrameRequest 00A9  
                                        ___lwdiv@quotient 0065  
                                       _entireMemoryEmpty 4A36  
                                ??_ethernet_rxGetNewFrame 017B  
                                             ??i2___lwdiv 0005  
                                ARP_sendRequest@senderMAC 0108  
                                          __size_of_srand 0010  
                                ARP_sendRequest@targetMAC 010E  
                      ENC424J600_readPHYRegister@highByte 007E  
                                      ?_entireMemoryEmpty 0001  
                     __size_of_ENC424J600_readPHYRegister 0122  
                     ipv4_streamToTransmissionBuffer@data 00C2  
                             ??_ethernetController_getRSV 0076  
                                          ___wmul@product 0064  
                             ethernet_rxGetNewFrame@frame 0178  
                                __end_of_ipv4_parseHeader 2152  
                                                _ARP_send 1972  
                                                _PIE1bits 000F9D  
                       ENC424J600_writeSPI@timeoutCounter 0066  
                                        ?_ARP_setNewEntry 0064  
                                     ??_entireMemoryEmpty 0060  
                                                _PIR1bits 000F9E  
                                        ARP_initTable@mac 007C  
                                        ?_ARP_sendRequest 0100  
                                       entireMemoryFull@i 0060  
                                                i2u761_44 387C  
                                                i2u761_45 3878  
                                                i2u676_40 46DE  
                                                i2u757_40 3C40  
                                                i2u765_40 38E8  
                                                i2u758_40 3C42  
                                                i2u766_44 38F8  
                                                i2u766_45 38F4  
                                                i2u793_40 0060  
                                                i2u793_46 0062  
                                                _RCONbits 000FD0  
                                     ARP_checkForEntry@ip 0067  
                                     __size_of_updateTime 000E  
                                             _hexToString 34E0  
                                      _mac_setToBroadcast 4CB0  
                              __end_of_sevenSegmentUpdate 392A  
                                              ?_getMillis 0060  
                   __end_of_ENC424J600_clearInterruptFlag 3F4E  
                  __size_of_ENC424J600_clearInterruptFlag 008A  
                           _ENC424J600_clearInterruptFlag 3EC4  
                                                _UARTInit 4EA4  
                          ??_ipv4_calculateHeaderChecksum 0062  
                                   ??_ENC424J600_writeSPI 0062  
                                      UARTTransmitInt@val 009A  
                                              ?_hexToChar 0001  
                                     __end_of_parseNumber 40D0  
                           ENC424J600_setTXLength@lowByte 0070  
                                       main@IPdestination 03CC  
                               ??_ipv4_getIPSourceAddress 0064  
                                       ___wmul@multiplier 0060  
                               ??_ipv4_setIPSourceAddress 007A  
                                     ?_mac_setToBroadcast 0060  
   ethernetController_updateNextPacketPointer@newPointerH 0079  
   ethernetController_updateNextPacketPointer@newPointerL 0078  
                                       ?_sevenSegmentInit 0001  
                     ipv4_setIPSourceAddress@probeCounter 0046  
                               __end_of_entireMemoryEmpty 4A6E  
                                  ?_memory_txFrameRequest 0084  
                                ??_ENC424J600_setTXLength 0070  
                    ethernetController_checkDeviceId@data 0071  
                             __size_of_printEthernetState 00A2  
                       __end_of_ENC424J600_getPacketCount 4E34  
                                      ??_sevenSegmentInit 0060  
                     ENC424J600_setTXStartAddress@lowByte 0070  
                                               ipv4_cmp@a 0060  
                                               ipv4_cmp@b 0062  
                                               ipv4_cmp@i 0066  
                                             _INTCON3bits 000FF0  
                                               copy_data0 3D2A  
                                               copy_data1 3D4A  
                                         parseNumber@ones 000C  
                                         parseNumber@tens 000D  
                                  ARP_sendReply@senderMAC 0120  
                                       hexToString@number 019B  
                                  __size_of_mac_isAllZero 0030  
                                  ARP_sendReply@targetMAC 0126  
                                      macToString@address 0081  
                                    ipAdressToString@ones 006F  
                                    ipAdressToString@tens 0073  
                                    ??_mac_setToBroadcast 0062  
                __end_of_ethernetController_checkDeviceId 47AA  
               __size_of_ethernetController_checkDeviceId 004E  
                      ??_ethernetController_checkDeviceId 0071  
                       ?_ethernetController_checkDeviceId 006E  
                        _ethernetController_checkDeviceId 475C  
                                                __Hrparam 0000  
                                        ipv4_isAllZero@ip 0060  
                                ?_ethernet_txFrameRequest 00A2  
                                                __Lrparam 0000  
                                      __CFG_BOREN$SBORDIS 000000  
                        ipv4_writeHeaderIntoBuffer@header 0060  
                                       _ARP_checkForEntry 39DC  
                                      _ENC424J600_initSPI 4DE4  
                                      _ENC424J600_readSPI 4476  
                                  macToString@secondDigit 0094  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                                             _intToString 1C42  
                                        __size_of___lwdiv 0054  
                                      ?_ARP_checkForEntry 0067  
                                        __size_of___lwmod 0044  
                 ethernetController_updateLinkStatus@temp 0082  
                              ??_ipv4_checkHeaderChecksum 009C  
                               _ethernetController_getRSV 423C  
                 __end_of_ethernetController_setLEDConfig 3E3A  
                __size_of_ethernetController_setLEDConfig 008E  
                       ??_ethernetController_setLEDConfig 006F  
                        ?_ethernetController_setLEDConfig 006E  
                         _ethernetController_setLEDConfig 3DAC  
            ethernetController_getEtherTypeField@highByte 0080  
                                              _ANSELBbits 000F5C  
                               ENC424J600_setTXLength@len 006E  
                                   __end_of_buttonHandler 3C7E  
                                     ?_ENC424J600_initSPI 0001  
                                     ?_ENC424J600_readSPI 0060  
                                        __size_of_mac_cmp 0042  
                                 intToString@tenthousands 0085  
       ethernetController_streamFromRXBuffer@startAddress 0072  
                                             _buttonState 01B5  
                     ENC424J600_setRXTailPointer@highByte 0071  
                                     ??_ARP_checkForEntry 006D  
                                  memory_txFrameRequest@i 0096  
                             __end_of_ARP_handleNewPacket 2A40  
                                         ___lwdiv@divisor 0062  
                                         ___lwdiv@counter 0064  
                                       mac_setAllZero@mac 0060  
                                                __ptext10 26E2  
                                                __ptext11 392A  
                                                __ptext20 414A  
                                                __ptext12 4B3A  
                                                __ptext21 423C  
                                                __ptext13 39DC  
                                                __ptext30 4E5E  
                                                __ptext22 134A  
                                                __ptext14 00EC  
                                                __ptext31 494A  
                                                __ptext23 4396  
                                                __ptext15 252A  
                                                __ptext40 4CB0  
                                                __ptext32 2BAE  
                                                __ptext24 483E  
                                                __ptext16 1F08  
                                                __ptext41 34E0  
                                                __ptext33 32D0  
                                                __ptext25 4D44  
                                                __ptext17 37A4  
                                                __ptext50 470E  
                                                __ptext42 4D66  
                                                __ptext34 4E70  
                                                __ptext26 1C42  
                                                __ptext18 1666  
                                                __ptext51 3FD2  
                                                __ptext43 36BC  
                                                __ptext35 2152  
                                                __ptext27 44E0  
                                                __ptext19 47F6  
                                                __ptext60 0F50  
                                                __ptext52 41C4  
                                                __ptext44 060E  
                                                __ptext36 4882  
                                                __ptext28 3F4E  
                                                __ptext61 4ADA  
                                                __ptext53 4986  
                                                __ptext45 49FE  
                                                __ptext37 4668  
                                                __ptext29 2892  
                                                __ptext70 30A4  
                                                __ptext62 48C6  
                                                __ptext54 4C60  
                                                __ptext46 4A36  
                                                __ptext38 42B0  
                                                __ptext71 3DAC  
                                                __ptext63 4B0A  
                                                __ptext55 4CFC  
                                                __ptext47 33D8  
                                                __ptext39 1972  
                                                __ptext80 4BBC  
                                                __ptext72 2F7E  
                                                __ptext64 4908  
                                                __ptext56 4B68  
                                                __ptext48 3A8E  
                                                __ptext81 4BE6  
                                                __ptext73 47AA  
                                                __ptext65 3C7E  
                                                __ptext57 4B92  
                                                __ptext49 4C38  
                                                __ptext90 4E1A  
                                                __ptext82 4EE8  
                                                __ptext74 4E82  
                                                __ptext66 4EB4  
                                                __ptext58 4406  
                                                __ptext91 4AA4  
                                                __ptext83 4EF2  
                                                __ptext75 4EC2  
                                                __ptext67 4EDE  
                                                __ptext59 4612  
                                                __ptext92 45AE  
                                                __ptext84 4E34  
                                                __ptext76 3EC4  
                                                __ptext68 49C2  
                                                __ptext93 4476  
                                                __ptext85 4C88  
                                                __ptext77 4324  
                                                __ptext69 3E3A  
                                                __ptext94 4DE4  
                                                __ptext86 4A6E  
                                                __ptext78 31C6  
                                                __ptext95 4EA4  
                                                __ptext87 4DA8  
                                                __ptext79 475C  
                                                __ptext96 4548  
                                                __ptext88 4D20  
                                                __ptext97 4CD6  
                                                __ptext89 4EFA  
                                                __ptext98 4DC6  
                                                __ptext99 35CE  
                                            _SSP1CON1bits 000FC6  
                   ENC424J600_enableAutoMACInsertion@temp 006E  
                                      ipv4_setToAllZero@i 0062  
                         __size_of_ethernet_rxGetNewFrame 0522  
                                          _mac_setAllZero 4CD6  
                                                _ipv4_cmp 4908  
                     __end_of_ENC424J600_setRXTailPointer 4BE6  
                             _ENC424J600_setRXTailPointer 4BBC  
                                             _OSCCON2bits 000FD2  
                                       ipAdressToString@i 007C  
                                      _ipProtocolToString 47F6  
                         __end_of_ipv4_getIPSourceAddress 4E82  
                ENC424J600_setGPDATAWritePointer@highByte 006E  
                         __end_of_ipv4_setIPSourceAddress 414A  
                                           __size_of_main 046C  
                                    ??_ENC424J600_initSPI 0060  
                                    ??_ENC424J600_readSPI 0062  
                                ARP_handleNewPacket@frame 00FC  
                                       ?_entireMemoryFull 0001  
     ethernetController_writeDestinationMACAddress@opcode 0084  
                          ??_ENC424J600_setTXStartAddress 0070  
                        __size_of_ethernetController_init 0072  
                                         _checkForOverlap 33D8  
                                     ?_ipProtocolToString 0060  
                                 ??_ARP_getEntryFromTable 0067  
                      __end_of_ENC424J600_readPHYRegister 31C6  
                              _ENC424J600_readPHYRegister 30A4  
                                      ??_entireMemoryFull 0060  
                               __end_of_ARP_checkForEntry 3A8E  
                                             _parseNumber 4052  
                                         ARP_initTable@ip 0082  
                           ??_ENC424J600_setRXTailPointer 0070  
                                      ARP_checkForEntry@i 0075  
                                             ??_getMillis 0064  
                                                int$flags 004F  
                                                mac_cmp@a 0060  
                        __size_of_checkForOverlapSwitched 00B2  
                                                mac_cmp@b 0062  
                                                mac_cmp@i 0066  
            ENC424J600_readControlRegisterUnbanked@opcode 006D  
                                           _mac_isAllZero 4ADA  
                   ipv4_streamToTransmissionBuffer@packet 007E  
                                            _SSP1STATbits 000FC7  
                                             ??_hexToChar 0060  
                              ethernet_txFrameRequest@err 00A4  
                                 __size_of_ipv4_isAllZero 0030  
                               ipv4_setIPSourceAddress@ip 0076  
                               ethernet_rxGetNewFrame@err 0183  
                          ?_ENC424J600_clearInterruptFlag 0001  
                                        _UARTTransmitText 4612  
                                              _INTCONbits 000FF2  
                                  ARP_checkForEntry@index 006B  
                                    ??_ipProtocolToString 0062  
                                  ipv4_sendFrame@ipPacket 0134  
                __end_of_ENC424J600_setERXDATAReadPointer 49FE  
               __size_of_ENC424J600_setERXDATAReadPointer 003C  
                      ??_ENC424J600_setERXDATAReadPointer 006C  
                       ?_ENC424J600_setERXDATAReadPointer 006A  
                        _ENC424J600_setERXDATAReadPointer 49C2  
                              __size_of_entireMemoryEmpty 0038  
                                            ??_updateTime 0001  
   ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
   ethernetController_writeEtherTypeFieldToBuffer@lowByte 007A  
                         __size_of_ENC424J600_setTXLength 002A  
                                  __end_of_mac_setAllZero 4CFC  
                             ?_ENC424J600_writeSingleByte 0001  
                                     _memory_txFrameClear 4CFC  
                        ENC424J600_readSPI@timeoutCounter 0066  
     ipv4_streamToTransmissionBuffer@ethernetPacketLength 00C0  
                                                intlevel2 0000  
                                        ___lwmod@dividend 0060  
                          ??_ENC424J600_getInterruptFlags 0070  
                                        ___lldiv@dividend 0066  
             ethernetController_getEtherTypeField@lowByte 007F  
      ethernetController_writeDestinationMACAddress@i_630 0085  
               ethernetController_streamFromRXBuffer@temp 0076  
                        ENC424J600_writeSingleByte@opcode 006A  
                                              _RCSTA1bits 000FAB  
                                        macToString@F5813 02D0  
      ethernetController_writeDestinationMACAddress@field 0075  
                                              _OSCCONbits 000FD3  
                                 __size_of_ipv4_sendFrame 01B0  
                 __end_of_ENC424J600_getNextPacketPointer 4EE8  
                __size_of_ENC424J600_getNextPacketPointer 000A  
                       ??_ENC424J600_getNextPacketPointer 0062  
                        ?_ENC424J600_getNextPacketPointer 0060  
                         _ENC424J600_getNextPacketPointer 4EDE  
                               __size_of_ipAdressToString 01EE  
                                          ARP_initTable@i 0086  
                                            macToString@i 0095  
                                            macToString@j 0097  
                ENC424J600_readPHYRegister@timeoutCounter 0079  
                 __end_of_ENC424J600_setNextPacketPointer 4EF2  
                __size_of_ENC424J600_setNextPacketPointer 000A  
                       ??_ENC424J600_setNextPacketPointer 0062  
                        ?_ENC424J600_setNextPacketPointer 0060  
                         _ENC424J600_setNextPacketPointer 4EE8  
                                    ?_memory_txFrameClear 0001  
                                     ARP_send@destination 00C7  
                                          ?_mac_isAllZero 0060  
                                  _ethernet_rxGetNewFrame 00EC  
                                      __end_of_updateTime 4EDE  
                                    __CFG_CPUDIV$NOCLKDIV 000000  
                        ENC424J600_getInterruptFlags@high 0077  
                                 ??_ARP_parseFromRXBuffer 0097  
                                         _UARTTransmitInt 4D44  
                      ethernetController_sendPacket@field 0072  
            ethernetController_getSourceMACAddress@opcode 0078  
    ethernetController_writeEtherTypeFieldToBuffer@opcode 007C  
            __end_of_ENC424J600_updateReceiveStatusVector 1666  
           __size_of_ENC424J600_updateReceiveStatusVector 031C  
                  ??_ENC424J600_updateReceiveStatusVector 0065  
                   ?_ENC424J600_updateReceiveStatusVector 0060  
                    _ENC424J600_updateReceiveStatusVector 134A  
                                   mac_setToBroadcast@mac 0060  
                               ipv4_handleNewPacket@frame 00B5  
                                   ipv4_sendFrame@oldTime 0192  
                                        ___lldiv@quotient 006E  
                                         ___lwmod@divisor 0062  
                      ENC424J600_setNextPacketPointer@ptr 0060  
                                         ___lwmod@counter 0064  
                                  ARP_handleNewPacket@arp 0158  
                            ??_ipv4_writeHeaderIntoBuffer 0079  
                                            ?_macToString 007A  
                             ??_ENC424J600_getPacketCount 006E  
              ENC424J600_readControlRegisterUnbanked@addr 006C  
              ENC424J600_readControlRegisterUnbanked@data 006A  
                         ethernetController_getRSV@opcode 0076  
                    __end_of_ethernetController_softReset 32D0  
                   __size_of_ethernetController_softReset 010A  
                            _ethernetController_softReset 31C6  
                                         ?_mac_setAllZero 0060  
                            __end_of_ipv4_handleNewPacket 26E2  
             ethernetController_getSourceMACAddress@field 006F  
                         ENC424J600_getInterruptFlags@low 0076  
                                      __CFG_FOSC$INTOSCIO 000000  
                                 __end_of_checkForOverlap 34E0  
           __end_ofethernetController_getDeviceName@F5860 7C2A  
                   ethernetController_getDeviceName@F5860 7C1F  
                                          ARP_send@i_3050 00D0  
                                          ARP_send@i_3048 00CE  
                                          ARP_send@i_3049 00CF  
                          ?_ethernetController_dropPacket 0072  
                                       ?_ipv4_parseHeader 0077  
                                        ARP_send@ethFrame 00D1  
                                 _sevenSegmentUpdate$2455 0013  
                              __size_of_ARP_checkForEntry 00B2  
                          ENC424J600_readPHYRegister@addr 0076  
                          ENC424J600_readPHYRegister@data 006E  
                                  _ENC424J600_setTXLength 4B92  
                                  __size_of_ARP_initTable 0066  
                                      ??_ipv4_parseHeader 008E  
                                   ??_memory_txFrameClear 0060  
                          ENC424J600_readPHYRegister@temp 007F  
